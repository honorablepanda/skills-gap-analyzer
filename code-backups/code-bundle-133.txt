File name: node_modules\csstype\package.json

Code:
{
  "name": "csstype",
  "version": "3.1.3",
  "main": "",
  "types": "index.d.ts",
  "description": "Strict TypeScript and Flow types for style based on MDN data",
  "repository": "https://github.com/frenic/csstype",
  "author": "Fredrik Nicol <fredrik.nicol@gmail.com>",
  "license": "MIT",
  "devDependencies": {
    "@types/chokidar": "^2.1.3",
    "@types/css-tree": "^2.3.1",
    "@types/jest": "^29.5.0",
    "@types/jsdom": "^21.1.1",
    "@types/node": "^16.18.23",
    "@types/prettier": "^2.7.2",
    "@types/request": "^2.48.8",
    "@types/turndown": "^5.0.1",
    "@typescript-eslint/eslint-plugin": "^5.57.0",
    "@typescript-eslint/parser": "^5.57.0",
    "chalk": "^4.1.2",
    "chokidar": "^3.5.3",
    "eslint": "^8.37.0",
    "css-tree": "^2.3.1",
    "eslint-config-prettier": "^8.8.0",
    "eslint-plugin-prettier": "^4.2.1",
    "fast-glob": "^3.2.12",
    "flow-bin": "^0.203.1",
    "jest": "^29.5.0",
    "jsdom": "^21.1.1",
    "mdn-browser-compat-data": "git+https://github.com/mdn/browser-compat-data.git#1bf44517bd08de735e9ec20dbfe8e86c96341054",
    "mdn-data": "git+https://github.com/mdn/data.git#7f0c865a3c4b5d891285c93308ee5c25cb5cfee8",
    "prettier": "^2.8.7",
    "request": "^2.88.2",
    "ts-jest": "^29.0.5",
    "ts-node": "^10.9.1",
    "turndown": "^7.1.2",
    "typescript": "~5.0.3"
  },
  "scripts": {
    "prepublish": "npm install --prefix __tests__ && npm install --prefix __tests__/__fixtures__",
    "prepublishOnly": "tsc && npm run test:src && npm run build && ts-node --files prepublish.ts",
    "update": "ts-node --files update.ts",
    "build": "ts-node --files build.ts --start",
    "watch": "ts-node --files build.ts --watch",
    "lint": "eslint . --ext .js,.jsx,.ts,.tsx --fix",
    "pretty": "prettier --write build.ts **/*.{ts,js,json,md}",
    "lazy": "tsc && npm run lint",
    "test": "jest --runInBand",
    "test:src": "jest src.*.ts",
    "test:dist": "jest dist.*.ts --runInBand"
  },
  "files": [
    "index.d.ts",
    "index.js.flow"
  ],
  "keywords": [
    "css",
    "style",
    "typescript",
    "flow",
    "typings",
    "types",
    "definitions"
  ]
}


---

File name: node_modules\csstype\README.md

Code:
# CSSType

[![npm](https://img.shields.io/npm/v/csstype.svg)](https://www.npmjs.com/package/csstype)

TypeScript and Flow definitions for CSS, generated by [data from MDN](https://github.com/mdn/data). It provides autocompletion and type checking for CSS properties and values.

**TypeScript**

```ts
import type * as CSS from 'csstype';

const style: CSS.Properties = {
  colour: 'white', // Type error on property
  textAlign: 'middle', // Type error on value
};
```

**Flow**

```js
// @flow strict
import * as CSS from 'csstype';

const style: CSS.Properties<> = {
  colour: 'white', // Type error on property
  textAlign: 'middle', // Type error on value
};
```

_Further examples below will be in TypeScript!_

## Getting started

```sh
$ npm install csstype
```

## Table of content

- [Style types](#style-types)
- [At-rule types](#at-rule-types)
- [Pseudo types](#pseudo-types)
- [Generics](#generics)
- [Usage](#usage)
- [What should I do when I get type errors?](#what-should-i-do-when-i-get-type-errors)
- [Version 3.0](#version-30)
- [Contributing](#contributing)

## Style types

Properties are categorized in different uses and in several technical variations to provide typings that suits as many as possible.

|                | Default              | `Hyphen`                   | `Fallback`                   | `HyphenFallback`                   |
| -------------- | -------------------- | -------------------------- | ---------------------------- | ---------------------------------- |
| **All**        | `Properties`         | `PropertiesHyphen`         | `PropertiesFallback`         | `PropertiesHyphenFallback`         |
| **`Standard`** | `StandardProperties` | `StandardPropertiesHyphen` | `StandardPropertiesFallback` | `StandardPropertiesHyphenFallback` |
| **`Vendor`**   | `VendorProperties`   | `VendorPropertiesHyphen`   | `VendorPropertiesFallback`   | `VendorPropertiesHyphenFallback`   |
| **`Obsolete`** | `ObsoleteProperties` | `ObsoletePropertiesHyphen` | `ObsoletePropertiesFallback` | `ObsoletePropertiesHyphenFallback` |
| **`Svg`**      | `SvgProperties`      | `SvgPropertiesHyphen`      | `SvgPropertiesFallback`      | `SvgPropertiesHyphenFallback`      |

Categories:

- **All** - Includes `Standard`, `Vendor`, `Obsolete` and `Svg`
- **`Standard`** - Current properties and extends subcategories `StandardLonghand` and `StandardShorthand` _(e.g. `StandardShorthandProperties`)_
- **`Vendor`** - Vendor prefixed properties and extends subcategories `VendorLonghand` and `VendorShorthand` _(e.g. `VendorShorthandProperties`)_
- **`Obsolete`** - Removed or deprecated properties
- **`Svg`** - SVG-specific properties

Variations:

- **Default** - JavaScript (camel) cased property names
- **`Hyphen`** - CSS (kebab) cased property names
- **`Fallback`** - Also accepts array of values e.g. `string | string[]`

## At-rule types

At-rule interfaces with descriptors.

**TypeScript**: These will be found in the `AtRule` namespace, e.g. `AtRule.Viewport`.  
**Flow**: These will be prefixed with `AtRule$`, e.g. `AtRule$Viewport`.

|                      | Default        | `Hyphen`             | `Fallback`             | `HyphenFallback`             |
| -------------------- | -------------- | -------------------- | ---------------------- | ---------------------------- |
| **`@counter-style`** | `CounterStyle` | `CounterStyleHyphen` | `CounterStyleFallback` | `CounterStyleHyphenFallback` |
| **`@font-face`**     | `FontFace`     | `FontFaceHyphen`     | `FontFaceFallback`     | `FontFaceHyphenFallback`     |
| **`@viewport`**      | `Viewport`     | `ViewportHyphen`     | `ViewportFallback`     | `ViewportHyphenFallback`     |

## Pseudo types

String literals of pseudo classes and pseudo elements

- `Pseudos`

  Extends:

  - `AdvancedPseudos`

    Function-like pseudos e.g. `:not(:first-child)`. The string literal contains the value excluding the parenthesis: `:not`. These are separated because they require an argument that results in infinite number of variations.

  - `SimplePseudos`

    Plain pseudos e.g. `:hover` that can only be **one** variation.

## Generics

All interfaces has two optional generic argument to define length and time: `CSS.Properties<TLength = string | 0, TTime = string>`

- **Length** is the first generic parameter and defaults to `string | 0` because `0` is the only [length where the unit identifier is optional](https://drafts.csswg.org/css-values-3/#lengths). You can specify this, e.g. `string | number`, for platforms and libraries that accepts any numeric value as length with a specific unit.
  ```tsx
  const style: CSS.Properties<string | number> = {
    width: 100,
  };
  ```
- **Time** is the second generic argument and defaults to `string`. You can specify this, e.g. `string | number`, for platforms and libraries that accepts any numeric value as length with a specific unit.
  ```tsx
  const style: CSS.Properties<string | number, number> = {
    transitionDuration: 1000,
  };
  ```

## Usage

```ts
import type * as CSS from 'csstype';

const style: CSS.Properties = {
  width: '10px',
  margin: '1em',
};
```

In some cases, like for CSS-in-JS libraries, an array of values is a way to provide fallback values in CSS. Using `CSS.PropertiesFallback` instead of `CSS.Properties` will add the possibility to use any property value as an array of values.

```ts
import type * as CSS from 'csstype';

const style: CSS.PropertiesFallback = {
  display: ['-webkit-flex', 'flex'],
  color: 'white',
};
```

There's even string literals for pseudo selectors and elements.

```ts
import type * as CSS from 'csstype';

const pseudos: { [P in CSS.SimplePseudos]?: CSS.Properties } = {
  ':hover': {
    display: 'flex',
  },
};
```

Hyphen cased (kebab cased) properties are provided in `CSS.PropertiesHyphen` and `CSS.PropertiesHyphenFallback`. It's not **not** added by default in `CSS.Properties`. To allow both of them, you can simply extend with `CSS.PropertiesHyphen` or/and `CSS.PropertiesHyphenFallback`.

```ts
import type * as CSS from 'csstype';

interface Style extends CSS.Properties, CSS.PropertiesHyphen {}

const style: Style = {
  'flex-grow': 1,
  'flex-shrink': 0,
  'font-weight': 'normal',
  backgroundColor: 'white',
};
```

Adding type checked CSS properties to a `HTMLElement`.

```ts
import type * as CSS from 'csstype';

const style: CSS.Properties = {
  color: 'red',
  margin: '1em',
};

let button = document.createElement('button');

Object.assign(button.style, style);
```

## What should I do when I get type errors?

The goal is to have as perfect types as possible and we're trying to do our best. But with CSS Custom Properties, the CSS specification changing frequently and vendors implementing their own specifications with new releases sometimes causes type errors even if it should work. Here's some steps you could take to get it fixed:

_If you're using CSS Custom Properties you can step directly to step 3._

1.  **First of all, make sure you're doing it right.** A type error could also indicate that you're not :wink:

    - Some CSS specs that some vendors has implemented could have been officially rejected or haven't yet received any official acceptance and are therefor not included
    - If you're using TypeScript, [type widening](https://blog.mariusschulz.com/2017/02/04/TypeScript-2-1-literal-type-widening) could be the reason you get `Type 'string' is not assignable to...` errors

2.  **Have a look in [issues](https://github.com/frenic/csstype/issues) to see if an issue already has been filed. If not, create a new one.** To help us out, please refer to any information you have found.
3.  Fix the issue locally with **TypeScript** (Flow further down):

    - The recommended way is to use **module augmentation**. Here's a few examples:

      ```ts
      // My css.d.ts file
      import type * as CSS from 'csstype';

      declare module 'csstype' {
        interface Properties {
          // Add a missing property
          WebkitRocketLauncher?: string;

          // Add a CSS Custom Property
          '--theme-color'?: 'black' | 'white';

          // Allow namespaced CSS Custom Properties
          [index: `--theme-${string}`]: any;
          
          // Allow any CSS Custom Properties
          [index: `--${string}`]: any;

          // ...or allow any other property
          [index: string]: any;
        }
      }
      ```

    - The alternative way is to use **type assertion**. Here's a few examples:

      ```ts
      const style: CSS.Properties = {
        // Add a missing property
        ['WebkitRocketLauncher' as any]: 'launching',

        // Add a CSS Custom Property
        ['--theme-color' as any]: 'black',
      };
      ```

    Fix the issue locally with **Flow**:

    - Use **type assertion**. Here's a few examples:

      ```js
      const style: $Exact<CSS.Properties<*>> = {
        // Add a missing property
        [('WebkitRocketLauncher': any)]: 'launching',

        // Add a CSS Custom Property
        [('--theme-color': any)]: 'black',
      };
      ```

## Version 3.0

- **All property types are exposed with namespace**  
  TypeScript: `Property.AlignContent` (was `AlignContentProperty` before)  
  Flow: `Property$AlignContent`
- **All at-rules are exposed with namespace**  
  TypeScript: `AtRule.FontFace` (was `FontFace` before)  
  Flow: `AtRule$FontFace`
- **Data types are NOT exposed**  
  E.g. `Color` and `Box`. Because the generation of data types may suddenly be removed or renamed.
- **TypeScript hack for autocompletion**  
  Uses `(string & {})` for literal string unions and `(number & {})` for literal number unions ([related issue](https://github.com/microsoft/TypeScript/issues/29729)). Utilize `PropertyValue<T>` to unpack types from e.g. `(string & {})` to `string`.
- **New generic for time**  
  Read more on the ["Generics"](#generics) section.
- **Flow types improvements**  
  Flow Strict enabled and exact types are used.

## Contributing

**Never modify `index.d.ts` and `index.js.flow` directly. They are generated automatically and committed so that we can easily follow any change it results in.** Therefor it's important that you run `$ git config merge.ours.driver true` after you've forked and cloned. That setting prevents merge conflicts when doing rebase.

### Commands

- `npm run build` Generates typings and type checks them
- `npm run watch` Runs build on each save
- `npm run test` Runs the tests
- `npm run lazy` Type checks, lints and formats everything


---

File name: node_modules\debug\package.json

Code:
{
  "name": "debug",
  "version": "4.4.1",
  "repository": {
    "type": "git",
    "url": "git://github.com/debug-js/debug.git"
  },
  "description": "Lightweight debugging utility for Node.js and the browser",
  "keywords": [
    "debug",
    "log",
    "debugger"
  ],
  "files": [
    "src",
    "LICENSE",
    "README.md"
  ],
  "author": "Josh Junon (https://github.com/qix-)",
  "contributors": [
    "TJ Holowaychuk <tj@vision-media.ca>",
    "Nathan Rajlich <nathan@tootallnate.net> (http://n8.io)",
    "Andrew Rhyne <rhyneandrew@gmail.com>"
  ],
  "license": "MIT",
  "scripts": {
    "lint": "xo",
    "test": "npm run test:node && npm run test:browser && npm run lint",
    "test:node": "mocha test.js test.node.js",
    "test:browser": "karma start --single-run",
    "test:coverage": "cat ./coverage/lcov.info | coveralls"
  },
  "dependencies": {
    "ms": "^2.1.3"
  },
  "devDependencies": {
    "brfs": "^2.0.1",
    "browserify": "^16.2.3",
    "coveralls": "^3.0.2",
    "karma": "^3.1.4",
    "karma-browserify": "^6.0.0",
    "karma-chrome-launcher": "^2.2.0",
    "karma-mocha": "^1.3.0",
    "mocha": "^5.2.0",
    "mocha-lcov-reporter": "^1.2.0",
    "sinon": "^14.0.0",
    "xo": "^0.23.0"
  },
  "peerDependenciesMeta": {
    "supports-color": {
      "optional": true
    }
  },
  "main": "./src/index.js",
  "browser": "./src/browser.js",
  "engines": {
    "node": ">=6.0"
  },
  "xo": {
    "rules": {
      "import/extensions": "off"
    }
  }
}


---

File name: node_modules\debug\README.md

Code:
# debug
[![OpenCollective](https://opencollective.com/debug/backers/badge.svg)](#backers)
[![OpenCollective](https://opencollective.com/debug/sponsors/badge.svg)](#sponsors)

<img width="647" src="https://user-images.githubusercontent.com/71256/29091486-fa38524c-7c37-11e7-895f-e7ec8e1039b6.png">

A tiny JavaScript debugging utility modelled after Node.js core's debugging
technique. Works in Node.js and web browsers.

## Installation

```bash
$ npm install debug
```

## Usage

`debug` exposes a function; simply pass this function the name of your module, and it will return a decorated version of `console.error` for you to pass debug statements to. This will allow you to toggle the debug output for different parts of your module as well as the module as a whole.

Example [_app.js_](./examples/node/app.js):

```js
var debug = require('debug')('http')
  , http = require('http')
  , name = 'My App';

// fake app

debug('booting %o', name);

http.createServer(function(req, res){
  debug(req.method + ' ' + req.url);
  res.end('hello\n');
}).listen(3000, function(){
  debug('listening');
});

// fake worker of some kind

require('./worker');
```

Example [_worker.js_](./examples/node/worker.js):

```js
var a = require('debug')('worker:a')
  , b = require('debug')('worker:b');

function work() {
  a('doing lots of uninteresting work');
  setTimeout(work, Math.random() * 1000);
}

work();

function workb() {
  b('doing some work');
  setTimeout(workb, Math.random() * 2000);
}

workb();
```

The `DEBUG` environment variable is then used to enable these based on space or
comma-delimited names.

Here are some examples:

<img width="647" alt="screen shot 2017-08-08 at 12 53 04 pm" src="https://user-images.githubusercontent.com/71256/29091703-a6302cdc-7c38-11e7-8304-7c0b3bc600cd.png">
<img width="647" alt="screen shot 2017-08-08 at 12 53 38 pm" src="https://user-images.githubusercontent.com/71256/29091700-a62a6888-7c38-11e7-800b-db911291ca2b.png">
<img width="647" alt="screen shot 2017-08-08 at 12 53 25 pm" src="https://user-images.githubusercontent.com/71256/29091701-a62ea114-7c38-11e7-826a-2692bedca740.png">

#### Windows command prompt notes

##### CMD

On Windows the environment variable is set using the `set` command.

```cmd
set DEBUG=*,-not_this
```

Example:

```cmd
set DEBUG=* & node app.js
```

##### PowerShell (VS Code default)

PowerShell uses different syntax to set environment variables.

```cmd
$env:DEBUG = "*,-not_this"
```

Example:

```cmd
$env:DEBUG='app';node app.js
```

Then, run the program to be debugged as usual.

npm script example:
```js
  "windowsDebug": "@powershell -Command $env:DEBUG='*';node app.js",
```

## Namespace Colors

Every debug instance has a color generated for it based on its namespace name.
This helps when visually parsing the debug output to identify which debug instance
a debug line belongs to.

#### Node.js

In Node.js, colors are enabled when stderr is a TTY. You also _should_ install
the [`supports-color`](https://npmjs.org/supports-color) module alongside debug,
otherwise debug will only use a small handful of basic colors.

<img width="521" src="https://user-images.githubusercontent.com/71256/29092181-47f6a9e6-7c3a-11e7-9a14-1928d8a711cd.png">

#### Web Browser

Colors are also enabled on "Web Inspectors" that understand the `%c` formatting
option. These are WebKit web inspectors, Firefox ([since version
31](https://hacks.mozilla.org/2014/05/editable-box-model-multiple-selection-sublime-text-keys-much-more-firefox-developer-tools-episode-31/))
and the Firebug plugin for Firefox (any version).

<img width="524" src="https://user-images.githubusercontent.com/71256/29092033-b65f9f2e-7c39-11e7-8e32-f6f0d8e865c1.png">


## Millisecond diff

When actively developing an application it can be useful to see when the time spent between one `debug()` call and the next. Suppose for example you invoke `debug()` before requesting a resource, and after as well, the "+NNNms" will show you how much time was spent between calls.

<img width="647" src="https://user-images.githubusercontent.com/71256/29091486-fa38524c-7c37-11e7-895f-e7ec8e1039b6.png">

When stdout is not a TTY, `Date#toISOString()` is used, making it more useful for logging the debug information as shown below:

<img width="647" src="https://user-images.githubusercontent.com/71256/29091956-6bd78372-7c39-11e7-8c55-c948396d6edd.png">


## Conventions

If you're using this in one or more of your libraries, you _should_ use the name of your library so that developers may toggle debugging as desired without guessing names. If you have more than one debuggers you _should_ prefix them with your library name and use ":" to separate features. For example "bodyParser" from Connect would then be "connect:bodyParser".  If you append a "*" to the end of your name, it will always be enabled regardless of the setting of the DEBUG environment variable.  You can then use it for normal output as well as debug output.

## Wildcards

The `*` character may be used as a wildcard. Suppose for example your library has
debuggers named "connect:bodyParser", "connect:compress", "connect:session",
instead of listing all three with
`DEBUG=connect:bodyParser,connect:compress,connect:session`, you may simply do
`DEBUG=connect:*`, or to run everything using this module simply use `DEBUG=*`.

You can also exclude specific debuggers by prefixing them with a "-" character.
For example, `DEBUG=*,-connect:*` would include all debuggers except those
starting with "connect:".

## Environment Variables

When running through Node.js, you can set a few environment variables that will
change the behavior of the debug logging:

| Name      | Purpose                                         |
|-----------|-------------------------------------------------|
| `DEBUG`   | Enables/disables specific debugging namespaces. |
| `DEBUG_HIDE_DATE` | Hide date from debug output (non-TTY).  |
| `DEBUG_COLORS`| Whether or not to use colors in the debug output. |
| `DEBUG_DEPTH` | Object inspection depth.                    |
| `DEBUG_SHOW_HIDDEN` | Shows hidden properties on inspected objects. |


__Note:__ The environment variables beginning with `DEBUG_` end up being
converted into an Options object that gets used with `%o`/`%O` formatters.
See the Node.js documentation for
[`util.inspect()`](https://nodejs.org/api/util.html#util_util_inspect_object_options)
for the complete list.

## Formatters

Debug uses [printf-style](https://wikipedia.org/wiki/Printf_format_string) formatting.
Below are the officially supported formatters:

| Formatter | Representation |
|-----------|----------------|
| `%O`      | Pretty-print an Object on multiple lines. |
| `%o`      | Pretty-print an Object all on a single line. |
| `%s`      | String. |
| `%d`      | Number (both integer and float). |
| `%j`      | JSON. Replaced with the string '[Circular]' if the argument contains circular references. |
| `%%`      | Single percent sign ('%'). This does not consume an argument. |


### Custom formatters

You can add custom formatters by extending the `debug.formatters` object.
For example, if you wanted to add support for rendering a Buffer as hex with
`%h`, you could do something like:

```js
const createDebug = require('debug')
createDebug.formatters.h = (v) => {
  return v.toString('hex')
}

// …elsewhere
const debug = createDebug('foo')
debug('this is hex: %h', new Buffer('hello world'))
//   foo this is hex: 68656c6c6f20776f726c6421 +0ms
```


## Browser Support

You can build a browser-ready script using [browserify](https://github.com/substack/node-browserify),
or just use the [browserify-as-a-service](https://wzrd.in/) [build](https://wzrd.in/standalone/debug@latest),
if you don't want to build it yourself.

Debug's enable state is currently persisted by `localStorage`.
Consider the situation shown below where you have `worker:a` and `worker:b`,
and wish to debug both. You can enable this using `localStorage.debug`:

```js
localStorage.debug = 'worker:*'
```

And then refresh the page.

```js
a = debug('worker:a');
b = debug('worker:b');

setInterval(function(){
  a('doing some work');
}, 1000);

setInterval(function(){
  b('doing some work');
}, 1200);
```

In Chromium-based web browsers (e.g. Brave, Chrome, and Electron), the JavaScript console will—by default—only show messages logged by `debug` if the "Verbose" log level is _enabled_.

<img width="647" src="https://user-images.githubusercontent.com/7143133/152083257-29034707-c42c-4959-8add-3cee850e6fcf.png">

## Output streams

  By default `debug` will log to stderr, however this can be configured per-namespace by overriding the `log` method:

Example [_stdout.js_](./examples/node/stdout.js):

```js
var debug = require('debug');
var error = debug('app:error');

// by default stderr is used
error('goes to stderr!');

var log = debug('app:log');
// set this namespace to log via console.log
log.log = console.log.bind(console); // don't forget to bind to console!
log('goes to stdout');
error('still goes to stderr!');

// set all output to go via console.info
// overrides all per-namespace log settings
debug.log = console.info.bind(console);
error('now goes to stdout via console.info');
log('still goes to stdout, but via console.info now');
```

## Extend
You can simply extend debugger 
```js
const log = require('debug')('auth');

//creates new debug instance with extended namespace
const logSign = log.extend('sign');
const logLogin = log.extend('login');

log('hello'); // auth hello
logSign('hello'); //auth:sign hello
logLogin('hello'); //auth:login hello
```

## Set dynamically

You can also enable debug dynamically by calling the `enable()` method :

```js
let debug = require('debug');

console.log(1, debug.enabled('test'));

debug.enable('test');
console.log(2, debug.enabled('test'));

debug.disable();
console.log(3, debug.enabled('test'));

```

print :   
```
1 false
2 true
3 false
```

Usage :  
`enable(namespaces)`  
`namespaces` can include modes separated by a colon and wildcards.
   
Note that calling `enable()` completely overrides previously set DEBUG variable : 

```
$ DEBUG=foo node -e 'var dbg = require("debug"); dbg.enable("bar"); console.log(dbg.enabled("foo"))'
=> false
```

`disable()`

Will disable all namespaces. The functions returns the namespaces currently
enabled (and skipped). This can be useful if you want to disable debugging
temporarily without knowing what was enabled to begin with.

For example:

```js
let debug = require('debug');
debug.enable('foo:*,-foo:bar');
let namespaces = debug.disable();
debug.enable(namespaces);
```

Note: There is no guarantee that the string will be identical to the initial
enable string, but semantically they will be identical.

## Checking whether a debug target is enabled

After you've created a debug instance, you can determine whether or not it is
enabled by checking the `enabled` property:

```javascript
const debug = require('debug')('http');

if (debug.enabled) {
  // do stuff...
}
```

You can also manually toggle this property to force the debug instance to be
enabled or disabled.

## Usage in child processes

Due to the way `debug` detects if the output is a TTY or not, colors are not shown in child processes when `stderr` is piped. A solution is to pass the `DEBUG_COLORS=1` environment variable to the child process.  
For example:

```javascript
worker = fork(WORKER_WRAP_PATH, [workerPath], {
  stdio: [
    /* stdin: */ 0,
    /* stdout: */ 'pipe',
    /* stderr: */ 'pipe',
    'ipc',
  ],
  env: Object.assign({}, process.env, {
    DEBUG_COLORS: 1 // without this settings, colors won't be shown
  }),
});

worker.stderr.pipe(process.stderr, { end: false });
```


## Authors

 - TJ Holowaychuk
 - Nathan Rajlich
 - Andrew Rhyne
 - Josh Junon

## Backers

Support us with a monthly donation and help us continue our activities. [[Become a backer](https://opencollective.com/debug#backer)]

<a href="https://opencollective.com/debug/backer/0/website" target="_blank"><img src="https://opencollective.com/debug/backer/0/avatar.svg"></a>
<a href="https://opencollective.com/debug/backer/1/website" target="_blank"><img src="https://opencollective.com/debug/backer/1/avatar.svg"></a>
<a href="https://opencollective.com/debug/backer/2/website" target="_blank"><img src="https://opencollective.com/debug/backer/2/avatar.svg"></a>
<a href="https://opencollective.com/debug/backer/3/website" target="_blank"><img src="https://opencollective.com/debug/backer/3/avatar.svg"></a>
<a href="https://opencollective.com/debug/backer/4/website" target="_blank"><img src="https://opencollective.com/debug/backer/4/avatar.svg"></a>
<a href="https://opencollective.com/debug/backer/5/website" target="_blank"><img src="https://opencollective.com/debug/backer/5/avatar.svg"></a>
<a href="https://opencollective.com/debug/backer/6/website" target="_blank"><img src="https://opencollective.com/debug/backer/6/avatar.svg"></a>
<a href="https://opencollective.com/debug/backer/7/website" target="_blank"><img src="https://opencollective.com/debug/backer/7/avatar.svg"></a>
<a href="https://opencollective.com/debug/backer/8/website" target="_blank"><img src="https://opencollective.com/debug/backer/8/avatar.svg"></a>
<a href="https://opencollective.com/debug/backer/9/website" target="_blank"><img src="https://opencollective.com/debug/backer/9/avatar.svg"></a>
<a href="https://opencollective.com/debug/backer/10/website" target="_blank"><img src="https://opencollective.com/debug/backer/10/avatar.svg"></a>
<a href="https://opencollective.com/debug/backer/11/website" target="_blank"><img src="https://opencollective.com/debug/backer/11/avatar.svg"></a>
<a href="https://opencollective.com/debug/backer/12/website" target="_blank"><img src="https://opencollective.com/debug/backer/12/avatar.svg"></a>
<a href="https://opencollective.com/debug/backer/13/website" target="_blank"><img src="https://opencollective.com/debug/backer/13/avatar.svg"></a>
<a href="https://opencollective.com/debug/backer/14/website" target="_blank"><img src="https://opencollective.com/debug/backer/14/avatar.svg"></a>
<a href="https://opencollective.com/debug/backer/15/website" target="_blank"><img src="https://opencollective.com/debug/backer/15/avatar.svg"></a>
<a href="https://opencollective.com/debug/backer/16/website" target="_blank"><img src="https://opencollective.com/debug/backer/16/avatar.svg"></a>
<a href="https://opencollective.com/debug/backer/17/website" target="_blank"><img src="https://opencollective.com/debug/backer/17/avatar.svg"></a>
<a href="https://opencollective.com/debug/backer/18/website" target="_blank"><img src="https://opencollective.com/debug/backer/18/avatar.svg"></a>
<a href="https://opencollective.com/debug/backer/19/website" target="_blank"><img src="https://opencollective.com/debug/backer/19/avatar.svg"></a>
<a href="https://opencollective.com/debug/backer/20/website" target="_blank"><img src="https://opencollective.com/debug/backer/20/avatar.svg"></a>
<a href="https://opencollective.com/debug/backer/21/website" target="_blank"><img src="https://opencollective.com/debug/backer/21/avatar.svg"></a>
<a href="https://opencollective.com/debug/backer/22/website" target="_blank"><img src="https://opencollective.com/debug/backer/22/avatar.svg"></a>
<a href="https://opencollective.com/debug/backer/23/website" target="_blank"><img src="https://opencollective.com/debug/backer/23/avatar.svg"></a>
<a href="https://opencollective.com/debug/backer/24/website" target="_blank"><img src="https://opencollective.com/debug/backer/24/avatar.svg"></a>
<a href="https://opencollective.com/debug/backer/25/website" target="_blank"><img src="https://opencollective.com/debug/backer/25/avatar.svg"></a>
<a href="https://opencollective.com/debug/backer/26/website" target="_blank"><img src="https://opencollective.com/debug/backer/26/avatar.svg"></a>
<a href="https://opencollective.com/debug/backer/27/website" target="_blank"><img src="https://opencollective.com/debug/backer/27/avatar.svg"></a>
<a href="https://opencollective.com/debug/backer/28/website" target="_blank"><img src="https://opencollective.com/debug/backer/28/avatar.svg"></a>
<a href="https://opencollective.com/debug/backer/29/website" target="_blank"><img src="https://opencollective.com/debug/backer/29/avatar.svg"></a>


## Sponsors

Become a sponsor and get your logo on our README on Github with a link to your site. [[Become a sponsor](https://opencollective.com/debug#sponsor)]

<a href="https://opencollective.com/debug/sponsor/0/website" target="_blank"><img src="https://opencollective.com/debug/sponsor/0/avatar.svg"></a>
<a href="https://opencollective.com/debug/sponsor/1/website" target="_blank"><img src="https://opencollective.com/debug/sponsor/1/avatar.svg"></a>
<a href="https://opencollective.com/debug/sponsor/2/website" target="_blank"><img src="https://opencollective.com/debug/sponsor/2/avatar.svg"></a>
<a href="https://opencollective.com/debug/sponsor/3/website" target="_blank"><img src="https://opencollective.com/debug/sponsor/3/avatar.svg"></a>
<a href="https://opencollective.com/debug/sponsor/4/website" target="_blank"><img src="https://opencollective.com/debug/sponsor/4/avatar.svg"></a>
<a href="https://opencollective.com/debug/sponsor/5/website" target="_blank"><img src="https://opencollective.com/debug/sponsor/5/avatar.svg"></a>
<a href="https://opencollective.com/debug/sponsor/6/website" target="_blank"><img src="https://opencollective.com/debug/sponsor/6/avatar.svg"></a>
<a href="https://opencollective.com/debug/sponsor/7/website" target="_blank"><img src="https://opencollective.com/debug/sponsor/7/avatar.svg"></a>
<a href="https://opencollective.com/debug/sponsor/8/website" target="_blank"><img src="https://opencollective.com/debug/sponsor/8/avatar.svg"></a>
<a href="https://opencollective.com/debug/sponsor/9/website" target="_blank"><img src="https://opencollective.com/debug/sponsor/9/avatar.svg"></a>
<a href="https://opencollective.com/debug/sponsor/10/website" target="_blank"><img src="https://opencollective.com/debug/sponsor/10/avatar.svg"></a>
<a href="https://opencollective.com/debug/sponsor/11/website" target="_blank"><img src="https://opencollective.com/debug/sponsor/11/avatar.svg"></a>
<a href="https://opencollective.com/debug/sponsor/12/website" target="_blank"><img src="https://opencollective.com/debug/sponsor/12/avatar.svg"></a>
<a href="https://opencollective.com/debug/sponsor/13/website" target="_blank"><img src="https://opencollective.com/debug/sponsor/13/avatar.svg"></a>
<a href="https://opencollective.com/debug/sponsor/14/website" target="_blank"><img src="https://opencollective.com/debug/sponsor/14/avatar.svg"></a>
<a href="https://opencollective.com/debug/sponsor/15/website" target="_blank"><img src="https://opencollective.com/debug/sponsor/15/avatar.svg"></a>
<a href="https://opencollective.com/debug/sponsor/16/website" target="_blank"><img src="https://opencollective.com/debug/sponsor/16/avatar.svg"></a>
<a href="https://opencollective.com/debug/sponsor/17/website" target="_blank"><img src="https://opencollective.com/debug/sponsor/17/avatar.svg"></a>
<a href="https://opencollective.com/debug/sponsor/18/website" target="_blank"><img src="https://opencollective.com/debug/sponsor/18/avatar.svg"></a>
<a href="https://opencollective.com/debug/sponsor/19/website" target="_blank"><img src="https://opencollective.com/debug/sponsor/19/avatar.svg"></a>
<a href="https://opencollective.com/debug/sponsor/20/website" target="_blank"><img src="https://opencollective.com/debug/sponsor/20/avatar.svg"></a>
<a href="https://opencollective.com/debug/sponsor/21/website" target="_blank"><img src="https://opencollective.com/debug/sponsor/21/avatar.svg"></a>
<a href="https://opencollective.com/debug/sponsor/22/website" target="_blank"><img src="https://opencollective.com/debug/sponsor/22/avatar.svg"></a>
<a href="https://opencollective.com/debug/sponsor/23/website" target="_blank"><img src="https://opencollective.com/debug/sponsor/23/avatar.svg"></a>
<a href="https://opencollective.com/debug/sponsor/24/website" target="_blank"><img src="https://opencollective.com/debug/sponsor/24/avatar.svg"></a>
<a href="https://opencollective.com/debug/sponsor/25/website" target="_blank"><img src="https://opencollective.com/debug/sponsor/25/avatar.svg"></a>
<a href="https://opencollective.com/debug/sponsor/26/website" target="_blank"><img src="https://opencollective.com/debug/sponsor/26/avatar.svg"></a>
<a href="https://opencollective.com/debug/sponsor/27/website" target="_blank"><img src="https://opencollective.com/debug/sponsor/27/avatar.svg"></a>
<a href="https://opencollective.com/debug/sponsor/28/website" target="_blank"><img src="https://opencollective.com/debug/sponsor/28/avatar.svg"></a>
<a href="https://opencollective.com/debug/sponsor/29/website" target="_blank"><img src="https://opencollective.com/debug/sponsor/29/avatar.svg"></a>

## License

(The MIT License)

Copyright (c) 2014-2017 TJ Holowaychuk &lt;tj@vision-media.ca&gt;
Copyright (c) 2018-2021 Josh Junon

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
'Software'), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


---

File name: node_modules\debug\src\browser.js

Code:
/* eslint-env browser */

/**
 * This is the web browser implementation of `debug()`.
 */

exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.storage = localstorage();
exports.destroy = (() => {
	let warned = false;

	return () => {
		if (!warned) {
			warned = true;
			console.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');
		}
	};
})();

/**
 * Colors.
 */

exports.colors = [
	'#0000CC',
	'#0000FF',
	'#0033CC',
	'#0033FF',
	'#0066CC',
	'#0066FF',
	'#0099CC',
	'#0099FF',
	'#00CC00',
	'#00CC33',
	'#00CC66',
	'#00CC99',
	'#00CCCC',
	'#00CCFF',
	'#3300CC',
	'#3300FF',
	'#3333CC',
	'#3333FF',
	'#3366CC',
	'#3366FF',
	'#3399CC',
	'#3399FF',
	'#33CC00',
	'#33CC33',
	'#33CC66',
	'#33CC99',
	'#33CCCC',
	'#33CCFF',
	'#6600CC',
	'#6600FF',
	'#6633CC',
	'#6633FF',
	'#66CC00',
	'#66CC33',
	'#9900CC',
	'#9900FF',
	'#9933CC',
	'#9933FF',
	'#99CC00',
	'#99CC33',
	'#CC0000',
	'#CC0033',
	'#CC0066',
	'#CC0099',
	'#CC00CC',
	'#CC00FF',
	'#CC3300',
	'#CC3333',
	'#CC3366',
	'#CC3399',
	'#CC33CC',
	'#CC33FF',
	'#CC6600',
	'#CC6633',
	'#CC9900',
	'#CC9933',
	'#CCCC00',
	'#CCCC33',
	'#FF0000',
	'#FF0033',
	'#FF0066',
	'#FF0099',
	'#FF00CC',
	'#FF00FF',
	'#FF3300',
	'#FF3333',
	'#FF3366',
	'#FF3399',
	'#FF33CC',
	'#FF33FF',
	'#FF6600',
	'#FF6633',
	'#FF9900',
	'#FF9933',
	'#FFCC00',
	'#FFCC33'
];

/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */

// eslint-disable-next-line complexity
function useColors() {
	// NB: In an Electron preload script, document will be defined but not fully
	// initialized. Since we know we're in Chrome, we'll just detect this case
	// explicitly
	if (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {
		return true;
	}

	// Internet Explorer and Edge do not support colors.
	if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
		return false;
	}

	let m;

	// Is webkit? http://stackoverflow.com/a/16459606/376773
	// document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
	// eslint-disable-next-line no-return-assign
	return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||
		// Is firebug? http://stackoverflow.com/a/398120/376773
		(typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||
		// Is firefox >= v31?
		// https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
		(typeof navigator !== 'undefined' && navigator.userAgent && (m = navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)) && parseInt(m[1], 10) >= 31) ||
		// Double check webkit in userAgent just in case we are in a worker
		(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/));
}

/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */

function formatArgs(args) {
	args[0] = (this.useColors ? '%c' : '') +
		this.namespace +
		(this.useColors ? ' %c' : ' ') +
		args[0] +
		(this.useColors ? '%c ' : ' ') +
		'+' + module.exports.humanize(this.diff);

	if (!this.useColors) {
		return;
	}

	const c = 'color: ' + this.color;
	args.splice(1, 0, c, 'color: inherit');

	// The final "%c" is somewhat tricky, because there could be other
	// arguments passed either before or after the %c, so we need to
	// figure out the correct index to insert the CSS into
	let index = 0;
	let lastC = 0;
	args[0].replace(/%[a-zA-Z%]/g, match => {
		if (match === '%%') {
			return;
		}
		index++;
		if (match === '%c') {
			// We only are interested in the *last* %c
			// (the user may have provided their own)
			lastC = index;
		}
	});

	args.splice(lastC, 0, c);
}

/**
 * Invokes `console.debug()` when available.
 * No-op when `console.debug` is not a "function".
 * If `console.debug` is not available, falls back
 * to `console.log`.
 *
 * @api public
 */
exports.log = console.debug || console.log || (() => {});

/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */
function save(namespaces) {
	try {
		if (namespaces) {
			exports.storage.setItem('debug', namespaces);
		} else {
			exports.storage.removeItem('debug');
		}
	} catch (error) {
		// Swallow
		// XXX (@Qix-) should we be logging these?
	}
}

/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */
function load() {
	let r;
	try {
		r = exports.storage.getItem('debug') || exports.storage.getItem('DEBUG') ;
	} catch (error) {
		// Swallow
		// XXX (@Qix-) should we be logging these?
	}

	// If debug isn't set in LS, and we're in Electron, try to load $DEBUG
	if (!r && typeof process !== 'undefined' && 'env' in process) {
		r = process.env.DEBUG;
	}

	return r;
}

/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */

function localstorage() {
	try {
		// TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context
		// The Browser also has localStorage in the global context.
		return localStorage;
	} catch (error) {
		// Swallow
		// XXX (@Qix-) should we be logging these?
	}
}

module.exports = require('./common')(exports);

const {formatters} = module.exports;

/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */

formatters.j = function (v) {
	try {
		return JSON.stringify(v);
	} catch (error) {
		return '[UnexpectedJSONParseError]: ' + error.message;
	}
};


---

File name: node_modules\debug\src\common.js

Code:

/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 */

function setup(env) {
	createDebug.debug = createDebug;
	createDebug.default = createDebug;
	createDebug.coerce = coerce;
	createDebug.disable = disable;
	createDebug.enable = enable;
	createDebug.enabled = enabled;
	createDebug.humanize = require('ms');
	createDebug.destroy = destroy;

	Object.keys(env).forEach(key => {
		createDebug[key] = env[key];
	});

	/**
	* The currently active debug mode names, and names to skip.
	*/

	createDebug.names = [];
	createDebug.skips = [];

	/**
	* Map of special "%n" handling functions, for the debug "format" argument.
	*
	* Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
	*/
	createDebug.formatters = {};

	/**
	* Selects a color for a debug namespace
	* @param {String} namespace The namespace string for the debug instance to be colored
	* @return {Number|String} An ANSI color code for the given namespace
	* @api private
	*/
	function selectColor(namespace) {
		let hash = 0;

		for (let i = 0; i < namespace.length; i++) {
			hash = ((hash << 5) - hash) + namespace.charCodeAt(i);
			hash |= 0; // Convert to 32bit integer
		}

		return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
	}
	createDebug.selectColor = selectColor;

	/**
	* Create a debugger with the given `namespace`.
	*
	* @param {String} namespace
	* @return {Function}
	* @api public
	*/
	function createDebug(namespace) {
		let prevTime;
		let enableOverride = null;
		let namespacesCache;
		let enabledCache;

		function debug(...args) {
			// Disabled?
			if (!debug.enabled) {
				return;
			}

			const self = debug;

			// Set `diff` timestamp
			const curr = Number(new Date());
			const ms = curr - (prevTime || curr);
			self.diff = ms;
			self.prev = prevTime;
			self.curr = curr;
			prevTime = curr;

			args[0] = createDebug.coerce(args[0]);

			if (typeof args[0] !== 'string') {
				// Anything else let's inspect with %O
				args.unshift('%O');
			}

			// Apply any `formatters` transformations
			let index = 0;
			args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {
				// If we encounter an escaped % then don't increase the array index
				if (match === '%%') {
					return '%';
				}
				index++;
				const formatter = createDebug.formatters[format];
				if (typeof formatter === 'function') {
					const val = args[index];
					match = formatter.call(self, val);

					// Now we need to remove `args[index]` since it's inlined in the `format`
					args.splice(index, 1);
					index--;
				}
				return match;
			});

			// Apply env-specific formatting (colors, etc.)
			createDebug.formatArgs.call(self, args);

			const logFn = self.log || createDebug.log;
			logFn.apply(self, args);
		}

		debug.namespace = namespace;
		debug.useColors = createDebug.useColors();
		debug.color = createDebug.selectColor(namespace);
		debug.extend = extend;
		debug.destroy = createDebug.destroy; // XXX Temporary. Will be removed in the next major release.

		Object.defineProperty(debug, 'enabled', {
			enumerable: true,
			configurable: false,
			get: () => {
				if (enableOverride !== null) {
					return enableOverride;
				}
				if (namespacesCache !== createDebug.namespaces) {
					namespacesCache = createDebug.namespaces;
					enabledCache = createDebug.enabled(namespace);
				}

				return enabledCache;
			},
			set: v => {
				enableOverride = v;
			}
		});

		// Env-specific initialization logic for debug instances
		if (typeof createDebug.init === 'function') {
			createDebug.init(debug);
		}

		return debug;
	}

	function extend(namespace, delimiter) {
		const newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);
		newDebug.log = this.log;
		return newDebug;
	}

	/**
	* Enables a debug mode by namespaces. This can include modes
	* separated by a colon and wildcards.
	*
	* @param {String} namespaces
	* @api public
	*/
	function enable(namespaces) {
		createDebug.save(namespaces);
		createDebug.namespaces = namespaces;

		createDebug.names = [];
		createDebug.skips = [];

		const split = (typeof namespaces === 'string' ? namespaces : '')
			.trim()
			.replace(/\s+/g, ',')
			.split(',')
			.filter(Boolean);

		for (const ns of split) {
			if (ns[0] === '-') {
				createDebug.skips.push(ns.slice(1));
			} else {
				createDebug.names.push(ns);
			}
		}
	}

	/**
	 * Checks if the given string matches a namespace template, honoring
	 * asterisks as wildcards.
	 *
	 * @param {String} search
	 * @param {String} template
	 * @return {Boolean}
	 */
	function matchesTemplate(search, template) {
		let searchIndex = 0;
		let templateIndex = 0;
		let starIndex = -1;
		let matchIndex = 0;

		while (searchIndex < search.length) {
			if (templateIndex < template.length && (template[templateIndex] === search[searchIndex] || template[templateIndex] === '*')) {
				// Match character or proceed with wildcard
				if (template[templateIndex] === '*') {
					starIndex = templateIndex;
					matchIndex = searchIndex;
					templateIndex++; // Skip the '*'
				} else {
					searchIndex++;
					templateIndex++;
				}
			} else if (starIndex !== -1) { // eslint-disable-line no-negated-condition
				// Backtrack to the last '*' and try to match more characters
				templateIndex = starIndex + 1;
				matchIndex++;
				searchIndex = matchIndex;
			} else {
				return false; // No match
			}
		}

		// Handle trailing '*' in template
		while (templateIndex < template.length && template[templateIndex] === '*') {
			templateIndex++;
		}

		return templateIndex === template.length;
	}

	/**
	* Disable debug output.
	*
	* @return {String} namespaces
	* @api public
	*/
	function disable() {
		const namespaces = [
			...createDebug.names,
			...createDebug.skips.map(namespace => '-' + namespace)
		].join(',');
		createDebug.enable('');
		return namespaces;
	}

	/**
	* Returns true if the given mode name is enabled, false otherwise.
	*
	* @param {String} name
	* @return {Boolean}
	* @api public
	*/
	function enabled(name) {
		for (const skip of createDebug.skips) {
			if (matchesTemplate(name, skip)) {
				return false;
			}
		}

		for (const ns of createDebug.names) {
			if (matchesTemplate(name, ns)) {
				return true;
			}
		}

		return false;
	}

	/**
	* Coerce `val`.
	*
	* @param {Mixed} val
	* @return {Mixed}
	* @api private
	*/
	function coerce(val) {
		if (val instanceof Error) {
			return val.stack || val.message;
		}
		return val;
	}

	/**
	* XXX DO NOT USE. This is a temporary stub function.
	* XXX It WILL be removed in the next major release.
	*/
	function destroy() {
		console.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');
	}

	createDebug.enable(createDebug.load());

	return createDebug;
}

module.exports = setup;


---

File name: node_modules\debug\src\index.js

Code:
/**
 * Detect Electron renderer / nwjs process, which is node, but we should
 * treat as a browser.
 */

if (typeof process === 'undefined' || process.type === 'renderer' || process.browser === true || process.__nwjs) {
	module.exports = require('./browser.js');
} else {
	module.exports = require('./node.js');
}


---

File name: node_modules\debug\src\node.js

Code:
/**
 * Module dependencies.
 */

const tty = require('tty');
const util = require('util');

/**
 * This is the Node.js implementation of `debug()`.
 */

exports.init = init;
exports.log = log;
exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.destroy = util.deprecate(
	() => {},
	'Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.'
);

/**
 * Colors.
 */

exports.colors = [6, 2, 3, 4, 5, 1];

try {
	// Optional dependency (as in, doesn't need to be installed, NOT like optionalDependencies in package.json)
	// eslint-disable-next-line import/no-extraneous-dependencies
	const supportsColor = require('supports-color');

	if (supportsColor && (supportsColor.stderr || supportsColor).level >= 2) {
		exports.colors = [
			20,
			21,
			26,
			27,
			32,
			33,
			38,
			39,
			40,
			41,
			42,
			43,
			44,
			45,
			56,
			57,
			62,
			63,
			68,
			69,
			74,
			75,
			76,
			77,
			78,
			79,
			80,
			81,
			92,
			93,
			98,
			99,
			112,
			113,
			128,
			129,
			134,
			135,
			148,
			149,
			160,
			161,
			162,
			163,
			164,
			165,
			166,
			167,
			168,
			169,
			170,
			171,
			172,
			173,
			178,
			179,
			184,
			185,
			196,
			197,
			198,
			199,
			200,
			201,
			202,
			203,
			204,
			205,
			206,
			207,
			208,
			209,
			214,
			215,
			220,
			221
		];
	}
} catch (error) {
	// Swallow - we only care if `supports-color` is available; it doesn't have to be.
}

/**
 * Build up the default `inspectOpts` object from the environment variables.
 *
 *   $ DEBUG_COLORS=no DEBUG_DEPTH=10 DEBUG_SHOW_HIDDEN=enabled node script.js
 */

exports.inspectOpts = Object.keys(process.env).filter(key => {
	return /^debug_/i.test(key);
}).reduce((obj, key) => {
	// Camel-case
	const prop = key
		.substring(6)
		.toLowerCase()
		.replace(/_([a-z])/g, (_, k) => {
			return k.toUpperCase();
		});

	// Coerce string value into JS value
	let val = process.env[key];
	if (/^(yes|on|true|enabled)$/i.test(val)) {
		val = true;
	} else if (/^(no|off|false|disabled)$/i.test(val)) {
		val = false;
	} else if (val === 'null') {
		val = null;
	} else {
		val = Number(val);
	}

	obj[prop] = val;
	return obj;
}, {});

/**
 * Is stdout a TTY? Colored output is enabled when `true`.
 */

function useColors() {
	return 'colors' in exports.inspectOpts ?
		Boolean(exports.inspectOpts.colors) :
		tty.isatty(process.stderr.fd);
}

/**
 * Adds ANSI color escape codes if enabled.
 *
 * @api public
 */

function formatArgs(args) {
	const {namespace: name, useColors} = this;

	if (useColors) {
		const c = this.color;
		const colorCode = '\u001B[3' + (c < 8 ? c : '8;5;' + c);
		const prefix = `  ${colorCode};1m${name} \u001B[0m`;

		args[0] = prefix + args[0].split('\n').join('\n' + prefix);
		args.push(colorCode + 'm+' + module.exports.humanize(this.diff) + '\u001B[0m');
	} else {
		args[0] = getDate() + name + ' ' + args[0];
	}
}

function getDate() {
	if (exports.inspectOpts.hideDate) {
		return '';
	}
	return new Date().toISOString() + ' ';
}

/**
 * Invokes `util.formatWithOptions()` with the specified arguments and writes to stderr.
 */

function log(...args) {
	return process.stderr.write(util.formatWithOptions(exports.inspectOpts, ...args) + '\n');
}

/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */
function save(namespaces) {
	if (namespaces) {
		process.env.DEBUG = namespaces;
	} else {
		// If you set a process.env field to null or undefined, it gets cast to the
		// string 'null' or 'undefined'. Just delete instead.
		delete process.env.DEBUG;
	}
}

/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */

function load() {
	return process.env.DEBUG;
}

/**
 * Init logic for `debug` instances.
 *
 * Create a new `inspectOpts` object in case `useColors` is set
 * differently for a particular `debug` instance.
 */

function init(debug) {
	debug.inspectOpts = {};

	const keys = Object.keys(exports.inspectOpts);
	for (let i = 0; i < keys.length; i++) {
		debug.inspectOpts[keys[i]] = exports.inspectOpts[keys[i]];
	}
}

module.exports = require('./common')(exports);

const {formatters} = module.exports;

/**
 * Map %o to `util.inspect()`, all on a single line.
 */

formatters.o = function (v) {
	this.inspectOpts.colors = this.useColors;
	return util.inspect(v, this.inspectOpts)
		.split('\n')
		.map(str => str.trim())
		.join(' ');
};

/**
 * Map %O to `util.inspect()`, allowing multiple lines if needed.
 */

formatters.O = function (v) {
	this.inspectOpts.colors = this.useColors;
	return util.inspect(v, this.inspectOpts);
};


---

File name: node_modules\dedent\dist\dedent.d.ts

Code:
interface DedentOptions {
    escapeSpecialCharacters?: boolean;
    trimWhitespace?: boolean;
}
interface Dedent {
    (literals: string): string;
    (strings: TemplateStringsArray, ...values: unknown[]): string;
    withOptions: CreateDedent;
}
type CreateDedent = (options: DedentOptions) => Dedent;

declare const dedent: Dedent;

export { CreateDedent, Dedent, DedentOptions, dedent as default };


---

File name: node_modules\dedent\dist\dedent.js

Code:
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const dedent = createDedent({});
var _default = exports.default = dedent;
function createDedent(options) {
  dedent.withOptions = newOptions => createDedent({
    ...options,
    ...newOptions
  });
  return dedent;
  function dedent(strings, ...values) {
    const raw = typeof strings === "string" ? [strings] : strings.raw;
    const {
      escapeSpecialCharacters = Array.isArray(strings),
      trimWhitespace = true
    } = options;

    // first, perform interpolation
    let result = "";
    for (let i = 0; i < raw.length; i++) {
      let next = raw[i];
      if (escapeSpecialCharacters) {
        // handle escaped newlines, backticks, and interpolation characters
        next = next.replace(/\\\n[ \t]*/g, "").replace(/\\`/g, "`").replace(/\\\$/g, "$").replace(/\\\{/g, "{");
      }
      result += next;
      if (i < values.length) {
        // eslint-disable-next-line @typescript-eslint/restrict-plus-operands
        result += values[i];
      }
    }

    // now strip indentation
    const lines = result.split("\n");
    let mindent = null;
    for (const l of lines) {
      const m = l.match(/^(\s+)\S+/);
      if (m) {
        const indent = m[1].length;
        if (!mindent) {
          // this is the first indented line
          mindent = indent;
        } else {
          mindent = Math.min(mindent, indent);
        }
      }
    }
    if (mindent !== null) {
      const m = mindent; // appease TypeScript
      result = lines
      // https://github.com/typescript-eslint/typescript-eslint/issues/7140
      // eslint-disable-next-line @typescript-eslint/prefer-string-starts-ends-with
      .map(l => l[0] === " " || l[0] === "\t" ? l.slice(m) : l).join("\n");
    }

    // dedent eats leading and trailing whitespace too
    if (trimWhitespace) {
      result = result.trim();
    }

    // handle escaped newlines at the end to ensure they don't get stripped too
    if (escapeSpecialCharacters) {
      result = result.replace(/\\n/g, "\n");
    }
    return result;
  }
}
module.exports = exports.default;
module.exports.default = exports.default;


---

File name: node_modules\dedent\LICENSE.md

Code:
# MIT License

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
'Software'), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


---

File name: node_modules\dedent\macro.js

Code:
const { MacroError, createMacro } = require("babel-plugin-macros");
const dedent = require("./dist/dedent.js").default;

module.exports = createMacro(prevalMacros);

function prevalMacros({ babel, references, state }) {
	references.default.forEach((referencePath) => {
		if (referencePath.parentPath.type === "TaggedTemplateExpression") {
			asTag(referencePath.parentPath.get("quasi"), state, babel);
		} else if (referencePath.parentPath.type === "CallExpression") {
			asFunction(referencePath.parentPath.get("arguments"), state, babel);
		} else {
			throw new MacroError(
				`dedent.macro can only be used as tagged template expression or function call. You tried ${referencePath.parentPath.type}.`,
			);
		}
	});
}

function asTag(quasiPath, _, babel) {
	const string = quasiPath.parentPath.get("quasi").evaluate().value;
	const { types: t } = babel;

	quasiPath.parentPath.replaceWith(t.stringLiteral(dedent(string)));
}

function asFunction(argumentsPaths, _, babel) {
	const string = argumentsPaths[0].evaluate().value;
	const { types: t } = babel;

	argumentsPaths[0].parentPath.replaceWith(t.stringLiteral(dedent(string)));
}


---

File name: node_modules\dedent\package.json

Code:
{
	"name": "dedent",
	"version": "1.6.0",
	"description": "A string tag that strips indentation from multi-line strings. ⬅️",
	"keywords": [
		"dedent",
		"tag",
		"multi-line string",
		"es6"
	],
	"homepage": "https://github.com/dmnd/dedent",
	"bugs": {
		"url": "https://github.com/dmnd/dedent/issues"
	},
	"repository": {
		"type": "git",
		"url": "https://github.com/dmnd/dedent"
	},
	"license": "MIT",
	"author": {
		"name": "Desmond Brand",
		"email": "dmnd@desmondbrand.com",
		"url": "http://desmondbrand.com"
	},
	"type": "commonjs",
	"exports": {
		".": {
			"types": {
				"import": "./dist/dedent.d.mts",
				"require": "./dist/dedent.d.ts"
			},
			"import": "./dist/dedent.mjs",
			"require": "./dist/dedent.js"
		}
	},
	"main": "./dist/dedent.js",
	"module": "./dist/dedent.mjs",
	"types": "./dist/dedent.d.mts",
	"files": [
		"dist/",
		"macro.js",
		"package.json",
		"LICENSE.md",
		"README.md"
	],
	"scripts": {
		"build": "pnpm build:legacy && pnpm build:modern && pnpm build:types",
		"build:legacy": "BABEL_ENV=legacy babel src/dedent.ts --out-file dist/dedent.js",
		"build:modern": "BABEL_ENV=modern babel src/dedent.ts --out-file dist/dedent.mjs",
		"build:types": "tsup src/dedent.ts --dts-only",
		"format": "prettier \"**/*\" --ignore-unknown",
		"lint": "eslint . .*js --max-warnings 0 --report-unused-disable-directives",
		"lint:knip": "knip",
		"lint:md": "markdownlint \"**/*.md\" \".github/**/*.md\"",
		"lint:package-json": "npmPkgJsonLint .",
		"lint:packages": "pnpm dedupe --check",
		"lint:spelling": "cspell \"**\" \".github/**/*\"",
		"prepare": "husky install",
		"should-semantic-release": "should-semantic-release --verbose",
		"test": "jest",
		"tsc": "tsc"
	},
	"lint-staged": {
		"*": "prettier --ignore-unknown --write"
	},
	"devDependencies": {
		"@babel/cli": "^7.21.5",
		"@babel/preset-env": "^7.23.3",
		"@babel/preset-typescript": "^7.23.3",
		"@release-it/conventional-changelog": "^8.0.1",
		"@types/babel-plugin-macros": "^3.1.0",
		"@types/eslint": "^8.44.7",
		"@types/jest": "^29.5.3",
		"@typescript-eslint/eslint-plugin": "^6.10.0",
		"@typescript-eslint/parser": "^6.10.0",
		"babel-plugin-add-module-exports": "^1.0.4",
		"babel-plugin-tester": "^11.0.4",
		"console-fail-test": "^0.2.3",
		"cspell": "^8.0.0",
		"eslint": "^8.53.0",
		"eslint-plugin-deprecation": "^2.0.0",
		"eslint-plugin-eslint-comments": "^3.2.0",
		"eslint-plugin-jest": "^27.6.0",
		"eslint-plugin-jsdoc": "^46.9.0",
		"eslint-plugin-jsonc": "^2.10.0",
		"eslint-plugin-markdown": "^3.0.1",
		"eslint-plugin-n": "^16.3.1",
		"eslint-plugin-no-only-tests": "^3.1.0",
		"eslint-plugin-perfectionist": "^2.3.0",
		"eslint-plugin-regexp": "^2.1.1",
		"eslint-plugin-yml": "^1.10.0",
		"husky": "^8.0.3",
		"jest": "^29.7.0",
		"jsonc-eslint-parser": "^2.4.0",
		"knip": "^2.41.0",
		"lint-staged": "^15.1.0",
		"markdownlint": "^0.31.1",
		"markdownlint-cli": "^0.37.0",
		"npm-package-json-lint": "^7.1.0",
		"npm-package-json-lint-config-default": "^6.0.0",
		"prettier": "^3.0.3",
		"prettier-plugin-curly": "^0.1.3",
		"prettier-plugin-packagejson": "^2.4.6",
		"release-it": "^17.0.0",
		"should-semantic-release": "^0.2.1",
		"tsup": "^7.2.0",
		"typescript": "^5.2.2",
		"yaml-eslint-parser": "^1.2.2"
	},
	"peerDependencies": {
		"babel-plugin-macros": "^3.1.0"
	},
	"peerDependenciesMeta": {
		"babel-plugin-macros": {
			"optional": true
		}
	},
	"packageManager": "pnpm@8.7.0"
}


---

File name: node_modules\dedent\README.md

Code:
<h1 align="center">dedent</h1>

<p align="center">A string tag that strips indentation from multi-line strings. ⬅️</p>

<p align="center">
	<a href="#contributors" target="_blank">
<!-- prettier-ignore-start -->
<!-- ALL-CONTRIBUTORS-BADGE:START - Do not remove or modify this section -->
<img alt="All Contributors: 18 👪" src="https://img.shields.io/badge/all_contributors-18_👪-21bb42.svg" />
<!-- ALL-CONTRIBUTORS-BADGE:END -->
<!-- prettier-ignore-end -->
</a>
	<a href="https://codecov.io/gh/dmnd/dedent" target="_blank">
		<img alt="Codecov Test Coverage" src="https://codecov.io/gh/dmnd/dedent/branch/main/graph/badge.svg"/>
	</a>
	<a href="https://github.com/dmnd/dedent/blob/main/.github/CODE_OF_CONDUCT.md" target="_blank">
		<img alt="Contributor Covenant" src="https://img.shields.io/badge/code_of_conduct-enforced-21bb42" />
	</a>
	<a href="https://github.com/dmnd/dedent/blob/main/LICENSE.md" target="_blank">
		<img alt="License: MIT" src="https://img.shields.io/github/license/dmnd/dedent?color=21bb42">
	</a>
	<img alt="Style: Prettier" src="https://img.shields.io/badge/style-prettier-21bb42.svg" />
	<img alt="TypeScript: Strict" src="https://img.shields.io/badge/typescript-strict-21bb42.svg" />
	<img alt="npm package version" src="https://img.shields.io/npm/v/dedent?color=21bb42" />
	<img alt="Contributor Covenant" src="https://img.shields.io/badge/code_of_conduct-enforced-21bb42" />
</p>

## Usage

```shell
npm i dedent
```

```js
import dedent from "dedent";

function usageExample() {
	const first = dedent`A string that gets so long you need to break it over
                       multiple lines. Luckily dedent is here to keep it
                       readable without lots of spaces ending up in the string
                       itself.`;

	const second = dedent`
    Leading and trailing lines will be trimmed, so you can write something like
    this and have it work as you expect:

      * how convenient it is
      * that I can use an indented list
         - and still have it do the right thing

    That's all.
  `;

	const third = dedent(`
    Wait! I lied. Dedent can also be used as a function.
  `);

	return first + "\n\n" + second + "\n\n" + third;
}

console.log(usageExample());
```

```plaintext
A string that gets so long you need to break it over
multiple lines. Luckily dedent is here to keep it
readable without lots of spaces ending up in the string
itself.

Leading and trailing lines will be trimmed, so you can write something like
this and have it work as you expect:

  * how convenient it is
  * that I can use an indented list
    - and still have it do the right thing

That's all.

Wait! I lied. Dedent can also be used as a function.
```

## Options

You can customize the options `dedent` runs with by calling its `withOptions` method with an object:

<!-- prettier-ignore -->
```js
import dedent from 'dedent';

dedent.withOptions({ /* ... */ })`input`;
dedent.withOptions({ /* ... */ })(`input`);
```

`options` returns a new `dedent` function, so if you'd like to reuse the same options, you can create a dedicated `dedent` function:

<!-- prettier-ignore -->
```js
import dedent from 'dedent';

const dedenter = dedent.withOptions({ /* ... */ });

dedenter`input`;
dedenter(`input`);
```

### `escapeSpecialCharacters`

JavaScript string tags by default add an extra `\` escape in front of some special characters such as `$` dollar signs.
`dedent` will escape those special characters when called as a string tag.

If you'd like to change the behavior, an `escapeSpecialCharacters` option is available.
It defaults to:

- `false`: when `dedent` is called as a function
- `true`: when `dedent` is called as a string tag

```js
import dedent from "dedent";

// "$hello!"
dedent`
  $hello!
`;

// "\$hello!"
dedent.withOptions({ escapeSpecialCharacters: false })`
  $hello!
`;

// "$hello!"
dedent.withOptions({ escapeSpecialCharacters: true })`
  $hello!
`;
```

For more context, see [🚀 Feature: Add an option to disable special character escaping](https://github.com/dmnd/dedent/issues/63).

### `trimWhitespace`

By default, dedent will trim leading and trailing whitespace from the overall string.

This can be disabled by setting `trimWhitespace: false`.

```js
import dedent from "dedent";

// "hello!"
dedent`
  hello! 
`;

// "\nhello! \n"
dedent.withOptions({ trimWhitespace: false })`
  hello! 
`;

// "hello!"
dedent.withOptions({ trimWhitespace: true })`
  hello! 
`;
```

## License

MIT

## Contributors

<!-- spellchecker: disable -->
<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->
<!-- prettier-ignore-start -->
<!-- markdownlint-disable -->
<table>
  <tbody>
    <tr>
      <td align="center" valign="top" width="14.28%"><a href="https://adrianjost.dev/"><img src="https://avatars.githubusercontent.com/u/22987140?v=4?s=100" width="100px;" alt="Adrian Jost"/><br /><sub><b>Adrian Jost</b></sub></a><br /><a href="https://github.com/dmnd/dedent/commits?author=adrianjost" title="Code">💻</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://m811.com/"><img src="https://avatars.githubusercontent.com/u/156837?v=4?s=100" width="100px;" alt="Andri Möll"/><br /><sub><b>Andri Möll</b></sub></a><br /><a href="https://github.com/dmnd/dedent/issues?q=author%3Amoll" title="Bug reports">🐛</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://bennypowers.dev/"><img src="https://avatars.githubusercontent.com/u/1466420?v=4?s=100" width="100px;" alt="Benny Powers - עם ישראל חי!"/><br /><sub><b>Benny Powers - עם ישראל חי!</b></sub></a><br /><a href="#tool-bennypowers" title="Tools">🔧</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/phenomnomnominal"><img src="https://avatars.githubusercontent.com/u/1086286?v=4?s=100" width="100px;" alt="Craig Spence"/><br /><sub><b>Craig Spence</b></sub></a><br /><a href="https://github.com/dmnd/dedent/commits?author=phenomnomnominal" title="Code">💻</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://synthesis.com/"><img src="https://avatars.githubusercontent.com/u/4427?v=4?s=100" width="100px;" alt="Desmond Brand"/><br /><sub><b>Desmond Brand</b></sub></a><br /><a href="https://github.com/dmnd/dedent/issues?q=author%3Admnd" title="Bug reports">🐛</a> <a href="https://github.com/dmnd/dedent/commits?author=dmnd" title="Code">💻</a> <a href="https://github.com/dmnd/dedent/commits?author=dmnd" title="Documentation">📖</a> <a href="#ideas-dmnd" title="Ideas, Planning, & Feedback">🤔</a> <a href="#infra-dmnd" title="Infrastructure (Hosting, Build-Tools, etc)">🚇</a> <a href="#maintenance-dmnd" title="Maintenance">🚧</a> <a href="#projectManagement-dmnd" title="Project Management">📆</a> <a href="#tool-dmnd" title="Tools">🔧</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/G-Rath"><img src="https://avatars.githubusercontent.com/u/3151613?v=4?s=100" width="100px;" alt="Gareth Jones"/><br /><sub><b>Gareth Jones</b></sub></a><br /><a href="https://github.com/dmnd/dedent/commits?author=G-Rath" title="Code">💻</a> <a href="https://github.com/dmnd/dedent/issues?q=author%3AG-Rath" title="Bug reports">🐛</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/otakustay"><img src="https://avatars.githubusercontent.com/u/639549?v=4?s=100" width="100px;" alt="Gray Zhang"/><br /><sub><b>Gray Zhang</b></sub></a><br /><a href="https://github.com/dmnd/dedent/issues?q=author%3Aotakustay" title="Bug reports">🐛</a></td>
    </tr>
    <tr>
      <td align="center" valign="top" width="14.28%"><a href="https://haroen.me/"><img src="https://avatars.githubusercontent.com/u/6270048?v=4?s=100" width="100px;" alt="Haroen Viaene"/><br /><sub><b>Haroen Viaene</b></sub></a><br /><a href="https://github.com/dmnd/dedent/commits?author=Haroenv" title="Code">💻</a> <a href="#maintenance-Haroenv" title="Maintenance">🚧</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://blog.cometkim.kr/"><img src="https://avatars.githubusercontent.com/u/9696352?v=4?s=100" width="100px;" alt="Hyeseong Kim"/><br /><sub><b>Hyeseong Kim</b></sub></a><br /><a href="#tool-cometkim" title="Tools">🔧</a> <a href="#infra-cometkim" title="Infrastructure (Hosting, Build-Tools, etc)">🚇</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/jlarmstrongiv"><img src="https://avatars.githubusercontent.com/u/20903247?v=4?s=100" width="100px;" alt="John L. Armstrong IV"/><br /><sub><b>John L. Armstrong IV</b></sub></a><br /><a href="https://github.com/dmnd/dedent/issues?q=author%3Ajlarmstrongiv" title="Bug reports">🐛</a></td>
      <td align="center" valign="top" width="14.28%"><a href="http://www.joshuakgoldberg.com/"><img src="https://avatars.githubusercontent.com/u/3335181?v=4?s=100" width="100px;" alt="Josh Goldberg ✨"/><br /><sub><b>Josh Goldberg ✨</b></sub></a><br /><a href="https://github.com/dmnd/dedent/issues?q=author%3AJoshuaKGoldberg" title="Bug reports">🐛</a> <a href="https://github.com/dmnd/dedent/commits?author=JoshuaKGoldberg" title="Code">💻</a> <a href="https://github.com/dmnd/dedent/commits?author=JoshuaKGoldberg" title="Documentation">📖</a> <a href="#ideas-JoshuaKGoldberg" title="Ideas, Planning, & Feedback">🤔</a> <a href="#infra-JoshuaKGoldberg" title="Infrastructure (Hosting, Build-Tools, etc)">🚇</a> <a href="#maintenance-JoshuaKGoldberg" title="Maintenance">🚧</a> <a href="#projectManagement-JoshuaKGoldberg" title="Project Management">📆</a> <a href="#tool-JoshuaKGoldberg" title="Tools">🔧</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://pratapvardhan.com/"><img src="https://avatars.githubusercontent.com/u/3757165?v=4?s=100" width="100px;" alt="Pratap Vardhan"/><br /><sub><b>Pratap Vardhan</b></sub></a><br /><a href="https://github.com/dmnd/dedent/commits?author=pratapvardhan" title="Code">💻</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/lydell"><img src="https://avatars.githubusercontent.com/u/2142817?v=4?s=100" width="100px;" alt="Simon Lydell"/><br /><sub><b>Simon Lydell</b></sub></a><br /><a href="https://github.com/dmnd/dedent/issues?q=author%3Alydell" title="Bug reports">🐛</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/yinm"><img src="https://avatars.githubusercontent.com/u/13295106?v=4?s=100" width="100px;" alt="Yusuke Iinuma"/><br /><sub><b>Yusuke Iinuma</b></sub></a><br /><a href="https://github.com/dmnd/dedent/commits?author=yinm" title="Code">💻</a></td>
    </tr>
    <tr>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/yvele"><img src="https://avatars.githubusercontent.com/u/4225430?v=4?s=100" width="100px;" alt="Yves M."/><br /><sub><b>Yves M.</b></sub></a><br /><a href="#tool-yvele" title="Tools">🔧</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/d07RiV"><img src="https://avatars.githubusercontent.com/u/3448203?v=4?s=100" width="100px;" alt="d07riv"/><br /><sub><b>d07riv</b></sub></a><br /><a href="https://github.com/dmnd/dedent/issues?q=author%3Ad07RiV" title="Bug reports">🐛</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://mizdra.net/"><img src="https://avatars.githubusercontent.com/u/9639995?v=4?s=100" width="100px;" alt="mizdra"/><br /><sub><b>mizdra</b></sub></a><br /><a href="https://github.com/dmnd/dedent/commits?author=mizdra" title="Code">💻</a></td>
      <td align="center" valign="top" width="14.28%"><a href="https://github.com/sirian"><img src="https://avatars.githubusercontent.com/u/897643?v=4?s=100" width="100px;" alt="sirian"/><br /><sub><b>sirian</b></sub></a><br /><a href="https://github.com/dmnd/dedent/issues?q=author%3Asirian" title="Bug reports">🐛</a></td>
    </tr>
  </tbody>
</table>

<!-- markdownlint-restore -->
<!-- prettier-ignore-end -->

<!-- ALL-CONTRIBUTORS-LIST:END -->
<!-- spellchecker: enable -->

> 💙 This package was templated with [create-typescript-app](https://github.com/JoshuaKGoldberg/create-typescript-app).


---

File name: node_modules\deep-equal\assert.js

Code:
'use strict';

module.exports = require('assert');


---

File name: node_modules\deep-equal\CHANGELOG.md

Code:
# Changelog

All notable changes to this project will be documented in this file.

The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/)
and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).

## [v2.2.3](https://github.com/inspect-js/node-deep-equal/compare/v2.2.2...v2.2.3) - 2023-11-08

### Fixed

- [readme] remove performance comment and highlight robustness instead [`#76`](https://github.com/inspect-js/node-deep-equal/issues/76) [`#106`](https://github.com/inspect-js/node-deep-equal/issues/106)

### Commits

- Merge tag 'v1.1.2' [`c90525f`](https://github.com/inspect-js/node-deep-equal/commit/c90525fe8380c8f6680d534eff4f189c33fb1601)
- [Tests] port tests from main; only diff should be true/falses [`e02cadb`](https://github.com/inspect-js/node-deep-equal/commit/e02cadb650ef9d75684c015a35d2c59e029d5174)
- [Dev Deps] update `@ljharb/eslint-config`, `auto-changelog`, `aud`, `eslint`, `set-publish-latest`, `tape` [`11bd45b`](https://github.com/inspect-js/node-deep-equal/commit/11bd45b63943466c13a5ae97276796396a8f2619)
- [Tests] update `.github` from default branch [`58885d3`](https://github.com/inspect-js/node-deep-equal/commit/58885d3280fd25909ca5a17c7cec1e54bdd25233)
- [readme] update readme from default branch [`b0bca9a`](https://github.com/inspect-js/node-deep-equal/commit/b0bca9a1158a9596ec51a0404a6a8272b70ee204)
- [Tests] add `nyc` for coverage [`e25bc37`](https://github.com/inspect-js/node-deep-equal/commit/e25bc3716c7ec0390b06bd7b6fac0c9ab0968ab4)
- [readme] update badge URLs, fix line breaking [`1d58c6e`](https://github.com/inspect-js/node-deep-equal/commit/1d58c6ecbab5275e17735d352ac7fa4a1af40aca)
- [Tests] use `Buffer.from` when available [`f0d4a42`](https://github.com/inspect-js/node-deep-equal/commit/f0d4a42fb87854e17d78cb2d6e9ec0156ea3d2f3)
- [Tests] use `has-proto` [`0263fb9`](https://github.com/inspect-js/node-deep-equal/commit/0263fb9170a4e6a400c3b628cfba902ebaf59df5)
- [Deps] update `is-arguments`, `is-date-object`, `is-regex`, `object-is`, `regexp.prototype.flags` [`80c15ca`](https://github.com/inspect-js/node-deep-equal/commit/80c15cae82164c888de8635287c3b44ab84b3fd4)
- [meta] add missing `engines.node` [`e1d08a8`](https://github.com/inspect-js/node-deep-equal/commit/e1d08a818fdb69e4f39b7aa23dc88092d3339c43)
- [meta] use `npmignore` to autogenerate an npmignore file [`e0770e5`](https://github.com/inspect-js/node-deep-equal/commit/e0770e594ec683ded32fd1b14e876f087fc04f4a)
- [Deps] update `is-date-object`, `is-regex`, `object-is`, `regexp.prototype.flags` [`e4fb8c6`](https://github.com/inspect-js/node-deep-equal/commit/e4fb8c6459aa13d3a110b45e5612c31890a5d94e)
- [Tests] handle ported test failures in iojs v2 [`3798ff4`](https://github.com/inspect-js/node-deep-equal/commit/3798ff490286ee9ba70cf50c339914be355eea18)
- [Deps] update `call-bind`, `regexp.prototype.flags`, `which-typed-array` [`540e3a1`](https://github.com/inspect-js/node-deep-equal/commit/540e3a119dcd94b30253ad380fde69d5531cf0ac)
- [Dev Deps] update `eslint`, `@ljharb/eslint-config`, `tape` [`0f8ca75`](https://github.com/inspect-js/node-deep-equal/commit/0f8ca7575e44c66fdf1dc2b6ad4e69e1b549369f)
- [Tests] handle some additional test differences in node &lt;= 0.10 [`197a220`](https://github.com/inspect-js/node-deep-equal/commit/197a2203f0a95828c62ff2b3c980ddf16736913c)
- [Dev Deps] update `object.getownpropertydescriptors`, `tape` [`21851a6`](https://github.com/inspect-js/node-deep-equal/commit/21851a62cda0b832800de3070d9fbb7216e43284)
- [Dev Deps] update `semver`, `tape` [`dd440b2`](https://github.com/inspect-js/node-deep-equal/commit/dd440b2267ac8fa496b907369d3e0b73f9439e87)
- [meta] add missing `engines.node` [`e158993`](https://github.com/inspect-js/node-deep-equal/commit/e158993fcf913aca8a1ffdc037abfeeb3a5cb4e5)
- [meta] update `.gitignore` from default branch [`6ee186b`](https://github.com/inspect-js/node-deep-equal/commit/6ee186bd39199a1c05421e200b1e8e31a83cf363)
- [Deps] update `get-intrinsic` [`6da4b86`](https://github.com/inspect-js/node-deep-equal/commit/6da4b86e4d7ad3c01736006ca129b8e3c3f2c82c)
- [Dev Deps] update `tape` [`6ada1ab`](https://github.com/inspect-js/node-deep-equal/commit/6ada1ab7f9a176b10f0117a8e10b785965c0e830)
- [Dev Deps] update `tape` [`270d34b`](https://github.com/inspect-js/node-deep-equal/commit/270d34b48401ee40792bf18d06614044246776dd)
- [meta] fix URLs [`a269c18`](https://github.com/inspect-js/node-deep-equal/commit/a269c183bccb78dfdd2c88a149fe5373f13af4c0)
- [readme] update default branch name [`030a63f`](https://github.com/inspect-js/node-deep-equal/commit/030a63f40afa3d468ffb10437cbf5acaa677fea2)
- [Deps] update `which-typed-array` [`2f0c327`](https://github.com/inspect-js/node-deep-equal/commit/2f0c327eaaed7b50649c367f88944b6dd7e9f18c)
- [Tests] only use `Buffer.from` when it has a length of &gt; 1 [`f7e5776`](https://github.com/inspect-js/node-deep-equal/commit/f7e577622d943da78c2c9cd1e070eb786cf7a68b)

## [v2.2.2](https://github.com/inspect-js/node-deep-equal/compare/v2.2.1...v2.2.2) - 2023-07-10

### Commits

- [Fix] avoid an infinite loop in node 0.8 with Typed Arrays [`f247282`](https://github.com/inspect-js/node-deep-equal/commit/f247282e66060087c51221f77b9170fa0e2e461b)
- [Dev Deps] update `@ljharb/eslint-config`, `aud`, `tape` [`fa25583`](https://github.com/inspect-js/node-deep-equal/commit/fa255839c1afed228c41ca76177a8c239ec9305a)
- [Deps] update `get-intrinsic` [`3638470`](https://github.com/inspect-js/node-deep-equal/commit/3638470e71ed6185e06a0f0694e77cbf4c2b791c)

## [v2.2.1](https://github.com/inspect-js/node-deep-equal/compare/v2.2.0...v2.2.1) - 2023-04-27

### Commits

- [Tests] add passing tests covering object key ordering [`51c9ff6`](https://github.com/inspect-js/node-deep-equal/commit/51c9ff6b4c5d4371e0f444ce1160e416bf88e21f)
- [Refactor] use `array-buffer-byte-length` [`f47822c`](https://github.com/inspect-js/node-deep-equal/commit/f47822cf0c188caa71dfbb107b081324fcb6b99d)
- [Deps] update `is-array-buffer`, `regexp.prototype.flags` [`160d851`](https://github.com/inspect-js/node-deep-equal/commit/160d8513335d63256f9826835b35d1a462c76771)
- [Deps] update `es-get-iterator`, `get-intrinsic` [`2e08e95`](https://github.com/inspect-js/node-deep-equal/commit/2e08e956a43c839246d2280cfaaa3f3200937bbd)
- [Dev Deps] update `object.getownpropertydescriptors` [`63e9ab7`](https://github.com/inspect-js/node-deep-equal/commit/63e9ab7450212bf7e393c1bf725293389cb4626a)
- [Dev Deps] update `tape` [`c8db964`](https://github.com/inspect-js/node-deep-equal/commit/c8db964f605834388b0df20c5fce49cfbaa541bc)

## [v2.2.0](https://github.com/inspect-js/node-deep-equal/compare/v2.1.0...v2.2.0) - 2023-01-05

### Commits

- [New] add support for `SharedArrayBuffer` [`0ef51c7`](https://github.com/inspect-js/node-deep-equal/commit/0ef51c79b7dcd6ae5890b2dce4304be7c8ebe314)
- [Refactor] use `is-array-buffer` package [`0360ee1`](https://github.com/inspect-js/node-deep-equal/commit/0360ee1f1bb6e5804c15a9a4aa75ff84120a33e1)
- [Fix] `whichTypedArray` can return false in both cases [`df3e3c4`](https://github.com/inspect-js/node-deep-equal/commit/df3e3c4e30552b7a7892b62dc45fccd31eac9bfe)
- [Dev Deps] update `aud`, `object.getownpropertydescriptors` [`6d62ea4`](https://github.com/inspect-js/node-deep-equal/commit/6d62ea4f2b82d4f861fd3e0c2d67916939b1edbc)
- [Dev Deps] update `@ljharb/eslint-config` [`15aab59`](https://github.com/inspect-js/node-deep-equal/commit/15aab59d647628e05b77d1897036d73884f7a107)
- [Deps] update `which-typed-array` [`8dfce27`](https://github.com/inspect-js/node-deep-equal/commit/8dfce27f333721c697b90569b26e4bded0d61d88)
- [eslint] remove `.eslintignore` [`af46773`](https://github.com/inspect-js/node-deep-equal/commit/af46773b281dc67d7743280505a22248f0f0748d)

## [v2.1.0](https://github.com/inspect-js/node-deep-equal/compare/v2.0.5...v2.1.0) - 2022-11-02

### Fixed

- [New] add support for `ArrayBuffer` [`#94`](https://github.com/inspect-js/node-deep-equal/issues/94)

### Commits

- [actions] reuse common workflows [`12de287`](https://github.com/inspect-js/node-deep-equal/commit/12de2873def84c621421b1e3d4a96babf2ceb30a)
- [actions] use `node/install` instead of `node/run`; use `codecov` action [`ec248b9`](https://github.com/inspect-js/node-deep-equal/commit/ec248b96f4f91eb4c5971dfec74d6d91f04b39cd)
- [Tests] run assert tests on a dynamic matrix [`695aebd`](https://github.com/inspect-js/node-deep-equal/commit/695aebd50945621984bfa7e60b5c99f79dbacf1a)
- [readme] add badges [`492e159`](https://github.com/inspect-js/node-deep-equal/commit/492e1591585233184151b5526cf5413e61a2aa89)
- [Test] ArrayBuffers in node &lt; 0.12 have a nonconfigurable own `byteLength` property [`40f4b87`](https://github.com/inspect-js/node-deep-equal/commit/40f4b8719658f6262399b24791d4ccb5960ca8ea)
- [meta] use `npmignore` to autogenerate an npmignore file [`2627269`](https://github.com/inspect-js/node-deep-equal/commit/26272693147d68ec3ae2216b1f3ac5d30b79b3da)
- [Dev Deps] update `eslint`, `@ljharb/eslint-config`, `safe-publish-latest`, `tape` [`7a05bb7`](https://github.com/inspect-js/node-deep-equal/commit/7a05bb7482817616243fc89956abf48710d77fea)
- [Deps] update `call-bind`, `es-get-iterator`, `get-intrinsic`, `is-arguments`, `is-regex`, `regexp.prototype.flags`, `side-channel`, `which-boxed-primitive`, `which-typed-array` [`c0844e6`](https://github.com/inspect-js/node-deep-equal/commit/c0844e629ba3dc5193fd41a75ebcedaba976c1af)
- [actions] update codecov uploader [`b1b0552`](https://github.com/inspect-js/node-deep-equal/commit/b1b0552fe3dc23029a2717f84642e53548902e68)
- [Dev Deps] update `eslint`, `@ljharb/eslint-config`, `aud`, `auto-changelog`, `has-symbols`, `object.getownpropertydescriptors`, `tape` [`9a1ccf5`](https://github.com/inspect-js/node-deep-equal/commit/9a1ccf5285317962fe37baa211c2b20081be71ef)
- [meta] do not publish github action workflow files [`2d63384`](https://github.com/inspect-js/node-deep-equal/commit/2d63384d6676b593c2a74b45747ac81cea3da76e)
- [actions] update rebase action to use reusable workflow [`69d21f5`](https://github.com/inspect-js/node-deep-equal/commit/69d21f55af0bcff1c41447a6ac396ae556fda226)
- [Dev Deps] update `eslint`, `@ljharb/eslint-config`, `aud`, `has-symbols`, `object.getownpropertydescriptors`, `tape` [`297aae8`](https://github.com/inspect-js/node-deep-equal/commit/297aae88f619b1e058418be32e37fc29770b4f21)
- [Tests] add tests for regexes with the same source but different flags [`29c8a0d`](https://github.com/inspect-js/node-deep-equal/commit/29c8a0da09567b3bbe6614c1e235d5a87d7bdaf2)
- [Dev Deps] update `eslint`, `@ljharb/eslint-config` [`9e64ec9`](https://github.com/inspect-js/node-deep-equal/commit/9e64ec93a8c5cbe87315d30dd62a8fe6dcf842b4)
- [Deps] update `is-arguments`, `is-date-object`, `is-regex`, `which-typed-array` [`edfb752`](https://github.com/inspect-js/node-deep-equal/commit/edfb752810699790c06bb424174f38b449a4b8fb)
- [Dev Deps] update `eslint`, `@ljharb/eslint-config`, `auto-changelog`, `tape` [`7b5f7a3`](https://github.com/inspect-js/node-deep-equal/commit/7b5f7a348b2bb78ca1c00003d0dd3444d5a372a6)
- [Dev Deps] update `eslint`, `@ljharb/eslint-config`, `has-typed-arrays`, `tape` [`e328a23`](https://github.com/inspect-js/node-deep-equal/commit/e328a237ba9c262d8c2d178a65d5e1f744cbbd6b)
- [Deps] update `get-intrinsic`, `regexp.prototype.flags`, `which-typed-array` [`29123a7`](https://github.com/inspect-js/node-deep-equal/commit/29123a71857c27cce497ac991fa9be0e5921adce)
- [Dev Deps] update `eslint`, `@ljharb/eslint-config`, `aud` [`b7039ef`](https://github.com/inspect-js/node-deep-equal/commit/b7039effc1b751cb579095f9738ee019d8458a41)
- [Dev Deps] update `aud`, `tape` [`9d0b2e0`](https://github.com/inspect-js/node-deep-equal/commit/9d0b2e07df24dfd1d4d9bf32cdca07e6e1377f23)
- [actions] update workflows [`a5f5a7e`](https://github.com/inspect-js/node-deep-equal/commit/a5f5a7ed570e35cefad08ed32652cb8647d0166c)
- [Deps] update `get-intrinsic`, `object.assign` [`02025e2`](https://github.com/inspect-js/node-deep-equal/commit/02025e21dfbce6a4d52421c4892ba743dd7a7540)
- [Test] node &lt; 4 lacks `ArrayBuffer.prototype.fill` [`bb65b07`](https://github.com/inspect-js/node-deep-equal/commit/bb65b07d39eeea03ca066a92892a06a607641ed7)
- [Deps] update `is-date-object`, `is-regex` [`a463ed2`](https://github.com/inspect-js/node-deep-equal/commit/a463ed26ba7ca4b818db4929e4e946ddc0590bce)
- [Deps] update `get-intrinsic`, `object-is` [`2a33cce`](https://github.com/inspect-js/node-deep-equal/commit/2a33cced17827df191676ecdd9b9bc4f0d814aa6)
- [actions] update workflows [`d905278`](https://github.com/inspect-js/node-deep-equal/commit/d90527855a35bcaeef70d3e21370580d7d182c8d)
- [meta] use `prepublishOnly` script for npm 7+ [`7b66184`](https://github.com/inspect-js/node-deep-equal/commit/7b661846aedb0ad5768f1118e93c662d214c85f8)
- [Dev Deps] update `object.getownpropertydescriptors` [`d970dbc`](https://github.com/inspect-js/node-deep-equal/commit/d970dbcf4a95c58d5bbd6ea507455bbfa1e7ec02)

## [v2.0.5](https://github.com/inspect-js/node-deep-equal/compare/v2.0.4...v2.0.5) - 2020-12-01

### Commits

- [Tests] migrate tests to Github Actions [`4051a18`](https://github.com/inspect-js/node-deep-equal/commit/4051a1811612fd1b107743a092402361f597f89a)
- [meta] add Automatic Rebase and Require Allow Edits workflows [`6682b15`](https://github.com/inspect-js/node-deep-equal/commit/6682b15417630d6c57c854d088dfcd6023b3e185)
- [Deps] use `call-bind` and `get-intrinsic` instead of `es-abstract`; update `es-get-iterator`, `object-is`, `object.assign` [`a1d6d93`](https://github.com/inspect-js/node-deep-equal/commit/a1d6d931ebc80db8a6dba1bd453165356458f9e1)
- [Dev Deps] update `eslint`, `@ljharb/eslint-config`, `aud`, `object.getownpropertydescriptors` [`b142f4b`](https://github.com/inspect-js/node-deep-equal/commit/b142f4b9458c320b944dc06f57b9339530cf404e)

## [v2.0.4](https://github.com/inspect-js/node-deep-equal/compare/v2.0.3...v2.0.4) - 2020-10-01

### Fixed

- [meta] fix incorrect `./package.json` exports entry [`#89`](https://github.com/inspect-js/node-deep-equal/issues/89)

### Commits

- [Dev Deps] update `eslint`, `@ljharb/eslint-config`, `auto-changelog` [`d6bfee3`](https://github.com/inspect-js/node-deep-equal/commit/d6bfee329e2a430a12e6a4aba7006c5d7c36020e)
- [Tests] account for node 14+ making two NaNs loosely deep equal [`9367954`](https://github.com/inspect-js/node-deep-equal/commit/93679546d97dbd92d615b0f758d733ea1fb4eb4b)
- [Dev Deps] update `eslint`, `@ljharb/eslint-config`, `aud`, `tape` [`86a159b`](https://github.com/inspect-js/node-deep-equal/commit/86a159b72c3e3620285498113251220d3c5d05f0)
- [Deps] update `es-abstract`, `object-is`, `object.assign` [`e87979d`](https://github.com/inspect-js/node-deep-equal/commit/e87979d311faa537622a6c9faee6e91cf9a08bcd)
- [Deps] update `es-abstract`, `is-regex` [`d0cacca`](https://github.com/inspect-js/node-deep-equal/commit/d0cacca140b963d8abbe10f6bf640f22ef11f7b0)
- [Dev Deps] update `eslint`, `@ljharb/eslint-config`, `tape` [`375a9e1`](https://github.com/inspect-js/node-deep-equal/commit/375a9e1e4911b3210e328365432c8cf946d0a7e2)
- [Dev Deps] update `eslint`, `auto-changelog` [`e562d4f`](https://github.com/inspect-js/node-deep-equal/commit/e562d4fadebf09b1fca02d6f43e1c933c6ef8242)
- [Deps] update `side-channel` [`f092342`](https://github.com/inspect-js/node-deep-equal/commit/f092342373d4a33b3f679042f357fd800185caad)

## [v2.0.3](https://github.com/inspect-js/node-deep-equal/compare/v2.0.2...v2.0.3) - 2020-04-23

### Commits

- [Deps] update `object-is`, `which-typed-array` [`c232374`](https://github.com/inspect-js/node-deep-equal/commit/c2323741001f7cb2414f4fa26301f1b9705e6b46)
- [Dev Deps] update `auto-changelog`; add `aud` [`c80a91d`](https://github.com/inspect-js/node-deep-equal/commit/c80a91d8b9815300fc9e24f08094cac8942d9da7)
- [Dev Deps] update `auto-changelog` [`295d195`](https://github.com/inspect-js/node-deep-equal/commit/295d19529365a87ed663eecf26f19effe5b06f3c)
- [Dev Deps] update `aud` [`1134cc2`](https://github.com/inspect-js/node-deep-equal/commit/1134cc26fd112e3679a6973f4d418c4495e3358d)
- [Deps] Fix classification of `object.assign` [`32695dd`](https://github.com/inspect-js/node-deep-equal/commit/32695dd88c3eb86c87e162830e0e1c55447a4b9f)

## [v2.0.2](https://github.com/inspect-js/node-deep-equal/compare/v2.0.1...v2.0.2) - 2020-04-01

### Commits

- [Fix] properly pass `strict` option through internals [`4e2919d`](https://github.com/inspect-js/node-deep-equal/commit/4e2919d7c403413a9cf094b2f3be095653670e97)
- [Tests] add more coverage [`a3d8677`](https://github.com/inspect-js/node-deep-equal/commit/a3d86774fa39e1a00b3371a32fbe42c7b38743ff)
- [Tests] add coverage reporting [`3174e33`](https://github.com/inspect-js/node-deep-equal/commit/3174e33f952a4bdd57c43e3b40dea705d3d61e68)
- [Refactor] add strict pragma; remove unused try/catch [`c1d173e`](https://github.com/inspect-js/node-deep-equal/commit/c1d173ebadfcc4a2574f28b17727239dcd2737be)
- [Fix] the `prototype` property is not special on non-functions [`1c3cc25`](https://github.com/inspect-js/node-deep-equal/commit/1c3cc2526766e52cc32b9c1859b7073d5dbb70aa)
- [Deps] update `es-abstract`, `es-get-iterator`, `is-date-object`, `is-regex`, `object-is`, `regexp.prototype.flags`, `side-channel` [`7787bdc`](https://github.com/inspect-js/node-deep-equal/commit/7787bdc1268620ef12d17777fce3682abc4e364e)
- [Deps] update `es-abstract`, `es-get-iterator`, `which-collection` [`87624cf`](https://github.com/inspect-js/node-deep-equal/commit/87624cf96f2ca00bf5200aa860c4574dba96f4aa)
- [Fix] robustly distinguish Typed Arrays [`7ccb2b0`](https://github.com/inspect-js/node-deep-equal/commit/7ccb2b0f88136516cd58cad74d9c0a20daad824c)
- [Dev Deps] update `@ljharb/eslint-config`, `tape` [`c1814a1`](https://github.com/inspect-js/node-deep-equal/commit/c1814a1256e373ac6e7953b354f9f56ff5b7fe89)
- [Dev Deps] update `@ljharb/eslint-config`, `object.getownpropertydescriptors`, `tape` [`7a0d819`](https://github.com/inspect-js/node-deep-equal/commit/7a0d819e5b3807eab873d7961eb34e30ff615943)
- [Dev Deps] update `auto-changelog`, `tape` [`f248756`](https://github.com/inspect-js/node-deep-equal/commit/f2487567b092d90005a7d09b084f7ffb9ba71257)
- [Tests] fix `tag` helper, from bb50ea2e6d7906cd58683fdc7d327660e71612f4 [`469f008`](https://github.com/inspect-js/node-deep-equal/commit/469f0089d16d8678ee4c5f57016d40f072b3f7be)
- [Dev Deps] update `eslint`, `tape` [`6537dce`](https://github.com/inspect-js/node-deep-equal/commit/6537dcef16c792546c3a40ea5b53ab43861cf719)
- [Fix] make `isBuffer` check slightly more robust [`c21e14d`](https://github.com/inspect-js/node-deep-equal/commit/c21e14d7afe7d53391fa95fd8c59f85affc02ac6)
- [meta] disable greenkeeper updates for semver [`724f051`](https://github.com/inspect-js/node-deep-equal/commit/724f051213e159d5a021d0649e6a2cafd4c13458)
- [Deps] update `es-abstract` [`942ad86`](https://github.com/inspect-js/node-deep-equal/commit/942ad8699442dd83207bb04ae079997b3433ca60)
- [Deps] update `es-abstract` [`8724052`](https://github.com/inspect-js/node-deep-equal/commit/8724052e10d2e897626af6f46e0bce9d35523b04)

## [v2.0.1](https://github.com/inspect-js/node-deep-equal/compare/v2.0.0...v2.0.1) - 2019-12-08

### Fixed

- [Fix] `Map` and `Set` comparison: keys are loosely compared also [`#75`](https://github.com/inspect-js/node-deep-equal/issues/75)

### Commits

- [Fix] check extra properties on regexps [`1eac46b`](https://github.com/inspect-js/node-deep-equal/commit/1eac46b69c7b499cecb7e3b555b6e260de2043fd)
- [Tests] update test skipping logic [`8adf08d`](https://github.com/inspect-js/node-deep-equal/commit/8adf08dcb91146590f2c57b614de6a853054f297)

## [v2.0.0](https://github.com/inspect-js/node-deep-equal/compare/v1.1.2...v2.0.0) - 2019-12-03

### Fixed

- [Fix] handle circular references [`#19`](https://github.com/inspect-js/node-deep-equal/issues/19)
- [Breaking] compare `Map`, `Set`, `WeakMap`, `WeakSet` matching node assert [`#54`](https://github.com/inspect-js/node-deep-equal/issues/54) [`#46`](https://github.com/inspect-js/node-deep-equal/issues/46)
- [Breaking] compare `Map`, `Set`, `WeakMap`, `WeakSet` matching node assert [`#54`](https://github.com/inspect-js/node-deep-equal/issues/54) [`#46`](https://github.com/inspect-js/node-deep-equal/issues/46)
- [Breaking] comparing arrays and objects should always fail, per node‘s assert.deepEqual [`#12`](https://github.com/inspect-js/node-deep-equal/issues/12)

### Commits

- [Tests] add passing tests from node core [`91a6472`](https://github.com/inspect-js/node-deep-equal/commit/91a6472719331eca1b13472db798e7f3188af9f7)
- [Tests] convert remaining tests to use the custom assertion [`2bb7269`](https://github.com/inspect-js/node-deep-equal/commit/2bb7269013574a9a4e84ec5e34a04258f3ecd94a)
- [Tests] add tests for getters, fake arrays, overriding getTime on Dates [`1b66d90`](https://github.com/inspect-js/node-deep-equal/commit/1b66d90232a5a576d0334f0c109f8c79da487c9f)
- [Breaking] non-Date objects with different [[Prototypes]] are not equal [`5f2f2e5`](https://github.com/inspect-js/node-deep-equal/commit/5f2f2e55a3cfea251ca502a7846489a9133b4347)
- [Breaking] boxed primitives are not silently unboxed [`e207bc3`](https://github.com/inspect-js/node-deep-equal/commit/e207bc352f338a5c57b2ef2ce59d78b821fb2b58)
- [Tests] run tests with assert, as well [`ccaf3ea`](https://github.com/inspect-js/node-deep-equal/commit/ccaf3eabb081d255f9fafcf2cc2631eafaa9b2a7)
- [Breaking] boxed primitives are unwrapped for comparisons [`a159a3a`](https://github.com/inspect-js/node-deep-equal/commit/a159a3a0660a2da9a8ff6392aba4b2de81bc8391)
- [Refactor] use `side-channel` for memoizing circular refs [`983780a`](https://github.com/inspect-js/node-deep-equal/commit/983780aec338b8d909c3f6a5b1e0f4d7fe1d78b5)
- [Tests] Failing tests for Map equality [`4856185`](https://github.com/inspect-js/node-deep-equal/commit/4856185d989914e2f440fe3fd3bac4d977365fe2)
- [Tests] add `toStringTag` helper [`bb50ea2`](https://github.com/inspect-js/node-deep-equal/commit/bb50ea2e6d7906cd58683fdc7d327660e71612f4)
- [Fix] robustly unbox boxed primitives, using `unbox-primitive` [`c455998`](https://github.com/inspect-js/node-deep-equal/commit/c45599893f02f349604a7b39b39f45036ea2e499)
- [Breaking] two objects with different `Symbol.toStringTag`s are not equal [`45431b6`](https://github.com/inspect-js/node-deep-equal/commit/45431b67b5e7e9cb91d5ff8706dc55348d59184e)
- [Tests] add more Error tests [`c0ae38c`](https://github.com/inspect-js/node-deep-equal/commit/c0ae38c43872621da83aba608cd62b951de7c4c6)
- [Breaking] ensure `Error` objects compare properly [`ffb2522`](https://github.com/inspect-js/node-deep-equal/commit/ffb2522eb94afe46a8ccc23faebdcee23ea6f170)
- [Dev Deps] update `eslint`, `@ljharb/eslint-config` [`737031e`](https://github.com/inspect-js/node-deep-equal/commit/737031e9ac09812ec7181040e857d8b73b573970)
- [readme] update URLs, readme [`9d300da`](https://github.com/inspect-js/node-deep-equal/commit/9d300da78ce21dcca7259bb557765cfac0db3e16)
- [Tests] use `Buffer.from` when available [`43fa5da`](https://github.com/inspect-js/node-deep-equal/commit/43fa5dafe17b1287f56c2566c487a9c05946fe4f)
- [Breaking] add `exports` to `package.json` [`ecd15ae`](https://github.com/inspect-js/node-deep-equal/commit/ecd15aedeeddc8f386ed8b54296648ee4a73af9b)
- [Tests] require ASSERT tests to pass [`7ac77cf`](https://github.com/inspect-js/node-deep-equal/commit/7ac77cf21081b30eeadb5ac5201b30ad0d4dcbe4)
- [Robustness] use `callBound` from `es-abstract` [`4dc3477`](https://github.com/inspect-js/node-deep-equal/commit/4dc347792be1f7131b3095ba98590a599cce7e20)
- [patch] [[Prototype]]s are only compared in strict mode [`43b1eef`](https://github.com/inspect-js/node-deep-equal/commit/43b1eef2eb7bc3045fb160bf5d755bce44cbfd52)
- [Dev Deps] update `eslint`, `@ljharb/eslint-config`, `has-symbols` [`89228df`](https://github.com/inspect-js/node-deep-equal/commit/89228df447b174008e163f1c83c8f0f559e30fa0)
- [Tests] up to `node` `v12.9` [`595c81a`](https://github.com/inspect-js/node-deep-equal/commit/595c81a2e2c1baab216b2dac640ed020f49033bf)
- [Fix] pass options when comparing Collection keys/values [`9859584`](https://github.com/inspect-js/node-deep-equal/commit/9859584ae2f4f46ec602e18bac9610c71ff00e2f)
- [Breaking] `false` and `[]` are no longer equal, even non-strictly [`5c3accc`](https://github.com/inspect-js/node-deep-equal/commit/5c3acccf541ba0b77342c2a441b32a43acebc73e)
- [Tests] only use `Buffer.from` when it has a length of &gt; 1 [`3645129`](https://github.com/inspect-js/node-deep-equal/commit/3645129d7692c5195ae4b94ba83d2fe84d9538d7)
- [Breaking] remove `lib/is-arguments` and `lib/keys` entrypoints [`783d47e`](https://github.com/inspect-js/node-deep-equal/commit/783d47e3092b7a62aaecbf6836b18a0dfca96662)
- [Dev Deps] update `eslint` [`7cc1dd9`](https://github.com/inspect-js/node-deep-equal/commit/7cc1dd986fc30946ca06ba6496ef856cfb911cf3)
- Merge tag 'v1.1.1' [`f9d3c6d`](https://github.com/inspect-js/node-deep-equal/commit/f9d3c6d1e4a895c448ba7d8766f8616d0e235c9a)
- Merge tag 'v1.1.0' [`0aeca99`](https://github.com/inspect-js/node-deep-equal/commit/0aeca9988dba6fe3318f46c47c933e6926175278)

## [v1.1.2](https://github.com/inspect-js/node-deep-equal/compare/v1.1.1...v1.1.2) - 2023-11-08

### Commits

- [Tests] port tests from main; only diff should be true/falses [`e02cadb`](https://github.com/inspect-js/node-deep-equal/commit/e02cadb650ef9d75684c015a35d2c59e029d5174)
- [Dev Deps] update `@ljharb/eslint-config`, `auto-changelog`, `aud`, `eslint`, `set-publish-latest`, `tape` [`11bd45b`](https://github.com/inspect-js/node-deep-equal/commit/11bd45b63943466c13a5ae97276796396a8f2619)
- [Tests] update `.github` from default branch [`58885d3`](https://github.com/inspect-js/node-deep-equal/commit/58885d3280fd25909ca5a17c7cec1e54bdd25233)
- [readme] update readme from default branch [`b0bca9a`](https://github.com/inspect-js/node-deep-equal/commit/b0bca9a1158a9596ec51a0404a6a8272b70ee204)
- [Tests] add `nyc` for coverage [`e25bc37`](https://github.com/inspect-js/node-deep-equal/commit/e25bc3716c7ec0390b06bd7b6fac0c9ab0968ab4)
- [Tests] use `Buffer.from` when available [`f0d4a42`](https://github.com/inspect-js/node-deep-equal/commit/f0d4a42fb87854e17d78cb2d6e9ec0156ea3d2f3)
- [Deps] update `is-arguments`, `is-date-object`, `is-regex`, `object-is`, `regexp.prototype.flags` [`80c15ca`](https://github.com/inspect-js/node-deep-equal/commit/80c15cae82164c888de8635287c3b44ab84b3fd4)
- [meta] use `npmignore` to autogenerate an npmignore file [`e0770e5`](https://github.com/inspect-js/node-deep-equal/commit/e0770e594ec683ded32fd1b14e876f087fc04f4a)
- [Deps] update `is-date-object`, `is-regex`, `object-is`, `regexp.prototype.flags` [`e4fb8c6`](https://github.com/inspect-js/node-deep-equal/commit/e4fb8c6459aa13d3a110b45e5612c31890a5d94e)
- [Tests] handle ported test failures in iojs v2 [`3798ff4`](https://github.com/inspect-js/node-deep-equal/commit/3798ff490286ee9ba70cf50c339914be355eea18)
- [Dev Deps] update `eslint`, `@ljharb/eslint-config`, `tape` [`0f8ca75`](https://github.com/inspect-js/node-deep-equal/commit/0f8ca7575e44c66fdf1dc2b6ad4e69e1b549369f)
- [Tests] handle some additional test differences in node &lt;= 0.10 [`197a220`](https://github.com/inspect-js/node-deep-equal/commit/197a2203f0a95828c62ff2b3c980ddf16736913c)
- [meta] add missing `engines.node` [`e158993`](https://github.com/inspect-js/node-deep-equal/commit/e158993fcf913aca8a1ffdc037abfeeb3a5cb4e5)
- [meta] update `.gitignore` from default branch [`6ee186b`](https://github.com/inspect-js/node-deep-equal/commit/6ee186bd39199a1c05421e200b1e8e31a83cf363)
- [Dev Deps] update `tape` [`270d34b`](https://github.com/inspect-js/node-deep-equal/commit/270d34b48401ee40792bf18d06614044246776dd)
- [meta] fix URLs [`a269c18`](https://github.com/inspect-js/node-deep-equal/commit/a269c183bccb78dfdd2c88a149fe5373f13af4c0)
- [Tests] only use `Buffer.from` when it has a length of &gt; 1 [`f7e5776`](https://github.com/inspect-js/node-deep-equal/commit/f7e577622d943da78c2c9cd1e070eb786cf7a68b)

## [v1.1.1](https://github.com/inspect-js/node-deep-equal/compare/v1.1.0...v1.1.1) - 2019-11-12

### Commits

- [Tests] use shared travis-ci configs [`678cb2a`](https://github.com/inspect-js/node-deep-equal/commit/678cb2a34ef920eab563af69bdf402b9273c3e2c)
- [meta] add `auto-changelog` [`569bcce`](https://github.com/inspect-js/node-deep-equal/commit/569bcce030784f7506367055122c54c6cac00ebc)
- [Dev Deps] update `eslint`, `@ljharb/eslint-config`; add `safe-publish-latest` [`9dedd40`](https://github.com/inspect-js/node-deep-equal/commit/9dedd409cb74c538153287db546a14f2fa583e6f)
- [Tests] add `npx aud` in `posttest` [`0b76639`](https://github.com/inspect-js/node-deep-equal/commit/0b766394504f74d002ad85e7b8244ce89bb27130)
- [meta] add `funding` field [`3e519e3`](https://github.com/inspect-js/node-deep-equal/commit/3e519e36998ea82120cfe9a509dc0090a87d7063)

## [v1.1.0](https://github.com/inspect-js/node-deep-equal/compare/v1.0.1...v1.1.0) - 2019-08-27

### Commits

- [Tests] up to `node` `v12.7`, `v11.15`, `v10.16`, `v9.11`, `v8.16`, `v7.10`, `v6.17`, `4.9`; use `nvm install-latest-npm` [`ba11166`](https://github.com/inspect-js/node-deep-equal/commit/ba111664928f3a9279528dd05330b974950003b4)
- [Tests] make a `tape` helper, to easily compare loose/strict, and (a,b)/(b,a) arg order [`0c25e94`](https://github.com/inspect-js/node-deep-equal/commit/0c25e9438b2d4a96e75c3c2e6fbb353ae450ed1f)
- [Tests] add `npm run lint` [`8590816`](https://github.com/inspect-js/node-deep-equal/commit/8590816be6bc57a07fbc160985f5f04f11c7fa97)
- test: Fails simple array tests on IE &lt; 9 #10 [`bc37498`](https://github.com/inspect-js/node-deep-equal/commit/bc374988ee763a881ef39d8f6949838ec4df4e64)
- [Tests] clean up/flesh out test cases [`3fffed9`](https://github.com/inspect-js/node-deep-equal/commit/3fffed9a7e095bbf922561fa0b18681422861af8)
- [Fix] (array,arguments) now behaves the same as (arguments,array) [`a9528ff`](https://github.com/inspect-js/node-deep-equal/commit/a9528ff71561c303e722eb5ae0a3b9b2ecae4a3b)
- [Refactor] move Date and RegExp tests into `objEquiv` [`5b3bf31`](https://github.com/inspect-js/node-deep-equal/commit/5b3bf315b603f00bab49e78c05c075cdc0dfd506)
- [Fix] properly compare RegExp objects [`b8c179c`](https://github.com/inspect-js/node-deep-equal/commit/b8c179c5aa91c8a2f71f053e2d9e2d477780250e)
- [Refactor] Use `object-keys` and `is-arguments` instead of a homegrown shim. [`3b503fb`](https://github.com/inspect-js/node-deep-equal/commit/3b503fb262c431df72a6c91cbb384be557315645)
- [Fix] use `object-is` to support `NaN` and `-0` properly [`28fde4a`](https://github.com/inspect-js/node-deep-equal/commit/28fde4a411073e3131d3637248f8c25aac9329f2)
- [meta] fix license text so GitHub can detect it [`7000403`](https://github.com/inspect-js/node-deep-equal/commit/700040347119ce46b3e917e800d87628af1384f9)
- [Tests] add array/object tests [`558eecf`](https://github.com/inspect-js/node-deep-equal/commit/558eecf9daa815468f0bc4c9799041507b7ffa15)
- [Fix] ensure Buffer + non-Buffer comparison order does not matter [`de4e75c`](https://github.com/inspect-js/node-deep-equal/commit/de4e75ce7f0621cdc09ae8cbdc82de9e4c17578e)
- [Refactor] `objEquiv`: bail early if typeofs are different [`410e2d6`](https://github.com/inspect-js/node-deep-equal/commit/410e2d63730763e7e92c9b45b916f97058ab31f7)
- [Tests] add tests for `Object.create(null)` [`ed266e8`](https://github.com/inspect-js/node-deep-equal/commit/ed266e8571d1efdbb4ece0a01f849cbc57461076)
- [Refactor] there is no need to do further compareation when two types are not equal [`6a5efc1`](https://github.com/inspect-js/node-deep-equal/commit/6a5efc130e96398de55cf517969746c52735f34b)
- Only apps should have lockfiles [`f60442f`](https://github.com/inspect-js/node-deep-equal/commit/f60442fa6fd10004366d80481ada7df668bd6adb)
- [Tests] clean up redundant test [`cbbef21`](https://github.com/inspect-js/node-deep-equal/commit/cbbef21045e3b2e1ee30f6d0a83381d489df296e)
- [Fix] use `is-date-object` to properly detect cross-realm Dates [`0c5b21a`](https://github.com/inspect-js/node-deep-equal/commit/0c5b21ad245d1427caefe20b2bace752cbe5e493)
- [meta] Add copyright statements [`56a7746`](https://github.com/inspect-js/node-deep-equal/commit/56a774674f55bb3e0627aaec4dda90e4a06df7d6)
- [Dev Deps] update `tape` [`3e9c1b9`](https://github.com/inspect-js/node-deep-equal/commit/3e9c1b903703e32bbed45fddcae815eb25822fd4)

## [v1.0.1](https://github.com/inspect-js/node-deep-equal/compare/v1.0.0...v1.0.1) - 2015-08-29

### Fixed

- Null should == undefined [`#23`](https://github.com/inspect-js/node-deep-equal/issues/23)

### Commits

- Update travis.yml to modern node [`5055802`](https://github.com/inspect-js/node-deep-equal/commit/5055802274a85a3e1493fa1b7378499554c6a4dc)

## [v1.0.0](https://github.com/inspect-js/node-deep-equal/compare/v0.2.2...v1.0.0) - 2015-02-07

## [v0.2.2](https://github.com/inspect-js/node-deep-equal/compare/v0.2.1...v0.2.2) - 2015-02-07

### Commits

- latest tape [`1d18617`](https://github.com/inspect-js/node-deep-equal/commit/1d18617608316a034c8ee6727838c9b82614f0f9)
- add type check to support browsers [`3acb0d7`](https://github.com/inspect-js/node-deep-equal/commit/3acb0d7fb8915fb7f1ca97701b5761793738bad3)

## [v0.2.1](https://github.com/inspect-js/node-deep-equal/compare/v0.2.0...v0.2.1) - 2014-01-29

### Commits

- license file [`b3431d4`](https://github.com/inspect-js/node-deep-equal/commit/b3431d48e0f7c406a08d0e077f2dd9580d4561ae)

## [v0.2.0](https://github.com/inspect-js/node-deep-equal/compare/v0.1.2...v0.2.0) - 2014-01-29

### Commits

- buffer check without Buffer [`5271f39`](https://github.com/inspect-js/node-deep-equal/commit/5271f39f3ce61fecb71fa6ca28cb4a8a8b963bbd)
- failing test for buffer comparison [`cc8990b`](https://github.com/inspect-js/node-deep-equal/commit/cc8990b9d84a2267d84253e21c9f7db238e961e9)

## [v0.1.2](https://github.com/inspect-js/node-deep-equal/compare/v0.1.1...v0.1.2) - 2013-12-20

### Commits

- test the arguments shim and properly factor out the arguments handling [`cf88b9c`](https://github.com/inspect-js/node-deep-equal/commit/cf88b9c2e87d6050ba1a46a82be216d0244ee428)
- more coverage for the keys shim [`7a41f0e`](https://github.com/inspect-js/node-deep-equal/commit/7a41f0ec813616b0e1272c2bf463028a84d51c99)
- test coverage for the non-object case [`abd3358`](https://github.com/inspect-js/node-deep-equal/commit/abd33586af0006e8492bbcdb1eb27a306359b03c)
- fix the argument comparisons to properly call equal() [`0114a10`](https://github.com/inspect-js/node-deep-equal/commit/0114a10398e386ab0e073966e8525cd2ce125de4)
- more code coverage for date comparisons [`41ac40e`](https://github.com/inspect-js/node-deep-equal/commit/41ac40e844b10833a75a39ea92e73bcdb1ae3cd9)
- use the latest version of tape [`f8341cb`](https://github.com/inspect-js/node-deep-equal/commit/f8341cbff475ee7ee1ec651662cb5bd621c75838)
- use https: for the badges [`514b332`](https://github.com/inspect-js/node-deep-equal/commit/514b332e9c2390c89c5beac8cf866c2f9a4afa9e)
- 100% coverage [`e55aac7`](https://github.com/inspect-js/node-deep-equal/commit/e55aac78a6e013d6f5a10febc7009476a8f10ca5)

## [v0.1.1](https://github.com/inspect-js/node-deep-equal/compare/v0.1.0...v0.1.1) - 2013-12-20

### Commits

- Fixed arguments support for IE8- [`174d41a`](https://github.com/inspect-js/node-deep-equal/commit/174d41a5559820458648d237ebedfe78e44f7430)

## [v0.1.0](https://github.com/inspect-js/node-deep-equal/compare/v0.0.0...v0.1.0) - 2013-10-14

### Commits

- upgrade the markdown [`30e1f8f`](https://github.com/inspect-js/node-deep-equal/commit/30e1f8fe5b1fb7d5d68b156bf69bb04a7bb807a3)
- opts.strict instead of a boolean arg [`58cbdb2`](https://github.com/inspect-js/node-deep-equal/commit/58cbdb2a97e623a68310833218af5ada6c97c2ce)
- using testling-ci [`064af17`](https://github.com/inspect-js/node-deep-equal/commit/064af170f895fc67ec4bbf654e7de27721cf40c0)
- Add optional strict parameter [`f3413b1`](https://github.com/inspect-js/node-deep-equal/commit/f3413b1d95e261f735939fbcaee65e598fe92852)
- strict equality test [`281189b`](https://github.com/inspect-js/node-deep-equal/commit/281189b6962c9c57105474d01a8127da3318f555)
- document opts.strict [`69fae5a`](https://github.com/inspect-js/node-deep-equal/commit/69fae5ab4b9278e28d09864c62dcfe9b4f00c1d8)
- using tape [`4384db8`](https://github.com/inspect-js/node-deep-equal/commit/4384db8a9cc7af1cf79e1976d1b36e66934b2b4c)
- using travis [`e508692`](https://github.com/inspect-js/node-deep-equal/commit/e5086928e1edf120d227d5e7f5e6ac4d755248a1)
- deepEquals comparing nulls seems to break in ie6-8 [`b2cfeb9`](https://github.com/inspect-js/node-deep-equal/commit/b2cfeb95da6982f8bc2e676231820a3a47385db3)
- performance note in the readme [`da9bfc9`](https://github.com/inspect-js/node-deep-equal/commit/da9bfc9aadfb9045bbf8157e9403de7184b404fd)
- more firefoxes [`3d60ec5`](https://github.com/inspect-js/node-deep-equal/commit/3d60ec58d6fe269c13c5be04b749f01972aa5b1c)

## v0.0.0 - 2012-02-10

### Commits

- implementation with an example [`2dd56f9`](https://github.com/inspect-js/node-deep-equal/commit/2dd56f9e6d42e841c74289c2e2d489047d077622)
- readme [`4a44f99`](https://github.com/inspect-js/node-deep-equal/commit/4a44f99bea3277e32d9842d9d49ac21f316ac74d)
- and a test [`357ccd3`](https://github.com/inspect-js/node-deep-equal/commit/357ccd37d23ba7814c8fe284d36d6e86a39b7526)
- actually just MIT [`3d348c8`](https://github.com/inspect-js/node-deep-equal/commit/3d348c88fc92ce1d69a3fedbb2aa8cb6ea1480f7)


---

File name: node_modules\deep-equal\example\cmp.js

Code:
'use strict';

var equal = require('../');
console.dir([
  equal(
    { a: [2, 3], b: [4] },
    { a: [2, 3], b: [4] }
  ),
  equal(
    { x: 5, y: [6] },
    { x: 5, y: 6 }
  )
]);


---

File name: node_modules\deep-equal\index.js

Code:
'use strict';

var assign = require('object.assign');
var callBound = require('call-bind/callBound');
var flags = require('regexp.prototype.flags');
var GetIntrinsic = require('get-intrinsic');
var getIterator = require('es-get-iterator');
var getSideChannel = require('side-channel');
var is = require('object-is');
var isArguments = require('is-arguments');
var isArray = require('isarray');
var isArrayBuffer = require('is-array-buffer');
var isDate = require('is-date-object');
var isRegex = require('is-regex');
var isSharedArrayBuffer = require('is-shared-array-buffer');
var objectKeys = require('object-keys');
var whichBoxedPrimitive = require('which-boxed-primitive');
var whichCollection = require('which-collection');
var whichTypedArray = require('which-typed-array');
var byteLength = require('array-buffer-byte-length');

var sabByteLength = callBound('SharedArrayBuffer.prototype.byteLength', true);

var $getTime = callBound('Date.prototype.getTime');
var gPO = Object.getPrototypeOf;
var $objToString = callBound('Object.prototype.toString');

var $Set = GetIntrinsic('%Set%', true);
var $mapHas = callBound('Map.prototype.has', true);
var $mapGet = callBound('Map.prototype.get', true);
var $mapSize = callBound('Map.prototype.size', true);
var $setAdd = callBound('Set.prototype.add', true);
var $setDelete = callBound('Set.prototype.delete', true);
var $setHas = callBound('Set.prototype.has', true);
var $setSize = callBound('Set.prototype.size', true);

// taken from https://github.com/browserify/commonjs-assert/blob/bba838e9ba9e28edf3127ce6974624208502f6bc/internal/util/comparisons.js#L401-L414
function setHasEqualElement(set, val1, opts, channel) {
  var i = getIterator(set);
  var result;
  while ((result = i.next()) && !result.done) {
    if (internalDeepEqual(val1, result.value, opts, channel)) { // eslint-disable-line no-use-before-define
      // Remove the matching element to make sure we do not check that again.
      $setDelete(set, result.value);
      return true;
    }
  }

  return false;
}

// taken from https://github.com/browserify/commonjs-assert/blob/bba838e9ba9e28edf3127ce6974624208502f6bc/internal/util/comparisons.js#L416-L439
function findLooseMatchingPrimitives(prim) {
  if (typeof prim === 'undefined') {
    return null;
  }
  if (typeof prim === 'object') { // Only pass in null as object!
    return void 0;
  }
  if (typeof prim === 'symbol') {
    return false;
  }
  if (typeof prim === 'string' || typeof prim === 'number') {
    // Loose equal entries exist only if the string is possible to convert to a regular number and not NaN.
    return +prim === +prim; // eslint-disable-line no-implicit-coercion
  }
  return true;
}

// taken from https://github.com/browserify/commonjs-assert/blob/bba838e9ba9e28edf3127ce6974624208502f6bc/internal/util/comparisons.js#L449-L460
function mapMightHaveLoosePrim(a, b, prim, item, opts, channel) {
  var altValue = findLooseMatchingPrimitives(prim);
  if (altValue != null) {
    return altValue;
  }
  var curB = $mapGet(b, altValue);
  var looseOpts = assign({}, opts, { strict: false });
  if (
    (typeof curB === 'undefined' && !$mapHas(b, altValue))
    // eslint-disable-next-line no-use-before-define
    || !internalDeepEqual(item, curB, looseOpts, channel)
  ) {
    return false;
  }
  // eslint-disable-next-line no-use-before-define
  return !$mapHas(a, altValue) && internalDeepEqual(item, curB, looseOpts, channel);
}

// taken from https://github.com/browserify/commonjs-assert/blob/bba838e9ba9e28edf3127ce6974624208502f6bc/internal/util/comparisons.js#L441-L447
function setMightHaveLoosePrim(a, b, prim) {
  var altValue = findLooseMatchingPrimitives(prim);
  if (altValue != null) {
    return altValue;
  }

  return $setHas(b, altValue) && !$setHas(a, altValue);
}

// taken from https://github.com/browserify/commonjs-assert/blob/bba838e9ba9e28edf3127ce6974624208502f6bc/internal/util/comparisons.js#L518-L533
function mapHasEqualEntry(set, map, key1, item1, opts, channel) {
  var i = getIterator(set);
  var result;
  var key2;
  while ((result = i.next()) && !result.done) {
    key2 = result.value;
    if (
      // eslint-disable-next-line no-use-before-define
      internalDeepEqual(key1, key2, opts, channel)
      // eslint-disable-next-line no-use-before-define
      && internalDeepEqual(item1, $mapGet(map, key2), opts, channel)
    ) {
      $setDelete(set, key2);
      return true;
    }
  }

  return false;
}

function internalDeepEqual(actual, expected, options, channel) {
  var opts = options || {};

  // 7.1. All identical values are equivalent, as determined by ===.
  if (opts.strict ? is(actual, expected) : actual === expected) {
    return true;
  }

  var actualBoxed = whichBoxedPrimitive(actual);
  var expectedBoxed = whichBoxedPrimitive(expected);
  if (actualBoxed !== expectedBoxed) {
    return false;
  }

  // 7.3. Other pairs that do not both pass typeof value == 'object', equivalence is determined by ==.
  if (!actual || !expected || (typeof actual !== 'object' && typeof expected !== 'object')) {
    return opts.strict ? is(actual, expected) : actual == expected; // eslint-disable-line eqeqeq
  }

  /*
   * 7.4. For all other Object pairs, including Array objects, equivalence is
   * determined by having the same number of owned properties (as verified
   * with Object.prototype.hasOwnProperty.call), the same set of keys
   * (although not necessarily the same order), equivalent values for every
   * corresponding key, and an identical 'prototype' property. Note: this
   * accounts for both named and indexed properties on Arrays.
   */
  // see https://github.com/nodejs/node/commit/d3aafd02efd3a403d646a3044adcf14e63a88d32 for memos/channel inspiration

  var hasActual = channel.has(actual);
  var hasExpected = channel.has(expected);
  var sentinel;
  if (hasActual && hasExpected) {
    if (channel.get(actual) === channel.get(expected)) {
      return true;
    }
  } else {
    sentinel = {};
  }
  if (!hasActual) { channel.set(actual, sentinel); }
  if (!hasExpected) { channel.set(expected, sentinel); }

  // eslint-disable-next-line no-use-before-define
  return objEquiv(actual, expected, opts, channel);
}

function isBuffer(x) {
  if (!x || typeof x !== 'object' || typeof x.length !== 'number') {
    return false;
  }
  if (typeof x.copy !== 'function' || typeof x.slice !== 'function') {
    return false;
  }
  if (x.length > 0 && typeof x[0] !== 'number') {
    return false;
  }

  return !!(x.constructor && x.constructor.isBuffer && x.constructor.isBuffer(x));
}

function setEquiv(a, b, opts, channel) {
  if ($setSize(a) !== $setSize(b)) {
    return false;
  }
  var iA = getIterator(a);
  var iB = getIterator(b);
  var resultA;
  var resultB;
  var set;
  while ((resultA = iA.next()) && !resultA.done) {
    if (resultA.value && typeof resultA.value === 'object') {
      if (!set) { set = new $Set(); }
      $setAdd(set, resultA.value);
    } else if (!$setHas(b, resultA.value)) {
      if (opts.strict) { return false; }
      if (!setMightHaveLoosePrim(a, b, resultA.value)) {
        return false;
      }
      if (!set) { set = new $Set(); }
      $setAdd(set, resultA.value);
    }
  }
  if (set) {
    while ((resultB = iB.next()) && !resultB.done) {
      // We have to check if a primitive value is already matching and only if it's not, go hunting for it.
      if (resultB.value && typeof resultB.value === 'object') {
        if (!setHasEqualElement(set, resultB.value, opts.strict, channel)) {
          return false;
        }
      } else if (
        !opts.strict
        && !$setHas(a, resultB.value)
        && !setHasEqualElement(set, resultB.value, opts.strict, channel)
      ) {
        return false;
      }
    }
    return $setSize(set) === 0;
  }
  return true;
}

function mapEquiv(a, b, opts, channel) {
  if ($mapSize(a) !== $mapSize(b)) {
    return false;
  }
  var iA = getIterator(a);
  var iB = getIterator(b);
  var resultA;
  var resultB;
  var set;
  var key;
  var item1;
  var item2;
  while ((resultA = iA.next()) && !resultA.done) {
    key = resultA.value[0];
    item1 = resultA.value[1];
    if (key && typeof key === 'object') {
      if (!set) { set = new $Set(); }
      $setAdd(set, key);
    } else {
      item2 = $mapGet(b, key);
      if ((typeof item2 === 'undefined' && !$mapHas(b, key)) || !internalDeepEqual(item1, item2, opts, channel)) {
        if (opts.strict) {
          return false;
        }
        if (!mapMightHaveLoosePrim(a, b, key, item1, opts, channel)) {
          return false;
        }
        if (!set) { set = new $Set(); }
        $setAdd(set, key);
      }
    }
  }

  if (set) {
    while ((resultB = iB.next()) && !resultB.done) {
      key = resultB.value[0];
      item2 = resultB.value[1];
      if (key && typeof key === 'object') {
        if (!mapHasEqualEntry(set, a, key, item2, opts, channel)) {
          return false;
        }
      } else if (
        !opts.strict
        && (!a.has(key) || !internalDeepEqual($mapGet(a, key), item2, opts, channel))
        && !mapHasEqualEntry(set, a, key, item2, assign({}, opts, { strict: false }), channel)
      ) {
        return false;
      }
    }
    return $setSize(set) === 0;
  }
  return true;
}

function objEquiv(a, b, opts, channel) {
  /* eslint max-statements: [2, 100], max-lines-per-function: [2, 120], max-depth: [2, 5], max-lines: [2, 400] */
  var i, key;

  if (typeof a !== typeof b) { return false; }
  if (a == null || b == null) { return false; }

  if ($objToString(a) !== $objToString(b)) { return false; }

  if (isArguments(a) !== isArguments(b)) { return false; }

  var aIsArray = isArray(a);
  var bIsArray = isArray(b);
  if (aIsArray !== bIsArray) { return false; }

  // TODO: replace when a cross-realm brand check is available
  var aIsError = a instanceof Error;
  var bIsError = b instanceof Error;
  if (aIsError !== bIsError) { return false; }
  if (aIsError || bIsError) {
    if (a.name !== b.name || a.message !== b.message) { return false; }
  }

  var aIsRegex = isRegex(a);
  var bIsRegex = isRegex(b);
  if (aIsRegex !== bIsRegex) { return false; }
  if ((aIsRegex || bIsRegex) && (a.source !== b.source || flags(a) !== flags(b))) {
    return false;
  }

  var aIsDate = isDate(a);
  var bIsDate = isDate(b);
  if (aIsDate !== bIsDate) { return false; }
  if (aIsDate || bIsDate) { // && would work too, because both are true or both false here
    if ($getTime(a) !== $getTime(b)) { return false; }
  }
  if (opts.strict && gPO && gPO(a) !== gPO(b)) { return false; }

  var aWhich = whichTypedArray(a);
  var bWhich = whichTypedArray(b);
  if (aWhich !== bWhich) {
    return false;
  }
  if (aWhich || bWhich) { // && would work too, because both are true or both false here
    if (a.length !== b.length) { return false; }
    for (i = 0; i < a.length; i++) {
      if (a[i] !== b[i]) { return false; }
    }
    return true;
  }

  var aIsBuffer = isBuffer(a);
  var bIsBuffer = isBuffer(b);
  if (aIsBuffer !== bIsBuffer) { return false; }
  if (aIsBuffer || bIsBuffer) { // && would work too, because both are true or both false here
    if (a.length !== b.length) { return false; }
    for (i = 0; i < a.length; i++) {
      if (a[i] !== b[i]) { return false; }
    }
    return true;
  }

  var aIsArrayBuffer = isArrayBuffer(a);
  var bIsArrayBuffer = isArrayBuffer(b);
  if (aIsArrayBuffer !== bIsArrayBuffer) { return false; }
  if (aIsArrayBuffer || bIsArrayBuffer) { // && would work too, because both are true or both false here
    if (byteLength(a) !== byteLength(b)) { return false; }
    return typeof Uint8Array === 'function' && internalDeepEqual(new Uint8Array(a), new Uint8Array(b), opts, channel);
  }

  var aIsSAB = isSharedArrayBuffer(a);
  var bIsSAB = isSharedArrayBuffer(b);
  if (aIsSAB !== bIsSAB) { return false; }
  if (aIsSAB || bIsSAB) { // && would work too, because both are true or both false here
    if (sabByteLength(a) !== sabByteLength(b)) { return false; }
    return typeof Uint8Array === 'function' && internalDeepEqual(new Uint8Array(a), new Uint8Array(b), opts, channel);
  }

  if (typeof a !== typeof b) { return false; }

  var ka = objectKeys(a);
  var kb = objectKeys(b);
  // having the same number of owned properties (keys incorporates hasOwnProperty)
  if (ka.length !== kb.length) { return false; }

  // the same set of keys (although not necessarily the same order),
  ka.sort();
  kb.sort();
  // ~~~cheap key test
  for (i = ka.length - 1; i >= 0; i--) {
    if (ka[i] != kb[i]) { return false; } // eslint-disable-line eqeqeq
  }

  // equivalent values for every corresponding key, and ~~~possibly expensive deep test
  for (i = ka.length - 1; i >= 0; i--) {
    key = ka[i];
    if (!internalDeepEqual(a[key], b[key], opts, channel)) { return false; }
  }

  var aCollection = whichCollection(a);
  var bCollection = whichCollection(b);
  if (aCollection !== bCollection) {
    return false;
  }
  if (aCollection === 'Set' || bCollection === 'Set') { // aCollection === bCollection
    return setEquiv(a, b, opts, channel);
  }
  if (aCollection === 'Map') { // aCollection === bCollection
    return mapEquiv(a, b, opts, channel);
  }

  return true;
}

module.exports = function deepEqual(a, b, opts) {
  return internalDeepEqual(a, b, opts, getSideChannel());
};


---

File name: node_modules\deep-equal\package.json

Code:
{
  "name": "deep-equal",
  "version": "2.2.3",
  "description": "node's assert.deepEqual algorithm",
  "main": "index.js",
  "exports": {
    ".": [
      {
        "default": "./index.js"
      },
      "./index.js"
    ],
    "./package": "./package.json",
    "./package.json": "./package.json"
  },
  "directories": {
    "lib": ".",
    "example": "example",
    "test": "test"
  },
  "scripts": {
    "prepack": "npmignore --auto --commentLines=autogenerated",
    "prepublish": "not-in-publish || npm run prepublishOnly",
    "prepublishOnly": "safe-publish-latest",
    "pretest": "npm run lint",
    "lint": "eslint --ext=js,mjs .",
    "tests-only": "nyc tape 'test/**/*.js'",
    "test": "npm run tests-only",
    "posttest": "aud --production",
    "version": "auto-changelog && git add CHANGELOG.md",
    "postversion": "auto-changelog && git add CHANGELOG.md && git commit --no-edit --amend && git tag -f \"v$(node -e \"console.log(require('./package.json').version)\")\""
  },
  "dependencies": {
    "array-buffer-byte-length": "^1.0.0",
    "call-bind": "^1.0.5",
    "es-get-iterator": "^1.1.3",
    "get-intrinsic": "^1.2.2",
    "is-arguments": "^1.1.1",
    "is-array-buffer": "^3.0.2",
    "is-date-object": "^1.0.5",
    "is-regex": "^1.1.4",
    "is-shared-array-buffer": "^1.0.2",
    "isarray": "^2.0.5",
    "object-is": "^1.1.5",
    "object-keys": "^1.1.1",
    "object.assign": "^4.1.4",
    "regexp.prototype.flags": "^1.5.1",
    "side-channel": "^1.0.4",
    "which-boxed-primitive": "^1.0.2",
    "which-collection": "^1.0.1",
    "which-typed-array": "^1.1.13"
  },
  "devDependencies": {
    "@ljharb/eslint-config": "^21.1.0",
    "aud": "^2.0.3",
    "auto-changelog": "^2.4.0",
    "available-typed-arrays": "^1.0.5",
    "eslint": "=8.8.0",
    "for-each": "^0.3.3",
    "has-proto": "^1.0.1",
    "has-symbols": "^1.0.3",
    "has-typed-arrays": "^1.0.1",
    "in-publish": "^2.0.1",
    "npmignore": "^0.3.0",
    "nyc": "^10.3.2",
    "object.getownpropertydescriptors": "^2.1.7",
    "safe-publish-latest": "^2.0.0",
    "semver": "^6.3.1",
    "tape": "^5.7.2"
  },
  "repository": {
    "type": "git",
    "url": "http://github.com/inspect-js/node-deep-equal.git"
  },
  "keywords": [
    "equality",
    "equal",
    "compare"
  ],
  "author": {
    "name": "James Halliday",
    "email": "mail@substack.net",
    "url": "http://substack.net"
  },
  "contributors": [
    "James Halliday <mail@substack.net> (https://substack.net)",
    "Jordan Harband <ljharb@gmail.com>"
  ],
  "funding": {
    "url": "https://github.com/sponsors/ljharb"
  },
  "license": "MIT",
  "engines": {
    "node": ">= 0.4"
  },
  "testling": {
    "files": "test/*.js",
    "browsers": {
      "ie": [
        6,
        7,
        8,
        9
      ],
      "ff": [
        3.5,
        10,
        15
      ],
      "chrome": [
        10,
        22
      ],
      "safari": [
        5.1
      ],
      "opera": [
        12
      ]
    }
  },
  "auto-changelog": {
    "output": "CHANGELOG.md",
    "template": "keepachangelog",
    "unreleased": false,
    "commitLimit": false,
    "backfillLimit": false,
    "hideCredit": true
  },
  "browser": {
    "assert.js": false
  },
  "publishConfig": {
    "ignore": [
      ".github/workflows"
    ]
  }
}


---

File name: node_modules\deep-equal\test\cmp.js

Code:
'use strict';

var test = require('tape');
require('./_tape');
var assign = require('object.assign');
var gOPDs = require('object.getownpropertydescriptors');
var hasSymbols = require('has-symbols')();
var hasTypedArrays = require('has-typed-arrays')();
var semver = require('semver');
var keys = require('object-keys');
var availableTypedArrays = require('available-typed-arrays')();
var forEach = require('for-each');
var hasProto = require('has-proto')();

var safeBuffer = typeof Buffer === 'function' ? Buffer.from && Buffer.from.length > 1 ? Buffer.from : Buffer : null;
var buffersAreTypedArrays = typeof Buffer === 'function' && new Buffer(0) instanceof Uint8Array;

var isNode = typeof process === 'object' && typeof process.version === 'string';

function tag(obj, value) {
  if (hasSymbols && Symbol.toStringTag && Object.defineProperty) {
    Object.defineProperty(obj, Symbol.toStringTag, {
      value: value
    });
  }
  return obj;
}

test('equal', function (t) {
  t.deepEqualTest(
    { a: [2, 3], b: [4] },
    { a: [2, 3], b: [4] },
    'two equal objects',
    true,
    true,
    false
  );

  var obj1 = { a: [2, 3], b: [4] };
  var obj2 = { b: [4], a: [2, 3] };
  t.notDeepEqual(keys(obj1), keys(obj2), 'keys are in a different order');
  t.deepEqual(keys(obj1), keys(obj2).reverse(), 'keys are in opposite order');
  t.deepEqualTest(
    obj1,
    obj2,
    'two equal objects, in different order',
    true,
    true
  );

  t.deepEqualTest(
    { a: 2, b: '4' },
    { a: 2, b: 4 },
    'two loosely equal, strictly inequal objects',
    true,
    false
  );

  t.deepEqualTest(
    { a: 2, b: 4 },
    { a: 2, B: 4 },
    'two inequal objects',
    false,
    false
  );

  t.deepEqualTest(
    '-000',
    false,
    '`false` and `"-000"`',
    true,
    false
  );

  t.end();
});

test('Maps', { skip: typeof Map !== 'function' }, function (t) {
  t.deepEqualTest(
    new Map([['a', 1], ['b', 2]]),
    new Map([['b', 2], ['a', 1]]),
    'two equal Maps',
    true,
    true
  );

  t.deepEqualTest(
    new Map([['a', [1, 2]]]),
    new Map([['a', [2, 1]]]),
    'two Maps with inequal values on the same key',
    false,
    false
  );

  t.deepEqualTest(
    new Map([['a', 1]]),
    new Map([['b', 1]]),
    'two inequal Maps',
    false,
    false
  );

  t.deepEqualTest(
    new Map([[{}, 3], [{}, 2], [{}, 1]]),
    new Map([[{}, 1], [{}, 2], [{}, 3]]),
    'two equal Maps in different orders with object keys',
    true,
    true
  );

  t.deepEqualTest(
    new Map([[undefined, undefined]]),
    new Map([[undefined, null]]),
    'undefined keys, nullish values, loosely equal, strictly inequal',
    true,
    false
  );

  t.deepEqualTest(
    new Map([[{}, null], [true, 2], [{}, 1], [undefined, {}]]),
    new Map([[{}, 1], [true, 2], [{}, null], [undefined, {}]]),
    'two equal Maps in different orders with primitive keys',
    true,
    true
  );

  t.deepEqualTest(
    new Map([[false, 3], [{}, 2], [{}, 1]]),
    new Map([[{}, 1], [{}, 2], [false, 3]]),
    'two equal Maps in different orders with a mix of keys',
    true,
    true
  );

  t.deepEqualTest(
    new Map([[null, undefined]]),
    new Map([[null, null]]),
    'null keys, nullish values, loosely equal, strictly inequal',
    true,
    false
  );

  t.deepEqualTest(
    new Map([[undefined, 3]]),
    new Map([[null, 3]]),
    'nullish keys, loosely equal, strictly inequal',
    true,
    false
  );

  t.deepEqualTest(
    new Map([[{}, null], [true, 2], [{}, 1], [undefined, {}]]),
    new Map([[{}, 1], [true, 2], [{}, null], [undefined, {}]]),
    'two equal Maps in different orders with primitive keys',
    true,
    true
  );

  t.deepEqualTest(
    new Map([[false, 3], [{}, 2], [{}, 1]]),
    new Map([[{}, 1], [{}, 2], [false, 3]]),
    'two equal Maps in different orders with a mix of keys',
    true,
    true
  );

  t.deepEqualTest(
    new Map(),
    new Map([[{}, 1]]),
    'two inequal Maps',
    false,
    false
  );

  t.deepEqualTest(
    new Map([[{}, null], [false, 3]]),
    new Map([[{}, null], [true, 2]]),
    'two inequal maps, same size, primitive key, start with object key',
    false,
    false
  );

  t.deepEqualTest(
    new Map([[false, 3], [{}, null]]),
    new Map([[true, 2], [{}, null]]),
    'two inequal maps, same size, primitive key, start with primitive key',
    false,
    false
  );

  t.deepEqualTest(
    new Map([[undefined, null], ['+000', 2]]),
    new Map([[null, undefined], [false, '2']]),
    'primitive comparisons',
    true,
    false
  );

  t.end();
});

test('WeakMaps', { skip: typeof WeakMap !== 'function' }, function (t) {
  t.deepEqualTest(
    new WeakMap([[Object, null], [Function, true]]),
    new WeakMap([[Function, true], [Object, null]]),
    'two equal WeakMaps',
    true,
    true
  );

  t.deepEqualTest(
    new WeakMap([[Object, null]]),
    new WeakMap([[Object, true]]),
    'two WeakMaps with inequal values on the same key',
    true,
    true
  );

  t.deepEqualTest(
    new WeakMap([[Object, null], [Function, true]]),
    new WeakMap([[Object, null]]),
    'two inequal WeakMaps',
    true,
    true
  );

  t.end();
});

test('Sets', { skip: typeof Set !== 'function' }, function (t) {
  t.deepEqualTest(
    new Set(['a', 1, 'b', 2]),
    new Set(['b', 2, 'a', 1]),
    'two equal Sets',
    true,
    true
  );

  t.deepEqualTest(
    new Set(['a', 1]),
    new Set(['b', 1]),
    'two inequal Sets',
    false,
    false
  );

  t.deepEqualTest(
    new Set([{}, 1, {}, {}, 2]),
    new Set([{}, 1, {}, 2, {}]),
    'two equal Sets in different orders',
    true,
    true
  );

  t.deepEqualTest(
    new Set(),
    new Set([1]),
    'two inequally sized Sets',
    false,
    false
  );

  t.deepEqualTest(
    new Set([{ a: 1 }, 2]),
    new Set(['2', { a: '1' }]),
    'two loosely equal, strictly inequal Sets',
    true,
    false
  );

  t.deepEqualTest(
    new Set([{ a: 1 }, 2]),
    new Set(['2', { a: 2 }]),
    'two inequal Sets',
    false,
    false
  );

  t.deepEqualTest(
    new Set([null, '', 1, 5, 2, false]),
    new Set([undefined, 0, '5', true, '2', '-000']),
    'more primitive comparisons',
    true,
    false
  );

  t.end();
});

test('Set and Map', { skip: !Object.defineProperty || typeof Set !== 'function' || typeof Map !== 'function' }, function (t) {
  t.deepEqualTest(
    new Set(),
    new Map(),
    'Map and Set',
    false,
    false
  );

  var maplikeSet = new Set();
  Object.defineProperty(maplikeSet, 'constructor', { enumerable: false, value: Map });
  maplikeSet.__proto__ = Map.prototype; // eslint-disable-line no-proto
  t.deepEqualTest(
    maplikeSet,
    new Map(),
    'Map-like Set, and Map',
    false,
    false
  );

  t.end();
});

test('WeakSets', { skip: typeof WeakSet !== 'function' }, function (t) {
  t.deepEqualTest(
    new WeakSet([Object, Function]),
    new WeakSet([Function, Object]),
    'two equal WeakSets',
    true,
    true
  );

  t.deepEqualTest(
    new WeakSet([Object, Function]),
    new WeakSet([Object]),
    'two inequal WeakSets',
    true,
    true
  );

  t.end();
});

test('not equal', function (t) {
  t.deepEqualTest(
    { x: 5, y: [6] },
    { x: 5, y: 6 },
    'two inequal objects are',
    false,
    false
  );

  t.end();
});

test('nested nulls', function (t) {
  t.deepEqualTest(
    [null, null, null],
    [null, null, null],
    'same-length arrays of nulls',
    true,
    true,
    true
  );
  t.end();
});

test('objects with strings vs numbers', function (t) {
  t.deepEqualTest(
    [{ a: 3 }, { b: 4 }],
    [{ a: '3' }, { b: '4' }],
    'objects with equivalent string/number values',
    true,
    false
  );
  t.end();
});

test('non-objects', function (t) {
  t.deepEqualTest(3, 3, 'same numbers', true, true, true);
  t.deepEqualTest('beep', 'beep', 'same strings', true, true, true);
  t.deepEqualTest('3', 3, 'numeric string and number', true, false);
  t.deepEqualTest('3', [3], 'numeric string and array containing number', false, false);
  t.deepEqualTest(3, [3], 'number and array containing number', false, false);

  t.end();
});

test('infinities', function (t) {
  t.deepEqualTest(Infinity, Infinity, '∞ and ∞', true, true, true);
  t.deepEqualTest(-Infinity, -Infinity, '-∞ and -∞', true, true, true);
  t.deepEqualTest(Infinity, -Infinity, '∞ and -∞', false, false);

  t.end();
});

test('arguments class', function (t) {
  function getArgs() {
    return arguments;
  }

  t.deepEqualTest(
    getArgs(1, 2, 3),
    getArgs(1, 2, 3),
    'equivalent arguments objects are equal',
    true,
    true,
    true
  );

  t.deepEqualTest(
    getArgs(1, 2, 3),
    [1, 2, 3],
    'array and arguments with same contents',
    false,
    false
  );

  var args = getArgs();
  var notArgs = tag({ length: 0 }, 'Arguments');
  t.deepEqualTest(
    args,
    notArgs,
    'args and similar arraylike object',
    false,
    false
  );

  t.end();
});

test('Dates', function (t) {
  var d0 = new Date(1387585278000);
  var d1 = new Date('Fri Dec 20 2013 16:21:18 GMT-0800 (PST)');

  t.deepEqualTest(d0, d1, 'two Dates with the same timestamp', true, true);

  d1.a = true;

  t.deepEqualTest(d0, d1, 'two Dates with the same timestamp but different own properties', false, false);

  t.test('overriding `getTime`', { skip: !Object.defineProperty }, function (st) {
    var a = new Date('2000');
    var b = new Date('2000');
    Object.defineProperty(a, 'getTime', { value: function () { return 5; } });
    st.deepEqualTest(a, b, 'two Dates with the same timestamp but one has overridden `getTime`', true, true);
    st.end();
  });

  t.test('fake Date', { skip: !hasProto }, function (st) {
    var a = new Date(2000);
    var b = tag(Object.create(
      a.__proto__, // eslint-disable-line no-proto
      gOPDs(a)
    ), 'Date');

    st.deepEqualTest(
      a,
      b,
      'Date, and fake Date',
      false,
      false
    );

    st.end();
  });

  var a = new Date('2000');
  var b = new Date('2000');
  b.foo = true;
  t.deepEqualTest(
    a,
    b,
    'two identical Dates, one with an extra property',
    false,
    false
  );

  t.deepEqualTest(
    new Date('2000'),
    new Date('2001'),
    'two inequal Dates',
    false,
    false
  );

  t.end();
});

test('buffers', { skip: typeof Buffer !== 'function' }, function (t) {
  /* eslint no-buffer-constructor: 1, new-cap: 1 */
  t.deepEqualTest(
    safeBuffer('xyz'),
    safeBuffer('xyz'),
    'buffers with same contents are equal',
    true,
    true
  );

  t.deepEqualTest(
    safeBuffer('xyz'),
    safeBuffer('xyy'),
    'buffers with same length and different contents are inequal',
    false,
    false
  );

  t.deepEqualTest(
    safeBuffer('xyz'),
    safeBuffer('xy'),
    'buffers with different length are inequal',
    false,
    false
  );

  t.deepEqualTest(
    safeBuffer('abc'),
    safeBuffer('xyz'),
    'buffers with different contents',
    false,
    false
  );

  var emptyBuffer = safeBuffer('');

  t.deepEqualTest(
    emptyBuffer,
    [],
    'empty buffer and empty array',
    false,
    false
  );

  t.test('bufferlikes', { skip: !Object.defineProperty || !hasTypedArrays }, function (st) {
    var fakeBuffer = {
      0: 'a',
      length: 1,
      __proto__: emptyBuffer.__proto__, // eslint-disable-line no-proto
      copy: emptyBuffer.copy,
      slice: emptyBuffer.slice
    };
    Object.defineProperty(fakeBuffer, '0', { enumerable: false });
    Object.defineProperty(fakeBuffer, 'length', { enumerable: false });
    Object.defineProperty(fakeBuffer, 'copy', { enumerable: false });
    Object.defineProperty(fakeBuffer, 'slice', { enumerable: false });

    st.deepEqualTest(
      safeBuffer('a'),
      fakeBuffer,
      'real buffer, and mildly fake buffer',
      false,
      false
    );

    st.test('bufferlike', { skip: buffersAreTypedArrays ? !hasSymbols || !Symbol.toStringTag : false }, function (s2t) {
      var bufferlike = buffersAreTypedArrays ? new Uint8Array() : {};
      Object.defineProperty(bufferlike, 'length', {
        enumerable: false,
        value: bufferlike.length || 0
      });
      Object.defineProperty(bufferlike, 'copy', {
        enumerable: false,
        value: emptyBuffer.copy
      });
      bufferlike.__proto__ = emptyBuffer.__proto__; // eslint-disable-line no-proto

      s2t.deepEqualTest(
        emptyBuffer,
        bufferlike,
        'empty buffer and empty bufferlike',
        true,
        true
      );
      s2t.end();
    });

    st.end();
  });

  t.end();
});

test('Arrays', function (t) {
  var a = [];
  var b = [];
  b.foo = true;

  t.deepEqualTest(
    a,
    b,
    'two identical arrays, one with an extra property',
    false,
    false
  );

  t.end();
});

test('booleans', function (t) {
  t.deepEqualTest(
    true,
    true,
    'trues',
    true,
    true,
    false
  );

  t.deepEqualTest(
    false,
    false,
    'falses',
    true,
    true,
    false
  );

  t.deepEqualTest(
    true,
    false,
    'true and false',
    false,
    false
  );

  t.end();
});

test('booleans and arrays', function (t) {
  t.deepEqualTest(
    true,
    [],
    'true and an empty array',
    false,
    false
  );
  t.deepEqualTest(
    false,
    [],
    'false and an empty array',
    false,
    false
  );
  t.end();
});

test('arrays initiated', function (t) {
  var a0 = [
    undefined,
    null,
    -1,
    0,
    1,
    false,
    true,
    undefined,
    '',
    'abc',
    null,
    undefined
  ];
  var a1 = [
    undefined,
    null,
    -1,
    0,
    1,
    false,
    true,
    undefined,
    '',
    'abc',
    null,
    undefined
  ];

  t.deepEqualTest(
    a0,
    a1,
    'arrays with equal contents are equal',
    true,
    true,
    true
  );
  t.end();
});

test('arrays assigned', function (t) {
  var a0 = [
    undefined,
    null,
    -1,
    0,
    1,
    false,
    true,
    undefined,
    '',
    'abc',
    null,
    undefined
  ];
  var a1 = [];

  a1[0] = undefined;
  a1[1] = null;
  a1[2] = -1;
  a1[3] = 0;
  a1[4] = 1;
  a1[5] = false;
  a1[6] = true;
  a1[7] = undefined;
  a1[8] = '';
  a1[9] = 'abc';
  a1[10] = null;
  a1[11] = undefined;
  a1.length = 12;

  t.deepEqualTest(a0, a1, 'a literal array and an assigned array', true, true);
  t.end();
});

test('arrays push', function (t) {
  var a0 = [
      undefined,
      null,
      -1,
      0,
      1,
      false,
      true,
      undefined,
      '',
      'abc',
      null,
      undefined
    ],
    a1 = [];

  a1.push(undefined);
  a1.push(null);
  a1.push(-1);
  a1.push(0);
  a1.push(1);
  a1.push(false);
  a1.push(true);
  a1.push(undefined);
  a1.push('');
  a1.push('abc');
  a1.push(null);
  a1.push(undefined);
  a1.length = 12;

  t.deepEqualTest(a0, a1, 'a literal array and a pushed array', true, true);
  t.end();
});

test('null == undefined', function (t) {
  t.deepEqualTest(null, undefined, 'null and undefined', true, false);
  t.deepEqualTest([null], [undefined], '[null] and [undefined]', true, false);

  t.end();
});

// node 14 changed `deepEqual` to make two NaNs loosely equal. TODO, semver-major: change deep-equal in the same way.
var isNode14 = isNode && process.env.ASSERT && semver.satisfies(process.version, '>= 14');
test('NaNs', function (t) {
  t.deepEqualTest(
    NaN,
    NaN,
    'two NaNs',
    isNode14,
    true
  );

  t.deepEqualTest(
    { a: NaN },
    { a: NaN },
    'two equiv objects with a NaN value',
    isNode14,
    true
  );

  t.deepEqualTest(NaN, 1, 'NaN and 1', false, false);

  t.end();
});

test('zeroes', function (t) {
  t.deepEqualTest(0, -0, '0 and -0', true, false);

  t.deepEqualTest({ a: 0 }, { a: -0 }, 'two objects with a same-keyed 0/-0 value', true, false);

  t.end();
});

test('Object.create', { skip: !Object.create }, function (t) {
  var a = { a: 'A' };
  var b = Object.create(a);
  b.b = 'B';
  var c = Object.create(a);
  c.b = 'C';

  t.deepEqualTest(
    b,
    c,
    'two objects with the same [[Prototype]] but a different own property',
    false,
    false
  );

  t.end();
});

test('Object.create(null)', { skip: !Object.create }, function (t) {
  t.deepEqualTest(
    Object.create(null),
    Object.create(null),
    'two empty null objects',
    true,
    true,
    true
  );

  t.deepEqualTest(
    Object.create(null, { a: { value: 'b' } }),
    Object.create(null, { a: { value: 'b' } }),
    'two null objects with the same property pair',
    true,
    true,
    true
  );

  t.end();
});

test('regexes vs dates', function (t) {
  var d = new Date(1387585278000);
  var r = /abc/;

  t.deepEqualTest(d, r, 'Date and RegExp', false, false);

  t.end();
});

test('regexen', function (t) {
  t.deepEqualTest(/abc/, /xyz/, 'two different regexes', false, false);
  t.deepEqualTest(/abc/, /abc/, 'two abc regexes', true, true, false);
  t.deepEqualTest(/xyz/, /xyz/, 'two xyz regexes', true, true, false);

  t.test('fake RegExp', { skip: !hasProto }, function (st) {
    var a = /abc/g;
    var b = tag(Object.create(
      a.__proto__, // eslint-disable-line no-proto
      gOPDs(a)
    ), 'RegExp');

    st.deepEqualTest(a, b, 'regex and fake regex', false, false);

    st.end();
  });

  var a = /abc/gi;
  var b = /abc/gi;
  b.foo = true;
  t.deepEqualTest(
    a,
    b,
    'two identical regexes, one with an extra property',
    false,
    false
  );

  var c = /abc/g;
  var d = /abc/i;
  t.deepEqualTest(
    c,
    d,
    'two regexes with the same source but different flags',
    false,
    false
  );

  t.end();
});

test('object literals', function (t) {
  t.deepEqualTest(
    { prototype: 2 },
    { prototype: '2' },
    'two loosely equal, strictly inequal prototype properties',
    true,
    false
  );

  t.end();
});

test('arrays and objects', function (t) {
  t.deepEqualTest([], {}, 'empty array and empty object', false, false);
  t.deepEqualTest([], { length: 0 }, 'empty array and empty arraylike object', false, false);
  t.deepEqualTest([1], { 0: 1 }, 'array and similar object', false, false);

  t.end();
});

test('functions', function (t) {
  function f() {}

  t.deepEqualTest(f, f, 'a function and itself', true, true, true);
  t.deepEqualTest([f], [f], 'a function and itself in an array', true, true, true);

  t.deepEqualTest(function () {}, function () {}, 'two distinct functions', false, false, true);
  t.deepEqualTest([function () {}], [function () {}], 'two distinct functions in an array', false, false, true);

  t.deepEqualTest(f, {}, 'function and object', false, false, true);
  t.deepEqualTest([f], [{}], 'function and object in an array', false, false, true);

  t.end();
});

test('Errors', function (t) {
  t.deepEqualTest(new Error('xyz'), new Error('xyz'), 'two errors of the same type with the same message', true, true, false);
  t.deepEqualTest(new Error('xyz'), new TypeError('xyz'), 'two errors of different types with the same message', false, false);
  t.deepEqualTest(new Error('xyz'), new Error('zyx'), 'two errors of the same type with a different message', false, false);

  t.test('errorlike', { skip: !Object.defineProperty }, function (st) {
    var err = new Error('foo');
    // TODO: add `__proto__` when brand check is available
    var errorlike = tag({ message: err.message, stack: err.stack, name: err.name, constructor: err.constructor }, 'Error');
    Object.defineProperty(errorlike, 'message', { enumerable: false });
    Object.defineProperty(errorlike, 'stack', { enumerable: false });
    Object.defineProperty(errorlike, 'name', { enumerable: false });
    Object.defineProperty(errorlike, 'constructor', { enumerable: false });
    st.notOk(errorlike instanceof Error);
    st.ok(err instanceof Error);
    st.deepEqualTest(
      err,
      errorlike,
      'error, and errorlike object',
      false,
      false
    );

    st.end();
  });

  t.deepEqualTest(
    new Error('a'),
    assign(new Error('a'), { code: 10 }),
    'two otherwise equal errors with different own properties',
    false,
    false
  );

  t.test('fake error', { skip: !process.env.ASSERT || !hasProto }, function (st) {
    var a = tag({
      __proto__: null
    }, 'Error');
    var b = new RangeError('abc');
    b.__proto__ = null; // eslint-disable-line no-proto

    st.deepEqualTest(
      a,
      b,
      'null object faking as an Error, RangeError with null proto',
      false,
      false
    );
    st.end();
  });

  t.end();
});

test('object and null', function (t) {
  t.deepEqualTest(
    {},
    null,
    'null and an object',
    false,
    false
  );

  t.end();
});

test('errors', function (t) {

  t.end();
});

test('error = Object', function (t) {
  t.deepEqualTest(
    new Error('a'),
    { message: 'a' },
    false,
    false
  );

  t.end();
});

test('[[Prototypes]]', function (t) {
  function C() {}
  var instance = new C();
  delete instance.constructor;

  t.deepEqualTest({}, instance, 'two identical objects with different [[Prototypes]]', true, false);

  t.test('Dates with different prototypes', { skip: !hasProto }, function (st) {
    var d1 = new Date(0);
    var d2 = new Date(0);

    st.deepEqualTest(d1, d2, 'two dates with the same timestamp', true, true);

    var newProto = {
      __proto__: Date.prototype
    };
    d2.__proto__ = newProto; // eslint-disable-line no-proto
    st.ok(d2 instanceof Date, 'd2 is still a Date instance after tweaking [[Prototype]]');

    st.deepEqualTest(d1, d2, 'two dates with the same timestamp and different [[Prototype]]', true, false);

    st.end();
  });

  t.end();
});

test('toStringTag', { skip: !hasSymbols || !Symbol.toStringTag }, function (t) {
  var o1 = {};
  t.equal(Object.prototype.toString.call(o1), '[object Object]', 'o1: Symbol.toStringTag works');

  var o2 = {};
  t.equal(Object.prototype.toString.call(o2), '[object Object]', 'o2: original Symbol.toStringTag works');

  t.deepEqualTest(o1, o2, 'two normal empty objects', true, true);

  o2[Symbol.toStringTag] = 'jifasnif';
  t.equal(Object.prototype.toString.call(o2), '[object jifasnif]', 'o2: modified Symbol.toStringTag works');

  t.deepEqualTest(o1, o2, 'two normal empty objects with different toStringTags', false, false);

  t.end();
});

test('boxed primitives', function (t) {
  t.deepEqualTest(Object(false), false, 'boxed and primitive `false`', false, false);
  t.deepEqualTest(Object(true), true, 'boxed and primitive `true`', false, false);
  t.deepEqualTest(Object(3), 3, 'boxed and primitive `3`', false, false);
  t.deepEqualTest(Object(NaN), NaN, 'boxed and primitive `NaN`', false, false);
  t.deepEqualTest(Object(''), '', 'boxed and primitive `""`', false, false);
  t.deepEqualTest(Object('str'), 'str', 'boxed and primitive `"str"`', false, false);

  t.test('symbol', { skip: !hasSymbols }, function (st) {
    var s = Symbol('');
    st.deepEqualTest(Object(s), s, 'boxed and primitive `Symbol()`', false, false);
    st.end();
  });

  t.test('bigint', { skip: typeof BigInt !== 'function' }, function (st) {
    var hhgtg = BigInt(42);
    st.deepEqualTest(Object(hhgtg), hhgtg, 'boxed and primitive `BigInt(42)`', false, false);
    st.end();
  });

  t.test('`valueOf` is called for boxed primitives', function (st) {
    var a = Object(5);
    a.valueOf = function () { throw new Error('failed'); };
    var b = Object(5);
    b.valueOf = function () { throw new Error('failed'); };

    st.deepEqualTest(a, b, 'two boxed numbers with a thrower valueOf', false, false);

    st.end();
  });

  t.end();
});

test('getters', { skip: !Object.defineProperty }, function (t) {
  var a = {};
  Object.defineProperty(a, 'a', { enumerable: true, get: function () { return 5; } });
  var b = {};
  Object.defineProperty(b, 'a', { enumerable: true, get: function () { return 6; } });

  t.deepEqualTest(a, b, 'two objects with the same getter but producing different values', false, false);

  t.end();
});

var isBrokenNode = isNode && process.env.ASSERT && semver.satisfies(process.version, '<= 13.3.0');
test('fake arrays: extra keys will be tested', { skip: !hasProto || isBrokenNode }, function (t) {
  var a = tag({
    __proto__: Array.prototype,
    0: 1,
    1: 1,
    2: 'broken',
    length: 2
  }, 'Array');
  if (Object.defineProperty) {
    Object.defineProperty(a, 'length', {
      enumerable: false
    });
  }

  t.deepEqualTest(a, [1, 1], 'fake and real array with same contents and [[Prototype]]', false, false);

  var b = tag(/abc/, 'Array');
  b.__proto__ = Array.prototype; // eslint-disable-line no-proto
  b.length = 3;
  if (Object.defineProperty) {
    Object.defineProperty(b, 'length', {
      enumerable: false
    });
  }
  t.deepEqualTest(b, ['a', 'b', 'c'], 'regex faking as array, and array', false, false);

  t.end();
});

test('circular references', function (t) {
  var b = {};
  b.b = b;

  var c = {};
  c.b = c;

  t.deepEqualTest(
    b,
    c,
    'two self-referencing objects',
    true,
    true
  );

  var d = {};
  d.a = 1;
  d.b = d;

  var e = {};
  e.a = 1;
  e.b = e.a;

  t.deepEqualTest(
    d,
    e,
    'two deeply self-referencing objects',
    false,
    false
  );

  t.end();
});

// io.js v2 is the only version where `console.log(b)` below is catchable
var isNodeWhereBufferBreaks = isNode && semver.satisfies(process.version, '< 3');
var isNode06 = isNode && semver.satisfies(process.version, '<= 0.6'); // segfaults in node 0.6, it seems

test('TypedArrays', { skip: !hasTypedArrays }, function (t) {
  t.test('Buffer faked as Uint8Array', { skip: typeof Buffer !== 'function' || !Object.create || !hasProto || isNode06 }, function (st) {
    var a = safeBuffer('test');
    var b = tag(Object.create(
      a.__proto__, // eslint-disable-line no-proto
      assign(gOPDs(a), {
        length: {
          enumerable: false,
          value: 4
        }
      })
    ), 'Uint8Array');

    st.deepEqualTest(
      a,
      b,
      'Buffer and Uint8Array',
      isNodeWhereBufferBreaks,
      isNodeWhereBufferBreaks
    );

    st.end();
  });

  forEach(availableTypedArrays, function (name) {
    t.test(name + 's', function (st) {
      var TA = global[name];
      var isBigInt = name.slice(0, 3) === 'Big';
      var Z = isBigInt ? BigInt : Number;

      st.deepEqualTest(
        new TA([Z(1), Z(2), Z(3)]),
        new TA([Z(1), Z(2), Z(3)]),
        'two ' + name + 's with the same contents',
        true,
        true
      );

      st.deepEqualTest(
        new TA([Z(1), Z(2), Z(3)]),
        new TA([Z(1), Z(2), Z(4)]),
        'two ' + name + 's with different contents',
        false,
        false
      );

      st.end();
    });
  });

  t.test('one TypedArray faking as another', { skip: !hasProto }, function (st) {
    var a = new Uint8Array(10);
    var b = tag(new Int8Array(10), 'Uint8Array');
    b.__proto__ = Uint8Array.prototype; // eslint-disable-line no-proto

    st.deepEqualTest(
      a,
      b,
      'Uint8Array, and Int8Array pretending to be a Uint8Array',
      false,
      false
    );

    st.end();
  });

  t.test('ArrayBuffers', { skip: typeof ArrayBuffer !== 'function' }, function (st) {
    var buffer1 = new ArrayBuffer(8); // initial value of 0's
    var buffer2 = new ArrayBuffer(8); // initial value of 0's

    var view1 = new Int8Array(buffer1);
    var view2 = new Int8Array(buffer2);

    st.deepEqualTest(
      view1,
      view2,
      'Int8Arrays of similar ArrayBuffers',
      true,
      true
    );

    st.deepEqualTest(
      buffer1,
      buffer2,
      'similar ArrayBuffers',
      true,
      true
    );

    for (var i = 0; i < view1.byteLength; i += 1) {
      view1[i] = 9; // change all values to 9's
    }

    st.deepEqualTest(
      view1,
      view2,
      'Int8Arrays of different ArrayBuffers',
      false,
      false
    );

    st.deepEqualTest(
      buffer1,
      buffer2,
      'different ArrayBuffers',
      false,
      false
    );

    // node < 0.11 has a nonconfigurable own byteLength property
    t.test('lies about byteLength', { skip: !('byteLength' in ArrayBuffer.prototype) }, function (s2t) {
      var empty4 = new ArrayBuffer(4);
      var empty6 = new ArrayBuffer(6);
      Object.defineProperty(empty6, 'byteLength', { value: 4 });

      s2t.deepEqualTest(
        empty4,
        empty6,
        'different-length ArrayBuffers, one lying',
        false,
        false
      );
      s2t.end();
    });

    st.end();
  });

  t.test('SharedArrayBuffers', { skip: typeof SharedArrayBuffer !== 'function' }, function (st) {
    var buffer1 = new SharedArrayBuffer(8); // initial value of 0's
    var buffer2 = new SharedArrayBuffer(8); // initial value of 0's

    var view1 = new Int8Array(buffer1);
    var view2 = new Int8Array(buffer2);

    st.deepEqualTest(
      view1,
      view2,
      'Int8Arrays of similar SharedArrayBuffers',
      true,
      true
    );

    st.deepEqualTest(
      buffer1,
      buffer2,
      'similar SharedArrayBuffers',
      true,
      true
    );

    for (var i = 0; i < view1.byteLength; i += 1) {
      view1[i] = 9; // change all values to 9's
    }

    st.deepEqualTest(
      view1,
      view2,
      'Int8Arrays of different SharedArrayBuffers',
      false,
      false
    );

    st.deepEqualTest(
      buffer1,
      buffer2,
      'different SharedArrayBuffers',
      false,
      false
    );

    t.test('lies about byteLength', { skip: !('byteLength' in SharedArrayBuffer.prototype) }, function (s2t) {
      var empty4 = new SharedArrayBuffer(4);
      var empty6 = new SharedArrayBuffer(6);
      Object.defineProperty(empty6, 'byteLength', { value: 4 });

      s2t.deepEqualTest(
        empty4,
        empty6,
        'different-length SharedArrayBuffers, one lying',
        false,
        false
      );
      s2t.end();
    });

    st.end();
  });

  t.end();
});


---

File name: node_modules\deep-equal\test\_tape.js

Code:
'use strict';

var Test = require('tape/lib/test');
var is = require('object-is');

var deepEqual = require('../');
var assert = require('../assert');

var equal = process.env.ASSERT ? function assertDeepEqual(a, b, options) {
  try {
    if (options && options.strict) {
      assert.deepStrictEqual(a, b);
    } else {
      assert.deepEqual(a, b);
    }
  } catch (e) {
    return false;
  }
  return true;
} : deepEqual;

function equalReversed(t, a, b, isEqual, msg, isStrict, skipReversed) {
  var actual = isStrict
    ? equal(a, b, { strict: true })
    : equal(a, b);
  var suffix = isEqual ? ' are equal' : ' are not equal';
  t.equal(actual, !!isEqual, msg + suffix);
  if (typeof skipReversed === 'boolean' ? !skipReversed : !is(a, b)) {
    var actualReverse = isStrict
      ? equal(b, a, { strict: true })
      : equal(b, a);
    t.equal(actualReverse, !!isEqual, msg + suffix + ' (reversed)');
  }
}
function deepEqualTest(t, a, b, msg, isEqual, isStrictEqual, skipReversed) {
  equalReversed(t, a, b, isEqual, msg, false, skipReversed);
  equalReversed(t, a, b, isStrictEqual, 'strict: ' + msg, true, skipReversed);
}

Test.prototype.deepEqualTest = function (a, b, message, isEqual, isStrictEqual, skipReversed) {
  return deepEqualTest(this, a, b, message, !!isEqual, !!isStrictEqual, skipReversed);
};


---

File name: node_modules\deepmerge\changelog.md

Code:
# [4.3.1](https://github.com/TehShrike/deepmerge/releases/tag/v4.3.1)

- Fix type definition for arrayMerge options.  [#239](https://github.com/TehShrike/deepmerge/pull/239)

# [4.3.0](https://github.com/TehShrike/deepmerge/releases/tag/v4.3.0)

- Avoid thrown errors if the target doesn't have `propertyIsEnumerable`.  [#252](https://github.com/TehShrike/deepmerge/pull/252)

# [4.2.2](https://github.com/TehShrike/deepmerge/releases/tag/v4.2.2)

- `isMergeableObject` is now only called if there are two values that could be merged.  [a34dd4d2](https://github.com/TehShrike/deepmerge/commit/a34dd4d25bf5e250653540a2022bc832c7b00a19)

# [4.2.1](https://github.com/TehShrike/deepmerge/releases/tag/v4.2.1)

- Fix: falsey values can now be merged.  [#170](https://github.com/TehShrike/deepmerge/issues/170)

# [4.2.0](https://github.com/TehShrike/deepmerge/releases/tag/v4.2.0)

- Properties are now only overwritten if they exist on the target object and are enumerable.  [#164](https://github.com/TehShrike/deepmerge/pull/164)

Technically this could probably be a patch release since "which properties get overwritten" wasn't documented and accidentally overwriting a built-in function or some function up the property chain would almost certainly be undesirable, but it feels like a gray area, so here we are with a feature version bump.

# [4.1.2](https://github.com/TehShrike/deepmerge/releases/tag/v4.1.2)

- Rolled back #167 since `Object.assign` breaks ES5 support.  [55067352](https://github.com/TehShrike/deepmerge/commit/55067352a92c65a6c44a5165f3387720aae1e192)

# [4.1.1](https://github.com/TehShrike/deepmerge/releases/tag/v4.1.1)

- The `options` argument is no longer mutated [#167](https://github.com/TehShrike/deepmerge/pull/167)

# [4.1.0](https://github.com/TehShrike/deepmerge/releases/tag/v4.1.0)

- `cloneUnlessOtherwiseSpecified` is now exposed to the `arrayMerge` function [#165](https://github.com/TehShrike/deepmerge/pull/165)

# [4.0.0](https://github.com/TehShrike/deepmerge/releases/tag/v4.0.0)

- The `main` entry point in `package.json` is now a CommonJS module instead of a UMD module [#155](https://github.com/TehShrike/deepmerge/pull/155)

# [3.3.0](https://github.com/TehShrike/deepmerge/releases/tag/v3.3.0)

- Enumerable Symbol properties are now copied [#151](https://github.com/TehShrike/deepmerge/pull/151)

# [3.2.1](https://github.com/TehShrike/deepmerge/releases/tag/v3.2.1)

- bumping dev dependency versions to try to shut up bogus security warnings from Github/npm [#149](https://github.com/TehShrike/deepmerge/pull/149)

# [3.2.0](https://github.com/TehShrike/deepmerge/releases/tag/v3.2.0)

- feature: added the [`customMerge`](https://github.com/TehShrike/deepmerge#custommerge) option [#133](https://github.com/TehShrike/deepmerge/pull/133)

# [3.1.0](https://github.com/TehShrike/deepmerge/releases/tag/v3.1.0)

- typescript typing: make the `all` function generic [#129](https://github.com/TehShrike/deepmerge/pull/129)

# [3.0.0](https://github.com/TehShrike/deepmerge/releases/tag/v3.0.0)

- drop ES module build [#123](https://github.com/TehShrike/deepmerge/issues/123)

# [2.2.1](https://github.com/TehShrike/deepmerge/releases/tag/v2.2.1)

- bug: typescript export type was wrong [#121](https://github.com/TehShrike/deepmerge/pull/121)

# [2.2.0](https://github.com/TehShrike/deepmerge/releases/tag/v2.2.0)

- feature: added TypeScript typings [#119](https://github.com/TehShrike/deepmerge/pull/119)

# [2.1.1](https://github.com/TehShrike/deepmerge/releases/tag/v2.1.1)

- documentation: Rename "methods" to "api", note ESM syntax [#103](https://github.com/TehShrike/deepmerge/pull/103)
- documentation: Fix grammar [#107](https://github.com/TehShrike/deepmerge/pull/107)
- documentation: Restructure headers for clarity + some wording tweaks [108](https://github.com/TehShrike/deepmerge/pull/108) + [109](https://github.com/TehShrike/deepmerge/pull/109)


# [2.1.0](https://github.com/TehShrike/deepmerge/releases/tag/v2.1.0)

- feature: Support a custom `isMergeableObject` function [#96](https://github.com/TehShrike/deepmerge/pull/96)
- documentation: note a Webpack bug that some users might need to work around [#100](https://github.com/TehShrike/deepmerge/pull/100)

# [2.0.1](https://github.com/TehShrike/deepmerge/releases/tag/v2.0.1)

- documentation: fix the old array merge algorithm in the readme.  [#84](https://github.com/TehShrike/deepmerge/pull/84)

# [2.0.0](https://github.com/TehShrike/deepmerge/releases/tag/v2.0.0)

- breaking: the array merge algorithm has changed from a complicated thing to `target.concat(source).map(element => cloneUnlessOtherwiseSpecified(element, optionsArgument))`
- breaking: The `clone` option now defaults to `true`
- feature: `merge.all` now accepts an array of any size, even 0 or 1 elements

See [pull request 77](https://github.com/TehShrike/deepmerge/pull/77).

# [1.5.2](https://github.com/TehShrike/deepmerge/releases/tag/v1.5.2)

- fix: no longer attempts to merge React elements [#76](https://github.com/TehShrike/deepmerge/issues/76)

# [1.5.1](https://github.com/TehShrike/deepmerge/releases/tag/v1.5.1)

- bower support: officially dropping bower support.  If you use bower, please depend on the [unpkg distribution](https://unpkg.com/deepmerge/dist/umd.js).  See [#63](https://github.com/TehShrike/deepmerge/issues/63)

# [1.5.0](https://github.com/TehShrike/deepmerge/releases/tag/v1.5.0)

- bug fix: merging objects into arrays was allowed, and doesn't make any sense. [#65](https://github.com/TehShrike/deepmerge/issues/65) published as a feature release instead of a patch because it is a decent behavior change.

# [1.4.4](https://github.com/TehShrike/deepmerge/releases/tag/v1.4.4)

- bower support: updated `main` in bower.json

# [1.4.3](https://github.com/TehShrike/deepmerge/releases/tag/v1.4.3)

- bower support: inline is-mergeable-object in a new CommonJS build, so that people using both bower and CommonJS can bundle the library [0b34e6](https://github.com/TehShrike/deepmerge/commit/0b34e6e95f989f2fc8091d25f0d291c08f3d2d24)

# [1.4.2](https://github.com/TehShrike/deepmerge/releases/tag/v1.4.2)

- performance: bump is-mergeable-object dependency version for a slight performance improvement [5906c7](https://github.com/TehShrike/deepmerge/commit/5906c765d691d48e83d76efbb0d4b9ca150dc12c)

# [1.4.1](https://github.com/TehShrike/deepmerge/releases/tag/v1.4.1)

- documentation: fix unpkg link [acc45b](https://github.com/TehShrike/deepmerge/commit/acc45be85519c1df906a72ecb24764b622d18d47)

# [1.4.0](https://github.com/TehShrike/deepmerge/releases/tag/v1.4.0)

- api: instead of only exporting a UMD module, expose a UMD module with `pkg.main`, a CJS module with `pkg.browser`, and an ES module with `pkg.module` [#62](https://github.com/TehShrike/deepmerge/pull/62)

# [1.3.2](https://github.com/TehShrike/deepmerge/releases/tag/v1.3.2)

- documentation: note the minified/gzipped file sizes [56](https://github.com/TehShrike/deepmerge/pull/56)
- documentation: make data structures more readable in merge example: pull request [57](https://github.com/TehShrike/deepmerge/pull/57)

# [1.3.1](https://github.com/TehShrike/deepmerge/releases/tag/v1.3.1)

- documentation: clarify and test some array merging documentation: pull request [51](https://github.com/TehShrike/deepmerge/pull/51)

# [1.3.0](https://github.com/TehShrike/deepmerge/releases/tag/v1.3.0)

- feature: `merge.all`, a merge function that merges any number of objects: pull request [50](https://github.com/TehShrike/deepmerge/pull/50)

# [1.2.0](https://github.com/TehShrike/deepmerge/releases/tag/v1.2.0)

- fix: an error that would be thrown when an array would be merged onto a truthy non-array value: pull request [46](https://github.com/TehShrike/deepmerge/pull/46)
- feature: the ability to clone: Issue [28](https://github.com/TehShrike/deepmerge/issues/28), pull requests [44](https://github.com/TehShrike/deepmerge/pull/44) and [48](https://github.com/TehShrike/deepmerge/pull/48)
- maintenance: added tests + travis to `.npmignore`: pull request [47](https://github.com/TehShrike/deepmerge/pull/47)

# [1.1.1](https://github.com/TehShrike/deepmerge/releases/tag/v1.1.1)

- fix an issue where an error was thrown when merging an array onto a non-array: [Pull request 46](https://github.com/TehShrike/deepmerge/pull/46)

# [1.1.0](https://github.com/TehShrike/deepmerge/releases/tag/v1.1.0)

- allow consumers to specify their own array merging algorithm: [Pull request 37](https://github.com/TehShrike/deepmerge/pull/37)

# [1.0.3](https://github.com/TehShrike/deepmerge/releases/tag/v1.0.3)

- adding bower.json back: [Issue 38](https://github.com/TehShrike/deepmerge/pull/38)
- updating keywords and Github links in package.json [bc3898e](https://github.com/TehShrike/deepmerge/commit/bc3898e587a56f74591328f40f656b0152c1d5eb)

# [1.0.2](https://github.com/TehShrike/deepmerge/releases/tag/v1.0.2)

- Updating the readme: dropping bower, testing that the example works: [7102fc](https://github.com/TehShrike/deepmerge/commit/7102fcc4ddec11e2d33205866f9f18df14e5aeb5)

# [1.0.1](https://github.com/TehShrike/deepmerge/releases/tag/v1.0.1)

- `null`, dates, and regular expressions are now properly merged in arrays: [Issue 18](https://github.com/TehShrike/deepmerge/pull/18), plus commit: [ef1c6b](https://github.com/TehShrike/deepmerge/commit/ef1c6bac8350ba12a24966f0bc7da02560827586)

# 1.0.0

- Should only be a patch change, because this module is READY. [Issue 15](https://github.com/TehShrike/deepmerge/issues/15)
- Regular expressions are now treated like primitive values when merging: [Issue 30](https://github.com/TehShrike/deepmerge/pull/30)
- Dates are now treated like primitives when merging: [Issue 31](https://github.com/TehShrike/deepmerge/issues/31)


---

File name: node_modules\deepmerge\dist\cjs.js

Code:
'use strict';

var isMergeableObject = function isMergeableObject(value) {
	return isNonNullObject(value)
		&& !isSpecial(value)
};

function isNonNullObject(value) {
	return !!value && typeof value === 'object'
}

function isSpecial(value) {
	var stringValue = Object.prototype.toString.call(value);

	return stringValue === '[object RegExp]'
		|| stringValue === '[object Date]'
		|| isReactElement(value)
}

// see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25
var canUseSymbol = typeof Symbol === 'function' && Symbol.for;
var REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for('react.element') : 0xeac7;

function isReactElement(value) {
	return value.$$typeof === REACT_ELEMENT_TYPE
}

function emptyTarget(val) {
	return Array.isArray(val) ? [] : {}
}

function cloneUnlessOtherwiseSpecified(value, options) {
	return (options.clone !== false && options.isMergeableObject(value))
		? deepmerge(emptyTarget(value), value, options)
		: value
}

function defaultArrayMerge(target, source, options) {
	return target.concat(source).map(function(element) {
		return cloneUnlessOtherwiseSpecified(element, options)
	})
}

function getMergeFunction(key, options) {
	if (!options.customMerge) {
		return deepmerge
	}
	var customMerge = options.customMerge(key);
	return typeof customMerge === 'function' ? customMerge : deepmerge
}

function getEnumerableOwnPropertySymbols(target) {
	return Object.getOwnPropertySymbols
		? Object.getOwnPropertySymbols(target).filter(function(symbol) {
			return Object.propertyIsEnumerable.call(target, symbol)
		})
		: []
}

function getKeys(target) {
	return Object.keys(target).concat(getEnumerableOwnPropertySymbols(target))
}

function propertyIsOnObject(object, property) {
	try {
		return property in object
	} catch(_) {
		return false
	}
}

// Protects from prototype poisoning and unexpected merging up the prototype chain.
function propertyIsUnsafe(target, key) {
	return propertyIsOnObject(target, key) // Properties are safe to merge if they don't exist in the target yet,
		&& !(Object.hasOwnProperty.call(target, key) // unsafe if they exist up the prototype chain,
			&& Object.propertyIsEnumerable.call(target, key)) // and also unsafe if they're nonenumerable.
}

function mergeObject(target, source, options) {
	var destination = {};
	if (options.isMergeableObject(target)) {
		getKeys(target).forEach(function(key) {
			destination[key] = cloneUnlessOtherwiseSpecified(target[key], options);
		});
	}
	getKeys(source).forEach(function(key) {
		if (propertyIsUnsafe(target, key)) {
			return
		}

		if (propertyIsOnObject(target, key) && options.isMergeableObject(source[key])) {
			destination[key] = getMergeFunction(key, options)(target[key], source[key], options);
		} else {
			destination[key] = cloneUnlessOtherwiseSpecified(source[key], options);
		}
	});
	return destination
}

function deepmerge(target, source, options) {
	options = options || {};
	options.arrayMerge = options.arrayMerge || defaultArrayMerge;
	options.isMergeableObject = options.isMergeableObject || isMergeableObject;
	// cloneUnlessOtherwiseSpecified is added to `options` so that custom arrayMerge()
	// implementations can use it. The caller may not replace it.
	options.cloneUnlessOtherwiseSpecified = cloneUnlessOtherwiseSpecified;

	var sourceIsArray = Array.isArray(source);
	var targetIsArray = Array.isArray(target);
	var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;

	if (!sourceAndTargetTypesMatch) {
		return cloneUnlessOtherwiseSpecified(source, options)
	} else if (sourceIsArray) {
		return options.arrayMerge(target, source, options)
	} else {
		return mergeObject(target, source, options)
	}
}

deepmerge.all = function deepmergeAll(array, options) {
	if (!Array.isArray(array)) {
		throw new Error('first argument should be an array')
	}

	return array.reduce(function(prev, next) {
		return deepmerge(prev, next, options)
	}, {})
};

var deepmerge_1 = deepmerge;

module.exports = deepmerge_1;


---

File name: node_modules\deepmerge\dist\umd.js

Code:
(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
	typeof define === 'function' && define.amd ? define(factory) :
	(global = global || self, global.deepmerge = factory());
}(this, function () { 'use strict';

	var isMergeableObject = function isMergeableObject(value) {
		return isNonNullObject(value)
			&& !isSpecial(value)
	};

	function isNonNullObject(value) {
		return !!value && typeof value === 'object'
	}

	function isSpecial(value) {
		var stringValue = Object.prototype.toString.call(value);

		return stringValue === '[object RegExp]'
			|| stringValue === '[object Date]'
			|| isReactElement(value)
	}

	// see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25
	var canUseSymbol = typeof Symbol === 'function' && Symbol.for;
	var REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for('react.element') : 0xeac7;

	function isReactElement(value) {
		return value.$$typeof === REACT_ELEMENT_TYPE
	}

	function emptyTarget(val) {
		return Array.isArray(val) ? [] : {}
	}

	function cloneUnlessOtherwiseSpecified(value, options) {
		return (options.clone !== false && options.isMergeableObject(value))
			? deepmerge(emptyTarget(value), value, options)
			: value
	}

	function defaultArrayMerge(target, source, options) {
		return target.concat(source).map(function(element) {
			return cloneUnlessOtherwiseSpecified(element, options)
		})
	}

	function getMergeFunction(key, options) {
		if (!options.customMerge) {
			return deepmerge
		}
		var customMerge = options.customMerge(key);
		return typeof customMerge === 'function' ? customMerge : deepmerge
	}

	function getEnumerableOwnPropertySymbols(target) {
		return Object.getOwnPropertySymbols
			? Object.getOwnPropertySymbols(target).filter(function(symbol) {
				return Object.propertyIsEnumerable.call(target, symbol)
			})
			: []
	}

	function getKeys(target) {
		return Object.keys(target).concat(getEnumerableOwnPropertySymbols(target))
	}

	function propertyIsOnObject(object, property) {
		try {
			return property in object
		} catch(_) {
			return false
		}
	}

	// Protects from prototype poisoning and unexpected merging up the prototype chain.
	function propertyIsUnsafe(target, key) {
		return propertyIsOnObject(target, key) // Properties are safe to merge if they don't exist in the target yet,
			&& !(Object.hasOwnProperty.call(target, key) // unsafe if they exist up the prototype chain,
				&& Object.propertyIsEnumerable.call(target, key)) // and also unsafe if they're nonenumerable.
	}

	function mergeObject(target, source, options) {
		var destination = {};
		if (options.isMergeableObject(target)) {
			getKeys(target).forEach(function(key) {
				destination[key] = cloneUnlessOtherwiseSpecified(target[key], options);
			});
		}
		getKeys(source).forEach(function(key) {
			if (propertyIsUnsafe(target, key)) {
				return
			}

			if (propertyIsOnObject(target, key) && options.isMergeableObject(source[key])) {
				destination[key] = getMergeFunction(key, options)(target[key], source[key], options);
			} else {
				destination[key] = cloneUnlessOtherwiseSpecified(source[key], options);
			}
		});
		return destination
	}

	function deepmerge(target, source, options) {
		options = options || {};
		options.arrayMerge = options.arrayMerge || defaultArrayMerge;
		options.isMergeableObject = options.isMergeableObject || isMergeableObject;
		// cloneUnlessOtherwiseSpecified is added to `options` so that custom arrayMerge()
		// implementations can use it. The caller may not replace it.
		options.cloneUnlessOtherwiseSpecified = cloneUnlessOtherwiseSpecified;

		var sourceIsArray = Array.isArray(source);
		var targetIsArray = Array.isArray(target);
		var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;

		if (!sourceAndTargetTypesMatch) {
			return cloneUnlessOtherwiseSpecified(source, options)
		} else if (sourceIsArray) {
			return options.arrayMerge(target, source, options)
		} else {
			return mergeObject(target, source, options)
		}
	}

	deepmerge.all = function deepmergeAll(array, options) {
		if (!Array.isArray(array)) {
			throw new Error('first argument should be an array')
		}

		return array.reduce(function(prev, next) {
			return deepmerge(prev, next, options)
		}, {})
	};

	var deepmerge_1 = deepmerge;

	return deepmerge_1;

}));


---

File name: node_modules\deepmerge\index.d.ts

Code:
declare function deepmerge<T>(x: Partial<T>, y: Partial<T>, options?: deepmerge.Options): T;
declare function deepmerge<T1, T2>(x: Partial<T1>, y: Partial<T2>, options?: deepmerge.Options): T1 & T2;

declare namespace deepmerge {
	export interface Options {
		arrayMerge?(target: any[], source: any[], options?: ArrayMergeOptions): any[];
		clone?: boolean;
		customMerge?: (key: string, options?: Options) => ((x: any, y: any) => any) | undefined;
		isMergeableObject?(value: object): boolean;
	}
	export interface ArrayMergeOptions {
		isMergeableObject(value: object): boolean;
		cloneUnlessOtherwiseSpecified(value: object, options?: Options): object;
	}

	export function all (objects: object[], options?: Options): object;
	export function all<T> (objects: Partial<T>[], options?: Options): T;
}

export = deepmerge;


---

File name: node_modules\deepmerge\index.js

Code:
var defaultIsMergeableObject = require('is-mergeable-object')

function emptyTarget(val) {
	return Array.isArray(val) ? [] : {}
}

function cloneUnlessOtherwiseSpecified(value, options) {
	return (options.clone !== false && options.isMergeableObject(value))
		? deepmerge(emptyTarget(value), value, options)
		: value
}

function defaultArrayMerge(target, source, options) {
	return target.concat(source).map(function(element) {
		return cloneUnlessOtherwiseSpecified(element, options)
	})
}

function getMergeFunction(key, options) {
	if (!options.customMerge) {
		return deepmerge
	}
	var customMerge = options.customMerge(key)
	return typeof customMerge === 'function' ? customMerge : deepmerge
}

function getEnumerableOwnPropertySymbols(target) {
	return Object.getOwnPropertySymbols
		? Object.getOwnPropertySymbols(target).filter(function(symbol) {
			return Object.propertyIsEnumerable.call(target, symbol)
		})
		: []
}

function getKeys(target) {
	return Object.keys(target).concat(getEnumerableOwnPropertySymbols(target))
}

function propertyIsOnObject(object, property) {
	try {
		return property in object
	} catch(_) {
		return false
	}
}

// Protects from prototype poisoning and unexpected merging up the prototype chain.
function propertyIsUnsafe(target, key) {
	return propertyIsOnObject(target, key) // Properties are safe to merge if they don't exist in the target yet,
		&& !(Object.hasOwnProperty.call(target, key) // unsafe if they exist up the prototype chain,
			&& Object.propertyIsEnumerable.call(target, key)) // and also unsafe if they're nonenumerable.
}

function mergeObject(target, source, options) {
	var destination = {}
	if (options.isMergeableObject(target)) {
		getKeys(target).forEach(function(key) {
			destination[key] = cloneUnlessOtherwiseSpecified(target[key], options)
		})
	}
	getKeys(source).forEach(function(key) {
		if (propertyIsUnsafe(target, key)) {
			return
		}

		if (propertyIsOnObject(target, key) && options.isMergeableObject(source[key])) {
			destination[key] = getMergeFunction(key, options)(target[key], source[key], options)
		} else {
			destination[key] = cloneUnlessOtherwiseSpecified(source[key], options)
		}
	})
	return destination
}

function deepmerge(target, source, options) {
	options = options || {}
	options.arrayMerge = options.arrayMerge || defaultArrayMerge
	options.isMergeableObject = options.isMergeableObject || defaultIsMergeableObject
	// cloneUnlessOtherwiseSpecified is added to `options` so that custom arrayMerge()
	// implementations can use it. The caller may not replace it.
	options.cloneUnlessOtherwiseSpecified = cloneUnlessOtherwiseSpecified

	var sourceIsArray = Array.isArray(source)
	var targetIsArray = Array.isArray(target)
	var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray

	if (!sourceAndTargetTypesMatch) {
		return cloneUnlessOtherwiseSpecified(source, options)
	} else if (sourceIsArray) {
		return options.arrayMerge(target, source, options)
	} else {
		return mergeObject(target, source, options)
	}
}

deepmerge.all = function deepmergeAll(array, options) {
	if (!Array.isArray(array)) {
		throw new Error('first argument should be an array')
	}

	return array.reduce(function(prev, next) {
		return deepmerge(prev, next, options)
	}, {})
}

module.exports = deepmerge


---

File name: node_modules\deepmerge\license.txt

Code:
The MIT License (MIT)

Copyright (c) 2012 James Halliday, Josh Duff, and other contributors

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.


---

File name: node_modules\deepmerge\package.json

Code:
{
  "name": "deepmerge",
  "description": "A library for deep (recursive) merging of Javascript objects",
  "keywords": [
    "merge",
    "deep",
    "extend",
    "copy",
    "clone",
    "recursive"
  ],
  "version": "4.3.1",
  "homepage": "https://github.com/TehShrike/deepmerge",
  "repository": {
    "type": "git",
    "url": "git://github.com/TehShrike/deepmerge.git"
  },
  "main": "dist/cjs.js",
  "engines": {
    "node": ">=0.10.0"
  },
  "scripts": {
    "build": "rollup -c",
    "test": "npm run build && tape test/*.js && jsmd readme.md && npm run test:typescript",
    "test:typescript": "tsc --noEmit test/typescript.ts && ts-node test/typescript.ts",
    "size": "npm run build && uglifyjs --compress --mangle -- ./dist/umd.js | gzip -c | wc -c"
  },
  "devDependencies": {
    "@types/node": "^8.10.54",
    "is-mergeable-object": "1.1.0",
    "is-plain-object": "^5.0.0",
    "jsmd": "^1.0.2",
    "rollup": "^1.23.1",
    "rollup-plugin-commonjs": "^10.1.0",
    "rollup-plugin-node-resolve": "^5.2.0",
    "tape": "^4.11.0",
    "ts-node": "7.0.1",
    "typescript": "=2.2.2",
    "uglify-js": "^3.6.1"
  },
  "license": "MIT"
}


---

File name: node_modules\deepmerge\readme.md

Code:
# deepmerge

Merges the enumerable properties of two or more objects deeply.

> UMD bundle is 723B minified+gzipped

## Getting Started

### Example Usage
<!--js
const merge = require('./')
-->

```js
const x = {
	foo: { bar: 3 },
	array: [{
		does: 'work',
		too: [ 1, 2, 3 ]
	}]
}

const y = {
	foo: { baz: 4 },
	quux: 5,
	array: [{
		does: 'work',
		too: [ 4, 5, 6 ]
	}, {
		really: 'yes'
	}]
}

const output = {
	foo: {
		bar: 3,
		baz: 4
	},
	array: [{
		does: 'work',
		too: [ 1, 2, 3 ]
	}, {
		does: 'work',
		too: [ 4, 5, 6 ]
	}, {
		really: 'yes'
	}],
	quux: 5
}

merge(x, y) // => output
```


### Installation

With [npm](http://npmjs.org) do:

```sh
npm install deepmerge
```

deepmerge can be used directly in the browser without the use of package managers/bundlers as well:  [UMD version from unpkg.com](https://unpkg.com/deepmerge/dist/umd.js).


### Include

deepmerge exposes a CommonJS entry point:

```
const merge = require('deepmerge')
```

The ESM entry point was dropped due to a [Webpack bug](https://github.com/webpack/webpack/issues/6584).

# API


## `merge(x, y, [options])`

Merge two objects `x` and `y` deeply, returning a new merged object with the
elements from both `x` and `y`.

If an element at the same key is present for both `x` and `y`, the value from
`y` will appear in the result.

Merging creates a new object, so that neither `x` or `y` is modified.

**Note:** By default, arrays are merged by concatenating them.

## `merge.all(arrayOfObjects, [options])`

Merges any number of objects into a single result object.

```js
const foobar = { foo: { bar: 3 } }
const foobaz = { foo: { baz: 4 } }
const bar = { bar: 'yay!' }

merge.all([ foobar, foobaz, bar ]) // => { foo: { bar: 3, baz: 4 }, bar: 'yay!' }
```


## Options

### `arrayMerge`

There are multiple ways to merge two arrays, below are a few examples but you can also create your own custom function.

Your `arrayMerge` function will be called with three arguments: a `target` array, the `source` array, and an `options` object with these properties:

- `isMergeableObject(value)`
- `cloneUnlessOtherwiseSpecified(value, options)`

#### `arrayMerge` example: overwrite target array

Overwrites the existing array values completely rather than concatenating them:

```js
const overwriteMerge = (destinationArray, sourceArray, options) => sourceArray

merge(
	[1, 2, 3],
	[3, 2, 1],
	{ arrayMerge: overwriteMerge }
) // => [3, 2, 1]
```

#### `arrayMerge` example: combine arrays

Combines objects at the same index in the two arrays.

This was the default array merging algorithm pre-version-2.0.0.

```js
const combineMerge = (target, source, options) => {
	const destination = target.slice()

	source.forEach((item, index) => {
		if (typeof destination[index] === 'undefined') {
			destination[index] = options.cloneUnlessOtherwiseSpecified(item, options)
		} else if (options.isMergeableObject(item)) {
			destination[index] = merge(target[index], item, options)
		} else if (target.indexOf(item) === -1) {
			destination.push(item)
		}
	})
	return destination
}

merge(
	[{ a: true }],
	[{ b: true }, 'ah yup'],
	{ arrayMerge: combineMerge }
) // => [{ a: true, b: true }, 'ah yup']
```

### `isMergeableObject`

By default, deepmerge clones every property from almost every kind of object.

You may not want this, if your objects are of special types, and you want to copy the whole object instead of just copying its properties.

You can accomplish this by passing in a function for the `isMergeableObject` option.

If you only want to clone properties of plain objects, and ignore all "special" kinds of instantiated objects, you probably want to drop in [`is-plain-object`](https://github.com/jonschlinkert/is-plain-object).

```js
const { isPlainObject } = require('is-plain-object')

function SuperSpecial() {
	this.special = 'oh yeah man totally'
}

const instantiatedSpecialObject = new SuperSpecial()

const target = {
	someProperty: {
		cool: 'oh for sure'
	}
}

const source = {
	someProperty: instantiatedSpecialObject
}

const defaultOutput = merge(target, source)

defaultOutput.someProperty.cool // => 'oh for sure'
defaultOutput.someProperty.special // => 'oh yeah man totally'
defaultOutput.someProperty instanceof SuperSpecial // => false

const customMergeOutput = merge(target, source, {
	isMergeableObject: isPlainObject
})

customMergeOutput.someProperty.cool // => undefined
customMergeOutput.someProperty.special // => 'oh yeah man totally'
customMergeOutput.someProperty instanceof SuperSpecial // => true
```

### `customMerge`

Specifies a function which can be used to override the default merge behavior for a property, based on the property name.

The `customMerge` function will be passed the key for each property, and should return the function which should be used to merge the values for that property.

It may also return undefined, in which case the default merge behaviour will be used.

```js
const alex = {
	name: {
		first: 'Alex',
		last: 'Alexson'
	},
	pets: ['Cat', 'Parrot']
}

const tony = {
	name: {
		first: 'Tony',
		last: 'Tonison'
	},
	pets: ['Dog']
}

const mergeNames = (nameA, nameB) => `${nameA.first} and ${nameB.first}`

const options = {
	customMerge: (key) => {
		if (key === 'name') {
			return mergeNames
		}
	}
}

const result = merge(alex, tony, options)

result.name // => 'Alex and Tony'
result.pets // => ['Cat', 'Parrot', 'Dog']
```


### `clone`

*Deprecated.*

Defaults to `true`.

If `clone` is `false` then child objects will be copied directly instead of being cloned.  This was the default behavior before version 2.x.


# Testing

With [npm](http://npmjs.org) do:

```sh
npm test
```


# License

MIT


---

File name: node_modules\deepmerge\rollup.config.js

Code:
import resolve from 'rollup-plugin-node-resolve'
import commonjs from 'rollup-plugin-commonjs'
import pkg from './package.json'

export default {
	input: `index.js`,
	plugins: [
		commonjs(),
		resolve(),
	],
	output: [
		{
			file: pkg.main,
			format: `cjs`
		},
		{
			name: 'deepmerge',
			file: 'dist/umd.js',
			format: `umd`
		},
	],
}


---

File name: node_modules\define-data-property\CHANGELOG.md

Code:
# Changelog

All notable changes to this project will be documented in this file.

The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/)
and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).

## [v1.1.4](https://github.com/ljharb/define-data-property/compare/v1.1.3...v1.1.4) - 2024-02-13

### Commits

- [Refactor] use `es-define-property` [`90f2f4c`](https://github.com/ljharb/define-data-property/commit/90f2f4cc20298401e71c28e1e08888db12021453)
- [Dev Deps] update `@types/object.getownpropertydescriptors` [`cd929d9`](https://github.com/ljharb/define-data-property/commit/cd929d9a04f5f2fdcfa9d5be140940b91a083153)

## [v1.1.3](https://github.com/ljharb/define-data-property/compare/v1.1.2...v1.1.3) - 2024-02-12

### Commits

- [types] hand-write d.ts instead of emitting it [`0cbc988`](https://github.com/ljharb/define-data-property/commit/0cbc988203c105f2d97948327c7167ebd33bd318)
- [meta] simplify `exports` [`690781e`](https://github.com/ljharb/define-data-property/commit/690781eed28bbf2d6766237efda0ba6dd591609e)
- [Dev Deps] update `hasown`; clean up DT packages [`6cdfd1c`](https://github.com/ljharb/define-data-property/commit/6cdfd1cb2d91d791bfd18cda5d5cab232fd5d8fc)
- [actions] cleanup [`3142bc6`](https://github.com/ljharb/define-data-property/commit/3142bc6a4bc406a51f5b04f31e98562a27f35ffd)
- [meta] add `funding` [`8474423`](https://github.com/ljharb/define-data-property/commit/847442391a79779af3e0f1bf0b5bb923552b7804)
- [Deps] update `get-intrinsic` [`3e9be00`](https://github.com/ljharb/define-data-property/commit/3e9be00e07784ba34e7c77d8bc0fdbc832ad61de)

## [v1.1.2](https://github.com/ljharb/define-data-property/compare/v1.1.1...v1.1.2) - 2024-02-05

### Commits

- [Dev Deps] update @types packages, `object-inspect`, `tape`, `typescript` [`df41bf8`](https://github.com/ljharb/define-data-property/commit/df41bf84ca3456be6226055caab44e38e3a7fd2f)
- [Dev Deps] update DT packages, `aud`, `npmignore`, `tape`, typescript` [`fab0e4e`](https://github.com/ljharb/define-data-property/commit/fab0e4ec709ee02b79f42d6db3ee5f26e0a34b8a)
- [Dev Deps] use `hasown` instead of `has` [`aa51ef9`](https://github.com/ljharb/define-data-property/commit/aa51ef93f6403d49d9bb72a807bcdb6e418978c0)
- [Refactor] use `es-errors`, so things that only need those do not need `get-intrinsic` [`d89be50`](https://github.com/ljharb/define-data-property/commit/d89be50571175888d391238605122679f7e65ffc)
- [Deps] update `has-property-descriptors` [`7af887c`](https://github.com/ljharb/define-data-property/commit/7af887c9083b59b195b0079e04815cfed9fcee2b)
- [Deps] update `get-intrinsic` [`bb8728e`](https://github.com/ljharb/define-data-property/commit/bb8728ec42cd998505a7157ae24853a560c20646)

## [v1.1.1](https://github.com/ljharb/define-data-property/compare/v1.1.0...v1.1.1) - 2023-10-12

### Commits

- [Tests] fix tests in ES3 engines [`5c6920e`](https://github.com/ljharb/define-data-property/commit/5c6920edd1f52f675b02f417e539c28135b43f94)
- [Dev Deps] update `@types/es-value-fixtures`, `@types/for-each`, `@types/gopd`, `@types/has-property-descriptors`, `tape`, `typescript` [`7d82dfc`](https://github.com/ljharb/define-data-property/commit/7d82dfc20f778b4465bba06335dd53f6f431aea3)
- [Fix] IE 8 has a broken `Object.defineProperty` [`0672e1a`](https://github.com/ljharb/define-data-property/commit/0672e1af2a9fcc787e7c23b96dea60d290df5548)
- [meta] emit types on prepack [`73acb1f`](https://github.com/ljharb/define-data-property/commit/73acb1f903c21b314ec7156bf10f73c7910530c0)
- [Dev Deps] update `tape`, `typescript` [`9489a77`](https://github.com/ljharb/define-data-property/commit/9489a7738bf2ecf0ac71d5b78ec4ca6ad7ba0142)

## [v1.1.0](https://github.com/ljharb/define-data-property/compare/v1.0.1...v1.1.0) - 2023-09-13

### Commits

- [New] add `loose` arg [`155235a`](https://github.com/ljharb/define-data-property/commit/155235a4c4d7741f6de01cd87c99599a56654b72)
- [New] allow `null` to be passed for the non* args [`7d2fa5f`](https://github.com/ljharb/define-data-property/commit/7d2fa5f06be0392736c13b126f7cd38979f34792)

## [v1.0.1](https://github.com/ljharb/define-data-property/compare/v1.0.0...v1.0.1) - 2023-09-12

### Commits

- [meta] add TS types [`43d763c`](https://github.com/ljharb/define-data-property/commit/43d763c6c883f652de1c9c02ef6216ee507ffa69)
- [Dev Deps] update `@types/tape`, `typescript` [`f444985`](https://github.com/ljharb/define-data-property/commit/f444985811c36f3e6448a03ad2f9b7898917f4c7)
- [meta] add `safe-publish-latest`, [`172bb10`](https://github.com/ljharb/define-data-property/commit/172bb10890896ebb160e64398f6ee55760107bee)

## v1.0.0 - 2023-09-12

### Commits

- Initial implementation, tests, readme [`5b43d6b`](https://github.com/ljharb/define-data-property/commit/5b43d6b44e675a904810467a7d4e0adb7efc3196)
- Initial commit [`35e577a`](https://github.com/ljharb/define-data-property/commit/35e577a6ba59a98befa97776d70d90f3bea9009d)
- npm init [`82a0a04`](https://github.com/ljharb/define-data-property/commit/82a0a04a321ca7de220af02d41e2745e8a9962ed)
- Only apps should have lockfiles [`96df244`](https://github.com/ljharb/define-data-property/commit/96df244a3c6f426f9a2437be825d1c6f5dd7158e)
- [meta] use `npmignore` to autogenerate an npmignore file [`a87ff18`](https://github.com/ljharb/define-data-property/commit/a87ff18cb79e14c2eb5720486c4759fd9a189375)


---

File name: node_modules\define-data-property\index.d.ts

Code:

declare function defineDataProperty(
    obj: Record<PropertyKey, unknown>,
    property: keyof typeof obj,
    value: typeof obj[typeof property],
    nonEnumerable?: boolean | null,
    nonWritable?: boolean | null,
    nonConfigurable?: boolean | null,
    loose?: boolean
): void;

export = defineDataProperty;

---

File name: node_modules\define-data-property\index.js

Code:
'use strict';

var $defineProperty = require('es-define-property');

var $SyntaxError = require('es-errors/syntax');
var $TypeError = require('es-errors/type');

var gopd = require('gopd');

/** @type {import('.')} */
module.exports = function defineDataProperty(
	obj,
	property,
	value
) {
	if (!obj || (typeof obj !== 'object' && typeof obj !== 'function')) {
		throw new $TypeError('`obj` must be an object or a function`');
	}
	if (typeof property !== 'string' && typeof property !== 'symbol') {
		throw new $TypeError('`property` must be a string or a symbol`');
	}
	if (arguments.length > 3 && typeof arguments[3] !== 'boolean' && arguments[3] !== null) {
		throw new $TypeError('`nonEnumerable`, if provided, must be a boolean or null');
	}
	if (arguments.length > 4 && typeof arguments[4] !== 'boolean' && arguments[4] !== null) {
		throw new $TypeError('`nonWritable`, if provided, must be a boolean or null');
	}
	if (arguments.length > 5 && typeof arguments[5] !== 'boolean' && arguments[5] !== null) {
		throw new $TypeError('`nonConfigurable`, if provided, must be a boolean or null');
	}
	if (arguments.length > 6 && typeof arguments[6] !== 'boolean') {
		throw new $TypeError('`loose`, if provided, must be a boolean');
	}

	var nonEnumerable = arguments.length > 3 ? arguments[3] : null;
	var nonWritable = arguments.length > 4 ? arguments[4] : null;
	var nonConfigurable = arguments.length > 5 ? arguments[5] : null;
	var loose = arguments.length > 6 ? arguments[6] : false;

	/* @type {false | TypedPropertyDescriptor<unknown>} */
	var desc = !!gopd && gopd(obj, property);

	if ($defineProperty) {
		$defineProperty(obj, property, {
			configurable: nonConfigurable === null && desc ? desc.configurable : !nonConfigurable,
			enumerable: nonEnumerable === null && desc ? desc.enumerable : !nonEnumerable,
			value: value,
			writable: nonWritable === null && desc ? desc.writable : !nonWritable
		});
	} else if (loose || (!nonEnumerable && !nonWritable && !nonConfigurable)) {
		// must fall back to [[Set]], and was not explicitly asked to make non-enumerable, non-writable, or non-configurable
		obj[property] = value; // eslint-disable-line no-param-reassign
	} else {
		throw new $SyntaxError('This environment does not support defining a property as non-configurable, non-writable, or non-enumerable.');
	}
};


---

File name: node_modules\define-data-property\package.json

Code:
{
	"name": "define-data-property",
	"version": "1.1.4",
	"description": "Define a data property on an object. Will fall back to assignment in an engine without descriptors.",
	"main": "index.js",
	"types": "./index.d.ts",
	"exports": {
		".": "./index.js",
		"./package.json": "./package.json"
	},
	"sideEffects": false,
	"scripts": {
		"prepack": "npmignore --auto --commentLines=autogenerated",
		"prepublish": "not-in-publish || npm run prepublishOnly",
		"prepublishOnly": "safe-publish-latest",
		"tsc": "tsc -p .",
		"prelint": "evalmd README.md",
		"lint": "eslint --ext=js,mjs .",
		"postlint": "npm run tsc",
		"pretest": "npm run lint",
		"tests-only": "nyc tape 'test/**/*.js'",
		"test": "npm run tests-only",
		"posttest": "aud --production",
		"version": "auto-changelog && git add CHANGELOG.md",
		"postversion": "auto-changelog && git add CHANGELOG.md && git commit --no-edit --amend && git tag -f \"v$(node -e \"console.log(require('./package.json').version)\")\""
	},
	"repository": {
		"type": "git",
		"url": "git+https://github.com/ljharb/define-data-property.git"
	},
	"keywords": [
		"define",
		"data",
		"property",
		"object",
		"accessor",
		"javascript",
		"ecmascript",
		"enumerable",
		"configurable",
		"writable"
	],
	"author": "Jordan Harband <ljharb@gmail.com>",
	"funding": {
		"url": "https://github.com/sponsors/ljharb"
	},
	"license": "MIT",
	"bugs": {
		"url": "https://github.com/ljharb/define-data-property/issues"
	},
	"homepage": "https://github.com/ljharb/define-data-property#readme",
	"dependencies": {
		"es-define-property": "^1.0.0",
		"es-errors": "^1.3.0",
		"gopd": "^1.0.1"
	},
	"devDependencies": {
		"@ljharb/eslint-config": "^21.1.0",
		"@types/call-bind": "^1.0.5",
		"@types/define-properties": "^1.1.5",
		"@types/es-value-fixtures": "^1.4.4",
		"@types/for-each": "^0.3.3",
		"@types/get-intrinsic": "^1.2.2",
		"@types/gopd": "^1.0.3",
		"@types/has-property-descriptors": "^1.0.3",
		"@types/object-inspect": "^1.8.4",
		"@types/object.getownpropertydescriptors": "^2.1.4",
		"@types/tape": "^5.6.4",
		"aud": "^2.0.4",
		"auto-changelog": "^2.4.0",
		"es-value-fixtures": "^1.4.2",
		"eslint": "=8.8.0",
		"evalmd": "^0.0.19",
		"for-each": "^0.3.3",
		"hasown": "^2.0.1",
		"in-publish": "^2.0.1",
		"npmignore": "^0.3.1",
		"nyc": "^10.3.2",
		"object-inspect": "^1.13.1",
		"object.getownpropertydescriptors": "^2.1.7",
		"reflect.ownkeys": "^1.1.4",
		"safe-publish-latest": "^2.0.0",
		"tape": "^5.7.4",
		"typescript": "next"
	},
	"engines": {
		"node": ">= 0.4"
	},
	"testling": {
		"files": "test/index.js"
	},
	"auto-changelog": {
		"output": "CHANGELOG.md",
		"template": "keepachangelog",
		"unreleased": false,
		"commitLimit": false,
		"backfillLimit": false,
		"hideCredit": true
	},
	"publishConfig": {
		"ignore": [
			".github/workflows",
			"types/reflect.ownkeys"
		]
	}
}


---

File name: node_modules\define-data-property\README.md

Code:
# define-data-property <sup>[![Version Badge][npm-version-svg]][package-url]</sup>

[![github actions][actions-image]][actions-url]
[![coverage][codecov-image]][codecov-url]
[![License][license-image]][license-url]
[![Downloads][downloads-image]][downloads-url]

[![npm badge][npm-badge-png]][package-url]

Define a data property on an object. Will fall back to assignment in an engine without descriptors.

The three `non*` argument can also be passed `null`, which will use the existing state if available.

The `loose` argument will mean that if you attempt to set a non-normal data property, in an environment without descriptor support, it will fall back to normal assignment.

## Usage

```javascript
var defineDataProperty = require('define-data-property');
var assert = require('assert');

var obj = {};
defineDataProperty(obj, 'key', 'value');
defineDataProperty(
	obj,
	'key2',
	'value',
	true, // nonEnumerable, optional
	false, // nonWritable, optional
	true, // nonConfigurable, optional
	false // loose, optional
);

assert.deepEqual(
	Object.getOwnPropertyDescriptors(obj),
	{
		key: {
			configurable: true,
			enumerable: true,
			value: 'value',
			writable: true,
		},
		key2: {
			configurable: false,
			enumerable: false,
			value: 'value',
			writable: true,
		},
	}
);
```

[package-url]: https://npmjs.org/package/define-data-property
[npm-version-svg]: https://versionbadg.es/ljharb/define-data-property.svg
[deps-svg]: https://david-dm.org/ljharb/define-data-property.svg
[deps-url]: https://david-dm.org/ljharb/define-data-property
[dev-deps-svg]: https://david-dm.org/ljharb/define-data-property/dev-status.svg
[dev-deps-url]: https://david-dm.org/ljharb/define-data-property#info=devDependencies
[npm-badge-png]: https://nodei.co/npm/define-data-property.png?downloads=true&stars=true
[license-image]: https://img.shields.io/npm/l/define-data-property.svg
[license-url]: LICENSE
[downloads-image]: https://img.shields.io/npm/dm/define-data-property.svg
[downloads-url]: https://npm-stat.com/charts.html?package=define-data-property
[codecov-image]: https://codecov.io/gh/ljharb/define-data-property/branch/main/graphs/badge.svg
[codecov-url]: https://app.codecov.io/gh/ljharb/define-data-property/
[actions-image]: https://img.shields.io/endpoint?url=https://github-actions-badge-u3jn4tfpocch.runkit.sh/ljharb/define-data-property
[actions-url]: https://github.com/ljharb/define-data-property/actions


---

File name: node_modules\define-data-property\test\index.js

Code:
'use strict';

var test = require('tape');
var v = require('es-value-fixtures');
var forEach = require('for-each');
var inspect = require('object-inspect');
var hasOwn = require('hasown');
var hasPropertyDescriptors = require('has-property-descriptors')();
var getOwnPropertyDescriptors = require('object.getownpropertydescriptors');
var ownKeys = require('reflect.ownkeys');

var defineDataProperty = require('../');

test('defineDataProperty', function (t) {
	t.test('argument validation', function (st) {
		forEach(v.primitives, function (nonObject) {
			st['throws'](
				// @ts-expect-error
				function () { defineDataProperty(nonObject, 'key', 'value'); },
				TypeError,
				'throws on non-object input: ' + inspect(nonObject)
			);
		});

		forEach(v.nonPropertyKeys, function (nonPropertyKey) {
			st['throws'](
				// @ts-expect-error
				function () { defineDataProperty({}, nonPropertyKey, 'value'); },
				TypeError,
				'throws on non-PropertyKey input: ' + inspect(nonPropertyKey)
			);
		});

		forEach(v.nonBooleans, function (nonBoolean) {
			if (nonBoolean !== null) {
				st['throws'](
					// @ts-expect-error
					function () { defineDataProperty({}, 'key', 'value', nonBoolean); },
					TypeError,
					'throws on non-boolean nonEnumerable: ' + inspect(nonBoolean)
				);

				st['throws'](
					// @ts-expect-error
					function () { defineDataProperty({}, 'key', 'value', false, nonBoolean); },
					TypeError,
					'throws on non-boolean nonWritable: ' + inspect(nonBoolean)
				);

				st['throws'](
					// @ts-expect-error
					function () { defineDataProperty({}, 'key', 'value', false, false, nonBoolean); },
					TypeError,
					'throws on non-boolean nonConfigurable: ' + inspect(nonBoolean)
				);
			}
		});

		st.end();
	});

	t.test('normal data property', function (st) {
		/** @type {Record<PropertyKey, string>} */
		var obj = { existing: 'existing property' };
		st.ok(hasOwn(obj, 'existing'), 'has initial own property');
		st.equal(obj.existing, 'existing property', 'has expected initial value');

		var res = defineDataProperty(obj, 'added', 'added property');
		st.equal(res, void undefined, 'returns `undefined`');
		st.ok(hasOwn(obj, 'added'), 'has expected own property');
		st.equal(obj.added, 'added property', 'has expected value');

		defineDataProperty(obj, 'existing', 'new value');
		st.ok(hasOwn(obj, 'existing'), 'still has expected own property');
		st.equal(obj.existing, 'new value', 'has new expected value');

		defineDataProperty(obj, 'explicit1', 'new value', false);
		st.ok(hasOwn(obj, 'explicit1'), 'has expected own property (explicit enumerable)');
		st.equal(obj.explicit1, 'new value', 'has new expected value (explicit enumerable)');

		defineDataProperty(obj, 'explicit2', 'new value', false, false);
		st.ok(hasOwn(obj, 'explicit2'), 'has expected own property (explicit writable)');
		st.equal(obj.explicit2, 'new value', 'has new expected value (explicit writable)');

		defineDataProperty(obj, 'explicit3', 'new value', false, false, false);
		st.ok(hasOwn(obj, 'explicit3'), 'has expected own property (explicit configurable)');
		st.equal(obj.explicit3, 'new value', 'has new expected value (explicit configurable)');

		st.end();
	});

	t.test('loose mode', { skip: !hasPropertyDescriptors }, function (st) {
		var obj = { existing: 'existing property' };

		defineDataProperty(obj, 'added', 'added value 1', true, null, null, true);
		st.deepEqual(
			getOwnPropertyDescriptors(obj),
			{
				existing: {
					configurable: true,
					enumerable: true,
					value: 'existing property',
					writable: true
				},
				added: {
					configurable: true,
					enumerable: !hasPropertyDescriptors,
					value: 'added value 1',
					writable: true
				}
			},
			'in loose mode, obj still adds property 1'
		);

		defineDataProperty(obj, 'added', 'added value 2', false, true, null, true);
		st.deepEqual(
			getOwnPropertyDescriptors(obj),
			{
				existing: {
					configurable: true,
					enumerable: true,
					value: 'existing property',
					writable: true
				},
				added: {
					configurable: true,
					enumerable: true,
					value: 'added value 2',
					writable: !hasPropertyDescriptors
				}
			},
			'in loose mode, obj still adds property 2'
		);

		defineDataProperty(obj, 'added', 'added value 3', false, false, true, true);
		st.deepEqual(
			getOwnPropertyDescriptors(obj),
			{
				existing: {
					configurable: true,
					enumerable: true,
					value: 'existing property',
					writable: true
				},
				added: {
					configurable: !hasPropertyDescriptors,
					enumerable: true,
					value: 'added value 3',
					writable: true
				}
			},
			'in loose mode, obj still adds property 3'
		);

		st.end();
	});

	t.test('non-normal data property, ES3', { skip: hasPropertyDescriptors }, function (st) {
		/** @type {Record<PropertyKey, string>} */
		var obj = { existing: 'existing property' };

		st['throws'](
			function () { defineDataProperty(obj, 'added', 'added value', true); },
			SyntaxError,
			'nonEnumerable throws a Syntax Error'
		);

		st['throws'](
			function () { defineDataProperty(obj, 'added', 'added value', false, true); },
			SyntaxError,
			'nonWritable throws a Syntax Error'
		);

		st['throws'](
			function () { defineDataProperty(obj, 'added', 'added value', false, false, true); },
			SyntaxError,
			'nonWritable throws a Syntax Error'
		);

		st.deepEqual(
			ownKeys(obj),
			['existing'],
			'obj still has expected keys'
		);
		st.equal(obj.existing, 'existing property', 'obj still has expected values');

		st.end();
	});

	t.test('new non-normal data property, ES5+', { skip: !hasPropertyDescriptors }, function (st) {
		/** @type {Record<PropertyKey, string>} */
		var obj = { existing: 'existing property' };

		defineDataProperty(obj, 'nonEnum', null, true);
		defineDataProperty(obj, 'nonWrit', null, false, true);
		defineDataProperty(obj, 'nonConf', null, false, false, true);

		st.deepEqual(
			getOwnPropertyDescriptors(obj),
			{
				existing: {
					configurable: true,
					enumerable: true,
					value: 'existing property',
					writable: true
				},
				nonEnum: {
					configurable: true,
					enumerable: false,
					value: null,
					writable: true
				},
				nonWrit: {
					configurable: true,
					enumerable: true,
					value: null,
					writable: false
				},
				nonConf: {
					configurable: false,
					enumerable: true,
					value: null,
					writable: true
				}
			},
			'obj has expected property descriptors'
		);

		st.end();
	});

	t.test('existing non-normal data property, ES5+', { skip: !hasPropertyDescriptors }, function (st) {
		// test case changing an existing non-normal property

		/** @type {Record<string, null | string>} */
		var obj = {};
		Object.defineProperty(obj, 'nonEnum', { configurable: true, enumerable: false, value: null, writable: true });
		Object.defineProperty(obj, 'nonWrit', { configurable: true, enumerable: true, value: null, writable: false });
		Object.defineProperty(obj, 'nonConf', { configurable: false, enumerable: true, value: null, writable: true });

		st.deepEqual(
			getOwnPropertyDescriptors(obj),
			{
				nonEnum: {
					configurable: true,
					enumerable: false,
					value: null,
					writable: true
				},
				nonWrit: {
					configurable: true,
					enumerable: true,
					value: null,
					writable: false
				},
				nonConf: {
					configurable: false,
					enumerable: true,
					value: null,
					writable: true
				}
			},
			'obj initially has expected property descriptors'
		);

		defineDataProperty(obj, 'nonEnum', 'new value', false);
		defineDataProperty(obj, 'nonWrit', 'new value', false, false);
		st['throws'](
			function () { defineDataProperty(obj, 'nonConf', 'new value', false, false, false); },
			TypeError,
			'can not alter a nonconfigurable property'
		);

		st.deepEqual(
			getOwnPropertyDescriptors(obj),
			{
				nonEnum: {
					configurable: true,
					enumerable: true,
					value: 'new value',
					writable: true
				},
				nonWrit: {
					configurable: true,
					enumerable: true,
					value: 'new value',
					writable: true
				},
				nonConf: {
					configurable: false,
					enumerable: true,
					value: null,
					writable: true
				}
			},
			'obj ends up with expected property descriptors'
		);

		st.end();
	});

	t.test('frozen object, ES5+', { skip: !hasPropertyDescriptors }, function (st) {
		var frozen = Object.freeze({ existing: true });

		st['throws'](
			function () { defineDataProperty(frozen, 'existing', 'new value'); },
			TypeError,
			'frozen object can not modify an existing property'
		);

		st['throws'](
			function () { defineDataProperty(frozen, 'new', 'new property'); },
			TypeError,
			'frozen object can not add a new property'
		);

		st.end();
	});

	t.test('sealed object, ES5+', { skip: !hasPropertyDescriptors }, function (st) {
		var sealed = Object.seal({ existing: true });
		st.deepEqual(
			Object.getOwnPropertyDescriptor(sealed, 'existing'),
			{
				configurable: false,
				enumerable: true,
				value: true,
				writable: true
			},
			'existing value on sealed object has expected descriptor'
		);

		defineDataProperty(sealed, 'existing', 'new value');

		st.deepEqual(
			Object.getOwnPropertyDescriptor(sealed, 'existing'),
			{
				configurable: false,
				enumerable: true,
				value: 'new value',
				writable: true
			},
			'existing value on sealed object has changed descriptor'
		);

		st['throws'](
			function () { defineDataProperty(sealed, 'new', 'new property'); },
			TypeError,
			'sealed object can not add a new property'
		);

		st.end();
	});

	t.test('nonextensible object, ES5+', { skip: !hasPropertyDescriptors }, function (st) {
		var nonExt = Object.preventExtensions({ existing: true });

		st.deepEqual(
			Object.getOwnPropertyDescriptor(nonExt, 'existing'),
			{
				configurable: true,
				enumerable: true,
				value: true,
				writable: true
			},
			'existing value on non-extensible object has expected descriptor'
		);

		defineDataProperty(nonExt, 'existing', 'new value', true);

		st.deepEqual(
			Object.getOwnPropertyDescriptor(nonExt, 'existing'),
			{
				configurable: true,
				enumerable: false,
				value: 'new value',
				writable: true
			},
			'existing value on non-extensible object has changed descriptor'
		);

		st['throws'](
			function () { defineDataProperty(nonExt, 'new', 'new property'); },
			TypeError,
			'non-extensible object can not add a new property'
		);

		st.end();
	});

	t.end();
});


---

File name: node_modules\define-data-property\tsconfig.json

Code:
{
  "compilerOptions": {
    /* Visit https://aka.ms/tsconfig to read more about this file */

    /* Projects */

    /* Language and Environment */
    "target": "es2022",                                  /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */
    // "lib": [],                                        /* Specify a set of bundled library declaration files that describe the target runtime environment. */
    // "noLib": true,                                    /* Disable including any library files, including the default lib.d.ts. */
    "useDefineForClassFields": true,                     /* Emit ECMAScript-standard-compliant class fields. */
    // "moduleDetection": "auto",                        /* Control what method is used to detect module-format JS files. */

    /* Modules */
    "module": "commonjs",                                /* Specify what module code is generated. */
    // "rootDir": "./",                                  /* Specify the root folder within your source files. */
    // "moduleResolution": "node10",                     /* Specify how TypeScript looks up a file from a given module specifier. */
    // "baseUrl": "./",                                  /* Specify the base directory to resolve non-relative module names. */
    // "paths": {},                                      /* Specify a set of entries that re-map imports to additional lookup locations. */
    // "rootDirs": [],                                   /* Allow multiple folders to be treated as one when resolving modules. */
    "typeRoots": ["types"],                              /* Specify multiple folders that act like './node_modules/@types'. */
    "resolveJsonModule": true,                           /* Enable importing .json files. */

    /* JavaScript Support */
    "allowJs": true,                                    /* Allow JavaScript files to be a part of your program. Use the 'checkJS' option to get errors from these files. */
    "checkJs": true,                                    /* Enable error reporting in type-checked JavaScript files. */
    "maxNodeModuleJsDepth": 1,                          /* Specify the maximum folder depth used for checking JavaScript files from 'node_modules'. Only applicable with 'allowJs'. */

    /* Emit */
    "declaration": true,                                 /* Generate .d.ts files from TypeScript and JavaScript files in your project. */
    "declarationMap": true,                              /* Create sourcemaps for d.ts files. */
    // "emitDeclarationOnly": true,                      /* Only output d.ts files and not JavaScript files. */
    "noEmit": true,                                      /* Disable emitting files from a compilation. */

    /* Interop Constraints */
    "allowSyntheticDefaultImports": true,                /* Allow 'import x from y' when a module doesn't have a default export. */
    "esModuleInterop": true,                             /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables 'allowSyntheticDefaultImports' for type compatibility. */
    "forceConsistentCasingInFileNames": true,            /* Ensure that casing is correct in imports. */

    /* Type Checking */
    "strict": true,                                      /* Enable all strict type-checking options. */
    "noImplicitAny": true,                               /* Enable error reporting for expressions and declarations with an implied 'any' type. */
    "noImplicitThis": true,                              /* Enable error reporting when 'this' is given the type 'any'. */
    "useUnknownInCatchVariables": true,                  /* Default catch clause variables as 'unknown' instead of 'any'. */
    "noUnusedLocals": true,                              /* Enable error reporting when local variables aren't read. */
    "noUnusedParameters": true,                          /* Raise an error when a function parameter isn't read. */
    "noImplicitReturns": true,                           /* Enable error reporting for codepaths that do not explicitly return in a function. */
    "noFallthroughCasesInSwitch": true,                  /* Enable error reporting for fallthrough cases in switch statements. */
    "noUncheckedIndexedAccess": true,                    /* Add 'undefined' to a type when accessed using an index. */
    "noImplicitOverride": true,                          /* Ensure overriding members in derived classes are marked with an override modifier. */
    // "noPropertyAccessFromIndexSignature": true,       /* Enforces using indexed accessors for keys declared using an indexed type. */

    /* Completeness */
    // "skipLibCheck": true                                 /* Skip type checking all .d.ts files. */
  },
  "exclude": [
    "coverage"
  ]
}


---

File name: node_modules\define-properties\CHANGELOG.md

Code:
# Changelog

All notable changes to this project will be documented in this file.

The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/)
and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).

## [v1.2.1](https://github.com/ljharb/define-properties/compare/v1.2.0...v1.2.1) - 2023-09-12

### Commits

- [Refactor] use `define-data-property` [`e7782a7`](https://github.com/ljharb/define-properties/commit/e7782a7480a62f8b6e141b49371e6de4df176c97)
- [actions] use reusable rebase action [`cd249c3`](https://github.com/ljharb/define-properties/commit/cd249c3920607bc8eeb7c0cd5b672b810983cac5)
- [Dev Deps] update `@ljharb/eslint-config`, `aud`, `tape` [`8205f97`](https://github.com/ljharb/define-properties/commit/8205f9734a4da8ee5b3b29798788567a09b330e8)

## [v1.2.0](https://github.com/ljharb/define-properties/compare/v1.1.4...v1.2.0) - 2023-02-10

### Commits

- [New] if the predicate is boolean `true`, it compares the existing value with `===` as the predicate [`d8dd6fc`](https://github.com/ljharb/define-properties/commit/d8dd6fca40d7c5878a4b643b91e66ae5a513a194)
- [meta] add `auto-changelog` [`7ebe2b0`](https://github.com/ljharb/define-properties/commit/7ebe2b0a0f90e62b842942cd45e86864fe75d9f6)
- [meta] use `npmignore` to autogenerate an npmignore file [`647478a`](https://github.com/ljharb/define-properties/commit/647478a8401fbf053fb633c0a3a7c982da6bad74)
- [Dev Deps] update `@ljharb/eslint-config`, `aud`, `tape` [`e620d70`](https://github.com/ljharb/define-properties/commit/e620d707d2e1118a38796f22a862200eb0a53fff)
- [Dev Deps] update `aud`, `tape` [`f1e5072`](https://github.com/ljharb/define-properties/commit/f1e507225c2551a99ed4fe40d3fe71b0f44acf88)
- [actions] update checkout action [`628b3af`](https://github.com/ljharb/define-properties/commit/628b3af5c74b8f0963296d811a8f6fa657baf964)

<!-- auto-changelog-above -->

1.1.4 / 2022-04-14
=================
 * [Refactor] use `has-property-descriptors`
 * [readme] add github actions/codecov badges
 * [Docs] fix header parsing; remove testling
 * [Deps] update `object-keys`
 * [meta] use `prepublishOnly` script for npm 7+
 * [meta] add `funding` field; create FUNDING.yml
 * [actions] add "Allow Edits" workflow; automatic rebasing / merge commit blocking
 * [actions] reuse common workflows
 * [actions] update codecov uploader
 * [actions] use `node/install` instead of `node/run`; use `codecov` action
 * [Tests] migrate tests to Github Actions
 * [Tests] run `nyc` on all tests; use `tape` runner
 * [Tests] use shared travis-ci config
 * [Tests] use `npx aud` instead of `nsp` or `npm audit` with hoops
 * [Tests] remove `jscs`
 * [Dev Deps] update `eslint`, `@ljharb/eslint-config`, `safe-publish-latest`, `tape`; add `aud`, `safe-publish-latest`

1.1.3 / 2018-08-14
=================
 * [Refactor] use a for loop instead of `foreach` to make for smaller bundle sizes
 * [Robustness] cache `Array.prototype.concat` and `Object.defineProperty`
 * [Deps] update `object-keys`
 * [Dev Deps] update `eslint`, `@ljharb/eslint-config`, `nsp`, `tape`, `jscs`; remove unused eccheck script + dep
 * [Tests] use pretest/posttest for linting/security
 * [Tests] fix npm upgrades on older nodes

1.1.2 / 2015-10-14
=================
 * [Docs] Switch from vb.teelaun.ch to versionbadg.es for the npm version badge SVG
 * [Deps] Update `object-keys`
 * [Dev Deps] update `jscs`, `tape`, `eslint`, `@ljharb/eslint-config`, `nsp`
 * [Tests] up to `io.js` `v3.3`, `node` `v4.2`

1.1.1 / 2015-07-21
=================
 * [Deps] Update `object-keys`
 * [Dev Deps] Update `tape`, `eslint`
 * [Tests] Test on `io.js` `v2.4`

1.1.0 / 2015-07-01
=================
 * [New] Add support for symbol-valued properties.
 * [Dev Deps] Update `nsp`, `eslint`
 * [Tests] Test up to `io.js` `v2.3`

1.0.3 / 2015-05-30
=================
 * Using a more reliable check for supported property descriptors.

1.0.2 / 2015-05-23
=================
 * Test up to `io.js` `v2.0`
 * Update `tape`, `jscs`, `nsp`, `eslint`, `object-keys`, `editorconfig-tools`, `covert`

1.0.1 / 2015-01-06
=================
 * Update `object-keys` to fix ES3 support

1.0.0 / 2015-01-04
=================
  * v1.0.0


---

File name: node_modules\define-properties\index.js

Code:
'use strict';

var keys = require('object-keys');
var hasSymbols = typeof Symbol === 'function' && typeof Symbol('foo') === 'symbol';

var toStr = Object.prototype.toString;
var concat = Array.prototype.concat;
var defineDataProperty = require('define-data-property');

var isFunction = function (fn) {
	return typeof fn === 'function' && toStr.call(fn) === '[object Function]';
};

var supportsDescriptors = require('has-property-descriptors')();

var defineProperty = function (object, name, value, predicate) {
	if (name in object) {
		if (predicate === true) {
			if (object[name] === value) {
				return;
			}
		} else if (!isFunction(predicate) || !predicate()) {
			return;
		}
	}

	if (supportsDescriptors) {
		defineDataProperty(object, name, value, true);
	} else {
		defineDataProperty(object, name, value);
	}
};

var defineProperties = function (object, map) {
	var predicates = arguments.length > 2 ? arguments[2] : {};
	var props = keys(map);
	if (hasSymbols) {
		props = concat.call(props, Object.getOwnPropertySymbols(map));
	}
	for (var i = 0; i < props.length; i += 1) {
		defineProperty(object, props[i], map[props[i]], predicates[props[i]]);
	}
};

defineProperties.supportsDescriptors = !!supportsDescriptors;

module.exports = defineProperties;


---

File name: node_modules\define-properties\package.json

Code:
{
	"name": "define-properties",
	"version": "1.2.1",
	"author": "Jordan Harband <ljharb@gmail.com>",
	"funding": {
		"url": "https://github.com/sponsors/ljharb"
	},
	"description": "Define multiple non-enumerable properties at once. Uses `Object.defineProperty` when available; falls back to standard assignment in older engines.",
	"license": "MIT",
	"main": "index.js",
	"scripts": {
		"prepack": "npmignore --auto --commentLines=autogenerated",
		"prepublish": "not-in-publish || npm run prepublishOnly",
		"prepublishOnly": "safe-publish-latest",
		"pretest": "npm run lint",
		"test": "npm run tests-only",
		"posttest": "aud --production",
		"tests-only": "nyc tape 'test/**/*.js'",
		"lint": "eslint --ext=js,mjs .",
		"version": "auto-changelog && git add CHANGELOG.md",
		"postversion": "auto-changelog && git add CHANGELOG.md && git commit --no-edit --amend && git tag -f \"v$(node -e \"console.log(require('./package.json').version)\")\""
	},
	"repository": {
		"type": "git",
		"url": "git://github.com/ljharb/define-properties.git"
	},
	"keywords": [
		"Object.defineProperty",
		"Object.defineProperties",
		"object",
		"property descriptor",
		"descriptor",
		"define",
		"ES5"
	],
	"dependencies": {
		"define-data-property": "^1.0.1",
		"has-property-descriptors": "^1.0.0",
		"object-keys": "^1.1.1"
	},
	"devDependencies": {
		"@ljharb/eslint-config": "^21.1.0",
		"aud": "^2.0.3",
		"auto-changelog": "^2.4.0",
		"eslint": "=8.8.0",
		"in-publish": "^2.0.1",
		"npmignore": "^0.3.0",
		"nyc": "^10.3.2",
		"safe-publish-latest": "^2.0.0",
		"tape": "^5.6.6"
	},
	"testling": {
		"files": "test/index.js",
		"browsers": [
			"iexplore/6.0..latest",
			"firefox/3.0..6.0",
			"firefox/15.0..latest",
			"firefox/nightly",
			"chrome/4.0..10.0",
			"chrome/20.0..latest",
			"chrome/canary",
			"opera/10.0..latest",
			"opera/next",
			"safari/4.0..latest",
			"ipad/6.0..latest",
			"iphone/6.0..latest",
			"android-browser/4.2"
		]
	},
	"engines": {
		"node": ">= 0.4"
	},
	"auto-changelog": {
		"output": "CHANGELOG.md",
		"template": "keepachangelog",
		"unreleased": false,
		"commitLimit": false,
		"backfillLimit": false,
		"hideCredit": true,
		"startingVersion": "1.1.5"
	},
	"publishConfig": {
		"ignore": [
			".github/workflows",
			"test/"
		]
	}
}


---

File name: node_modules\define-properties\README.md

Code:
# define-properties <sup>[![Version Badge][npm-version-svg]][package-url]</sup>

[![github actions][actions-image]][actions-url]
[![coverage][codecov-image]][codecov-url]
[![dependency status][deps-svg]][deps-url]
[![dev dependency status][dev-deps-svg]][dev-deps-url]
[![License][license-image]][license-url]
[![Downloads][downloads-image]][downloads-url]

[![npm badge][npm-badge-png]][package-url]

Define multiple non-enumerable properties at once. Uses `Object.defineProperty` when available; falls back to standard assignment in older engines.
Existing properties are not overridden. Accepts a map of property names to a predicate that, when true, force-overrides.

## Example

```js
var define = require('define-properties');
var assert = require('assert');

var obj = define({ a: 1, b: 2 }, {
	a: 10,
	b: 20,
	c: 30
});
assert(obj.a === 1);
assert(obj.b === 2);
assert(obj.c === 30);
if (define.supportsDescriptors) {
	assert.deepEqual(Object.keys(obj), ['a', 'b']);
	assert.deepEqual(Object.getOwnPropertyDescriptor(obj, 'c'), {
		configurable: true,
		enumerable: false,
		value: 30,
		writable: false
	});
}
```

Then, with predicates:
```js
var define = require('define-properties');
var assert = require('assert');

var obj = define({ a: 1, b: 2, c: 3 }, {
	a: 10,
	b: 20,
	c: 30
}, {
	a: function () { return false; },
	b: function () { return true; }
});
assert(obj.a === 1);
assert(obj.b === 20);
assert(obj.c === 3);
if (define.supportsDescriptors) {
	assert.deepEqual(Object.keys(obj), ['a', 'c']);
	assert.deepEqual(Object.getOwnPropertyDescriptor(obj, 'b'), {
		configurable: true,
		enumerable: false,
		value: 20,
		writable: false
	});
}
```

## Tests
Simply clone the repo, `npm install`, and run `npm test`

[package-url]: https://npmjs.org/package/define-properties
[npm-version-svg]: https://versionbadg.es/ljharb/define-properties.svg
[deps-svg]: https://david-dm.org/ljharb/define-properties.svg
[deps-url]: https://david-dm.org/ljharb/define-properties
[dev-deps-svg]: https://david-dm.org/ljharb/define-properties/dev-status.svg
[dev-deps-url]: https://david-dm.org/ljharb/define-properties#info=devDependencies
[npm-badge-png]: https://nodei.co/npm/define-properties.png?downloads=true&stars=true
[license-image]: https://img.shields.io/npm/l/define-properties.svg
[license-url]: LICENSE
[downloads-image]: https://img.shields.io/npm/dm/define-properties.svg
[downloads-url]: https://npm-stat.com/charts.html?package=define-properties
[codecov-image]: https://codecov.io/gh/ljharb/define-properties/branch/main/graphs/badge.svg
[codecov-url]: https://app.codecov.io/gh/ljharb/define-properties/
[actions-image]: https://img.shields.io/endpoint?url=https://github-actions-badge-u3jn4tfpocch.runkit.sh/ljharb/define-properties
[actions-url]: https://github.com/ljharb/define-properties/actions


---

File name: node_modules\dequal\dist\index.js

Code:
var has = Object.prototype.hasOwnProperty;

function find(iter, tar, key) {
	for (key of iter.keys()) {
		if (dequal(key, tar)) return key;
	}
}

function dequal(foo, bar) {
	var ctor, len, tmp;
	if (foo === bar) return true;

	if (foo && bar && (ctor=foo.constructor) === bar.constructor) {
		if (ctor === Date) return foo.getTime() === bar.getTime();
		if (ctor === RegExp) return foo.toString() === bar.toString();

		if (ctor === Array) {
			if ((len=foo.length) === bar.length) {
				while (len-- && dequal(foo[len], bar[len]));
			}
			return len === -1;
		}

		if (ctor === Set) {
			if (foo.size !== bar.size) {
				return false;
			}
			for (len of foo) {
				tmp = len;
				if (tmp && typeof tmp === 'object') {
					tmp = find(bar, tmp);
					if (!tmp) return false;
				}
				if (!bar.has(tmp)) return false;
			}
			return true;
		}

		if (ctor === Map) {
			if (foo.size !== bar.size) {
				return false;
			}
			for (len of foo) {
				tmp = len[0];
				if (tmp && typeof tmp === 'object') {
					tmp = find(bar, tmp);
					if (!tmp) return false;
				}
				if (!dequal(len[1], bar.get(tmp))) {
					return false;
				}
			}
			return true;
		}

		if (ctor === ArrayBuffer) {
			foo = new Uint8Array(foo);
			bar = new Uint8Array(bar);
		} else if (ctor === DataView) {
			if ((len=foo.byteLength) === bar.byteLength) {
				while (len-- && foo.getInt8(len) === bar.getInt8(len));
			}
			return len === -1;
		}

		if (ArrayBuffer.isView(foo)) {
			if ((len=foo.byteLength) === bar.byteLength) {
				while (len-- && foo[len] === bar[len]);
			}
			return len === -1;
		}

		if (!ctor || typeof foo === 'object') {
			len = 0;
			for (ctor in foo) {
				if (has.call(foo, ctor) && ++len && !has.call(bar, ctor)) return false;
				if (!(ctor in bar) || !dequal(foo[ctor], bar[ctor])) return false;
			}
			return Object.keys(bar).length === len;
		}
	}

	return foo !== foo && bar !== bar;
}

exports.dequal = dequal;

---

File name: node_modules\dequal\dist\index.min.js

Code:
!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports):"function"==typeof define&&define.amd?define(["exports"],t):t(e.dequal={})}(this,(function(e){var t=Object.prototype.hasOwnProperty;function r(e,t,r){for(r of e.keys())if(n(r,t))return r}function n(e,f){var i,o,u;if(e===f)return!0;if(e&&f&&(i=e.constructor)===f.constructor){if(i===Date)return e.getTime()===f.getTime();if(i===RegExp)return e.toString()===f.toString();if(i===Array){if((o=e.length)===f.length)for(;o--&&n(e[o],f[o]););return-1===o}if(i===Set){if(e.size!==f.size)return!1;for(o of e){if((u=o)&&"object"==typeof u&&!(u=r(f,u)))return!1;if(!f.has(u))return!1}return!0}if(i===Map){if(e.size!==f.size)return!1;for(o of e){if((u=o[0])&&"object"==typeof u&&!(u=r(f,u)))return!1;if(!n(o[1],f.get(u)))return!1}return!0}if(i===ArrayBuffer)e=new Uint8Array(e),f=new Uint8Array(f);else if(i===DataView){if((o=e.byteLength)===f.byteLength)for(;o--&&e.getInt8(o)===f.getInt8(o););return-1===o}if(ArrayBuffer.isView(e)){if((o=e.byteLength)===f.byteLength)for(;o--&&e[o]===f[o];);return-1===o}if(!i||"object"==typeof e){for(i in o=0,e){if(t.call(e,i)&&++o&&!t.call(f,i))return!1;if(!(i in f)||!n(e[i],f[i]))return!1}return Object.keys(f).length===o}}return e!=e&&f!=f}e.dequal=n}));

---

File name: node_modules\dequal\index.d.ts

Code:
export function dequal(foo: any, bar: any): boolean;

---

File name: node_modules\dequal\lite\index.d.ts

Code:
export function dequal(foo: any, bar: any): boolean;

---

File name: node_modules\dequal\lite\index.js

Code:
var has = Object.prototype.hasOwnProperty;

function dequal(foo, bar) {
	var ctor, len;
	if (foo === bar) return true;

	if (foo && bar && (ctor=foo.constructor) === bar.constructor) {
		if (ctor === Date) return foo.getTime() === bar.getTime();
		if (ctor === RegExp) return foo.toString() === bar.toString();

		if (ctor === Array) {
			if ((len=foo.length) === bar.length) {
				while (len-- && dequal(foo[len], bar[len]));
			}
			return len === -1;
		}

		if (!ctor || typeof foo === 'object') {
			len = 0;
			for (ctor in foo) {
				if (has.call(foo, ctor) && ++len && !has.call(bar, ctor)) return false;
				if (!(ctor in bar) || !dequal(foo[ctor], bar[ctor])) return false;
			}
			return Object.keys(bar).length === len;
		}
	}

	return foo !== foo && bar !== bar;
}

exports.dequal = dequal;

---

File name: node_modules\dequal\lite\index.min.js

Code:
!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports):"function"==typeof define&&define.amd?define(["exports"],t):t(e.dequal={})}(this,(function(e){var t=Object.prototype.hasOwnProperty;e.dequal=function e(r,n){var o,i;if(r===n)return!0;if(r&&n&&(o=r.constructor)===n.constructor){if(o===Date)return r.getTime()===n.getTime();if(o===RegExp)return r.toString()===n.toString();if(o===Array){if((i=r.length)===n.length)for(;i--&&e(r[i],n[i]););return-1===i}if(!o||"object"==typeof r){for(o in i=0,r){if(t.call(r,o)&&++i&&!t.call(n,o))return!1;if(!(o in n)||!e(r[o],n[o]))return!1}return Object.keys(n).length===i}}return r!=r&&n!=n}}));

---

File name: node_modules\dequal\package.json

Code:
{
  "name": "dequal",
  "version": "2.0.3",
  "repository": "lukeed/dequal",
  "description": "A tiny (304B to 489B) utility for check for deep equality",
  "unpkg": "dist/index.min.js",
  "module": "dist/index.mjs",
  "main": "dist/index.js",
  "types": "index.d.ts",
  "license": "MIT",
  "author": {
    "name": "Luke Edwards",
    "email": "luke.edwards05@gmail.com",
    "url": "https://lukeed.com"
  },
  "engines": {
    "node": ">=6"
  },
  "scripts": {
    "build": "bundt",
    "pretest": "npm run build",
    "postbuild": "echo \"lite\" | xargs -n1 cp -v index.d.ts",
    "test": "uvu -r esm test"
  },
  "files": [
    "*.d.ts",
    "dist",
    "lite"
  ],
  "exports": {
    ".": {
      "types": "./index.d.ts",
      "import": "./dist/index.mjs",
      "require": "./dist/index.js"
    },
    "./lite": {
      "types": "./index.d.ts",
      "import": "./lite/index.mjs",
      "require": "./lite/index.js"
    },
    "./package.json": "./package.json"
  },
  "modes": {
    "lite": "src/lite.js",
    "default": "src/index.js"
  },
  "keywords": [
    "deep",
    "deep-equal",
    "equality"
  ],
  "devDependencies": {
    "bundt": "1.0.2",
    "esm": "3.2.25",
    "uvu": "0.3.2"
  }
}


---

File name: node_modules\dequal\readme.md

Code:
# dequal [![CI](https://github.com/lukeed/dequal/workflows/CI/badge.svg)](https://github.com/lukeed/dequal/actions)

> A tiny (304B to 489B) utility to check for deep equality

This module supports comparison of all types, including `Function`, `RegExp`, `Date`, `Set`, `Map`, `TypedArray`s, `DataView`, `null`, `undefined`, and `NaN` values. Complex values (eg, Objects, Arrays, Sets, Maps, etc) are traversed recursively.

> **Important:**
> * key order **within Objects** does not matter
> * value order **within Arrays** _does_ matter
> * values **within Sets and Maps** use value equality
> * keys **within Maps** use value equality


## Install

```
$ npm install --save dequal
```

## Modes

There are two "versions" of `dequal` available:

#### `dequal`
> **Size (gzip):** 489 bytes<br>
> **Availability:** [CommonJS](https://unpkg.com/dequal/dist/index.js), [ES Module](https://unpkg.com/dequal/dist/index.mjs), [UMD](https://unpkg.com/dequal/dist/index.min.js)

#### `dequal/lite`
> **Size (gzip):** 304 bytes<br>
> **Availability:** [CommonJS](https://unpkg.com/dequal/lite/index.js), [ES Module](https://unpkg.com/dequal/lite/index.mjs)

|  | IE9+ | Number | String | Date | RegExp | Object | Array | Class | Set | Map | ArrayBuffer | [TypedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray#TypedArray_objects) | [DataView](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView) |
|-|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|
| `dequal` | :x: | :white_check_mark: | :white_check_mark: | :white_check_mark: | :white_check_mark: | :white_check_mark: | :white_check_mark: | :white_check_mark: | :white_check_mark: | :white_check_mark: | :white_check_mark: | :white_check_mark: | :white_check_mark: |
| `dequal/lite` | :+1: | :white_check_mark: | :white_check_mark: | :white_check_mark: | :white_check_mark: | :white_check_mark: | :white_check_mark: | :white_check_mark: | :x: | :x: | :x: | :x: | :x: |

> <sup>**Note:** Table scrolls horizontally!</sup>

## Usage

```js
import { dequal } from 'dequal';

dequal(1, 1); //=> true
dequal({}, {}); //=> true
dequal('foo', 'foo'); //=> true
dequal([1, 2, 3], [1, 2, 3]); //=> true
dequal(dequal, dequal); //=> true
dequal(/foo/, /foo/); //=> true
dequal(null, null); //=> true
dequal(NaN, NaN); //=> true
dequal([], []); //=> true
dequal(
  [{ a:1 }, [{ b:{ c:[1] } }]],
  [{ a:1 }, [{ b:{ c:[1] } }]]
); //=> true

dequal(1, '1'); //=> false
dequal(null, undefined); //=> false
dequal({ a:1, b:[2,3] }, { a:1, b:[2,5] }); //=> false
dequal(/foo/i, /bar/g); //=> false
```

## API

### dequal(foo, bar)
Returns: `Boolean`

Both `foo` and `bar` can be of any type.<br>
A `Boolean` is returned indicating if the two were deeply equal.


## Benchmarks

> Running Node v10.13.0

The benchmarks can be found in the [`/bench`](/bench) directory. They are separated into two categories:

* `basic` – compares an object comprised of `String`, `Number`, `Date`, `Array`, and `Object` values.
* `complex` – like `basic`, but adds `RegExp`, `Map`, `Set`, and `Uint8Array` values.

> **Note:** Only candidates that pass validation step(s) are listed. <br>For example, `fast-deep-equal/es6` handles `Set` and `Map` values, but uses _referential equality_ while those listed use _value equality_.

```
Load times:
  assert             0.109ms
  util               0.006ms
  fast-deep-equal    0.479ms
  lodash/isequal    22.826ms
  nano-equal         0.417ms
  dequal             0.396ms
  dequal/lite        0.264ms

Benchmark :: basic
  assert.deepStrictEqual  x    325,262 ops/sec ±0.57% (94 runs sampled)
  util.isDeepStrictEqual  x    318,812 ops/sec ±0.87% (94 runs sampled)
  fast-deep-equal         x  1,332,393 ops/sec ±0.36% (93 runs sampled)
  lodash.isEqual          x    269,129 ops/sec ±0.59% (95 runs sampled)
  nano-equal              x  1,122,053 ops/sec ±0.36% (96 runs sampled)
  dequal/lite             x  1,700,972 ops/sec ±0.31% (94 runs sampled)
  dequal                  x  1,698,972 ops/sec ±0.63% (97 runs sampled)

Benchmark :: complex
  assert.deepStrictEqual  x    124,518 ops/sec ±0.64% (96 runs sampled)
  util.isDeepStrictEqual  x    125,113 ops/sec ±0.24% (96 runs sampled)
  lodash.isEqual          x     58,677 ops/sec ±0.49% (96 runs sampled)
  dequal                  x    345,386 ops/sec ±0.27% (96 runs sampled)
```

## License

MIT © [Luke Edwards](https://lukeed.com)


---

File name: node_modules\detect-newline\index.d.ts

Code:
declare const detectNewline: {
	/**
	Detect the dominant newline character of a string.

	@returns The detected newline or `undefined` when no newline character is found.

	@example
	```
	import detectNewline = require('detect-newline');

	detectNewline('foo\nbar\nbaz\r\n');
	//=> '\n'
	```
	*/
	(string: string): '\r\n' | '\n' | undefined;

	/**
	Detect the dominant newline character of a string.

	@returns The detected newline or `\n` when no newline character is found or the input is not a string.
	*/
	graceful(string: string): '\r\n' | '\n';
	graceful(string?: unknown): '\n';
};

export = detectNewline;


---

File name: node_modules\detect-newline\index.js

Code:
'use strict';

const detectNewline = string => {
	if (typeof string !== 'string') {
		throw new TypeError('Expected a string');
	}

	const newlines = string.match(/(?:\r?\n)/g) || [];

	if (newlines.length === 0) {
		return;
	}

	const crlf = newlines.filter(newline => newline === '\r\n').length;
	const lf = newlines.length - crlf;

	return crlf > lf ? '\r\n' : '\n';
};

module.exports = detectNewline;
module.exports.graceful = string => (typeof string === 'string' && detectNewline(string)) || '\n';


---

File name: node_modules\detect-newline\package.json

Code:
{
	"name": "detect-newline",
	"version": "3.1.0",
	"description": "Detect the dominant newline character of a string",
	"license": "MIT",
	"repository": "sindresorhus/detect-newline",
	"author": {
		"name": "Sindre Sorhus",
		"email": "sindresorhus@gmail.com",
		"url": "sindresorhus.com"
	},
	"engines": {
		"node": ">=8"
	},
	"scripts": {
		"test": "xo && ava && tsd"
	},
	"files": [
		"index.js",
		"index.d.ts"
	],
	"keywords": [
		"newline",
		"linebreak",
		"line-break",
		"line",
		"lf",
		"crlf",
		"eol",
		"linefeed",
		"character",
		"char"
	],
	"devDependencies": {
		"ava": "^1.4.1",
		"tsd": "^0.7.2",
		"xo": "^0.24.0"
	}
}


---

File name: node_modules\detect-newline\readme.md

Code:
# detect-newline [![Build Status](https://travis-ci.org/sindresorhus/detect-newline.svg?branch=master)](https://travis-ci.org/sindresorhus/detect-newline)

> Detect the dominant newline character of a string


## Install

```
$ npm install detect-newline
```


## Usage

```js
const detectNewline = require('detect-newline');

detectNewline('foo\nbar\nbaz\r\n');
//=> '\n'
```


## API

### detectNewline(string)

Returns the detected newline or `undefined` when no newline character is found.

### detectNewline.graceful(unknown)

Returns the detected newline or `\n` when no newline character is found or the input is not a string.


## Related

- [detect-newline-cli](https://github.com/sindresorhus/detect-newline-cli) - CLI for this module
- [detect-indent](https://github.com/sindresorhus/detect-indent) - Detect the indentation of code


## License

MIT © [Sindre Sorhus](https://sindresorhus.com)


---

File name: node_modules\diff-sequences\build\index.d.ts

Code:
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
export declare type Callbacks = {
  foundSubsequence: FoundSubsequence;
  isCommon: IsCommon;
};

declare function diffSequence(
  aLength: number,
  bLength: number,
  isCommon: IsCommon,
  foundSubsequence: FoundSubsequence,
): void;
export default diffSequence;

declare type FoundSubsequence = (
  nCommon: number, // caller can assume: 0 < nCommon
  aCommon: number, // caller can assume: 0 <= aCommon && aCommon < aLength
  bCommon: number,
) => void;

/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */
declare type IsCommon = (
  aIndex: number, // caller can assume: 0 <= aIndex && aIndex < aLength
  bIndex: number,
) => boolean;

export {};


---

File name: node_modules\diff-sequences\build\index.js

Code:
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.default = diffSequence;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

// This diff-sequences package implements the linear space variation in
// An O(ND) Difference Algorithm and Its Variations by Eugene W. Myers

// Relationship in notation between Myers paper and this package:
// A is a
// N is aLength, aEnd - aStart, and so on
// x is aIndex, aFirst, aLast, and so on
// B is b
// M is bLength, bEnd - bStart, and so on
// y is bIndex, bFirst, bLast, and so on
// Δ = N - M is negative of baDeltaLength = bLength - aLength
// D is d
// k is kF
// k + Δ is kF = kR - baDeltaLength
// V is aIndexesF or aIndexesR (see comment below about Indexes type)
// index intervals [1, N] and [1, M] are [0, aLength) and [0, bLength)
// starting point in forward direction (0, 0) is (-1, -1)
// starting point in reverse direction (N + 1, M + 1) is (aLength, bLength)

// The “edit graph” for sequences a and b corresponds to items:
// in a on the horizontal axis
// in b on the vertical axis
//
// Given a-coordinate of a point in a diagonal, you can compute b-coordinate.
//
// Forward diagonals kF:
// zero diagonal intersects top left corner
// positive diagonals intersect top edge
// negative diagonals insersect left edge
//
// Reverse diagonals kR:
// zero diagonal intersects bottom right corner
// positive diagonals intersect right edge
// negative diagonals intersect bottom edge

// The graph contains a directed acyclic graph of edges:
// horizontal: delete an item from a
// vertical: insert an item from b
// diagonal: common item in a and b
//
// The algorithm solves dual problems in the graph analogy:
// Find longest common subsequence: path with maximum number of diagonal edges
// Find shortest edit script: path with minimum number of non-diagonal edges

// Input callback function compares items at indexes in the sequences.

// Output callback function receives the number of adjacent items
// and starting indexes of each common subsequence.
// Either original functions or wrapped to swap indexes if graph is transposed.
// Indexes in sequence a of last point of forward or reverse paths in graph.
// Myers algorithm indexes by diagonal k which for negative is bad deopt in V8.
// This package indexes by iF and iR which are greater than or equal to zero.
// and also updates the index arrays in place to cut memory in half.
// kF = 2 * iF - d
// kR = d - 2 * iR
// Division of index intervals in sequences a and b at the middle change.
// Invariant: intervals do not have common items at the start or end.
const pkg = 'diff-sequences'; // for error messages
const NOT_YET_SET = 0; // small int instead of undefined to avoid deopt in V8

// Return the number of common items that follow in forward direction.
// The length of what Myers paper calls a “snake” in a forward path.
const countCommonItemsF = (aIndex, aEnd, bIndex, bEnd, isCommon) => {
  let nCommon = 0;
  while (aIndex < aEnd && bIndex < bEnd && isCommon(aIndex, bIndex)) {
    aIndex += 1;
    bIndex += 1;
    nCommon += 1;
  }
  return nCommon;
};

// Return the number of common items that precede in reverse direction.
// The length of what Myers paper calls a “snake” in a reverse path.
const countCommonItemsR = (aStart, aIndex, bStart, bIndex, isCommon) => {
  let nCommon = 0;
  while (aStart <= aIndex && bStart <= bIndex && isCommon(aIndex, bIndex)) {
    aIndex -= 1;
    bIndex -= 1;
    nCommon += 1;
  }
  return nCommon;
};

// A simple function to extend forward paths from (d - 1) to d changes
// when forward and reverse paths cannot yet overlap.
const extendPathsF = (
  d,
  aEnd,
  bEnd,
  bF,
  isCommon,
  aIndexesF,
  iMaxF // return the value because optimization might decrease it
) => {
  // Unroll the first iteration.
  let iF = 0;
  let kF = -d; // kF = 2 * iF - d
  let aFirst = aIndexesF[iF]; // in first iteration always insert
  let aIndexPrev1 = aFirst; // prev value of [iF - 1] in next iteration
  aIndexesF[iF] += countCommonItemsF(
    aFirst + 1,
    aEnd,
    bF + aFirst - kF + 1,
    bEnd,
    isCommon
  );

  // Optimization: skip diagonals in which paths cannot ever overlap.
  const nF = d < iMaxF ? d : iMaxF;

  // The diagonals kF are odd when d is odd and even when d is even.
  for (iF += 1, kF += 2; iF <= nF; iF += 1, kF += 2) {
    // To get first point of path segment, move one change in forward direction
    // from last point of previous path segment in an adjacent diagonal.
    // In last possible iteration when iF === d and kF === d always delete.
    if (iF !== d && aIndexPrev1 < aIndexesF[iF]) {
      aFirst = aIndexesF[iF]; // vertical to insert from b
    } else {
      aFirst = aIndexPrev1 + 1; // horizontal to delete from a

      if (aEnd <= aFirst) {
        // Optimization: delete moved past right of graph.
        return iF - 1;
      }
    }

    // To get last point of path segment, move along diagonal of common items.
    aIndexPrev1 = aIndexesF[iF];
    aIndexesF[iF] =
      aFirst +
      countCommonItemsF(aFirst + 1, aEnd, bF + aFirst - kF + 1, bEnd, isCommon);
  }
  return iMaxF;
};

// A simple function to extend reverse paths from (d - 1) to d changes
// when reverse and forward paths cannot yet overlap.
const extendPathsR = (
  d,
  aStart,
  bStart,
  bR,
  isCommon,
  aIndexesR,
  iMaxR // return the value because optimization might decrease it
) => {
  // Unroll the first iteration.
  let iR = 0;
  let kR = d; // kR = d - 2 * iR
  let aFirst = aIndexesR[iR]; // in first iteration always insert
  let aIndexPrev1 = aFirst; // prev value of [iR - 1] in next iteration
  aIndexesR[iR] -= countCommonItemsR(
    aStart,
    aFirst - 1,
    bStart,
    bR + aFirst - kR - 1,
    isCommon
  );

  // Optimization: skip diagonals in which paths cannot ever overlap.
  const nR = d < iMaxR ? d : iMaxR;

  // The diagonals kR are odd when d is odd and even when d is even.
  for (iR += 1, kR -= 2; iR <= nR; iR += 1, kR -= 2) {
    // To get first point of path segment, move one change in reverse direction
    // from last point of previous path segment in an adjacent diagonal.
    // In last possible iteration when iR === d and kR === -d always delete.
    if (iR !== d && aIndexesR[iR] < aIndexPrev1) {
      aFirst = aIndexesR[iR]; // vertical to insert from b
    } else {
      aFirst = aIndexPrev1 - 1; // horizontal to delete from a

      if (aFirst < aStart) {
        // Optimization: delete moved past left of graph.
        return iR - 1;
      }
    }

    // To get last point of path segment, move along diagonal of common items.
    aIndexPrev1 = aIndexesR[iR];
    aIndexesR[iR] =
      aFirst -
      countCommonItemsR(
        aStart,
        aFirst - 1,
        bStart,
        bR + aFirst - kR - 1,
        isCommon
      );
  }
  return iMaxR;
};

// A complete function to extend forward paths from (d - 1) to d changes.
// Return true if a path overlaps reverse path of (d - 1) changes in its diagonal.
const extendOverlappablePathsF = (
  d,
  aStart,
  aEnd,
  bStart,
  bEnd,
  isCommon,
  aIndexesF,
  iMaxF,
  aIndexesR,
  iMaxR,
  division // update prop values if return true
) => {
  const bF = bStart - aStart; // bIndex = bF + aIndex - kF
  const aLength = aEnd - aStart;
  const bLength = bEnd - bStart;
  const baDeltaLength = bLength - aLength; // kF = kR - baDeltaLength

  // Range of diagonals in which forward and reverse paths might overlap.
  const kMinOverlapF = -baDeltaLength - (d - 1); // -(d - 1) <= kR
  const kMaxOverlapF = -baDeltaLength + (d - 1); // kR <= (d - 1)

  let aIndexPrev1 = NOT_YET_SET; // prev value of [iF - 1] in next iteration

  // Optimization: skip diagonals in which paths cannot ever overlap.
  const nF = d < iMaxF ? d : iMaxF;

  // The diagonals kF = 2 * iF - d are odd when d is odd and even when d is even.
  for (let iF = 0, kF = -d; iF <= nF; iF += 1, kF += 2) {
    // To get first point of path segment, move one change in forward direction
    // from last point of previous path segment in an adjacent diagonal.
    // In first iteration when iF === 0 and kF === -d always insert.
    // In last possible iteration when iF === d and kF === d always delete.
    const insert = iF === 0 || (iF !== d && aIndexPrev1 < aIndexesF[iF]);
    const aLastPrev = insert ? aIndexesF[iF] : aIndexPrev1;
    const aFirst = insert
      ? aLastPrev // vertical to insert from b
      : aLastPrev + 1; // horizontal to delete from a

    // To get last point of path segment, move along diagonal of common items.
    const bFirst = bF + aFirst - kF;
    const nCommonF = countCommonItemsF(
      aFirst + 1,
      aEnd,
      bFirst + 1,
      bEnd,
      isCommon
    );
    const aLast = aFirst + nCommonF;
    aIndexPrev1 = aIndexesF[iF];
    aIndexesF[iF] = aLast;
    if (kMinOverlapF <= kF && kF <= kMaxOverlapF) {
      // Solve for iR of reverse path with (d - 1) changes in diagonal kF:
      // kR = kF + baDeltaLength
      // kR = (d - 1) - 2 * iR
      const iR = (d - 1 - (kF + baDeltaLength)) / 2;

      // If this forward path overlaps the reverse path in this diagonal,
      // then this is the middle change of the index intervals.
      if (iR <= iMaxR && aIndexesR[iR] - 1 <= aLast) {
        // Unlike the Myers algorithm which finds only the middle “snake”
        // this package can find two common subsequences per division.
        // Last point of previous path segment is on an adjacent diagonal.
        const bLastPrev = bF + aLastPrev - (insert ? kF + 1 : kF - 1);

        // Because of invariant that intervals preceding the middle change
        // cannot have common items at the end,
        // move in reverse direction along a diagonal of common items.
        const nCommonR = countCommonItemsR(
          aStart,
          aLastPrev,
          bStart,
          bLastPrev,
          isCommon
        );
        const aIndexPrevFirst = aLastPrev - nCommonR;
        const bIndexPrevFirst = bLastPrev - nCommonR;
        const aEndPreceding = aIndexPrevFirst + 1;
        const bEndPreceding = bIndexPrevFirst + 1;
        division.nChangePreceding = d - 1;
        if (d - 1 === aEndPreceding + bEndPreceding - aStart - bStart) {
          // Optimization: number of preceding changes in forward direction
          // is equal to number of items in preceding interval,
          // therefore it cannot contain any common items.
          division.aEndPreceding = aStart;
          division.bEndPreceding = bStart;
        } else {
          division.aEndPreceding = aEndPreceding;
          division.bEndPreceding = bEndPreceding;
        }
        division.nCommonPreceding = nCommonR;
        if (nCommonR !== 0) {
          division.aCommonPreceding = aEndPreceding;
          division.bCommonPreceding = bEndPreceding;
        }
        division.nCommonFollowing = nCommonF;
        if (nCommonF !== 0) {
          division.aCommonFollowing = aFirst + 1;
          division.bCommonFollowing = bFirst + 1;
        }
        const aStartFollowing = aLast + 1;
        const bStartFollowing = bFirst + nCommonF + 1;
        division.nChangeFollowing = d - 1;
        if (d - 1 === aEnd + bEnd - aStartFollowing - bStartFollowing) {
          // Optimization: number of changes in reverse direction
          // is equal to number of items in following interval,
          // therefore it cannot contain any common items.
          division.aStartFollowing = aEnd;
          division.bStartFollowing = bEnd;
        } else {
          division.aStartFollowing = aStartFollowing;
          division.bStartFollowing = bStartFollowing;
        }
        return true;
      }
    }
  }
  return false;
};

// A complete function to extend reverse paths from (d - 1) to d changes.
// Return true if a path overlaps forward path of d changes in its diagonal.
const extendOverlappablePathsR = (
  d,
  aStart,
  aEnd,
  bStart,
  bEnd,
  isCommon,
  aIndexesF,
  iMaxF,
  aIndexesR,
  iMaxR,
  division // update prop values if return true
) => {
  const bR = bEnd - aEnd; // bIndex = bR + aIndex - kR
  const aLength = aEnd - aStart;
  const bLength = bEnd - bStart;
  const baDeltaLength = bLength - aLength; // kR = kF + baDeltaLength

  // Range of diagonals in which forward and reverse paths might overlap.
  const kMinOverlapR = baDeltaLength - d; // -d <= kF
  const kMaxOverlapR = baDeltaLength + d; // kF <= d

  let aIndexPrev1 = NOT_YET_SET; // prev value of [iR - 1] in next iteration

  // Optimization: skip diagonals in which paths cannot ever overlap.
  const nR = d < iMaxR ? d : iMaxR;

  // The diagonals kR = d - 2 * iR are odd when d is odd and even when d is even.
  for (let iR = 0, kR = d; iR <= nR; iR += 1, kR -= 2) {
    // To get first point of path segment, move one change in reverse direction
    // from last point of previous path segment in an adjacent diagonal.
    // In first iteration when iR === 0 and kR === d always insert.
    // In last possible iteration when iR === d and kR === -d always delete.
    const insert = iR === 0 || (iR !== d && aIndexesR[iR] < aIndexPrev1);
    const aLastPrev = insert ? aIndexesR[iR] : aIndexPrev1;
    const aFirst = insert
      ? aLastPrev // vertical to insert from b
      : aLastPrev - 1; // horizontal to delete from a

    // To get last point of path segment, move along diagonal of common items.
    const bFirst = bR + aFirst - kR;
    const nCommonR = countCommonItemsR(
      aStart,
      aFirst - 1,
      bStart,
      bFirst - 1,
      isCommon
    );
    const aLast = aFirst - nCommonR;
    aIndexPrev1 = aIndexesR[iR];
    aIndexesR[iR] = aLast;
    if (kMinOverlapR <= kR && kR <= kMaxOverlapR) {
      // Solve for iF of forward path with d changes in diagonal kR:
      // kF = kR - baDeltaLength
      // kF = 2 * iF - d
      const iF = (d + (kR - baDeltaLength)) / 2;

      // If this reverse path overlaps the forward path in this diagonal,
      // then this is a middle change of the index intervals.
      if (iF <= iMaxF && aLast - 1 <= aIndexesF[iF]) {
        const bLast = bFirst - nCommonR;
        division.nChangePreceding = d;
        if (d === aLast + bLast - aStart - bStart) {
          // Optimization: number of changes in reverse direction
          // is equal to number of items in preceding interval,
          // therefore it cannot contain any common items.
          division.aEndPreceding = aStart;
          division.bEndPreceding = bStart;
        } else {
          division.aEndPreceding = aLast;
          division.bEndPreceding = bLast;
        }
        division.nCommonPreceding = nCommonR;
        if (nCommonR !== 0) {
          // The last point of reverse path segment is start of common subsequence.
          division.aCommonPreceding = aLast;
          division.bCommonPreceding = bLast;
        }
        division.nChangeFollowing = d - 1;
        if (d === 1) {
          // There is no previous path segment.
          division.nCommonFollowing = 0;
          division.aStartFollowing = aEnd;
          division.bStartFollowing = bEnd;
        } else {
          // Unlike the Myers algorithm which finds only the middle “snake”
          // this package can find two common subsequences per division.
          // Last point of previous path segment is on an adjacent diagonal.
          const bLastPrev = bR + aLastPrev - (insert ? kR - 1 : kR + 1);

          // Because of invariant that intervals following the middle change
          // cannot have common items at the start,
          // move in forward direction along a diagonal of common items.
          const nCommonF = countCommonItemsF(
            aLastPrev,
            aEnd,
            bLastPrev,
            bEnd,
            isCommon
          );
          division.nCommonFollowing = nCommonF;
          if (nCommonF !== 0) {
            // The last point of reverse path segment is start of common subsequence.
            division.aCommonFollowing = aLastPrev;
            division.bCommonFollowing = bLastPrev;
          }
          const aStartFollowing = aLastPrev + nCommonF; // aFirstPrev
          const bStartFollowing = bLastPrev + nCommonF; // bFirstPrev

          if (d - 1 === aEnd + bEnd - aStartFollowing - bStartFollowing) {
            // Optimization: number of changes in forward direction
            // is equal to number of items in following interval,
            // therefore it cannot contain any common items.
            division.aStartFollowing = aEnd;
            division.bStartFollowing = bEnd;
          } else {
            division.aStartFollowing = aStartFollowing;
            division.bStartFollowing = bStartFollowing;
          }
        }
        return true;
      }
    }
  }
  return false;
};

// Given index intervals and input function to compare items at indexes,
// divide at the middle change.
//
// DO NOT CALL if start === end, because interval cannot contain common items
// and because this function will throw the “no overlap” error.
const divide = (
  nChange,
  aStart,
  aEnd,
  bStart,
  bEnd,
  isCommon,
  aIndexesF,
  aIndexesR,
  division // output
) => {
  const bF = bStart - aStart; // bIndex = bF + aIndex - kF
  const bR = bEnd - aEnd; // bIndex = bR + aIndex - kR
  const aLength = aEnd - aStart;
  const bLength = bEnd - bStart;

  // Because graph has square or portrait orientation,
  // length difference is minimum number of items to insert from b.
  // Corresponding forward and reverse diagonals in graph
  // depend on length difference of the sequences:
  // kF = kR - baDeltaLength
  // kR = kF + baDeltaLength
  const baDeltaLength = bLength - aLength;

  // Optimization: max diagonal in graph intersects corner of shorter side.
  let iMaxF = aLength;
  let iMaxR = aLength;

  // Initialize no changes yet in forward or reverse direction:
  aIndexesF[0] = aStart - 1; // at open start of interval, outside closed start
  aIndexesR[0] = aEnd; // at open end of interval

  if (baDeltaLength % 2 === 0) {
    // The number of changes in paths is 2 * d if length difference is even.
    const dMin = (nChange || baDeltaLength) / 2;
    const dMax = (aLength + bLength) / 2;
    for (let d = 1; d <= dMax; d += 1) {
      iMaxF = extendPathsF(d, aEnd, bEnd, bF, isCommon, aIndexesF, iMaxF);
      if (d < dMin) {
        iMaxR = extendPathsR(d, aStart, bStart, bR, isCommon, aIndexesR, iMaxR);
      } else if (
        // If a reverse path overlaps a forward path in the same diagonal,
        // return a division of the index intervals at the middle change.
        extendOverlappablePathsR(
          d,
          aStart,
          aEnd,
          bStart,
          bEnd,
          isCommon,
          aIndexesF,
          iMaxF,
          aIndexesR,
          iMaxR,
          division
        )
      ) {
        return;
      }
    }
  } else {
    // The number of changes in paths is 2 * d - 1 if length difference is odd.
    const dMin = ((nChange || baDeltaLength) + 1) / 2;
    const dMax = (aLength + bLength + 1) / 2;

    // Unroll first half iteration so loop extends the relevant pairs of paths.
    // Because of invariant that intervals have no common items at start or end,
    // and limitation not to call divide with empty intervals,
    // therefore it cannot be called if a forward path with one change
    // would overlap a reverse path with no changes, even if dMin === 1.
    let d = 1;
    iMaxF = extendPathsF(d, aEnd, bEnd, bF, isCommon, aIndexesF, iMaxF);
    for (d += 1; d <= dMax; d += 1) {
      iMaxR = extendPathsR(
        d - 1,
        aStart,
        bStart,
        bR,
        isCommon,
        aIndexesR,
        iMaxR
      );
      if (d < dMin) {
        iMaxF = extendPathsF(d, aEnd, bEnd, bF, isCommon, aIndexesF, iMaxF);
      } else if (
        // If a forward path overlaps a reverse path in the same diagonal,
        // return a division of the index intervals at the middle change.
        extendOverlappablePathsF(
          d,
          aStart,
          aEnd,
          bStart,
          bEnd,
          isCommon,
          aIndexesF,
          iMaxF,
          aIndexesR,
          iMaxR,
          division
        )
      ) {
        return;
      }
    }
  }

  /* istanbul ignore next */
  throw new Error(
    `${pkg}: no overlap aStart=${aStart} aEnd=${aEnd} bStart=${bStart} bEnd=${bEnd}`
  );
};

// Given index intervals and input function to compare items at indexes,
// return by output function the number of adjacent items and starting indexes
// of each common subsequence. Divide and conquer with only linear space.
//
// The index intervals are half open [start, end) like array slice method.
// DO NOT CALL if start === end, because interval cannot contain common items
// and because divide function will throw the “no overlap” error.
const findSubsequences = (
  nChange,
  aStart,
  aEnd,
  bStart,
  bEnd,
  transposed,
  callbacks,
  aIndexesF,
  aIndexesR,
  division // temporary memory, not input nor output
) => {
  if (bEnd - bStart < aEnd - aStart) {
    // Transpose graph so it has portrait instead of landscape orientation.
    // Always compare shorter to longer sequence for consistency and optimization.
    transposed = !transposed;
    if (transposed && callbacks.length === 1) {
      // Lazily wrap callback functions to swap args if graph is transposed.
      const {foundSubsequence, isCommon} = callbacks[0];
      callbacks[1] = {
        foundSubsequence: (nCommon, bCommon, aCommon) => {
          foundSubsequence(nCommon, aCommon, bCommon);
        },
        isCommon: (bIndex, aIndex) => isCommon(aIndex, bIndex)
      };
    }
    const tStart = aStart;
    const tEnd = aEnd;
    aStart = bStart;
    aEnd = bEnd;
    bStart = tStart;
    bEnd = tEnd;
  }
  const {foundSubsequence, isCommon} = callbacks[transposed ? 1 : 0];

  // Divide the index intervals at the middle change.
  divide(
    nChange,
    aStart,
    aEnd,
    bStart,
    bEnd,
    isCommon,
    aIndexesF,
    aIndexesR,
    division
  );
  const {
    nChangePreceding,
    aEndPreceding,
    bEndPreceding,
    nCommonPreceding,
    aCommonPreceding,
    bCommonPreceding,
    nCommonFollowing,
    aCommonFollowing,
    bCommonFollowing,
    nChangeFollowing,
    aStartFollowing,
    bStartFollowing
  } = division;

  // Unless either index interval is empty, they might contain common items.
  if (aStart < aEndPreceding && bStart < bEndPreceding) {
    // Recursely find and return common subsequences preceding the division.
    findSubsequences(
      nChangePreceding,
      aStart,
      aEndPreceding,
      bStart,
      bEndPreceding,
      transposed,
      callbacks,
      aIndexesF,
      aIndexesR,
      division
    );
  }

  // Return common subsequences that are adjacent to the middle change.
  if (nCommonPreceding !== 0) {
    foundSubsequence(nCommonPreceding, aCommonPreceding, bCommonPreceding);
  }
  if (nCommonFollowing !== 0) {
    foundSubsequence(nCommonFollowing, aCommonFollowing, bCommonFollowing);
  }

  // Unless either index interval is empty, they might contain common items.
  if (aStartFollowing < aEnd && bStartFollowing < bEnd) {
    // Recursely find and return common subsequences following the division.
    findSubsequences(
      nChangeFollowing,
      aStartFollowing,
      aEnd,
      bStartFollowing,
      bEnd,
      transposed,
      callbacks,
      aIndexesF,
      aIndexesR,
      division
    );
  }
};
const validateLength = (name, arg) => {
  if (typeof arg !== 'number') {
    throw new TypeError(`${pkg}: ${name} typeof ${typeof arg} is not a number`);
  }
  if (!Number.isSafeInteger(arg)) {
    throw new RangeError(`${pkg}: ${name} value ${arg} is not a safe integer`);
  }
  if (arg < 0) {
    throw new RangeError(`${pkg}: ${name} value ${arg} is a negative integer`);
  }
};
const validateCallback = (name, arg) => {
  const type = typeof arg;
  if (type !== 'function') {
    throw new TypeError(`${pkg}: ${name} typeof ${type} is not a function`);
  }
};

// Compare items in two sequences to find a longest common subsequence.
// Given lengths of sequences and input function to compare items at indexes,
// return by output function the number of adjacent items and starting indexes
// of each common subsequence.
function diffSequence(aLength, bLength, isCommon, foundSubsequence) {
  validateLength('aLength', aLength);
  validateLength('bLength', bLength);
  validateCallback('isCommon', isCommon);
  validateCallback('foundSubsequence', foundSubsequence);

  // Count common items from the start in the forward direction.
  const nCommonF = countCommonItemsF(0, aLength, 0, bLength, isCommon);
  if (nCommonF !== 0) {
    foundSubsequence(nCommonF, 0, 0);
  }

  // Unless both sequences consist of common items only,
  // find common items in the half-trimmed index intervals.
  if (aLength !== nCommonF || bLength !== nCommonF) {
    // Invariant: intervals do not have common items at the start.
    // The start of an index interval is closed like array slice method.
    const aStart = nCommonF;
    const bStart = nCommonF;

    // Count common items from the end in the reverse direction.
    const nCommonR = countCommonItemsR(
      aStart,
      aLength - 1,
      bStart,
      bLength - 1,
      isCommon
    );

    // Invariant: intervals do not have common items at the end.
    // The end of an index interval is open like array slice method.
    const aEnd = aLength - nCommonR;
    const bEnd = bLength - nCommonR;

    // Unless one sequence consists of common items only,
    // therefore the other trimmed index interval consists of changes only,
    // find common items in the trimmed index intervals.
    const nCommonFR = nCommonF + nCommonR;
    if (aLength !== nCommonFR && bLength !== nCommonFR) {
      const nChange = 0; // number of change items is not yet known
      const transposed = false; // call the original unwrapped functions
      const callbacks = [
        {
          foundSubsequence,
          isCommon
        }
      ];

      // Indexes in sequence a of last points in furthest reaching paths
      // from outside the start at top left in the forward direction:
      const aIndexesF = [NOT_YET_SET];
      // from the end at bottom right in the reverse direction:
      const aIndexesR = [NOT_YET_SET];

      // Initialize one object as output of all calls to divide function.
      const division = {
        aCommonFollowing: NOT_YET_SET,
        aCommonPreceding: NOT_YET_SET,
        aEndPreceding: NOT_YET_SET,
        aStartFollowing: NOT_YET_SET,
        bCommonFollowing: NOT_YET_SET,
        bCommonPreceding: NOT_YET_SET,
        bEndPreceding: NOT_YET_SET,
        bStartFollowing: NOT_YET_SET,
        nChangeFollowing: NOT_YET_SET,
        nChangePreceding: NOT_YET_SET,
        nCommonFollowing: NOT_YET_SET,
        nCommonPreceding: NOT_YET_SET
      };

      // Find and return common subsequences in the trimmed index intervals.
      findSubsequences(
        nChange,
        aStart,
        aEnd,
        bStart,
        bEnd,
        transposed,
        callbacks,
        aIndexesF,
        aIndexesR,
        division
      );
    }
    if (nCommonR !== 0) {
      foundSubsequence(nCommonR, aEnd, bEnd);
    }
  }
}


---

File name: node_modules\diff-sequences\package.json

Code:
{
  "name": "diff-sequences",
  "version": "29.6.3",
  "repository": {
    "type": "git",
    "url": "https://github.com/jestjs/jest.git",
    "directory": "packages/diff-sequences"
  },
  "license": "MIT",
  "description": "Compare items in two sequences to find a longest common subsequence",
  "keywords": [
    "fast",
    "linear",
    "space",
    "callback",
    "diff"
  ],
  "engines": {
    "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
  },
  "main": "./build/index.js",
  "types": "./build/index.d.ts",
  "exports": {
    ".": {
      "types": "./build/index.d.ts",
      "default": "./build/index.js"
    },
    "./package.json": "./package.json"
  },
  "devDependencies": {
    "@fast-check/jest": "^1.3.0",
    "benchmark": "^2.1.4",
    "diff": "^5.0.0"
  },
  "publishConfig": {
    "access": "public"
  },
  "gitHead": "fb7d95c8af6e0d65a8b65348433d8a0ea0725b5b"
}


---

File name: node_modules\diff-sequences\README.md

Code:
# diff-sequences

Compare items in two sequences to find a **longest common subsequence**.

The items not in common are the items to delete or insert in a **shortest edit script**.

To maximize flexibility and minimize memory, you write **callback** functions as configuration:

**Input** function `isCommon(aIndex, bIndex)` compares items at indexes in the sequences and returns a truthy/falsey value. This package might call your function more than once for some pairs of indexes.

- Because your function encapsulates **comparison**, this package can compare items according to `===` operator, `Object.is` method, or other criterion.
- Because your function encapsulates **sequences**, this package can find differences in arrays, strings, or other data.

**Output** function `foundSubsequence(nCommon, aCommon, bCommon)` receives the number of adjacent items and starting indexes of each common subsequence. If sequences do not have common items, then this package does not call your function.

If N is the sum of lengths of sequences and L is length of a longest common subsequence, then D = N – 2L is the number of **differences** in the corresponding shortest edit script.

[_An O(ND) Difference Algorithm and Its Variations_](http://xmailserver.org/diff2.pdf) by Eugene W. Myers is fast when sequences have **few** differences.

This package implements the **linear space** variation with optimizations so it is fast even when sequences have **many** differences.

## Usage

To add this package as a dependency of a project, do either of the following:

- `npm install diff-sequences`
- `yarn add diff-sequences`

To use `diff` as the name of the default export from this package, do either of the following:

- `var diff = require('diff-sequences').default; // CommonJS modules`
- `import diff from 'diff-sequences'; // ECMAScript modules`

Call `diff` with the **lengths** of sequences and your **callback** functions:

```js
const a = ['a', 'b', 'c', 'a', 'b', 'b', 'a'];
const b = ['c', 'b', 'a', 'b', 'a', 'c'];

function isCommon(aIndex, bIndex) {
  return a[aIndex] === b[bIndex];
}
function foundSubsequence(nCommon, aCommon, bCommon) {
  // see examples
}

diff(a.length, b.length, isCommon, foundSubsequence);
```

## Example of longest common subsequence

Some sequences (for example, `a` and `b` in the example of usage) have more than one longest common subsequence.

This package finds the following common items:

| comparisons of common items      | values     |            output arguments |
| :------------------------------- | :--------- | --------------------------: |
| `a[2] === b[0]`                  | `'c'`      | `foundSubsequence(1, 2, 0)` |
| `a[4] === b[1]`                  | `'b'`      | `foundSubsequence(1, 4, 1)` |
| `a[5] === b[3] && a[6] === b[4]` | `'b', 'a'` | `foundSubsequence(2, 5, 3)` |

The “edit graph” analogy in the Myers paper shows the following common items:

| comparisons of common items      | values     |
| :------------------------------- | :--------- |
| `a[2] === b[0]`                  | `'c'`      |
| `a[3] === b[2] && a[4] === b[3]` | `'a', 'b'` |
| `a[6] === b[4]`                  | `'a'`      |

Various packages which implement the Myers algorithm will **always agree** on the **length** of a longest common subsequence, but might **sometimes disagree** on which **items** are in it.

## Example of callback functions to count common items

```js
// Return length of longest common subsequence according to === operator.
function countCommonItems(a, b) {
  let n = 0;
  function isCommon(aIndex, bIndex) {
    return a[aIndex] === b[bIndex];
  }
  function foundSubsequence(nCommon) {
    n += nCommon;
  }

  diff(a.length, b.length, isCommon, foundSubsequence);

  return n;
}

const commonLength = countCommonItems(
  ['a', 'b', 'c', 'a', 'b', 'b', 'a'],
  ['c', 'b', 'a', 'b', 'a', 'c'],
);
```

| category of items  |                expression | value |
| :----------------- | ------------------------: | ----: |
| in common          |            `commonLength` |   `4` |
| to delete from `a` | `a.length - commonLength` |   `3` |
| to insert from `b` | `b.length - commonLength` |   `2` |

If the length difference `b.length - a.length` is:

- negative: its absolute value is the minimum number of items to **delete** from `a`
- positive: it is the minimum number of items to **insert** from `b`
- zero: there is an **equal** number of items to delete from `a` and insert from `b`
- non-zero: there is an equal number of **additional** items to delete from `a` and insert from `b`

In this example, `6 - 7` is:

- negative: `1` is the minimum number of items to **delete** from `a`
- non-zero: `2` is the number of **additional** items to delete from `a` and insert from `b`

## Example of callback functions to find common items

```js
// Return array of items in longest common subsequence according to Object.is method.
const findCommonItems = (a, b) => {
  const array = [];
  diff(
    a.length,
    b.length,
    (aIndex, bIndex) => Object.is(a[aIndex], b[bIndex]),
    (nCommon, aCommon) => {
      for (; nCommon !== 0; nCommon -= 1, aCommon += 1) {
        array.push(a[aCommon]);
      }
    },
  );
  return array;
};

const commonItems = findCommonItems(
  ['a', 'b', 'c', 'a', 'b', 'b', 'a'],
  ['c', 'b', 'a', 'b', 'a', 'c'],
);
```

| `i` | `commonItems[i]` | `aIndex` |
| --: | :--------------- | -------: |
| `0` | `'c'`            |      `2` |
| `1` | `'b'`            |      `4` |
| `2` | `'b'`            |      `5` |
| `3` | `'a'`            |      `6` |

## Example of callback functions to diff index intervals

Instead of slicing array-like objects, you can adjust indexes in your callback functions.

```js
// Diff index intervals that are half open [start, end) like array slice method.
const diffIndexIntervals = (a, aStart, aEnd, b, bStart, bEnd) => {
  // Validate: 0 <= aStart and aStart <= aEnd and aEnd <= a.length
  // Validate: 0 <= bStart and bStart <= bEnd and bEnd <= b.length

  diff(
    aEnd - aStart,
    bEnd - bStart,
    (aIndex, bIndex) => Object.is(a[aStart + aIndex], b[bStart + bIndex]),
    (nCommon, aCommon, bCommon) => {
      // aStart + aCommon, bStart + bCommon
    },
  );

  // After the last common subsequence, do any remaining work.
};
```

## Example of callback functions to emulate diff command

Linux or Unix has a `diff` command to compare files line by line. Its output is a **shortest edit script**:

- **c**hange adjacent lines from the first file to lines from the second file
- **d**elete lines from the first file
- **a**ppend or insert lines from the second file

```js
// Given zero-based half-open range [start, end) of array indexes,
// return one-based closed range [start + 1, end] as string.
const getRange = (start, end) =>
  start + 1 === end ? `${start + 1}` : `${start + 1},${end}`;

// Given index intervals of lines to delete or insert, or both, or neither,
// push formatted diff lines onto array.
const pushDelIns = (aLines, aIndex, aEnd, bLines, bIndex, bEnd, array) => {
  const deleteLines = aIndex !== aEnd;
  const insertLines = bIndex !== bEnd;
  const changeLines = deleteLines && insertLines;
  if (changeLines) {
    array.push(`${getRange(aIndex, aEnd)}c${getRange(bIndex, bEnd)}`);
  } else if (deleteLines) {
    array.push(`${getRange(aIndex, aEnd)}d${String(bIndex)}`);
  } else if (insertLines) {
    array.push(`${String(aIndex)}a${getRange(bIndex, bEnd)}`);
  } else {
    return;
  }

  for (; aIndex !== aEnd; aIndex += 1) {
    array.push(`< ${aLines[aIndex]}`); // delete is less than
  }

  if (changeLines) {
    array.push('---');
  }

  for (; bIndex !== bEnd; bIndex += 1) {
    array.push(`> ${bLines[bIndex]}`); // insert is greater than
  }
};

// Given content of two files, return emulated output of diff utility.
const findShortestEditScript = (a, b) => {
  const aLines = a.split('\n');
  const bLines = b.split('\n');
  const aLength = aLines.length;
  const bLength = bLines.length;

  const isCommon = (aIndex, bIndex) => aLines[aIndex] === bLines[bIndex];

  let aIndex = 0;
  let bIndex = 0;
  const array = [];
  const foundSubsequence = (nCommon, aCommon, bCommon) => {
    pushDelIns(aLines, aIndex, aCommon, bLines, bIndex, bCommon, array);
    aIndex = aCommon + nCommon; // number of lines compared in a
    bIndex = bCommon + nCommon; // number of lines compared in b
  };

  diff(aLength, bLength, isCommon, foundSubsequence);

  // After the last common subsequence, push remaining change lines.
  pushDelIns(aLines, aIndex, aLength, bLines, bIndex, bLength, array);

  return array.length === 0 ? '' : `${array.join('\n')}\n`;
};
```

## Example of callback functions to format diff lines

Here is simplified code to format **changed and unchanged lines** in expected and received values after a test fails in Jest:

```js
// Format diff with minus or plus for change lines and space for common lines.
const formatDiffLines = (a, b) => {
  // Jest depends on pretty-format package to serialize objects as strings.
  // Unindented for comparison to avoid distracting differences:
  const aLinesUn = format(a, {indent: 0 /*, other options*/}).split('\n');
  const bLinesUn = format(b, {indent: 0 /*, other options*/}).split('\n');
  // Indented to display changed and unchanged lines:
  const aLinesIn = format(a, {indent: 2 /*, other options*/}).split('\n');
  const bLinesIn = format(b, {indent: 2 /*, other options*/}).split('\n');

  const aLength = aLinesIn.length; // Validate: aLinesUn.length === aLength
  const bLength = bLinesIn.length; // Validate: bLinesUn.length === bLength

  const isCommon = (aIndex, bIndex) => aLinesUn[aIndex] === bLinesUn[bIndex];

  // Only because the GitHub Flavored Markdown doc collapses adjacent spaces,
  // this example code and the following table represent spaces as middle dots.
  let aIndex = 0;
  let bIndex = 0;
  const array = [];
  const foundSubsequence = (nCommon, aCommon, bCommon) => {
    for (; aIndex !== aCommon; aIndex += 1) {
      array.push(`-·${aLinesIn[aIndex]}`); // delete is minus
    }
    for (; bIndex !== bCommon; bIndex += 1) {
      array.push(`+·${bLinesIn[bIndex]}`); // insert is plus
    }
    for (; nCommon !== 0; nCommon -= 1, aIndex += 1, bIndex += 1) {
      // For common lines, received indentation seems more intuitive.
      array.push(`··${bLinesIn[bIndex]}`); // common is space
    }
  };

  diff(aLength, bLength, isCommon, foundSubsequence);

  // After the last common subsequence, push remaining change lines.
  for (; aIndex !== aLength; aIndex += 1) {
    array.push(`-·${aLinesIn[aIndex]}`);
  }
  for (; bIndex !== bLength; bIndex += 1) {
    array.push(`+·${bLinesIn[bIndex]}`);
  }

  return array;
};

const expected = {
  searching: '',
  sorting: {
    ascending: true,
    fieldKey: 'what',
  },
};
const received = {
  searching: '',
  sorting: [
    {
      descending: false,
      fieldKey: 'what',
    },
  ],
};

const diffLines = formatDiffLines(expected, received);
```

If N is the sum of lengths of sequences and L is length of a longest common subsequence, then N – L is length of an array of diff lines. In this example, N is 7 + 9, L is 5, and N – L is 11.

|  `i` | `diffLines[i]`                     | `aIndex` | `bIndex` |
| ---: | :--------------------------------- | -------: | -------: |
|  `0` | `'··Object {'`                     |      `0` |      `0` |
|  `1` | `'····"searching": "",'`           |      `1` |      `1` |
|  `2` | `'-···"sorting": Object {'`        |      `2` |          |
|  `3` | `'-·····"ascending": true,'`       |      `3` |          |
|  `4` | `'+·····"sorting": Array ['`       |          |      `2` |
|  `5` | `'+·······Object {'`               |          |      `3` |
|  `6` | `'+·········"descending": false,'` |          |      `4` |
|  `7` | `'··········"fieldKey": "what",'`  |      `4` |      `5` |
|  `8` | `'········},'`                     |      `5` |      `6` |
|  `9` | `'+·····],'`                       |          |      `7` |
| `10` | `'··}'`                            |      `6` |      `8` |

## Example of callback functions to find diff items

Here is simplified code to find changed and unchanged substrings **within adjacent changed lines** in expected and received values after a test fails in Jest:

```js
// Return diff items for strings (compatible with diff-match-patch package).
const findDiffItems = (a, b) => {
  const isCommon = (aIndex, bIndex) => a[aIndex] === b[bIndex];

  let aIndex = 0;
  let bIndex = 0;
  const array = [];
  const foundSubsequence = (nCommon, aCommon, bCommon) => {
    if (aIndex !== aCommon) {
      array.push([-1, a.slice(aIndex, aCommon)]); // delete is -1
    }
    if (bIndex !== bCommon) {
      array.push([1, b.slice(bIndex, bCommon)]); // insert is 1
    }

    aIndex = aCommon + nCommon; // number of characters compared in a
    bIndex = bCommon + nCommon; // number of characters compared in b
    array.push([0, a.slice(aCommon, aIndex)]); // common is 0
  };

  diff(a.length, b.length, isCommon, foundSubsequence);

  // After the last common subsequence, push remaining change items.
  if (aIndex !== a.length) {
    array.push([-1, a.slice(aIndex)]);
  }
  if (bIndex !== b.length) {
    array.push([1, b.slice(bIndex)]);
  }

  return array;
};

const expectedDeleted = ['"sorting": Object {', '"ascending": true,'].join(
  '\n',
);
const receivedInserted = [
  '"sorting": Array [',
  'Object {',
  '"descending": false,',
].join('\n');

const diffItems = findDiffItems(expectedDeleted, receivedInserted);
```

| `i` | `diffItems[i][0]` | `diffItems[i][1]` |
| --: | ----------------: | :---------------- |
| `0` |               `0` | `'"sorting": '`   |
| `1` |               `1` | `'Array [\n'`     |
| `2` |               `0` | `'Object {\n"'`   |
| `3` |              `-1` | `'a'`             |
| `4` |               `1` | `'de'`            |
| `5` |               `0` | `'scending": '`   |
| `6` |              `-1` | `'tru'`           |
| `7` |               `1` | `'fals'`          |
| `8` |               `0` | `'e,'`            |

The length difference `b.length - a.length` is equal to the sum of `diffItems[i][0]` values times `diffItems[i][1]` lengths. In this example, the difference `48 - 38` is equal to the sum `10`.

| category of diff item | `[0]` |      `[1]` lengths | subtotal |
| :-------------------- | ----: | -----------------: | -------: |
| in common             |   `0` | `11 + 10 + 11 + 2` |      `0` |
| to delete from `a`    |  `–1` |            `1 + 3` |     `-4` |
| to insert from `b`    |   `1` |        `8 + 2 + 4` |     `14` |

Instead of formatting the changed substrings with escape codes for colors in the `foundSubsequence` function to save memory, this example spends memory to **gain flexibility** before formatting, so a separate heuristic algorithm might modify the generic array of diff items to show changes more clearly:

| `i` | `diffItems[i][0]` | `diffItems[i][1]` |
| --: | ----------------: | :---------------- |
| `6` |              `-1` | `'true'`          |
| `7` |               `1` | `'false'`         |
| `8` |               `0` | `','`             |

For expected and received strings of serialized data, the result of finding changed **lines**, and then finding changed **substrings** within adjacent changed lines (as in the preceding two examples) sometimes displays the changes in a more intuitive way than the result of finding changed substrings, and then splitting them into changed and unchanged lines.


---

File name: node_modules\dom-accessibility-api\dist\accessible-description.d.ts

Code:
import { ComputeTextAlternativeOptions } from "./accessible-name-and-description";
/**
 * @param root
 * @param options
 * @returns
 */
export declare function computeAccessibleDescription(root: Element, options?: ComputeTextAlternativeOptions): string;
//# sourceMappingURL=accessible-description.d.ts.map

---

File name: node_modules\dom-accessibility-api\dist\accessible-description.js

Code:
"use strict";

exports.__esModule = true;
exports.computeAccessibleDescription = computeAccessibleDescription;
var _accessibleNameAndDescription = require("./accessible-name-and-description");
var _util = require("./util");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
/**
 * @param root
 * @param options
 * @returns
 */
function computeAccessibleDescription(root) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var description = (0, _util.queryIdRefs)(root, "aria-describedby").map(function (element) {
    return (0, _accessibleNameAndDescription.computeTextAlternative)(element, _objectSpread(_objectSpread({}, options), {}, {
      compute: "description"
    }));
  }).join(" ");

  // TODO: Technically we need to make sure that node wasn't used for the accessible name
  //       This causes `description_1.0_combobox-focusable-manual` to fail
  //
  // https://www.w3.org/TR/html-aam-1.0/#accessible-name-and-description-computation
  // says for so many elements to use the `title` that we assume all elements are considered
  if (description === "") {
    var title = root.getAttribute("title");
    description = title === null ? "" : title;
  }
  return description;
}
//# sourceMappingURL=accessible-description.js.map

---

File name: node_modules\dom-accessibility-api\dist\accessible-name-and-description.d.ts

Code:
/**
 * interface for an options-bag where `window.getComputedStyle` can be mocked
 */
export interface ComputeTextAlternativeOptions {
    compute?: "description" | "name";
    /**
     * Set to true if window.computedStyle supports the second argument.
     * This should be false in JSDOM. Otherwise JSDOM will log console errors.
     */
    computedStyleSupportsPseudoElements?: boolean;
    /**
     * mock window.getComputedStyle. Needs `content`, `display` and `visibility`
     */
    getComputedStyle?: typeof window.getComputedStyle;
    /**
     * Set to `true` if you want to include hidden elements in the accessible name and description computation.
     * Skips 2A in https://w3c.github.io/accname/#computation-steps.
     * @default false
     */
    hidden?: boolean;
}
/**
 * implements https://w3c.github.io/accname/#mapping_additional_nd_te
 * @param root
 * @param options
 * @returns
 */
export declare function computeTextAlternative(root: Element, options?: ComputeTextAlternativeOptions): string;
//# sourceMappingURL=accessible-name-and-description.d.ts.map

---

File name: node_modules\dom-accessibility-api\dist\accessible-name-and-description.js

Code:
"use strict";

exports.__esModule = true;
exports.computeTextAlternative = computeTextAlternative;
var _array = _interopRequireDefault(require("./polyfills/array.from"));
var _SetLike = _interopRequireDefault(require("./polyfills/SetLike"));
var _util = require("./util");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/**
 * implements https://w3c.github.io/accname/
 */

/**
 *
 * @param {string} string -
 * @returns {FlatString} -
 */
function asFlatString(s) {
  return s.trim().replace(/\s\s+/g, " ");
}

/**
 *
 * @param node -
 * @param options - These are not optional to prevent accidentally calling it without options in `computeAccessibleName`
 * @returns {boolean} -
 */
function isHidden(node, getComputedStyleImplementation) {
  if (!(0, _util.isElement)(node)) {
    return false;
  }
  if (node.hasAttribute("hidden") || node.getAttribute("aria-hidden") === "true") {
    return true;
  }
  var style = getComputedStyleImplementation(node);
  return style.getPropertyValue("display") === "none" || style.getPropertyValue("visibility") === "hidden";
}

/**
 * @param {Node} node -
 * @returns {boolean} - As defined in step 2E of https://w3c.github.io/accname/#mapping_additional_nd_te
 */
function isControl(node) {
  return (0, _util.hasAnyConcreteRoles)(node, ["button", "combobox", "listbox", "textbox"]) || hasAbstractRole(node, "range");
}
function hasAbstractRole(node, role) {
  if (!(0, _util.isElement)(node)) {
    return false;
  }
  switch (role) {
    case "range":
      return (0, _util.hasAnyConcreteRoles)(node, ["meter", "progressbar", "scrollbar", "slider", "spinbutton"]);
    default:
      throw new TypeError("No knowledge about abstract role '".concat(role, "'. This is likely a bug :("));
  }
}

/**
 * element.querySelectorAll but also considers owned tree
 * @param element
 * @param selectors
 */
function querySelectorAllSubtree(element, selectors) {
  var elements = (0, _array.default)(element.querySelectorAll(selectors));
  (0, _util.queryIdRefs)(element, "aria-owns").forEach(function (root) {
    // babel transpiles this assuming an iterator
    elements.push.apply(elements, (0, _array.default)(root.querySelectorAll(selectors)));
  });
  return elements;
}
function querySelectedOptions(listbox) {
  if ((0, _util.isHTMLSelectElement)(listbox)) {
    // IE11 polyfill
    return listbox.selectedOptions || querySelectorAllSubtree(listbox, "[selected]");
  }
  return querySelectorAllSubtree(listbox, '[aria-selected="true"]');
}
function isMarkedPresentational(node) {
  return (0, _util.hasAnyConcreteRoles)(node, ["none", "presentation"]);
}

/**
 * Elements specifically listed in html-aam
 *
 * We don't need this for `label` or `legend` elements.
 * Their implicit roles already allow "naming from content".
 *
 * sources:
 *
 * - https://w3c.github.io/html-aam/#table-element
 */
function isNativeHostLanguageTextAlternativeElement(node) {
  return (0, _util.isHTMLTableCaptionElement)(node);
}

/**
 * https://w3c.github.io/aria/#namefromcontent
 */
function allowsNameFromContent(node) {
  return (0, _util.hasAnyConcreteRoles)(node, ["button", "cell", "checkbox", "columnheader", "gridcell", "heading", "label", "legend", "link", "menuitem", "menuitemcheckbox", "menuitemradio", "option", "radio", "row", "rowheader", "switch", "tab", "tooltip", "treeitem"]);
}

/**
 * TODO https://github.com/eps1lon/dom-accessibility-api/issues/100
 */
function isDescendantOfNativeHostLanguageTextAlternativeElement(
// eslint-disable-next-line @typescript-eslint/no-unused-vars -- not implemented yet
node) {
  return false;
}
function getValueOfTextbox(element) {
  if ((0, _util.isHTMLInputElement)(element) || (0, _util.isHTMLTextAreaElement)(element)) {
    return element.value;
  }
  // https://github.com/eps1lon/dom-accessibility-api/issues/4
  return element.textContent || "";
}
function getTextualContent(declaration) {
  var content = declaration.getPropertyValue("content");
  if (/^["'].*["']$/.test(content)) {
    return content.slice(1, -1);
  }
  return "";
}

/**
 * https://html.spec.whatwg.org/multipage/forms.html#category-label
 * TODO: form-associated custom elements
 * @param element
 */
function isLabelableElement(element) {
  var localName = (0, _util.getLocalName)(element);
  return localName === "button" || localName === "input" && element.getAttribute("type") !== "hidden" || localName === "meter" || localName === "output" || localName === "progress" || localName === "select" || localName === "textarea";
}

/**
 * > [...], then the first such descendant in tree order is the label element's labeled control.
 * -- https://html.spec.whatwg.org/multipage/forms.html#labeled-control
 * @param element
 */
function findLabelableElement(element) {
  if (isLabelableElement(element)) {
    return element;
  }
  var labelableElement = null;
  element.childNodes.forEach(function (childNode) {
    if (labelableElement === null && (0, _util.isElement)(childNode)) {
      var descendantLabelableElement = findLabelableElement(childNode);
      if (descendantLabelableElement !== null) {
        labelableElement = descendantLabelableElement;
      }
    }
  });
  return labelableElement;
}

/**
 * Polyfill of HTMLLabelElement.control
 * https://html.spec.whatwg.org/multipage/forms.html#labeled-control
 * @param label
 */
function getControlOfLabel(label) {
  if (label.control !== undefined) {
    return label.control;
  }
  var htmlFor = label.getAttribute("for");
  if (htmlFor !== null) {
    return label.ownerDocument.getElementById(htmlFor);
  }
  return findLabelableElement(label);
}

/**
 * Polyfill of HTMLInputElement.labels
 * https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/labels
 * @param element
 */
function getLabels(element) {
  var labelsProperty = element.labels;
  if (labelsProperty === null) {
    return labelsProperty;
  }
  if (labelsProperty !== undefined) {
    return (0, _array.default)(labelsProperty);
  }

  // polyfill
  if (!isLabelableElement(element)) {
    return null;
  }
  var document = element.ownerDocument;
  return (0, _array.default)(document.querySelectorAll("label")).filter(function (label) {
    return getControlOfLabel(label) === element;
  });
}

/**
 * Gets the contents of a slot used for computing the accname
 * @param slot
 */
function getSlotContents(slot) {
  // Computing the accessible name for elements containing slots is not
  // currently defined in the spec. This implementation reflects the
  // behavior of NVDA 2020.2/Firefox 81 and iOS VoiceOver/Safari 13.6.
  var assignedNodes = slot.assignedNodes();
  if (assignedNodes.length === 0) {
    // if no nodes are assigned to the slot, it displays the default content
    return (0, _array.default)(slot.childNodes);
  }
  return assignedNodes;
}

/**
 * implements https://w3c.github.io/accname/#mapping_additional_nd_te
 * @param root
 * @param options
 * @returns
 */
function computeTextAlternative(root) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var consultedNodes = new _SetLike.default();
  var window = (0, _util.safeWindow)(root);
  var _options$compute = options.compute,
    compute = _options$compute === void 0 ? "name" : _options$compute,
    _options$computedStyl = options.computedStyleSupportsPseudoElements,
    computedStyleSupportsPseudoElements = _options$computedStyl === void 0 ? options.getComputedStyle !== undefined : _options$computedStyl,
    _options$getComputedS = options.getComputedStyle,
    getComputedStyle = _options$getComputedS === void 0 ? window.getComputedStyle.bind(window) : _options$getComputedS,
    _options$hidden = options.hidden,
    hidden = _options$hidden === void 0 ? false : _options$hidden;

  // 2F.i
  function computeMiscTextAlternative(node, context) {
    var accumulatedText = "";
    if ((0, _util.isElement)(node) && computedStyleSupportsPseudoElements) {
      var pseudoBefore = getComputedStyle(node, "::before");
      var beforeContent = getTextualContent(pseudoBefore);
      accumulatedText = "".concat(beforeContent, " ").concat(accumulatedText);
    }

    // FIXME: Including aria-owns is not defined in the spec
    // But it is required in the web-platform-test
    var childNodes = (0, _util.isHTMLSlotElement)(node) ? getSlotContents(node) : (0, _array.default)(node.childNodes).concat((0, _util.queryIdRefs)(node, "aria-owns"));
    childNodes.forEach(function (child) {
      var result = computeTextAlternative(child, {
        isEmbeddedInLabel: context.isEmbeddedInLabel,
        isReferenced: false,
        recursion: true
      });
      // TODO: Unclear why display affects delimiter
      // see https://github.com/w3c/accname/issues/3
      var display = (0, _util.isElement)(child) ? getComputedStyle(child).getPropertyValue("display") : "inline";
      var separator = display !== "inline" ? " " : "";
      // trailing separator for wpt tests
      accumulatedText += "".concat(separator).concat(result).concat(separator);
    });
    if ((0, _util.isElement)(node) && computedStyleSupportsPseudoElements) {
      var pseudoAfter = getComputedStyle(node, "::after");
      var afterContent = getTextualContent(pseudoAfter);
      accumulatedText = "".concat(accumulatedText, " ").concat(afterContent);
    }
    return accumulatedText.trim();
  }

  /**
   *
   * @param element
   * @param attributeName
   * @returns A string non-empty string or `null`
   */
  function useAttribute(element, attributeName) {
    var attribute = element.getAttributeNode(attributeName);
    if (attribute !== null && !consultedNodes.has(attribute) && attribute.value.trim() !== "") {
      consultedNodes.add(attribute);
      return attribute.value;
    }
    return null;
  }
  function computeTooltipAttributeValue(node) {
    if (!(0, _util.isElement)(node)) {
      return null;
    }
    return useAttribute(node, "title");
  }
  function computeElementTextAlternative(node) {
    if (!(0, _util.isElement)(node)) {
      return null;
    }

    // https://w3c.github.io/html-aam/#fieldset-and-legend-elements
    if ((0, _util.isHTMLFieldSetElement)(node)) {
      consultedNodes.add(node);
      var children = (0, _array.default)(node.childNodes);
      for (var i = 0; i < children.length; i += 1) {
        var child = children[i];
        if ((0, _util.isHTMLLegendElement)(child)) {
          return computeTextAlternative(child, {
            isEmbeddedInLabel: false,
            isReferenced: false,
            recursion: false
          });
        }
      }
    } else if ((0, _util.isHTMLTableElement)(node)) {
      // https://w3c.github.io/html-aam/#table-element
      consultedNodes.add(node);
      var _children = (0, _array.default)(node.childNodes);
      for (var _i = 0; _i < _children.length; _i += 1) {
        var _child = _children[_i];
        if ((0, _util.isHTMLTableCaptionElement)(_child)) {
          return computeTextAlternative(_child, {
            isEmbeddedInLabel: false,
            isReferenced: false,
            recursion: false
          });
        }
      }
    } else if ((0, _util.isSVGSVGElement)(node)) {
      // https://www.w3.org/TR/svg-aam-1.0/
      consultedNodes.add(node);
      var _children2 = (0, _array.default)(node.childNodes);
      for (var _i2 = 0; _i2 < _children2.length; _i2 += 1) {
        var _child2 = _children2[_i2];
        if ((0, _util.isSVGTitleElement)(_child2)) {
          return _child2.textContent;
        }
      }
      return null;
    } else if ((0, _util.getLocalName)(node) === "img" || (0, _util.getLocalName)(node) === "area") {
      // https://w3c.github.io/html-aam/#area-element
      // https://w3c.github.io/html-aam/#img-element
      var nameFromAlt = useAttribute(node, "alt");
      if (nameFromAlt !== null) {
        return nameFromAlt;
      }
    } else if ((0, _util.isHTMLOptGroupElement)(node)) {
      var nameFromLabel = useAttribute(node, "label");
      if (nameFromLabel !== null) {
        return nameFromLabel;
      }
    }
    if ((0, _util.isHTMLInputElement)(node) && (node.type === "button" || node.type === "submit" || node.type === "reset")) {
      // https://w3c.github.io/html-aam/#input-type-text-input-type-password-input-type-search-input-type-tel-input-type-email-input-type-url-and-textarea-element-accessible-description-computation
      var nameFromValue = useAttribute(node, "value");
      if (nameFromValue !== null) {
        return nameFromValue;
      }

      // TODO: l10n
      if (node.type === "submit") {
        return "Submit";
      }
      // TODO: l10n
      if (node.type === "reset") {
        return "Reset";
      }
    }
    var labels = getLabels(node);
    if (labels !== null && labels.length !== 0) {
      consultedNodes.add(node);
      return (0, _array.default)(labels).map(function (element) {
        return computeTextAlternative(element, {
          isEmbeddedInLabel: true,
          isReferenced: false,
          recursion: true
        });
      }).filter(function (label) {
        return label.length > 0;
      }).join(" ");
    }

    // https://w3c.github.io/html-aam/#input-type-image-accessible-name-computation
    // TODO: wpt test consider label elements but html-aam does not mention them
    // We follow existing implementations over spec
    if ((0, _util.isHTMLInputElement)(node) && node.type === "image") {
      var _nameFromAlt = useAttribute(node, "alt");
      if (_nameFromAlt !== null) {
        return _nameFromAlt;
      }
      var nameFromTitle = useAttribute(node, "title");
      if (nameFromTitle !== null) {
        return nameFromTitle;
      }

      // TODO: l10n
      return "Submit Query";
    }
    if ((0, _util.hasAnyConcreteRoles)(node, ["button"])) {
      // https://www.w3.org/TR/html-aam-1.0/#button-element
      var nameFromSubTree = computeMiscTextAlternative(node, {
        isEmbeddedInLabel: false,
        isReferenced: false
      });
      if (nameFromSubTree !== "") {
        return nameFromSubTree;
      }
    }
    return null;
  }
  function computeTextAlternative(current, context) {
    if (consultedNodes.has(current)) {
      return "";
    }

    // 2A
    if (!hidden && isHidden(current, getComputedStyle) && !context.isReferenced) {
      consultedNodes.add(current);
      return "";
    }

    // 2B
    var labelAttributeNode = (0, _util.isElement)(current) ? current.getAttributeNode("aria-labelledby") : null;
    // TODO: Do we generally need to block query IdRefs of attributes we have already consulted?
    var labelElements = labelAttributeNode !== null && !consultedNodes.has(labelAttributeNode) ? (0, _util.queryIdRefs)(current, "aria-labelledby") : [];
    if (compute === "name" && !context.isReferenced && labelElements.length > 0) {
      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion -- Can't be null here otherwise labelElements would be empty
      consultedNodes.add(labelAttributeNode);
      return labelElements.map(function (element) {
        // TODO: Chrome will consider repeated values i.e. use a node multiple times while we'll bail out in computeTextAlternative.
        return computeTextAlternative(element, {
          isEmbeddedInLabel: context.isEmbeddedInLabel,
          isReferenced: true,
          // this isn't recursion as specified, otherwise we would skip
          // `aria-label` in
          // <input id="myself" aria-label="foo" aria-labelledby="myself"
          recursion: false
        });
      }).join(" ");
    }

    // 2C
    // Changed from the spec in anticipation of https://github.com/w3c/accname/issues/64
    // spec says we should only consider skipping if we have a non-empty label
    var skipToStep2E = context.recursion && isControl(current) && compute === "name";
    if (!skipToStep2E) {
      var ariaLabel = ((0, _util.isElement)(current) && current.getAttribute("aria-label") || "").trim();
      if (ariaLabel !== "" && compute === "name") {
        consultedNodes.add(current);
        return ariaLabel;
      }

      // 2D
      if (!isMarkedPresentational(current)) {
        var elementTextAlternative = computeElementTextAlternative(current);
        if (elementTextAlternative !== null) {
          consultedNodes.add(current);
          return elementTextAlternative;
        }
      }
    }

    // special casing, cheating to make tests pass
    // https://github.com/w3c/accname/issues/67
    if ((0, _util.hasAnyConcreteRoles)(current, ["menu"])) {
      consultedNodes.add(current);
      return "";
    }

    // 2E
    if (skipToStep2E || context.isEmbeddedInLabel || context.isReferenced) {
      if ((0, _util.hasAnyConcreteRoles)(current, ["combobox", "listbox"])) {
        consultedNodes.add(current);
        var selectedOptions = querySelectedOptions(current);
        if (selectedOptions.length === 0) {
          // defined per test `name_heading_combobox`
          return (0, _util.isHTMLInputElement)(current) ? current.value : "";
        }
        return (0, _array.default)(selectedOptions).map(function (selectedOption) {
          return computeTextAlternative(selectedOption, {
            isEmbeddedInLabel: context.isEmbeddedInLabel,
            isReferenced: false,
            recursion: true
          });
        }).join(" ");
      }
      if (hasAbstractRole(current, "range")) {
        consultedNodes.add(current);
        if (current.hasAttribute("aria-valuetext")) {
          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion -- safe due to hasAttribute guard
          return current.getAttribute("aria-valuetext");
        }
        if (current.hasAttribute("aria-valuenow")) {
          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion -- safe due to hasAttribute guard
          return current.getAttribute("aria-valuenow");
        }
        // Otherwise, use the value as specified by a host language attribute.
        return current.getAttribute("value") || "";
      }
      if ((0, _util.hasAnyConcreteRoles)(current, ["textbox"])) {
        consultedNodes.add(current);
        return getValueOfTextbox(current);
      }
    }

    // 2F: https://w3c.github.io/accname/#step2F
    if (allowsNameFromContent(current) || (0, _util.isElement)(current) && context.isReferenced || isNativeHostLanguageTextAlternativeElement(current) || isDescendantOfNativeHostLanguageTextAlternativeElement(current)) {
      var accumulatedText2F = computeMiscTextAlternative(current, {
        isEmbeddedInLabel: context.isEmbeddedInLabel,
        isReferenced: false
      });
      if (accumulatedText2F !== "") {
        consultedNodes.add(current);
        return accumulatedText2F;
      }
    }
    if (current.nodeType === current.TEXT_NODE) {
      consultedNodes.add(current);
      return current.textContent || "";
    }
    if (context.recursion) {
      consultedNodes.add(current);
      return computeMiscTextAlternative(current, {
        isEmbeddedInLabel: context.isEmbeddedInLabel,
        isReferenced: false
      });
    }
    var tooltipAttributeValue = computeTooltipAttributeValue(current);
    if (tooltipAttributeValue !== null) {
      consultedNodes.add(current);
      return tooltipAttributeValue;
    }

    // TODO should this be reachable?
    consultedNodes.add(current);
    return "";
  }
  return asFlatString(computeTextAlternative(root, {
    isEmbeddedInLabel: false,
    // by spec computeAccessibleDescription starts with the referenced elements as roots
    isReferenced: compute === "description",
    recursion: false
  }));
}
//# sourceMappingURL=accessible-name-and-description.js.map

---

File name: node_modules\dom-accessibility-api\dist\accessible-name.d.ts

Code:
import { ComputeTextAlternativeOptions } from "./accessible-name-and-description";
/**
 * implements https://w3c.github.io/accname/#mapping_additional_nd_name
 * @param root
 * @param options
 * @returns
 */
export declare function computeAccessibleName(root: Element, options?: ComputeTextAlternativeOptions): string;
//# sourceMappingURL=accessible-name.d.ts.map

---

File name: node_modules\dom-accessibility-api\dist\accessible-name.js

Code:
"use strict";

exports.__esModule = true;
exports.computeAccessibleName = computeAccessibleName;
var _accessibleNameAndDescription = require("./accessible-name-and-description");
var _util = require("./util");
/**
 * https://w3c.github.io/aria/#namefromprohibited
 */
function prohibitsNaming(node) {
  return (0, _util.hasAnyConcreteRoles)(node, ["caption", "code", "deletion", "emphasis", "generic", "insertion", "paragraph", "presentation", "strong", "subscript", "superscript"]);
}

/**
 * implements https://w3c.github.io/accname/#mapping_additional_nd_name
 * @param root
 * @param options
 * @returns
 */
function computeAccessibleName(root) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  if (prohibitsNaming(root)) {
    return "";
  }
  return (0, _accessibleNameAndDescription.computeTextAlternative)(root, options);
}
//# sourceMappingURL=accessible-name.js.map

---

File name: node_modules\dom-accessibility-api\dist\getRole.d.ts

Code:
/**
 * Safe Element.localName for all supported environments
 * @param element
 */
export declare function getLocalName(element: Element): string;
export default function getRole(element: Element): string | null;
//# sourceMappingURL=getRole.d.ts.map

---

File name: node_modules\dom-accessibility-api\dist\getRole.js

Code:
"use strict";

exports.__esModule = true;
exports.default = getRole;
exports.getLocalName = getLocalName;
// https://w3c.github.io/html-aria/#document-conformance-requirements-for-use-of-aria-attributes-in-html

/**
 * Safe Element.localName for all supported environments
 * @param element
 */
function getLocalName(element) {
  var _element$localName;
  return (// eslint-disable-next-line no-restricted-properties -- actual guard for environments without localName
    (_element$localName = element.localName) !== null && _element$localName !== void 0 ? _element$localName :
    // eslint-disable-next-line no-restricted-properties -- required for the fallback
    element.tagName.toLowerCase()
  );
}
var localNameToRoleMappings = {
  article: "article",
  aside: "complementary",
  button: "button",
  datalist: "listbox",
  dd: "definition",
  details: "group",
  dialog: "dialog",
  dt: "term",
  fieldset: "group",
  figure: "figure",
  // WARNING: Only with an accessible name
  form: "form",
  footer: "contentinfo",
  h1: "heading",
  h2: "heading",
  h3: "heading",
  h4: "heading",
  h5: "heading",
  h6: "heading",
  header: "banner",
  hr: "separator",
  html: "document",
  legend: "legend",
  li: "listitem",
  math: "math",
  main: "main",
  menu: "list",
  nav: "navigation",
  ol: "list",
  optgroup: "group",
  // WARNING: Only in certain context
  option: "option",
  output: "status",
  progress: "progressbar",
  // WARNING: Only with an accessible name
  section: "region",
  summary: "button",
  table: "table",
  tbody: "rowgroup",
  textarea: "textbox",
  tfoot: "rowgroup",
  // WARNING: Only in certain context
  td: "cell",
  th: "columnheader",
  thead: "rowgroup",
  tr: "row",
  ul: "list"
};
var prohibitedAttributes = {
  caption: new Set(["aria-label", "aria-labelledby"]),
  code: new Set(["aria-label", "aria-labelledby"]),
  deletion: new Set(["aria-label", "aria-labelledby"]),
  emphasis: new Set(["aria-label", "aria-labelledby"]),
  generic: new Set(["aria-label", "aria-labelledby", "aria-roledescription"]),
  insertion: new Set(["aria-label", "aria-labelledby"]),
  paragraph: new Set(["aria-label", "aria-labelledby"]),
  presentation: new Set(["aria-label", "aria-labelledby"]),
  strong: new Set(["aria-label", "aria-labelledby"]),
  subscript: new Set(["aria-label", "aria-labelledby"]),
  superscript: new Set(["aria-label", "aria-labelledby"])
};

/**
 *
 * @param element
 * @param role The role used for this element. This is specified to control whether you want to use the implicit or explicit role.
 */
function hasGlobalAriaAttributes(element, role) {
  // https://rawgit.com/w3c/aria/stable/#global_states
  // commented attributes are deprecated
  return ["aria-atomic", "aria-busy", "aria-controls", "aria-current", "aria-describedby", "aria-details",
  // "disabled",
  "aria-dropeffect",
  // "errormessage",
  "aria-flowto", "aria-grabbed",
  // "haspopup",
  "aria-hidden",
  // "invalid",
  "aria-keyshortcuts", "aria-label", "aria-labelledby", "aria-live", "aria-owns", "aria-relevant", "aria-roledescription"].some(function (attributeName) {
    var _prohibitedAttributes;
    return element.hasAttribute(attributeName) && !((_prohibitedAttributes = prohibitedAttributes[role]) !== null && _prohibitedAttributes !== void 0 && _prohibitedAttributes.has(attributeName));
  });
}
function ignorePresentationalRole(element, implicitRole) {
  // https://rawgit.com/w3c/aria/stable/#conflict_resolution_presentation_none
  return hasGlobalAriaAttributes(element, implicitRole);
}
function getRole(element) {
  var explicitRole = getExplicitRole(element);
  if (explicitRole === null || explicitRole === "presentation") {
    var implicitRole = getImplicitRole(element);
    if (explicitRole !== "presentation" || ignorePresentationalRole(element, implicitRole || "")) {
      return implicitRole;
    }
  }
  return explicitRole;
}
function getImplicitRole(element) {
  var mappedByTag = localNameToRoleMappings[getLocalName(element)];
  if (mappedByTag !== undefined) {
    return mappedByTag;
  }
  switch (getLocalName(element)) {
    case "a":
    case "area":
    case "link":
      if (element.hasAttribute("href")) {
        return "link";
      }
      break;
    case "img":
      if (element.getAttribute("alt") === "" && !ignorePresentationalRole(element, "img")) {
        return "presentation";
      }
      return "img";
    case "input":
      {
        var _ref = element,
          type = _ref.type;
        switch (type) {
          case "button":
          case "image":
          case "reset":
          case "submit":
            return "button";
          case "checkbox":
          case "radio":
            return type;
          case "range":
            return "slider";
          case "email":
          case "tel":
          case "text":
          case "url":
            if (element.hasAttribute("list")) {
              return "combobox";
            }
            return "textbox";
          case "search":
            if (element.hasAttribute("list")) {
              return "combobox";
            }
            return "searchbox";
          case "number":
            return "spinbutton";
          default:
            return null;
        }
      }
    case "select":
      if (element.hasAttribute("multiple") || element.size > 1) {
        return "listbox";
      }
      return "combobox";
  }
  return null;
}
function getExplicitRole(element) {
  var role = element.getAttribute("role");
  if (role !== null) {
    var explicitRole = role.trim().split(" ")[0];
    // String.prototype.split(sep, limit) will always return an array with at least one member
    // as long as limit is either undefined or > 0
    if (explicitRole.length > 0) {
      return explicitRole;
    }
  }
  return null;
}
//# sourceMappingURL=getRole.js.map

---

File name: node_modules\dom-accessibility-api\dist\index.d.ts

Code:
export { computeAccessibleDescription } from "./accessible-description";
export { computeAccessibleName } from "./accessible-name";
export { default as getRole } from "./getRole";
export * from "./is-inaccessible";
//# sourceMappingURL=index.d.ts.map

---

File name: node_modules\dom-accessibility-api\dist\index.js

Code:
"use strict";

exports.__esModule = true;
var _exportNames = {
  computeAccessibleDescription: true,
  computeAccessibleName: true,
  getRole: true
};
exports.getRole = exports.computeAccessibleName = exports.computeAccessibleDescription = void 0;
var _accessibleDescription = require("./accessible-description");
exports.computeAccessibleDescription = _accessibleDescription.computeAccessibleDescription;
var _accessibleName = require("./accessible-name");
exports.computeAccessibleName = _accessibleName.computeAccessibleName;
var _getRole = _interopRequireDefault(require("./getRole"));
exports.getRole = _getRole.default;
var _isInaccessible = require("./is-inaccessible");
Object.keys(_isInaccessible).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _isInaccessible[key]) return;
  exports[key] = _isInaccessible[key];
});
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
//# sourceMappingURL=index.js.map

---

File name: node_modules\dom-accessibility-api\dist\is-inaccessible.d.ts

Code:
export interface IsInaccessibleOptions {
    getComputedStyle?: typeof window.getComputedStyle;
    /**
     * Can be used to return cached results from previous isSubtreeInaccessible calls.
     */
    isSubtreeInaccessible?: (element: Element) => boolean;
}
/**
 * Partial implementation https://www.w3.org/TR/wai-aria-1.2/#tree_exclusion
 * which should only be used for elements with a non-presentational role i.e.
 * `role="none"` and `role="presentation"` will not be excluded.
 *
 * Implements aria-hidden semantics (i.e. parent overrides child)
 * Ignores "Child Presentational: True" characteristics
 *
 * @param element
 * @param options
 * @returns {boolean} true if excluded, otherwise false
 */
export declare function isInaccessible(element: Element, options?: IsInaccessibleOptions): boolean;
export interface IsSubtreeInaccessibleOptions {
    getComputedStyle?: typeof window.getComputedStyle;
}
/**
 *
 * @param element
 * @param options
 * @returns {boolean} - `true` if every child of the element is inaccessible
 */
export declare function isSubtreeInaccessible(element: Element, options?: IsSubtreeInaccessibleOptions): boolean;
//# sourceMappingURL=is-inaccessible.d.ts.map

---

File name: node_modules\dom-accessibility-api\dist\is-inaccessible.js

Code:
"use strict";

exports.__esModule = true;
exports.isInaccessible = isInaccessible;
exports.isSubtreeInaccessible = isSubtreeInaccessible;
/**
 * Partial implementation https://www.w3.org/TR/wai-aria-1.2/#tree_exclusion
 * which should only be used for elements with a non-presentational role i.e.
 * `role="none"` and `role="presentation"` will not be excluded.
 *
 * Implements aria-hidden semantics (i.e. parent overrides child)
 * Ignores "Child Presentational: True" characteristics
 *
 * @param element
 * @param options
 * @returns {boolean} true if excluded, otherwise false
 */
function isInaccessible(element) {
  var _element$ownerDocumen;
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var _options$getComputedS = options.getComputedStyle,
    getComputedStyle = _options$getComputedS === void 0 ? (_element$ownerDocumen = element.ownerDocument.defaultView) === null || _element$ownerDocumen === void 0 ? void 0 : _element$ownerDocumen.getComputedStyle : _options$getComputedS,
    _options$isSubtreeIna = options.isSubtreeInaccessible,
    isSubtreeInaccessibleImpl = _options$isSubtreeIna === void 0 ? isSubtreeInaccessible : _options$isSubtreeIna;
  if (typeof getComputedStyle !== "function") {
    throw new TypeError("Owner document of the element needs to have an associated window.");
  }
  // since visibility is inherited we can exit early
  if (getComputedStyle(element).visibility === "hidden") {
    return true;
  }
  var currentElement = element;
  while (currentElement) {
    if (isSubtreeInaccessibleImpl(currentElement, {
      getComputedStyle: getComputedStyle
    })) {
      return true;
    }
    currentElement = currentElement.parentElement;
  }
  return false;
}
/**
 *
 * @param element
 * @param options
 * @returns {boolean} - `true` if every child of the element is inaccessible
 */
function isSubtreeInaccessible(element) {
  var _element$ownerDocumen2;
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var _options$getComputedS2 = options.getComputedStyle,
    getComputedStyle = _options$getComputedS2 === void 0 ? (_element$ownerDocumen2 = element.ownerDocument.defaultView) === null || _element$ownerDocumen2 === void 0 ? void 0 : _element$ownerDocumen2.getComputedStyle : _options$getComputedS2;
  if (typeof getComputedStyle !== "function") {
    throw new TypeError("Owner document of the element needs to have an associated window.");
  }
  if (element.hidden === true) {
    return true;
  }
  if (element.getAttribute("aria-hidden") === "true") {
    return true;
  }
  if (getComputedStyle(element).display === "none") {
    return true;
  }
  return false;
}
//# sourceMappingURL=is-inaccessible.js.map

---

File name: node_modules\dom-accessibility-api\dist\polyfills\array.from.d.ts

Code:
/**
 * Creates an array from an iterable object.
 * @param iterable An iterable object to convert to an array.
 */
export default function arrayFrom<T>(iterable: Iterable<T> | ArrayLike<T>): T[];
//# sourceMappingURL=array.from.d.ts.map

---

File name: node_modules\dom-accessibility-api\dist\polyfills\array.from.js

Code:
"use strict";

exports.__esModule = true;
exports.default = arrayFrom;
/**
 * @source {https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from#Polyfill}
 * but without thisArg (too hard to type, no need to `this`)
 */
var toStr = Object.prototype.toString;
function isCallable(fn) {
  return typeof fn === "function" || toStr.call(fn) === "[object Function]";
}
function toInteger(value) {
  var number = Number(value);
  if (isNaN(number)) {
    return 0;
  }
  if (number === 0 || !isFinite(number)) {
    return number;
  }
  return (number > 0 ? 1 : -1) * Math.floor(Math.abs(number));
}
var maxSafeInteger = Math.pow(2, 53) - 1;
function toLength(value) {
  var len = toInteger(value);
  return Math.min(Math.max(len, 0), maxSafeInteger);
}
/**
 * Creates an array from an iterable object.
 * @param iterable An iterable object to convert to an array.
 */

/**
 * Creates an array from an iterable object.
 * @param iterable An iterable object to convert to an array.
 * @param mapfn A mapping function to call on every element of the array.
 * @param thisArg Value of 'this' used to invoke the mapfn.
 */
function arrayFrom(arrayLike, mapFn) {
  // 1. Let C be the this value.
  // edit(@eps1lon): we're not calling it as Array.from
  var C = Array;

  // 2. Let items be ToObject(arrayLike).
  var items = Object(arrayLike);

  // 3. ReturnIfAbrupt(items).
  if (arrayLike == null) {
    throw new TypeError("Array.from requires an array-like object - not null or undefined");
  }

  // 4. If mapfn is undefined, then let mapping be false.
  // const mapFn = arguments.length > 1 ? arguments[1] : void undefined;

  if (typeof mapFn !== "undefined") {
    // 5. else
    // 5. a If IsCallable(mapfn) is false, throw a TypeError exception.
    if (!isCallable(mapFn)) {
      throw new TypeError("Array.from: when provided, the second argument must be a function");
    }
  }

  // 10. Let lenValue be Get(items, "length").
  // 11. Let len be ToLength(lenValue).
  var len = toLength(items.length);

  // 13. If IsConstructor(C) is true, then
  // 13. a. Let A be the result of calling the [[Construct]] internal method
  // of C with an argument list containing the single item len.
  // 14. a. Else, Let A be ArrayCreate(len).
  var A = isCallable(C) ? Object(new C(len)) : new Array(len);

  // 16. Let k be 0.
  var k = 0;
  // 17. Repeat, while k < len… (also steps a - h)
  var kValue;
  while (k < len) {
    kValue = items[k];
    if (mapFn) {
      A[k] = mapFn(kValue, k);
    } else {
      A[k] = kValue;
    }
    k += 1;
  }
  // 18. Let putStatus be Put(A, "length", len, true).
  A.length = len;
  // 20. Return A.
  return A;
}
//# sourceMappingURL=array.from.js.map

---

File name: node_modules\dom-accessibility-api\dist\polyfills\iterator.d.js

Code:
"use strict";
//# sourceMappingURL=iterator.d.js.map

---

File name: node_modules\dom-accessibility-api\dist\polyfills\SetLike.d.ts

Code:
declare global {
    class Set<T> {
        constructor(items?: T[]);
        add(value: T): this;
        clear(): void;
        delete(value: T): boolean;
        forEach(callbackfn: (value: T, value2: T, set: Set<T>) => void, thisArg?: unknown): void;
        has(value: T): boolean;
        readonly size: number;
    }
}
declare const _default: typeof Set;
export default _default;
//# sourceMappingURL=SetLike.d.ts.map

---

File name: node_modules\dom-accessibility-api\dist\polyfills\SetLike.js

Code:
"use strict";

exports.__esModule = true;
exports.default = void 0;
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
// for environments without Set we fallback to arrays with unique members
var SetLike = /*#__PURE__*/function () {
  function SetLike() {
    var items = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    _classCallCheck(this, SetLike);
    _defineProperty(this, "items", void 0);
    this.items = items;
  }
  _createClass(SetLike, [{
    key: "add",
    value: function add(value) {
      if (this.has(value) === false) {
        this.items.push(value);
      }
      return this;
    }
  }, {
    key: "clear",
    value: function clear() {
      this.items = [];
    }
  }, {
    key: "delete",
    value: function _delete(value) {
      var previousLength = this.items.length;
      this.items = this.items.filter(function (item) {
        return item !== value;
      });
      return previousLength !== this.items.length;
    }
  }, {
    key: "forEach",
    value: function forEach(callbackfn) {
      var _this = this;
      this.items.forEach(function (item) {
        callbackfn(item, item, _this);
      });
    }
  }, {
    key: "has",
    value: function has(value) {
      return this.items.indexOf(value) !== -1;
    }
  }, {
    key: "size",
    get: function get() {
      return this.items.length;
    }
  }]);
  return SetLike;
}();
var _default = typeof Set === "undefined" ? Set : SetLike;
exports.default = _default;
//# sourceMappingURL=SetLike.js.map

---

File name: node_modules\dom-accessibility-api\dist\util.d.ts

Code:
export { getLocalName } from "./getRole";
export declare function isElement(node: Node | null): node is Element;
export declare function isHTMLTableCaptionElement(node: Node | null): node is HTMLTableCaptionElement;
export declare function isHTMLInputElement(node: Node | null): node is HTMLInputElement;
export declare function isHTMLOptGroupElement(node: Node | null): node is HTMLOptGroupElement;
export declare function isHTMLSelectElement(node: Node | null): node is HTMLSelectElement;
export declare function isHTMLTableElement(node: Node | null): node is HTMLTableElement;
export declare function isHTMLTextAreaElement(node: Node | null): node is HTMLTextAreaElement;
export declare function safeWindow(node: Node): Window;
export declare function isHTMLFieldSetElement(node: Node | null): node is HTMLFieldSetElement;
export declare function isHTMLLegendElement(node: Node | null): node is HTMLLegendElement;
export declare function isHTMLSlotElement(node: Node | null): node is HTMLSlotElement;
export declare function isSVGElement(node: Node | null): node is SVGElement;
export declare function isSVGSVGElement(node: Node | null): node is SVGSVGElement;
export declare function isSVGTitleElement(node: Node | null): node is SVGTitleElement;
/**
 *
 * @param {Node} node -
 * @param {string} attributeName -
 * @returns {Element[]} -
 */
export declare function queryIdRefs(node: Node, attributeName: string): Element[];
export declare function hasAnyConcreteRoles(node: Node, roles: Array<string | null>): node is Element;
//# sourceMappingURL=util.d.ts.map

---

File name: node_modules\dom-accessibility-api\dist\util.js

Code:
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
exports.__esModule = true;
exports.hasAnyConcreteRoles = hasAnyConcreteRoles;
exports.isElement = isElement;
exports.isHTMLFieldSetElement = isHTMLFieldSetElement;
exports.isHTMLInputElement = isHTMLInputElement;
exports.isHTMLLegendElement = isHTMLLegendElement;
exports.isHTMLOptGroupElement = isHTMLOptGroupElement;
exports.isHTMLSelectElement = isHTMLSelectElement;
exports.isHTMLSlotElement = isHTMLSlotElement;
exports.isHTMLTableCaptionElement = isHTMLTableCaptionElement;
exports.isHTMLTableElement = isHTMLTableElement;
exports.isHTMLTextAreaElement = isHTMLTextAreaElement;
exports.isSVGElement = isSVGElement;
exports.isSVGSVGElement = isSVGSVGElement;
exports.isSVGTitleElement = isSVGTitleElement;
exports.queryIdRefs = queryIdRefs;
exports.safeWindow = safeWindow;
var _getRole = _interopRequireWildcard(require("./getRole"));
exports.getLocalName = _getRole.getLocalName;
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function isElement(node) {
  return node !== null && node.nodeType === node.ELEMENT_NODE;
}
function isHTMLTableCaptionElement(node) {
  return isElement(node) && (0, _getRole.getLocalName)(node) === "caption";
}
function isHTMLInputElement(node) {
  return isElement(node) && (0, _getRole.getLocalName)(node) === "input";
}
function isHTMLOptGroupElement(node) {
  return isElement(node) && (0, _getRole.getLocalName)(node) === "optgroup";
}
function isHTMLSelectElement(node) {
  return isElement(node) && (0, _getRole.getLocalName)(node) === "select";
}
function isHTMLTableElement(node) {
  return isElement(node) && (0, _getRole.getLocalName)(node) === "table";
}
function isHTMLTextAreaElement(node) {
  return isElement(node) && (0, _getRole.getLocalName)(node) === "textarea";
}
function safeWindow(node) {
  var _ref = node.ownerDocument === null ? node : node.ownerDocument,
    defaultView = _ref.defaultView;
  if (defaultView === null) {
    throw new TypeError("no window available");
  }
  return defaultView;
}
function isHTMLFieldSetElement(node) {
  return isElement(node) && (0, _getRole.getLocalName)(node) === "fieldset";
}
function isHTMLLegendElement(node) {
  return isElement(node) && (0, _getRole.getLocalName)(node) === "legend";
}
function isHTMLSlotElement(node) {
  return isElement(node) && (0, _getRole.getLocalName)(node) === "slot";
}
function isSVGElement(node) {
  return isElement(node) && node.ownerSVGElement !== undefined;
}
function isSVGSVGElement(node) {
  return isElement(node) && (0, _getRole.getLocalName)(node) === "svg";
}
function isSVGTitleElement(node) {
  return isSVGElement(node) && (0, _getRole.getLocalName)(node) === "title";
}

/**
 *
 * @param {Node} node -
 * @param {string} attributeName -
 * @returns {Element[]} -
 */
function queryIdRefs(node, attributeName) {
  if (isElement(node) && node.hasAttribute(attributeName)) {
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion -- safe due to hasAttribute check
    var ids = node.getAttribute(attributeName).split(" ");

    // Browsers that don't support shadow DOM won't have getRootNode
    var root = node.getRootNode ? node.getRootNode() : node.ownerDocument;
    return ids.map(function (id) {
      return root.getElementById(id);
    }).filter(function (element) {
      return element !== null;
    }
    // TODO: why does this not narrow?
    );
  }

  return [];
}
function hasAnyConcreteRoles(node, roles) {
  if (isElement(node)) {
    return roles.indexOf((0, _getRole.default)(node)) !== -1;
  }
  return false;
}
//# sourceMappingURL=util.js.map

---

File name: node_modules\dom-accessibility-api\LICENSE.md

Code:
MIT License

Copyright (c) 2020 Sebastian Silbermann

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.


---

File name: node_modules\dom-accessibility-api\package.json

Code:
{
	"name": "dom-accessibility-api",
	"description": "Implements https://w3c.github.io/accname/",
	"version": "0.5.16",
	"main": "dist/index.js",
	"module": "dist/index.mjs",
	"type": "commonjs",
	"exports": {
		"import": "./dist/index.mjs",
		"require": "./dist/index.js"
	},
	"license": "MIT",
	"repository": {
		"type": "git",
		"url": "https://github.com/eps1lon/dom-accessibility-api.git"
	},
	"files": [
		".browserslistrc",
		"dist/"
	],
	"scripts": {
		"build": "yarn build:clean && yarn build:source && yarn build:source:cjs && yarn build:types",
		"build:clean": "rimraf dist",
		"build:source": "cross-env BABEL_ENV=esm babel sources --extensions \".ts\" --ignore \"**/__tests__/**/*\" --out-dir dist/ --out-file-extension=.mjs --source-maps",
		"build:source:cjs": "cross-env BABEL_ENV=cjs babel sources --extensions \".ts\" --ignore \"**/__tests__/**/*\" --out-dir dist/ --out-file-extension=.js --source-maps",
		"build:types": "tsc -p tsconfig.json --emitDeclarationOnly",
		"format": "prettier \"**/*.{json,js,md,ts,yml}\" --write --ignore-path .prettierignore",
		"lint": "eslint --report-unused-disable-directives \"{scripts,sources}/**/*.{js,ts}\"",
		"release": "yarn build && yarn changeset publish",
		"test": "jest --config scripts/jest/jest.config.js",
		"test:ci": "jest --ci --config scripts/jest/jest.ci.config.js --runInBand",
		"test:coverage": "jest --config scripts/jest/jest.coverage.config.js",
		"test:types": "tsc -p tsconfig.json --noEmit",
		"test:wpt:jsdom": "mocha tests/wpt-jsdom/run-wpts.js",
		"test:wpt:browser": "concurrently --success first --kill-others \"yarn test:wpt:browser:run\" \"yarn test:wpt:browser:server\"",
		"test:wpt:browser:run": "cypress run --project tests",
		"test:wpt:browser:server": "serve tests/wpt",
		"test:wpt:browser:open": "cypress open --project tests",
		"wpt:init": "git submodule update --init --recursive",
		"wpt:reset": "rimraf ./tests/wpt && yarn wpt:init",
		"wpt:update": "git submodule update --recursive --remote && cd tests/wpt && python wpt.py manifest --path ../wpt-jsdom/wpt-manifest.json"
	},
	"devDependencies": {
		"@babel/cli": "^7.14.3",
		"@babel/core": "^7.14.3",
		"@babel/plugin-proposal-class-properties": "^7.13.0",
		"@babel/preset-env": "^7.14.4",
		"@babel/preset-typescript": "^7.13.0",
		"@changesets/changelog-github": "^0.4.0",
		"@changesets/cli": "^2.16.0",
		"@testing-library/dom": "^8.0.0",
		"@types/jest": "^29.0.0",
		"@typescript-eslint/eslint-plugin": "^5.0.0",
		"@typescript-eslint/parser": "^5.0.0",
		"concurrently": "^7.0.0",
		"cross-env": "^7.0.3",
		"cypress": "^12.0.0",
		"eslint": "^7.27.0",
		"eslint-plugin-jest": "^27.0.0",
		"jest": "^29.0.0",
		"jest-diff": "^29.0.0",
		"jest-environment-jsdom": "^29.0.0",
		"jest-junit": "^15.0.0",
		"js-yaml": "^4.1.0",
		"jsdom": "^20.0.0",
		"minimatch": "^6.0.0",
		"mocha": "^10.0.0",
		"mocha-sugar-free": "^1.4.0",
		"prettier": "^2.3.0",
		"q": "^1.5.1",
		"request": "^2.88",
		"request-promise-native": "^1.0.9",
		"rimraf": "^4.0.0",
		"serve": "^14.0.0",
		"typescript": "^4.3.2"
	},
	"resolutions": {
		"**/kind-of": "^6.0.3",
		"**/minimist": "^1.2.2"
	},
	"prettier": {
		"useTabs": true
	},
	"keywords": [
		"accessibility",
		"ARIA",
		"accname"
	],
	"publishConfig": {
		"access": "public"
	}
}


---

File name: node_modules\dom-accessibility-api\README.md

Code:
# dom-accessibility-api

[![npm version](https://badge.fury.io/js/dom-accessibility-api.svg)](https://badge.fury.io/js/dom-accessibility-api)
[![Build Status](https://dev.azure.com/silbermannsebastian/dom-accessibility-api/_apis/build/status/eps1lon.dom-accessibility-api?branchName=main)](https://dev.azure.com/silbermannsebastian/dom-accessibility-api/_build/latest?definitionId=6&branchName=main)
![Azure DevOps coverage](https://img.shields.io/azure-devops/coverage/silbermannsebastian/dom-accessibility-api/6)

Computes the accessible name or description of a given DOM Element.
https://w3c.github.io/accname/ implemented in JavaScript for testing.

```bash
$ yarn add dom-accessibility-api
```

```js
import {
	computeAccessibleName,
	computeAccessibleDescription,
} from "dom-accessibility-api";
```

I'm not an editor of any of the referenced specs (nor very experience with using them) so if you got any insights, something catches
your eye please open an issue.

## Supported environments

**WARNING**: Only [active node versions](https://nodejs.org/en/about/releases/) are supported.
Inactive node versions can stop working in a SemVer MINOR release.

```bash
ie 11
edge >= 14
firefox >= 52
chrome >= 49
safari >= 10
node 10.0
```

or check the published `.browserslistrc`

## progress

Using https://github.com/web-platform-tests/wpt. Be sure to init submodules when
cloning. See [the test readme](/tests/README.md) for more info about the test setup.

### browser (Chrome)

153/159

### jsdom

<details>
<summary>report 138/159 passing of which 15 are due `::before { content }`, one might be a wrong test, 5 are pathological </summary>

```bash
  web-platform-tests
    accname
      ✓ [expected fail] description_1.0_combobox-focusable-manual.html
      ✓ [expected fail] description_from_content_of_describedby_element-manual.html
      ✓ description_link-with-label-manual.html
      ✓ description_test_case_557-manual.html
      ✓ description_test_case_664-manual.html
      ✓ description_test_case_665-manual.html
      ✓ description_test_case_666-manual.html
      ✓ description_test_case_772-manual.html
      ✓ description_test_case_773-manual.html
      ✓ description_test_case_774-manual.html
      ✓ description_test_case_838-manual.html
      ✓ description_test_case_broken_reference-manual.html
      ✓ description_test_case_one_valid_reference-manual.html
      ✓ description_title-same-element-manual.html
      ✓ name_1.0_combobox-focusable-alternative-manual.html
      ✓ name_1.0_combobox-focusable-manual.html
      ✓ name_checkbox-label-embedded-combobox-manual.html
      ✓ name_checkbox-label-embedded-listbox-manual.html
      ✓ name_checkbox-label-embedded-menu-manual.html
      ✓ name_checkbox-label-embedded-select-manual.html
      ✓ name_checkbox-label-embedded-slider-manual.html
      ✓ name_checkbox-label-embedded-spinbutton-manual.html
      ✓ name_checkbox-label-embedded-textbox-manual.html
      ✓ name_checkbox-label-multiple-label-alternative-manual.html
      ✓ name_checkbox-label-multiple-label-manual.html
      ✓ name_checkbox-title-manual.html
      ✓ name_file-label-embedded-combobox-manual.html
      ✓ name_file-label-embedded-menu-manual.html
      ✓ name_file-label-embedded-select-manual.html
      ✓ name_file-label-embedded-slider-manual.html
      ✓ name_file-label-embedded-spinbutton-manual.html
      ✓ [expected fail] name_file-label-inline-block-elements-manual.html
      ✓ [expected fail] name_file-label-inline-block-styles-manual.html
      ✓ name_file-label-inline-hidden-elements-manual.html
      ✓ name_file-label-owned-combobox-manual.html
      ✓ name_file-label-owned-combobox-owned-listbox-manual.html
      ✓ name_file-title-manual.html
      ✓ name_from_content-manual.html
      ✓ name_from_content_of_label-manual.html
      ✓ name_from_content_of_labelledby_element-manual.html
      ✓ name_from_content_of_labelledby_elements_one_of_which_is_hidden-manual.html
      ✓ name_heading-combobox-focusable-alternative-manual.html
      ✓ name_image-title-manual.html
      ✓ name_link-mixed-content-manual.html
      ✓ name_link-with-label-manual.html
      ✓ name_password-label-embedded-combobox-manual.html
      ✓ name_password-label-embedded-menu-manual.html
      ✓ name_password-label-embedded-select-manual.html
      ✓ name_password-label-embedded-slider-manual.html
      ✓ name_password-label-embedded-spinbutton-manual.html
      ✓ name_password-title-manual.html
      ✓ name_radio-label-embedded-combobox-manual.html
      ✓ name_radio-label-embedded-menu-manual.html
      ✓ name_radio-label-embedded-select-manual.html
      ✓ name_radio-label-embedded-slider-manual.html
      ✓ name_radio-label-embedded-spinbutton-manual.html
      ✓ name_radio-title-manual.html
      ✓ name_test_case_539-manual.html
      ✓ name_test_case_540-manual.html
      ✓ name_test_case_541-manual.html
      ✓ name_test_case_543-manual.html
      ✓ name_test_case_544-manual.html
      ✓ name_test_case_545-manual.html
      ✓ name_test_case_546-manual.html
      ✓ name_test_case_547-manual.html
      ✓ name_test_case_548-manual.html
      ✓ name_test_case_549-manual.html
      ✓ name_test_case_550-manual.html
      ✓ name_test_case_551-manual.html
      ✓ [expected fail] name_test_case_552-manual.html
      ✓ [expected fail] name_test_case_553-manual.html
      ✓ name_test_case_556-manual.html
      ✓ name_test_case_557-manual.html
      ✓ name_test_case_558-manual.html
      ✓ name_test_case_559-manual.html
      ✓ name_test_case_560-manual.html
      ✓ name_test_case_561-manual.html
      ✓ name_test_case_562-manual.html
      ✓ name_test_case_563-manual.html
      ✓ name_test_case_564-manual.html
      ✓ name_test_case_565-manual.html
      ✓ name_test_case_566-manual.html
      ✓ name_test_case_596-manual.html
      ✓ name_test_case_597-manual.html
      ✓ name_test_case_598-manual.html
      ✓ name_test_case_599-manual.html
      ✓ name_test_case_600-manual.html
      ✓ name_test_case_601-manual.html
      ✓ name_test_case_602-manual.html
      ✓ name_test_case_603-manual.html
      ✓ name_test_case_604-manual.html
      ✓ name_test_case_605-manual.html
      ✓ name_test_case_606-manual.html
      ✓ name_test_case_607-manual.html
      ✓ name_test_case_608-manual.html
      ✓ name_test_case_609-manual.html
      ✓ name_test_case_610-manual.html
      ✓ name_test_case_611-manual.html
      ✓ name_test_case_612-manual.html
      ✓ name_test_case_613-manual.html
      ✓ name_test_case_614-manual.html
      ✓ name_test_case_615-manual.html
      ✓ name_test_case_616-manual.html
      ✓ name_test_case_617-manual.html
      ✓ name_test_case_618-manual.html
      ✓ name_test_case_619-manual.html
      ✓ name_test_case_620-manual.html
      ✓ name_test_case_621-manual.html
      ✓ [expected fail] name_test_case_659-manual.html
      ✓ [expected fail] name_test_case_660-manual.html
      ✓ [expected fail] name_test_case_661-manual.html
      ✓ [expected fail] name_test_case_662-manual.html
      ✓ [expected fail] name_test_case_663a-manual.html
      ✓ name_test_case_721-manual.html
      ✓ name_test_case_723-manual.html
      ✓ name_test_case_724-manual.html
      ✓ name_test_case_725-manual.html
      ✓ name_test_case_726-manual.html
      ✓ name_test_case_727-manual.html
      ✓ name_test_case_728-manual.html
      ✓ name_test_case_729-manual.html
      ✓ name_test_case_730-manual.html
      ✓ name_test_case_731-manual.html
      ✓ name_test_case_733-manual.html
      ✓ name_test_case_734-manual.html
      ✓ name_test_case_735-manual.html
      ✓ name_test_case_736-manual.html
      ✓ name_test_case_737-manual.html
      ✓ name_test_case_738-manual.html
      ✓ name_test_case_739-manual.html
      ✓ name_test_case_740-manual.html
      ✓ name_test_case_741-manual.html
      ✓ name_test_case_742-manual.html
      ✓ name_test_case_743-manual.html
      ✓ name_test_case_744-manual.html
      ✓ name_test_case_745-manual.html
      ✓ name_test_case_746-manual.html
      ✓ name_test_case_747-manual.html
      ✓ name_test_case_748-manual.html
      ✓ name_test_case_749-manual.html
      ✓ name_test_case_750-manual.html
      ✓ name_test_case_751-manual.html
      ✓ name_test_case_752-manual.html
      ✓ [expected fail] name_test_case_753-manual.html
      ✓ [expected fail] name_test_case_754-manual.html
      ✓ [expected fail] name_test_case_755-manual.html
      ✓ [expected fail] name_test_case_756-manual.html
      ✓ [expected fail] name_test_case_757-manual.html
      ✓ [expected fail] name_test_case_758-manual.html
      ✓ [expected fail] name_test_case_759-manual.html
      ✓ [expected fail] name_test_case_760-manual.html
      ✓ [expected fail] name_test_case_761-manual.html
      ✓ [expected fail] name_test_case_762-manual.html
      ✓ name_text-label-embedded-combobox-manual.html
      ✓ name_text-label-embedded-menu-manual.html
      ✓ name_text-label-embedded-select-manual.html
      ✓ name_text-label-embedded-slider-manual.html
      ✓ name_text-label-embedded-spinbutton-manual.html
      ✓ name_text-title-manual.html
```

</details>

## missing

- visibility context (inherited but can reappear; currently reappearing wont't work)


---

File name: node_modules\dunder-proto\CHANGELOG.md

Code:
# Changelog

All notable changes to this project will be documented in this file.

The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/)
and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).

## [v1.0.1](https://github.com/es-shims/dunder-proto/compare/v1.0.0...v1.0.1) - 2024-12-16

### Commits

- [Fix] do not crash when `--disable-proto=throw` [`6c367d9`](https://github.com/es-shims/dunder-proto/commit/6c367d919bc1604778689a297bbdbfea65752847)
- [Tests] ensure noproto tests only use the current version of dunder-proto [`b02365b`](https://github.com/es-shims/dunder-proto/commit/b02365b9cf889c4a2cac7be0c3cfc90a789af36c)
- [Dev Deps] update `@arethetypeswrong/cli`, `@types/tape` [`e3c5c3b`](https://github.com/es-shims/dunder-proto/commit/e3c5c3bd81cf8cef7dff2eca19e558f0e307f666)
- [Deps] update `call-bind-apply-helpers` [`19f1da0`](https://github.com/es-shims/dunder-proto/commit/19f1da028b8dd0d05c85bfd8f7eed2819b686450)

## v1.0.0 - 2024-12-06

### Commits

- Initial implementation, tests, readme, types [`a5b74b0`](https://github.com/es-shims/dunder-proto/commit/a5b74b0082f5270cb0905cd9a2e533cee7498373)
- Initial commit [`73fb5a3`](https://github.com/es-shims/dunder-proto/commit/73fb5a353b51ac2ab00c9fdeb0114daffd4c07a8)
- npm init [`80152dc`](https://github.com/es-shims/dunder-proto/commit/80152dc98155da4eb046d9f67a87ed96e8280a1d)
- Only apps should have lockfiles [`03e6660`](https://github.com/es-shims/dunder-proto/commit/03e6660a1d70dc401f3e217a031475ec537243dd)


---

File name: node_modules\dunder-proto\get.d.ts

Code:
declare function getDunderProto(target: {}): object | null;

declare const x: false | typeof getDunderProto;

export = x;

---

File name: node_modules\dunder-proto\get.js

Code:
'use strict';

var callBind = require('call-bind-apply-helpers');
var gOPD = require('gopd');

var hasProtoAccessor;
try {
	// eslint-disable-next-line no-extra-parens, no-proto
	hasProtoAccessor = /** @type {{ __proto__?: typeof Array.prototype }} */ ([]).__proto__ === Array.prototype;
} catch (e) {
	if (!e || typeof e !== 'object' || !('code' in e) || e.code !== 'ERR_PROTO_ACCESS') {
		throw e;
	}
}

// eslint-disable-next-line no-extra-parens
var desc = !!hasProtoAccessor && gOPD && gOPD(Object.prototype, /** @type {keyof typeof Object.prototype} */ ('__proto__'));

var $Object = Object;
var $getPrototypeOf = $Object.getPrototypeOf;

/** @type {import('./get')} */
module.exports = desc && typeof desc.get === 'function'
	? callBind([desc.get])
	: typeof $getPrototypeOf === 'function'
		? /** @type {import('./get')} */ function getDunder(value) {
			// eslint-disable-next-line eqeqeq
			return $getPrototypeOf(value == null ? value : $Object(value));
		}
		: false;


---

File name: node_modules\dunder-proto\package.json

Code:
{
	"name": "dunder-proto",
	"version": "1.0.1",
	"description": "If available, the `Object.prototype.__proto__` accessor and mutator, call-bound",
	"main": false,
	"exports": {
		"./get": "./get.js",
		"./set": "./set.js",
		"./package.json": "./package.json"
	},
	"sideEffects": false,
	"scripts": {
		"prepack": "npmignore --auto --commentLines=autogenerated",
		"prepublish": "not-in-publish || npm run prepublishOnly",
		"prepublishOnly": "safe-publish-latest",
		"prelint": "evalmd README.md",
		"lint": "eslint --ext=.js,.mjs .",
		"postlint": "tsc -p . && attw -P",
		"pretest": "npm run lint",
		"tests-only": "nyc tape 'test/**/*.js'",
		"test": "npm run tests-only",
		"posttest": "npx npm@'>= 10.2' audit --production",
		"version": "auto-changelog && git add CHANGELOG.md",
		"postversion": "auto-changelog && git add CHANGELOG.md && git commit --no-edit --amend && git tag -f \"v$(node -e \"console.log(require('./package.json').version)\")\""
	},
	"repository": {
		"type": "git",
		"url": "git+https://github.com/es-shims/dunder-proto.git"
	},
	"author": "Jordan Harband <ljharb@gmail.com>",
	"license": "MIT",
	"bugs": {
		"url": "https://github.com/es-shims/dunder-proto/issues"
	},
	"homepage": "https://github.com/es-shims/dunder-proto#readme",
	"dependencies": {
		"call-bind-apply-helpers": "^1.0.1",
		"es-errors": "^1.3.0",
		"gopd": "^1.2.0"
	},
	"devDependencies": {
		"@arethetypeswrong/cli": "^0.17.1",
		"@ljharb/eslint-config": "^21.1.1",
		"@ljharb/tsconfig": "^0.2.2",
		"@types/tape": "^5.7.0",
		"auto-changelog": "^2.5.0",
		"encoding": "^0.1.13",
		"eslint": "=8.8.0",
		"evalmd": "^0.0.19",
		"in-publish": "^2.0.1",
		"npmignore": "^0.3.1",
		"nyc": "^10.3.2",
		"safe-publish-latest": "^2.0.0",
		"tape": "^5.9.0",
		"typescript": "next"
	},
	"auto-changelog": {
		"output": "CHANGELOG.md",
		"template": "keepachangelog",
		"unreleased": false,
		"commitLimit": false,
		"backfillLimit": false,
		"hideCredit": true
	},
	"testling": {
		"files": "test/index.js"
	},
	"publishConfig": {
		"ignore": [
			".github/workflows"
		]
	},
	"engines": {
		"node": ">= 0.4"
	}
}


---

File name: node_modules\dunder-proto\README.md

Code:
# dunder-proto <sup>[![Version Badge][npm-version-svg]][package-url]</sup>

[![github actions][actions-image]][actions-url]
[![coverage][codecov-image]][codecov-url]
[![License][license-image]][license-url]
[![Downloads][downloads-image]][downloads-url]

[![npm badge][npm-badge-png]][package-url]

If available, the `Object.prototype.__proto__` accessor and mutator, call-bound.

## Getting started

```sh
npm install --save dunder-proto
```

## Usage/Examples

```js
const assert = require('assert');
const getDunder = require('dunder-proto/get');
const setDunder = require('dunder-proto/set');

const obj = {};

assert.equal('toString' in obj, true);
assert.equal(getDunder(obj), Object.prototype);

setDunder(obj, null);

assert.equal('toString' in obj, false);
assert.equal(getDunder(obj), null);
```

## Tests

Clone the repo, `npm install`, and run `npm test`

[package-url]: https://npmjs.org/package/dunder-proto
[npm-version-svg]: https://versionbadg.es/es-shims/dunder-proto.svg
[deps-svg]: https://david-dm.org/es-shims/dunder-proto.svg
[deps-url]: https://david-dm.org/es-shims/dunder-proto
[dev-deps-svg]: https://david-dm.org/es-shims/dunder-proto/dev-status.svg
[dev-deps-url]: https://david-dm.org/es-shims/dunder-proto#info=devDependencies
[npm-badge-png]: https://nodei.co/npm/dunder-proto.png?downloads=true&stars=true
[license-image]: https://img.shields.io/npm/l/dunder-proto.svg
[license-url]: LICENSE
[downloads-image]: https://img.shields.io/npm/dm/dunder-proto.svg
[downloads-url]: https://npm-stat.com/charts.html?package=dunder-proto
[codecov-image]: https://codecov.io/gh/es-shims/dunder-proto/branch/main/graphs/badge.svg
[codecov-url]: https://app.codecov.io/gh/es-shims/dunder-proto/
[actions-image]: https://img.shields.io/endpoint?url=https://github-actions-badge-u3jn4tfpocch.runkit.sh/es-shims/dunder-proto
[actions-url]: https://github.com/es-shims/dunder-proto/actions


---

File name: node_modules\dunder-proto\set.d.ts

Code:
declare function setDunderProto<P extends null | object>(target: {}, proto: P): P;

declare const x: false | typeof setDunderProto;

export = x;

---

File name: node_modules\dunder-proto\set.js

Code:
'use strict';

var callBind = require('call-bind-apply-helpers');
var gOPD = require('gopd');
var $TypeError = require('es-errors/type');

/** @type {{ __proto__?: object | null }} */
var obj = {};
try {
	obj.__proto__ = null; // eslint-disable-line no-proto
} catch (e) {
	if (!e || typeof e !== 'object' || !('code' in e) || e.code !== 'ERR_PROTO_ACCESS') {
		throw e;
	}
}

var hasProtoMutator = !('toString' in obj);

// eslint-disable-next-line no-extra-parens
var desc = gOPD && gOPD(Object.prototype, /** @type {keyof typeof Object.prototype} */ ('__proto__'));

/** @type {import('./set')} */
module.exports = hasProtoMutator && (
// eslint-disable-next-line no-extra-parens
	(!!desc && typeof desc.set === 'function' && /** @type {import('./set')} */ (callBind([desc.set])))
	|| /** @type {import('./set')} */ function setDunder(object, proto) {
		// this is node v0.10 or older, which doesn't have Object.setPrototypeOf and has undeniable __proto__
		if (object == null) { // eslint-disable-line eqeqeq
			throw new $TypeError('set Object.prototype.__proto__ called on null or undefined');
		}
		// eslint-disable-next-line no-proto, no-param-reassign, no-extra-parens
		/** @type {{ __proto__?: object | null }} */ (object).__proto__ = proto;
		return proto;
	}
);


---

File name: node_modules\dunder-proto\test\get.js

Code:
'use strict';

var test = require('tape');

var getDunderProto = require('../get');

test('getDunderProto', { skip: !getDunderProto }, function (t) {
	if (!getDunderProto) {
		throw 'should never happen; this is just for type narrowing'; // eslint-disable-line no-throw-literal
	}

	// @ts-expect-error
	t['throws'](function () { getDunderProto(); }, TypeError, 'throws if no argument');
	// @ts-expect-error
	t['throws'](function () { getDunderProto(undefined); }, TypeError, 'throws with undefined');
	// @ts-expect-error
	t['throws'](function () { getDunderProto(null); }, TypeError, 'throws with null');

	t.equal(getDunderProto({}), Object.prototype);
	t.equal(getDunderProto([]), Array.prototype);
	t.equal(getDunderProto(function () {}), Function.prototype);
	t.equal(getDunderProto(/./g), RegExp.prototype);
	t.equal(getDunderProto(42), Number.prototype);
	t.equal(getDunderProto(true), Boolean.prototype);
	t.equal(getDunderProto('foo'), String.prototype);

	t.end();
});

test('no dunder proto', { skip: !!getDunderProto }, function (t) {
	t.notOk('__proto__' in Object.prototype, 'no __proto__ in Object.prototype');

	t.end();
});


---

File name: node_modules\dunder-proto\test\index.js

Code:
'use strict';

require('./get');
require('./set');


---

File name: node_modules\dunder-proto\test\set.js

Code:
'use strict';

var test = require('tape');

var setDunderProto = require('../set');

test('setDunderProto', { skip: !setDunderProto }, function (t) {
	if (!setDunderProto) {
		throw 'should never happen; this is just for type narrowing'; // eslint-disable-line no-throw-literal
	}

	// @ts-expect-error
	t['throws'](function () { setDunderProto(); }, TypeError, 'throws if no arguments');
	// @ts-expect-error
	t['throws'](function () { setDunderProto(undefined); }, TypeError, 'throws with undefined and nothing');
	// @ts-expect-error
	t['throws'](function () { setDunderProto(undefined, undefined); }, TypeError, 'throws with undefined and undefined');
	// @ts-expect-error
	t['throws'](function () { setDunderProto(null); }, TypeError, 'throws with null and undefined');
	// @ts-expect-error
	t['throws'](function () { setDunderProto(null, undefined); }, TypeError, 'throws with null and undefined');

	/** @type {{ inherited?: boolean }} */
	var obj = {};
	t.ok('toString' in obj, 'object initially has toString');

	setDunderProto(obj, null);
	t.notOk('toString' in obj, 'object no longer has toString');

	t.notOk('inherited' in obj, 'object lacks inherited property');
	setDunderProto(obj, { inherited: true });
	t.equal(obj.inherited, true, 'object has inherited property');

	t.end();
});

test('no dunder proto', { skip: !!setDunderProto }, function (t) {
	if ('__proto__' in Object.prototype) {
		t['throws'](
			// @ts-expect-error
			function () { ({}).__proto__ = null; }, // eslint-disable-line no-proto
			Error,
			'throws when setting Object.prototype.__proto__'
		);
	} else {
		t.notOk('__proto__' in Object.prototype, 'no __proto__ in Object.prototype');
	}

	t.end();
});


---

File name: node_modules\dunder-proto\tsconfig.json

Code:
{
	"extends": "@ljharb/tsconfig",
	"compilerOptions": {
		"target": "ES2021",
	},
	"exclude": [
		"coverage",
	],
}


---

File name: node_modules\electron-to-chromium\chromium-versions.js

Code:
module.exports = {
	"39": "0.20",
	"40": "0.21",
	"41": "0.21",
	"42": "0.25",
	"43": "0.27",
	"44": "0.30",
	"45": "0.31",
	"47": "0.36",
	"49": "0.37",
	"50": "1.1",
	"51": "1.2",
	"52": "1.3",
	"53": "1.4",
	"54": "1.4",
	"56": "1.6",
	"58": "1.7",
	"59": "1.8",
	"61": "2.0",
	"66": "3.0",
	"69": "4.0",
	"72": "5.0",
	"73": "5.0",
	"76": "6.0",
	"78": "7.0",
	"79": "8.0",
	"80": "8.0",
	"82": "9.0",
	"83": "9.0",
	"84": "10.0",
	"85": "10.0",
	"86": "11.0",
	"87": "11.0",
	"89": "12.0",
	"90": "13.0",
	"91": "13.0",
	"92": "14.0",
	"93": "14.0",
	"94": "15.0",
	"95": "16.0",
	"96": "16.0",
	"98": "17.0",
	"99": "18.0",
	"100": "18.0",
	"102": "19.0",
	"103": "20.0",
	"104": "20.0",
	"105": "21.0",
	"106": "21.0",
	"107": "22.0",
	"108": "22.0",
	"110": "23.0",
	"111": "24.0",
	"112": "24.0",
	"114": "25.0",
	"116": "26.0",
	"118": "27.0",
	"119": "28.0",
	"120": "28.0",
	"121": "29.0",
	"122": "29.0",
	"123": "30.0",
	"124": "30.0",
	"125": "31.0",
	"126": "31.0",
	"127": "32.0",
	"128": "32.0",
	"129": "33.0",
	"130": "33.0",
	"131": "34.0",
	"132": "34.0",
	"133": "35.0",
	"134": "35.0",
	"135": "36.0",
	"136": "36.0",
	"137": "37.0",
	"138": "37.0",
	"139": "38.0"
};

---

File name: node_modules\electron-to-chromium\chromium-versions.json

Code:
{"39":"0.20","40":"0.21","41":"0.21","42":"0.25","43":"0.27","44":"0.30","45":"0.31","47":"0.36","49":"0.37","50":"1.1","51":"1.2","52":"1.3","53":"1.4","54":"1.4","56":"1.6","58":"1.7","59":"1.8","61":"2.0","66":"3.0","69":"4.0","72":"5.0","73":"5.0","76":"6.0","78":"7.0","79":"8.0","80":"8.0","82":"9.0","83":"9.0","84":"10.0","85":"10.0","86":"11.0","87":"11.0","89":"12.0","90":"13.0","91":"13.0","92":"14.0","93":"14.0","94":"15.0","95":"16.0","96":"16.0","98":"17.0","99":"18.0","100":"18.0","102":"19.0","103":"20.0","104":"20.0","105":"21.0","106":"21.0","107":"22.0","108":"22.0","110":"23.0","111":"24.0","112":"24.0","114":"25.0","116":"26.0","118":"27.0","119":"28.0","120":"28.0","121":"29.0","122":"29.0","123":"30.0","124":"30.0","125":"31.0","126":"31.0","127":"32.0","128":"32.0","129":"33.0","130":"33.0","131":"34.0","132":"34.0","133":"35.0","134":"35.0","135":"36.0","136":"36.0","137":"37.0","138":"37.0","139":"38.0"}

---

File name: node_modules\electron-to-chromium\full-chromium-versions.js

Code:
module.exports = {
	"39.0.2171.65": [
		"0.20.0",
		"0.20.1",
		"0.20.2",
		"0.20.3",
		"0.20.4",
		"0.20.5",
		"0.20.6",
		"0.20.7",
		"0.20.8"
	],
	"40.0.2214.91": [
		"0.21.0",
		"0.21.1",
		"0.21.2"
	],
	"41.0.2272.76": [
		"0.21.3",
		"0.22.1",
		"0.22.2",
		"0.22.3",
		"0.23.0",
		"0.24.0"
	],
	"42.0.2311.107": [
		"0.25.0",
		"0.25.1",
		"0.25.2",
		"0.25.3",
		"0.26.0",
		"0.26.1",
		"0.27.0",
		"0.27.1"
	],
	"43.0.2357.65": [
		"0.27.2",
		"0.27.3",
		"0.28.0",
		"0.28.1",
		"0.28.2",
		"0.28.3",
		"0.29.1",
		"0.29.2"
	],
	"44.0.2403.125": [
		"0.30.4",
		"0.31.0"
	],
	"45.0.2454.85": [
		"0.31.2",
		"0.32.2",
		"0.32.3",
		"0.33.0",
		"0.33.1",
		"0.33.2",
		"0.33.3",
		"0.33.4",
		"0.33.6",
		"0.33.7",
		"0.33.8",
		"0.33.9",
		"0.34.0",
		"0.34.1",
		"0.34.2",
		"0.34.3",
		"0.34.4",
		"0.35.1",
		"0.35.2",
		"0.35.3",
		"0.35.4",
		"0.35.5"
	],
	"47.0.2526.73": [
		"0.36.0",
		"0.36.2",
		"0.36.3",
		"0.36.4"
	],
	"47.0.2526.110": [
		"0.36.5",
		"0.36.6",
		"0.36.7",
		"0.36.8",
		"0.36.9",
		"0.36.10",
		"0.36.11",
		"0.36.12"
	],
	"49.0.2623.75": [
		"0.37.0",
		"0.37.1",
		"0.37.3",
		"0.37.4",
		"0.37.5",
		"0.37.6",
		"0.37.7",
		"0.37.8",
		"1.0.0",
		"1.0.1",
		"1.0.2"
	],
	"50.0.2661.102": [
		"1.1.0",
		"1.1.1",
		"1.1.2",
		"1.1.3"
	],
	"51.0.2704.63": [
		"1.2.0",
		"1.2.1"
	],
	"51.0.2704.84": [
		"1.2.2",
		"1.2.3"
	],
	"51.0.2704.103": [
		"1.2.4",
		"1.2.5"
	],
	"51.0.2704.106": [
		"1.2.6",
		"1.2.7",
		"1.2.8"
	],
	"52.0.2743.82": [
		"1.3.0",
		"1.3.1",
		"1.3.2",
		"1.3.3",
		"1.3.4",
		"1.3.5",
		"1.3.6",
		"1.3.7",
		"1.3.9",
		"1.3.10",
		"1.3.13",
		"1.3.14",
		"1.3.15"
	],
	"53.0.2785.113": [
		"1.4.0",
		"1.4.1",
		"1.4.2",
		"1.4.3",
		"1.4.4",
		"1.4.5"
	],
	"53.0.2785.143": [
		"1.4.6",
		"1.4.7",
		"1.4.8",
		"1.4.10",
		"1.4.11",
		"1.4.13",
		"1.4.14",
		"1.4.15",
		"1.4.16"
	],
	"54.0.2840.51": [
		"1.4.12"
	],
	"54.0.2840.101": [
		"1.5.0",
		"1.5.1"
	],
	"56.0.2924.87": [
		"1.6.0",
		"1.6.1",
		"1.6.2",
		"1.6.3",
		"1.6.4",
		"1.6.5",
		"1.6.6",
		"1.6.7",
		"1.6.8",
		"1.6.9",
		"1.6.10",
		"1.6.11",
		"1.6.12",
		"1.6.13",
		"1.6.14",
		"1.6.15",
		"1.6.16",
		"1.6.17",
		"1.6.18"
	],
	"58.0.3029.110": [
		"1.7.0",
		"1.7.1",
		"1.7.2",
		"1.7.3",
		"1.7.4",
		"1.7.5",
		"1.7.6",
		"1.7.7",
		"1.7.8",
		"1.7.9",
		"1.7.10",
		"1.7.11",
		"1.7.12",
		"1.7.13",
		"1.7.14",
		"1.7.15",
		"1.7.16"
	],
	"59.0.3071.115": [
		"1.8.0",
		"1.8.1",
		"1.8.2-beta.1",
		"1.8.2-beta.2",
		"1.8.2-beta.3",
		"1.8.2-beta.4",
		"1.8.2-beta.5",
		"1.8.2",
		"1.8.3",
		"1.8.4",
		"1.8.5",
		"1.8.6",
		"1.8.7",
		"1.8.8"
	],
	"61.0.3163.100": [
		"2.0.0-beta.1",
		"2.0.0-beta.2",
		"2.0.0-beta.3",
		"2.0.0-beta.4",
		"2.0.0-beta.5",
		"2.0.0-beta.6",
		"2.0.0-beta.7",
		"2.0.0-beta.8",
		"2.0.0",
		"2.0.1",
		"2.0.2",
		"2.0.3",
		"2.0.4",
		"2.0.5",
		"2.0.6",
		"2.0.7",
		"2.0.8",
		"2.0.9",
		"2.0.10",
		"2.0.11",
		"2.0.12",
		"2.0.13",
		"2.0.14",
		"2.0.15",
		"2.0.16",
		"2.0.17",
		"2.0.18",
		"2.1.0-unsupported.20180809"
	],
	"66.0.3359.181": [
		"3.0.0-beta.1",
		"3.0.0-beta.2",
		"3.0.0-beta.3",
		"3.0.0-beta.4",
		"3.0.0-beta.5",
		"3.0.0-beta.6",
		"3.0.0-beta.7",
		"3.0.0-beta.8",
		"3.0.0-beta.9",
		"3.0.0-beta.10",
		"3.0.0-beta.11",
		"3.0.0-beta.12",
		"3.0.0-beta.13",
		"3.0.0",
		"3.0.1",
		"3.0.2",
		"3.0.3",
		"3.0.4",
		"3.0.5",
		"3.0.6",
		"3.0.7",
		"3.0.8",
		"3.0.9",
		"3.0.10",
		"3.0.11",
		"3.0.12",
		"3.0.13",
		"3.0.14",
		"3.0.15",
		"3.0.16",
		"3.1.0-beta.1",
		"3.1.0-beta.2",
		"3.1.0-beta.3",
		"3.1.0-beta.4",
		"3.1.0-beta.5",
		"3.1.0",
		"3.1.1",
		"3.1.2",
		"3.1.3",
		"3.1.4",
		"3.1.5",
		"3.1.6",
		"3.1.7",
		"3.1.8",
		"3.1.9",
		"3.1.10",
		"3.1.11",
		"3.1.12",
		"3.1.13"
	],
	"69.0.3497.106": [
		"4.0.0-beta.1",
		"4.0.0-beta.2",
		"4.0.0-beta.3",
		"4.0.0-beta.4",
		"4.0.0-beta.5",
		"4.0.0-beta.6",
		"4.0.0-beta.7",
		"4.0.0-beta.8",
		"4.0.0-beta.9",
		"4.0.0-beta.10",
		"4.0.0-beta.11",
		"4.0.0",
		"4.0.1",
		"4.0.2",
		"4.0.3",
		"4.0.4",
		"4.0.5",
		"4.0.6"
	],
	"69.0.3497.128": [
		"4.0.7",
		"4.0.8",
		"4.1.0",
		"4.1.1",
		"4.1.2",
		"4.1.3",
		"4.1.4",
		"4.1.5",
		"4.2.0",
		"4.2.1",
		"4.2.2",
		"4.2.3",
		"4.2.4",
		"4.2.5",
		"4.2.6",
		"4.2.7",
		"4.2.8",
		"4.2.9",
		"4.2.10",
		"4.2.11",
		"4.2.12"
	],
	"72.0.3626.52": [
		"5.0.0-beta.1",
		"5.0.0-beta.2"
	],
	"73.0.3683.27": [
		"5.0.0-beta.3"
	],
	"73.0.3683.54": [
		"5.0.0-beta.4"
	],
	"73.0.3683.61": [
		"5.0.0-beta.5"
	],
	"73.0.3683.84": [
		"5.0.0-beta.6"
	],
	"73.0.3683.94": [
		"5.0.0-beta.7"
	],
	"73.0.3683.104": [
		"5.0.0-beta.8"
	],
	"73.0.3683.117": [
		"5.0.0-beta.9"
	],
	"73.0.3683.119": [
		"5.0.0"
	],
	"73.0.3683.121": [
		"5.0.1",
		"5.0.2",
		"5.0.3",
		"5.0.4",
		"5.0.5",
		"5.0.6",
		"5.0.7",
		"5.0.8",
		"5.0.9",
		"5.0.10",
		"5.0.11",
		"5.0.12",
		"5.0.13"
	],
	"76.0.3774.1": [
		"6.0.0-beta.1"
	],
	"76.0.3783.1": [
		"6.0.0-beta.2",
		"6.0.0-beta.3",
		"6.0.0-beta.4"
	],
	"76.0.3805.4": [
		"6.0.0-beta.5"
	],
	"76.0.3809.3": [
		"6.0.0-beta.6"
	],
	"76.0.3809.22": [
		"6.0.0-beta.7"
	],
	"76.0.3809.26": [
		"6.0.0-beta.8",
		"6.0.0-beta.9"
	],
	"76.0.3809.37": [
		"6.0.0-beta.10"
	],
	"76.0.3809.42": [
		"6.0.0-beta.11"
	],
	"76.0.3809.54": [
		"6.0.0-beta.12"
	],
	"76.0.3809.60": [
		"6.0.0-beta.13"
	],
	"76.0.3809.68": [
		"6.0.0-beta.14"
	],
	"76.0.3809.74": [
		"6.0.0-beta.15"
	],
	"76.0.3809.88": [
		"6.0.0"
	],
	"76.0.3809.102": [
		"6.0.1"
	],
	"76.0.3809.110": [
		"6.0.2"
	],
	"76.0.3809.126": [
		"6.0.3"
	],
	"76.0.3809.131": [
		"6.0.4"
	],
	"76.0.3809.136": [
		"6.0.5"
	],
	"76.0.3809.138": [
		"6.0.6"
	],
	"76.0.3809.139": [
		"6.0.7"
	],
	"76.0.3809.146": [
		"6.0.8",
		"6.0.9",
		"6.0.10",
		"6.0.11",
		"6.0.12",
		"6.1.0",
		"6.1.1",
		"6.1.2",
		"6.1.3",
		"6.1.4",
		"6.1.5",
		"6.1.6",
		"6.1.7",
		"6.1.8",
		"6.1.9",
		"6.1.10",
		"6.1.11",
		"6.1.12"
	],
	"78.0.3866.0": [
		"7.0.0-beta.1",
		"7.0.0-beta.2",
		"7.0.0-beta.3"
	],
	"78.0.3896.6": [
		"7.0.0-beta.4"
	],
	"78.0.3905.1": [
		"7.0.0-beta.5",
		"7.0.0-beta.6",
		"7.0.0-beta.7",
		"7.0.0"
	],
	"78.0.3904.92": [
		"7.0.1"
	],
	"78.0.3904.94": [
		"7.1.0"
	],
	"78.0.3904.99": [
		"7.1.1"
	],
	"78.0.3904.113": [
		"7.1.2"
	],
	"78.0.3904.126": [
		"7.1.3"
	],
	"78.0.3904.130": [
		"7.1.4",
		"7.1.5",
		"7.1.6",
		"7.1.7",
		"7.1.8",
		"7.1.9",
		"7.1.10",
		"7.1.11",
		"7.1.12",
		"7.1.13",
		"7.1.14",
		"7.2.0",
		"7.2.1",
		"7.2.2",
		"7.2.3",
		"7.2.4",
		"7.3.0",
		"7.3.1",
		"7.3.2",
		"7.3.3"
	],
	"79.0.3931.0": [
		"8.0.0-beta.1",
		"8.0.0-beta.2"
	],
	"80.0.3955.0": [
		"8.0.0-beta.3",
		"8.0.0-beta.4"
	],
	"80.0.3987.14": [
		"8.0.0-beta.5"
	],
	"80.0.3987.51": [
		"8.0.0-beta.6"
	],
	"80.0.3987.59": [
		"8.0.0-beta.7"
	],
	"80.0.3987.75": [
		"8.0.0-beta.8",
		"8.0.0-beta.9"
	],
	"80.0.3987.86": [
		"8.0.0",
		"8.0.1",
		"8.0.2"
	],
	"80.0.3987.134": [
		"8.0.3"
	],
	"80.0.3987.137": [
		"8.1.0"
	],
	"80.0.3987.141": [
		"8.1.1"
	],
	"80.0.3987.158": [
		"8.2.0"
	],
	"80.0.3987.163": [
		"8.2.1",
		"8.2.2",
		"8.2.3",
		"8.5.3",
		"8.5.4",
		"8.5.5"
	],
	"80.0.3987.165": [
		"8.2.4",
		"8.2.5",
		"8.3.0",
		"8.3.1",
		"8.3.2",
		"8.3.3",
		"8.3.4",
		"8.4.0",
		"8.4.1",
		"8.5.0",
		"8.5.1",
		"8.5.2"
	],
	"82.0.4048.0": [
		"9.0.0-beta.1",
		"9.0.0-beta.2",
		"9.0.0-beta.3",
		"9.0.0-beta.4",
		"9.0.0-beta.5"
	],
	"82.0.4058.2": [
		"9.0.0-beta.6",
		"9.0.0-beta.7",
		"9.0.0-beta.9"
	],
	"82.0.4085.10": [
		"9.0.0-beta.10"
	],
	"82.0.4085.14": [
		"9.0.0-beta.11",
		"9.0.0-beta.12",
		"9.0.0-beta.13"
	],
	"82.0.4085.27": [
		"9.0.0-beta.14"
	],
	"83.0.4102.3": [
		"9.0.0-beta.15",
		"9.0.0-beta.16"
	],
	"83.0.4103.14": [
		"9.0.0-beta.17"
	],
	"83.0.4103.16": [
		"9.0.0-beta.18"
	],
	"83.0.4103.24": [
		"9.0.0-beta.19"
	],
	"83.0.4103.26": [
		"9.0.0-beta.20",
		"9.0.0-beta.21"
	],
	"83.0.4103.34": [
		"9.0.0-beta.22"
	],
	"83.0.4103.44": [
		"9.0.0-beta.23"
	],
	"83.0.4103.45": [
		"9.0.0-beta.24"
	],
	"83.0.4103.64": [
		"9.0.0"
	],
	"83.0.4103.94": [
		"9.0.1",
		"9.0.2"
	],
	"83.0.4103.100": [
		"9.0.3"
	],
	"83.0.4103.104": [
		"9.0.4"
	],
	"83.0.4103.119": [
		"9.0.5"
	],
	"83.0.4103.122": [
		"9.1.0",
		"9.1.1",
		"9.1.2",
		"9.2.0",
		"9.2.1",
		"9.3.0",
		"9.3.1",
		"9.3.2",
		"9.3.3",
		"9.3.4",
		"9.3.5",
		"9.4.0",
		"9.4.1",
		"9.4.2",
		"9.4.3",
		"9.4.4"
	],
	"84.0.4129.0": [
		"10.0.0-beta.1",
		"10.0.0-beta.2"
	],
	"85.0.4161.2": [
		"10.0.0-beta.3",
		"10.0.0-beta.4"
	],
	"85.0.4181.1": [
		"10.0.0-beta.8",
		"10.0.0-beta.9"
	],
	"85.0.4183.19": [
		"10.0.0-beta.10"
	],
	"85.0.4183.20": [
		"10.0.0-beta.11"
	],
	"85.0.4183.26": [
		"10.0.0-beta.12"
	],
	"85.0.4183.39": [
		"10.0.0-beta.13",
		"10.0.0-beta.14",
		"10.0.0-beta.15",
		"10.0.0-beta.17",
		"10.0.0-beta.19",
		"10.0.0-beta.20",
		"10.0.0-beta.21"
	],
	"85.0.4183.70": [
		"10.0.0-beta.23"
	],
	"85.0.4183.78": [
		"10.0.0-beta.24"
	],
	"85.0.4183.80": [
		"10.0.0-beta.25"
	],
	"85.0.4183.84": [
		"10.0.0"
	],
	"85.0.4183.86": [
		"10.0.1"
	],
	"85.0.4183.87": [
		"10.1.0"
	],
	"85.0.4183.93": [
		"10.1.1"
	],
	"85.0.4183.98": [
		"10.1.2"
	],
	"85.0.4183.121": [
		"10.1.3",
		"10.1.4",
		"10.1.5",
		"10.1.6",
		"10.1.7",
		"10.2.0",
		"10.3.0",
		"10.3.1",
		"10.3.2",
		"10.4.0",
		"10.4.1",
		"10.4.2",
		"10.4.3",
		"10.4.4",
		"10.4.5",
		"10.4.6",
		"10.4.7"
	],
	"86.0.4234.0": [
		"11.0.0-beta.1",
		"11.0.0-beta.3",
		"11.0.0-beta.4",
		"11.0.0-beta.5",
		"11.0.0-beta.6",
		"11.0.0-beta.7"
	],
	"87.0.4251.1": [
		"11.0.0-beta.8",
		"11.0.0-beta.9",
		"11.0.0-beta.11"
	],
	"87.0.4280.11": [
		"11.0.0-beta.12",
		"11.0.0-beta.13"
	],
	"87.0.4280.27": [
		"11.0.0-beta.16",
		"11.0.0-beta.17",
		"11.0.0-beta.18",
		"11.0.0-beta.19"
	],
	"87.0.4280.40": [
		"11.0.0-beta.20"
	],
	"87.0.4280.47": [
		"11.0.0-beta.22",
		"11.0.0-beta.23"
	],
	"87.0.4280.60": [
		"11.0.0",
		"11.0.1"
	],
	"87.0.4280.67": [
		"11.0.2",
		"11.0.3",
		"11.0.4"
	],
	"87.0.4280.88": [
		"11.0.5",
		"11.1.0",
		"11.1.1"
	],
	"87.0.4280.141": [
		"11.2.0",
		"11.2.1",
		"11.2.2",
		"11.2.3",
		"11.3.0",
		"11.4.0",
		"11.4.1",
		"11.4.2",
		"11.4.3",
		"11.4.4",
		"11.4.5",
		"11.4.6",
		"11.4.7",
		"11.4.8",
		"11.4.9",
		"11.4.10",
		"11.4.11",
		"11.4.12",
		"11.5.0"
	],
	"89.0.4328.0": [
		"12.0.0-beta.1",
		"12.0.0-beta.3",
		"12.0.0-beta.4",
		"12.0.0-beta.5",
		"12.0.0-beta.6",
		"12.0.0-beta.7",
		"12.0.0-beta.8",
		"12.0.0-beta.9",
		"12.0.0-beta.10",
		"12.0.0-beta.11",
		"12.0.0-beta.12",
		"12.0.0-beta.14"
	],
	"89.0.4348.1": [
		"12.0.0-beta.16",
		"12.0.0-beta.18",
		"12.0.0-beta.19",
		"12.0.0-beta.20"
	],
	"89.0.4388.2": [
		"12.0.0-beta.21",
		"12.0.0-beta.22",
		"12.0.0-beta.23",
		"12.0.0-beta.24",
		"12.0.0-beta.25",
		"12.0.0-beta.26"
	],
	"89.0.4389.23": [
		"12.0.0-beta.27",
		"12.0.0-beta.28",
		"12.0.0-beta.29"
	],
	"89.0.4389.58": [
		"12.0.0-beta.30",
		"12.0.0-beta.31"
	],
	"89.0.4389.69": [
		"12.0.0"
	],
	"89.0.4389.82": [
		"12.0.1"
	],
	"89.0.4389.90": [
		"12.0.2"
	],
	"89.0.4389.114": [
		"12.0.3",
		"12.0.4"
	],
	"89.0.4389.128": [
		"12.0.5",
		"12.0.6",
		"12.0.7",
		"12.0.8",
		"12.0.9",
		"12.0.10",
		"12.0.11",
		"12.0.12",
		"12.0.13",
		"12.0.14",
		"12.0.15",
		"12.0.16",
		"12.0.17",
		"12.0.18",
		"12.1.0",
		"12.1.1",
		"12.1.2",
		"12.2.0",
		"12.2.1",
		"12.2.2",
		"12.2.3"
	],
	"90.0.4402.0": [
		"13.0.0-beta.2",
		"13.0.0-beta.3"
	],
	"90.0.4415.0": [
		"13.0.0-beta.4",
		"13.0.0-beta.5",
		"13.0.0-beta.6",
		"13.0.0-beta.7",
		"13.0.0-beta.8",
		"13.0.0-beta.9",
		"13.0.0-beta.10",
		"13.0.0-beta.11",
		"13.0.0-beta.12",
		"13.0.0-beta.13"
	],
	"91.0.4448.0": [
		"13.0.0-beta.14",
		"13.0.0-beta.16",
		"13.0.0-beta.17",
		"13.0.0-beta.18",
		"13.0.0-beta.20"
	],
	"91.0.4472.33": [
		"13.0.0-beta.21",
		"13.0.0-beta.22",
		"13.0.0-beta.23"
	],
	"91.0.4472.38": [
		"13.0.0-beta.24",
		"13.0.0-beta.25",
		"13.0.0-beta.26",
		"13.0.0-beta.27",
		"13.0.0-beta.28"
	],
	"91.0.4472.69": [
		"13.0.0",
		"13.0.1"
	],
	"91.0.4472.77": [
		"13.1.0",
		"13.1.1",
		"13.1.2"
	],
	"91.0.4472.106": [
		"13.1.3",
		"13.1.4"
	],
	"91.0.4472.124": [
		"13.1.5",
		"13.1.6",
		"13.1.7"
	],
	"91.0.4472.164": [
		"13.1.8",
		"13.1.9",
		"13.2.0",
		"13.2.1",
		"13.2.2",
		"13.2.3",
		"13.3.0",
		"13.4.0",
		"13.5.0",
		"13.5.1",
		"13.5.2",
		"13.6.0",
		"13.6.1",
		"13.6.2",
		"13.6.3",
		"13.6.6",
		"13.6.7",
		"13.6.8",
		"13.6.9"
	],
	"92.0.4511.0": [
		"14.0.0-beta.1",
		"14.0.0-beta.2",
		"14.0.0-beta.3"
	],
	"93.0.4536.0": [
		"14.0.0-beta.5",
		"14.0.0-beta.6",
		"14.0.0-beta.7",
		"14.0.0-beta.8"
	],
	"93.0.4539.0": [
		"14.0.0-beta.9",
		"14.0.0-beta.10"
	],
	"93.0.4557.4": [
		"14.0.0-beta.11",
		"14.0.0-beta.12"
	],
	"93.0.4566.0": [
		"14.0.0-beta.13",
		"14.0.0-beta.14",
		"14.0.0-beta.15",
		"14.0.0-beta.16",
		"14.0.0-beta.17",
		"15.0.0-alpha.1",
		"15.0.0-alpha.2"
	],
	"93.0.4577.15": [
		"14.0.0-beta.18",
		"14.0.0-beta.19",
		"14.0.0-beta.20",
		"14.0.0-beta.21"
	],
	"93.0.4577.25": [
		"14.0.0-beta.22",
		"14.0.0-beta.23"
	],
	"93.0.4577.51": [
		"14.0.0-beta.24",
		"14.0.0-beta.25"
	],
	"93.0.4577.58": [
		"14.0.0"
	],
	"93.0.4577.63": [
		"14.0.1"
	],
	"93.0.4577.82": [
		"14.0.2",
		"14.1.0",
		"14.1.1",
		"14.2.0",
		"14.2.1",
		"14.2.2",
		"14.2.3",
		"14.2.4",
		"14.2.5",
		"14.2.6",
		"14.2.7",
		"14.2.8",
		"14.2.9"
	],
	"94.0.4584.0": [
		"15.0.0-alpha.3",
		"15.0.0-alpha.4",
		"15.0.0-alpha.5",
		"15.0.0-alpha.6"
	],
	"94.0.4590.2": [
		"15.0.0-alpha.7",
		"15.0.0-alpha.8",
		"15.0.0-alpha.9"
	],
	"94.0.4606.12": [
		"15.0.0-alpha.10"
	],
	"94.0.4606.20": [
		"15.0.0-beta.1",
		"15.0.0-beta.2"
	],
	"94.0.4606.31": [
		"15.0.0-beta.3",
		"15.0.0-beta.4",
		"15.0.0-beta.5",
		"15.0.0-beta.6",
		"15.0.0-beta.7"
	],
	"94.0.4606.51": [
		"15.0.0"
	],
	"94.0.4606.61": [
		"15.1.0",
		"15.1.1"
	],
	"94.0.4606.71": [
		"15.1.2"
	],
	"94.0.4606.81": [
		"15.2.0",
		"15.3.0",
		"15.3.1",
		"15.3.2",
		"15.3.3",
		"15.3.4",
		"15.3.5",
		"15.3.6",
		"15.3.7",
		"15.4.0",
		"15.4.1",
		"15.4.2",
		"15.5.0",
		"15.5.1",
		"15.5.2",
		"15.5.3",
		"15.5.4",
		"15.5.5",
		"15.5.6",
		"15.5.7"
	],
	"95.0.4629.0": [
		"16.0.0-alpha.1",
		"16.0.0-alpha.2",
		"16.0.0-alpha.3",
		"16.0.0-alpha.4",
		"16.0.0-alpha.5",
		"16.0.0-alpha.6",
		"16.0.0-alpha.7"
	],
	"96.0.4647.0": [
		"16.0.0-alpha.8",
		"16.0.0-alpha.9",
		"16.0.0-beta.1",
		"16.0.0-beta.2",
		"16.0.0-beta.3"
	],
	"96.0.4664.18": [
		"16.0.0-beta.4",
		"16.0.0-beta.5"
	],
	"96.0.4664.27": [
		"16.0.0-beta.6",
		"16.0.0-beta.7"
	],
	"96.0.4664.35": [
		"16.0.0-beta.8",
		"16.0.0-beta.9"
	],
	"96.0.4664.45": [
		"16.0.0",
		"16.0.1"
	],
	"96.0.4664.55": [
		"16.0.2",
		"16.0.3",
		"16.0.4",
		"16.0.5"
	],
	"96.0.4664.110": [
		"16.0.6",
		"16.0.7",
		"16.0.8"
	],
	"96.0.4664.174": [
		"16.0.9",
		"16.0.10",
		"16.1.0",
		"16.1.1",
		"16.2.0",
		"16.2.1",
		"16.2.2",
		"16.2.3",
		"16.2.4",
		"16.2.5",
		"16.2.6",
		"16.2.7",
		"16.2.8"
	],
	"96.0.4664.4": [
		"17.0.0-alpha.1",
		"17.0.0-alpha.2",
		"17.0.0-alpha.3"
	],
	"98.0.4706.0": [
		"17.0.0-alpha.4",
		"17.0.0-alpha.5",
		"17.0.0-alpha.6",
		"17.0.0-beta.1",
		"17.0.0-beta.2"
	],
	"98.0.4758.9": [
		"17.0.0-beta.3"
	],
	"98.0.4758.11": [
		"17.0.0-beta.4",
		"17.0.0-beta.5",
		"17.0.0-beta.6",
		"17.0.0-beta.7",
		"17.0.0-beta.8",
		"17.0.0-beta.9"
	],
	"98.0.4758.74": [
		"17.0.0"
	],
	"98.0.4758.82": [
		"17.0.1"
	],
	"98.0.4758.102": [
		"17.1.0"
	],
	"98.0.4758.109": [
		"17.1.1",
		"17.1.2",
		"17.2.0"
	],
	"98.0.4758.141": [
		"17.3.0",
		"17.3.1",
		"17.4.0",
		"17.4.1",
		"17.4.2",
		"17.4.3",
		"17.4.4",
		"17.4.5",
		"17.4.6",
		"17.4.7",
		"17.4.8",
		"17.4.9",
		"17.4.10",
		"17.4.11"
	],
	"99.0.4767.0": [
		"18.0.0-alpha.1",
		"18.0.0-alpha.2",
		"18.0.0-alpha.3",
		"18.0.0-alpha.4",
		"18.0.0-alpha.5"
	],
	"100.0.4894.0": [
		"18.0.0-beta.1",
		"18.0.0-beta.2",
		"18.0.0-beta.3",
		"18.0.0-beta.4",
		"18.0.0-beta.5",
		"18.0.0-beta.6"
	],
	"100.0.4896.56": [
		"18.0.0"
	],
	"100.0.4896.60": [
		"18.0.1",
		"18.0.2"
	],
	"100.0.4896.75": [
		"18.0.3",
		"18.0.4"
	],
	"100.0.4896.127": [
		"18.1.0"
	],
	"100.0.4896.143": [
		"18.2.0",
		"18.2.1",
		"18.2.2",
		"18.2.3"
	],
	"100.0.4896.160": [
		"18.2.4",
		"18.3.0",
		"18.3.1",
		"18.3.2",
		"18.3.3",
		"18.3.4",
		"18.3.5",
		"18.3.6",
		"18.3.7",
		"18.3.8",
		"18.3.9",
		"18.3.11",
		"18.3.12",
		"18.3.13",
		"18.3.14",
		"18.3.15"
	],
	"102.0.4962.3": [
		"19.0.0-alpha.1"
	],
	"102.0.4971.0": [
		"19.0.0-alpha.2",
		"19.0.0-alpha.3"
	],
	"102.0.4989.0": [
		"19.0.0-alpha.4",
		"19.0.0-alpha.5"
	],
	"102.0.4999.0": [
		"19.0.0-beta.1",
		"19.0.0-beta.2",
		"19.0.0-beta.3"
	],
	"102.0.5005.27": [
		"19.0.0-beta.4"
	],
	"102.0.5005.40": [
		"19.0.0-beta.5",
		"19.0.0-beta.6",
		"19.0.0-beta.7"
	],
	"102.0.5005.49": [
		"19.0.0-beta.8"
	],
	"102.0.5005.61": [
		"19.0.0",
		"19.0.1"
	],
	"102.0.5005.63": [
		"19.0.2",
		"19.0.3",
		"19.0.4"
	],
	"102.0.5005.115": [
		"19.0.5",
		"19.0.6"
	],
	"102.0.5005.134": [
		"19.0.7"
	],
	"102.0.5005.148": [
		"19.0.8"
	],
	"102.0.5005.167": [
		"19.0.9",
		"19.0.10",
		"19.0.11",
		"19.0.12",
		"19.0.13",
		"19.0.14",
		"19.0.15",
		"19.0.16",
		"19.0.17",
		"19.1.0",
		"19.1.1",
		"19.1.2",
		"19.1.3",
		"19.1.4",
		"19.1.5",
		"19.1.6",
		"19.1.7",
		"19.1.8",
		"19.1.9"
	],
	"103.0.5044.0": [
		"20.0.0-alpha.1"
	],
	"104.0.5073.0": [
		"20.0.0-alpha.2",
		"20.0.0-alpha.3",
		"20.0.0-alpha.4",
		"20.0.0-alpha.5",
		"20.0.0-alpha.6",
		"20.0.0-alpha.7",
		"20.0.0-beta.1",
		"20.0.0-beta.2",
		"20.0.0-beta.3",
		"20.0.0-beta.4",
		"20.0.0-beta.5",
		"20.0.0-beta.6",
		"20.0.0-beta.7",
		"20.0.0-beta.8"
	],
	"104.0.5112.39": [
		"20.0.0-beta.9"
	],
	"104.0.5112.48": [
		"20.0.0-beta.10",
		"20.0.0-beta.11",
		"20.0.0-beta.12"
	],
	"104.0.5112.57": [
		"20.0.0-beta.13"
	],
	"104.0.5112.65": [
		"20.0.0"
	],
	"104.0.5112.81": [
		"20.0.1",
		"20.0.2",
		"20.0.3"
	],
	"104.0.5112.102": [
		"20.1.0",
		"20.1.1"
	],
	"104.0.5112.114": [
		"20.1.2",
		"20.1.3",
		"20.1.4"
	],
	"104.0.5112.124": [
		"20.2.0",
		"20.3.0",
		"20.3.1",
		"20.3.2",
		"20.3.3",
		"20.3.4",
		"20.3.5",
		"20.3.6",
		"20.3.7",
		"20.3.8",
		"20.3.9",
		"20.3.10",
		"20.3.11",
		"20.3.12"
	],
	"105.0.5187.0": [
		"21.0.0-alpha.1",
		"21.0.0-alpha.2",
		"21.0.0-alpha.3",
		"21.0.0-alpha.4",
		"21.0.0-alpha.5"
	],
	"106.0.5216.0": [
		"21.0.0-alpha.6",
		"21.0.0-beta.1",
		"21.0.0-beta.2",
		"21.0.0-beta.3",
		"21.0.0-beta.4",
		"21.0.0-beta.5"
	],
	"106.0.5249.40": [
		"21.0.0-beta.6",
		"21.0.0-beta.7",
		"21.0.0-beta.8"
	],
	"106.0.5249.51": [
		"21.0.0"
	],
	"106.0.5249.61": [
		"21.0.1"
	],
	"106.0.5249.91": [
		"21.1.0"
	],
	"106.0.5249.103": [
		"21.1.1"
	],
	"106.0.5249.119": [
		"21.2.0"
	],
	"106.0.5249.165": [
		"21.2.1"
	],
	"106.0.5249.168": [
		"21.2.2",
		"21.2.3"
	],
	"106.0.5249.181": [
		"21.3.0",
		"21.3.1"
	],
	"106.0.5249.199": [
		"21.3.3",
		"21.3.4",
		"21.3.5",
		"21.4.0",
		"21.4.1",
		"21.4.2",
		"21.4.3",
		"21.4.4"
	],
	"107.0.5286.0": [
		"22.0.0-alpha.1"
	],
	"108.0.5329.0": [
		"22.0.0-alpha.3",
		"22.0.0-alpha.4",
		"22.0.0-alpha.5",
		"22.0.0-alpha.6"
	],
	"108.0.5355.0": [
		"22.0.0-alpha.7"
	],
	"108.0.5359.10": [
		"22.0.0-alpha.8",
		"22.0.0-beta.1",
		"22.0.0-beta.2",
		"22.0.0-beta.3"
	],
	"108.0.5359.29": [
		"22.0.0-beta.4"
	],
	"108.0.5359.40": [
		"22.0.0-beta.5",
		"22.0.0-beta.6"
	],
	"108.0.5359.48": [
		"22.0.0-beta.7",
		"22.0.0-beta.8"
	],
	"108.0.5359.62": [
		"22.0.0"
	],
	"108.0.5359.125": [
		"22.0.1"
	],
	"108.0.5359.179": [
		"22.0.2",
		"22.0.3",
		"22.1.0"
	],
	"108.0.5359.215": [
		"22.2.0",
		"22.2.1",
		"22.3.0",
		"22.3.1",
		"22.3.2",
		"22.3.3",
		"22.3.4",
		"22.3.5",
		"22.3.6",
		"22.3.7",
		"22.3.8",
		"22.3.9",
		"22.3.10",
		"22.3.11",
		"22.3.12",
		"22.3.13",
		"22.3.14",
		"22.3.15",
		"22.3.16",
		"22.3.17",
		"22.3.18",
		"22.3.20",
		"22.3.21",
		"22.3.22",
		"22.3.23",
		"22.3.24",
		"22.3.25",
		"22.3.26",
		"22.3.27"
	],
	"110.0.5415.0": [
		"23.0.0-alpha.1"
	],
	"110.0.5451.0": [
		"23.0.0-alpha.2",
		"23.0.0-alpha.3"
	],
	"110.0.5478.5": [
		"23.0.0-beta.1",
		"23.0.0-beta.2",
		"23.0.0-beta.3"
	],
	"110.0.5481.30": [
		"23.0.0-beta.4"
	],
	"110.0.5481.38": [
		"23.0.0-beta.5"
	],
	"110.0.5481.52": [
		"23.0.0-beta.6",
		"23.0.0-beta.8"
	],
	"110.0.5481.77": [
		"23.0.0"
	],
	"110.0.5481.100": [
		"23.1.0"
	],
	"110.0.5481.104": [
		"23.1.1"
	],
	"110.0.5481.177": [
		"23.1.2"
	],
	"110.0.5481.179": [
		"23.1.3"
	],
	"110.0.5481.192": [
		"23.1.4",
		"23.2.0"
	],
	"110.0.5481.208": [
		"23.2.1",
		"23.2.2",
		"23.2.3",
		"23.2.4",
		"23.3.0",
		"23.3.1",
		"23.3.2",
		"23.3.3",
		"23.3.4",
		"23.3.5",
		"23.3.6",
		"23.3.7",
		"23.3.8",
		"23.3.9",
		"23.3.10",
		"23.3.11",
		"23.3.12",
		"23.3.13"
	],
	"111.0.5560.0": [
		"24.0.0-alpha.1",
		"24.0.0-alpha.2",
		"24.0.0-alpha.3",
		"24.0.0-alpha.4",
		"24.0.0-alpha.5",
		"24.0.0-alpha.6",
		"24.0.0-alpha.7"
	],
	"111.0.5563.50": [
		"24.0.0-beta.1",
		"24.0.0-beta.2"
	],
	"112.0.5615.20": [
		"24.0.0-beta.3",
		"24.0.0-beta.4"
	],
	"112.0.5615.29": [
		"24.0.0-beta.5"
	],
	"112.0.5615.39": [
		"24.0.0-beta.6",
		"24.0.0-beta.7"
	],
	"112.0.5615.49": [
		"24.0.0"
	],
	"112.0.5615.50": [
		"24.1.0",
		"24.1.1"
	],
	"112.0.5615.87": [
		"24.1.2"
	],
	"112.0.5615.165": [
		"24.1.3",
		"24.2.0",
		"24.3.0"
	],
	"112.0.5615.183": [
		"24.3.1"
	],
	"112.0.5615.204": [
		"24.4.0",
		"24.4.1",
		"24.5.0",
		"24.5.1",
		"24.6.0",
		"24.6.1",
		"24.6.2",
		"24.6.3",
		"24.6.4",
		"24.6.5",
		"24.7.0",
		"24.7.1",
		"24.8.0",
		"24.8.1",
		"24.8.2",
		"24.8.3",
		"24.8.4",
		"24.8.5",
		"24.8.6",
		"24.8.7",
		"24.8.8"
	],
	"114.0.5694.0": [
		"25.0.0-alpha.1",
		"25.0.0-alpha.2"
	],
	"114.0.5710.0": [
		"25.0.0-alpha.3",
		"25.0.0-alpha.4"
	],
	"114.0.5719.0": [
		"25.0.0-alpha.5",
		"25.0.0-alpha.6",
		"25.0.0-beta.1",
		"25.0.0-beta.2",
		"25.0.0-beta.3"
	],
	"114.0.5735.16": [
		"25.0.0-beta.4",
		"25.0.0-beta.5",
		"25.0.0-beta.6",
		"25.0.0-beta.7"
	],
	"114.0.5735.35": [
		"25.0.0-beta.8"
	],
	"114.0.5735.45": [
		"25.0.0-beta.9",
		"25.0.0",
		"25.0.1"
	],
	"114.0.5735.106": [
		"25.1.0",
		"25.1.1"
	],
	"114.0.5735.134": [
		"25.2.0"
	],
	"114.0.5735.199": [
		"25.3.0"
	],
	"114.0.5735.243": [
		"25.3.1"
	],
	"114.0.5735.248": [
		"25.3.2",
		"25.4.0"
	],
	"114.0.5735.289": [
		"25.5.0",
		"25.6.0",
		"25.7.0",
		"25.8.0",
		"25.8.1",
		"25.8.2",
		"25.8.3",
		"25.8.4",
		"25.9.0",
		"25.9.1",
		"25.9.2",
		"25.9.3",
		"25.9.4",
		"25.9.5",
		"25.9.6",
		"25.9.7",
		"25.9.8"
	],
	"116.0.5791.0": [
		"26.0.0-alpha.1",
		"26.0.0-alpha.2",
		"26.0.0-alpha.3",
		"26.0.0-alpha.4",
		"26.0.0-alpha.5"
	],
	"116.0.5815.0": [
		"26.0.0-alpha.6"
	],
	"116.0.5831.0": [
		"26.0.0-alpha.7"
	],
	"116.0.5845.0": [
		"26.0.0-alpha.8",
		"26.0.0-beta.1"
	],
	"116.0.5845.14": [
		"26.0.0-beta.2",
		"26.0.0-beta.3",
		"26.0.0-beta.4",
		"26.0.0-beta.5",
		"26.0.0-beta.6",
		"26.0.0-beta.7"
	],
	"116.0.5845.42": [
		"26.0.0-beta.8",
		"26.0.0-beta.9"
	],
	"116.0.5845.49": [
		"26.0.0-beta.10",
		"26.0.0-beta.11"
	],
	"116.0.5845.62": [
		"26.0.0-beta.12"
	],
	"116.0.5845.82": [
		"26.0.0"
	],
	"116.0.5845.97": [
		"26.1.0"
	],
	"116.0.5845.179": [
		"26.2.0"
	],
	"116.0.5845.188": [
		"26.2.1"
	],
	"116.0.5845.190": [
		"26.2.2",
		"26.2.3",
		"26.2.4"
	],
	"116.0.5845.228": [
		"26.3.0",
		"26.4.0",
		"26.4.1",
		"26.4.2",
		"26.4.3",
		"26.5.0",
		"26.6.0",
		"26.6.1",
		"26.6.2",
		"26.6.3",
		"26.6.4",
		"26.6.5",
		"26.6.6",
		"26.6.7",
		"26.6.8",
		"26.6.9",
		"26.6.10"
	],
	"118.0.5949.0": [
		"27.0.0-alpha.1",
		"27.0.0-alpha.2",
		"27.0.0-alpha.3",
		"27.0.0-alpha.4",
		"27.0.0-alpha.5",
		"27.0.0-alpha.6"
	],
	"118.0.5993.5": [
		"27.0.0-beta.1",
		"27.0.0-beta.2",
		"27.0.0-beta.3"
	],
	"118.0.5993.11": [
		"27.0.0-beta.4"
	],
	"118.0.5993.18": [
		"27.0.0-beta.5",
		"27.0.0-beta.6",
		"27.0.0-beta.7",
		"27.0.0-beta.8",
		"27.0.0-beta.9"
	],
	"118.0.5993.54": [
		"27.0.0"
	],
	"118.0.5993.89": [
		"27.0.1",
		"27.0.2"
	],
	"118.0.5993.120": [
		"27.0.3"
	],
	"118.0.5993.129": [
		"27.0.4"
	],
	"118.0.5993.144": [
		"27.1.0",
		"27.1.2"
	],
	"118.0.5993.159": [
		"27.1.3",
		"27.2.0",
		"27.2.1",
		"27.2.2",
		"27.2.3",
		"27.2.4",
		"27.3.0",
		"27.3.1",
		"27.3.2",
		"27.3.3",
		"27.3.4",
		"27.3.5",
		"27.3.6",
		"27.3.7",
		"27.3.8",
		"27.3.9",
		"27.3.10",
		"27.3.11"
	],
	"119.0.6045.0": [
		"28.0.0-alpha.1",
		"28.0.0-alpha.2"
	],
	"119.0.6045.21": [
		"28.0.0-alpha.3",
		"28.0.0-alpha.4"
	],
	"119.0.6045.33": [
		"28.0.0-alpha.5",
		"28.0.0-alpha.6",
		"28.0.0-alpha.7",
		"28.0.0-beta.1"
	],
	"120.0.6099.0": [
		"28.0.0-beta.2"
	],
	"120.0.6099.5": [
		"28.0.0-beta.3",
		"28.0.0-beta.4"
	],
	"120.0.6099.18": [
		"28.0.0-beta.5",
		"28.0.0-beta.6",
		"28.0.0-beta.7",
		"28.0.0-beta.8",
		"28.0.0-beta.9",
		"28.0.0-beta.10"
	],
	"120.0.6099.35": [
		"28.0.0-beta.11"
	],
	"120.0.6099.56": [
		"28.0.0"
	],
	"120.0.6099.109": [
		"28.1.0",
		"28.1.1"
	],
	"120.0.6099.199": [
		"28.1.2",
		"28.1.3"
	],
	"120.0.6099.216": [
		"28.1.4"
	],
	"120.0.6099.227": [
		"28.2.0"
	],
	"120.0.6099.268": [
		"28.2.1"
	],
	"120.0.6099.276": [
		"28.2.2"
	],
	"120.0.6099.283": [
		"28.2.3"
	],
	"120.0.6099.291": [
		"28.2.4",
		"28.2.5",
		"28.2.6",
		"28.2.7",
		"28.2.8",
		"28.2.9",
		"28.2.10",
		"28.3.0",
		"28.3.1",
		"28.3.2",
		"28.3.3"
	],
	"121.0.6147.0": [
		"29.0.0-alpha.1",
		"29.0.0-alpha.2",
		"29.0.0-alpha.3"
	],
	"121.0.6159.0": [
		"29.0.0-alpha.4",
		"29.0.0-alpha.5",
		"29.0.0-alpha.6",
		"29.0.0-alpha.7"
	],
	"122.0.6194.0": [
		"29.0.0-alpha.8"
	],
	"122.0.6236.2": [
		"29.0.0-alpha.9",
		"29.0.0-alpha.10",
		"29.0.0-alpha.11",
		"29.0.0-beta.1",
		"29.0.0-beta.2"
	],
	"122.0.6261.6": [
		"29.0.0-beta.3",
		"29.0.0-beta.4"
	],
	"122.0.6261.18": [
		"29.0.0-beta.5",
		"29.0.0-beta.6",
		"29.0.0-beta.7",
		"29.0.0-beta.8",
		"29.0.0-beta.9",
		"29.0.0-beta.10",
		"29.0.0-beta.11"
	],
	"122.0.6261.29": [
		"29.0.0-beta.12"
	],
	"122.0.6261.39": [
		"29.0.0"
	],
	"122.0.6261.57": [
		"29.0.1"
	],
	"122.0.6261.70": [
		"29.1.0"
	],
	"122.0.6261.111": [
		"29.1.1"
	],
	"122.0.6261.112": [
		"29.1.2",
		"29.1.3"
	],
	"122.0.6261.129": [
		"29.1.4"
	],
	"122.0.6261.130": [
		"29.1.5"
	],
	"122.0.6261.139": [
		"29.1.6"
	],
	"122.0.6261.156": [
		"29.2.0",
		"29.3.0",
		"29.3.1",
		"29.3.2",
		"29.3.3",
		"29.4.0",
		"29.4.1",
		"29.4.2",
		"29.4.3",
		"29.4.4",
		"29.4.5",
		"29.4.6"
	],
	"123.0.6296.0": [
		"30.0.0-alpha.1"
	],
	"123.0.6312.5": [
		"30.0.0-alpha.2"
	],
	"124.0.6323.0": [
		"30.0.0-alpha.3",
		"30.0.0-alpha.4"
	],
	"124.0.6331.0": [
		"30.0.0-alpha.5",
		"30.0.0-alpha.6"
	],
	"124.0.6353.0": [
		"30.0.0-alpha.7"
	],
	"124.0.6359.0": [
		"30.0.0-beta.1",
		"30.0.0-beta.2"
	],
	"124.0.6367.9": [
		"30.0.0-beta.3",
		"30.0.0-beta.4",
		"30.0.0-beta.5"
	],
	"124.0.6367.18": [
		"30.0.0-beta.6"
	],
	"124.0.6367.29": [
		"30.0.0-beta.7",
		"30.0.0-beta.8"
	],
	"124.0.6367.49": [
		"30.0.0"
	],
	"124.0.6367.60": [
		"30.0.1"
	],
	"124.0.6367.91": [
		"30.0.2"
	],
	"124.0.6367.119": [
		"30.0.3"
	],
	"124.0.6367.201": [
		"30.0.4"
	],
	"124.0.6367.207": [
		"30.0.5",
		"30.0.6"
	],
	"124.0.6367.221": [
		"30.0.7"
	],
	"124.0.6367.230": [
		"30.0.8"
	],
	"124.0.6367.233": [
		"30.0.9"
	],
	"124.0.6367.243": [
		"30.1.0",
		"30.1.1",
		"30.1.2",
		"30.2.0",
		"30.3.0",
		"30.3.1",
		"30.4.0",
		"30.5.0",
		"30.5.1"
	],
	"125.0.6412.0": [
		"31.0.0-alpha.1",
		"31.0.0-alpha.2",
		"31.0.0-alpha.3",
		"31.0.0-alpha.4",
		"31.0.0-alpha.5"
	],
	"126.0.6445.0": [
		"31.0.0-beta.1",
		"31.0.0-beta.2",
		"31.0.0-beta.3",
		"31.0.0-beta.4",
		"31.0.0-beta.5",
		"31.0.0-beta.6",
		"31.0.0-beta.7",
		"31.0.0-beta.8",
		"31.0.0-beta.9"
	],
	"126.0.6478.36": [
		"31.0.0-beta.10",
		"31.0.0",
		"31.0.1"
	],
	"126.0.6478.61": [
		"31.0.2"
	],
	"126.0.6478.114": [
		"31.1.0"
	],
	"126.0.6478.127": [
		"31.2.0",
		"31.2.1"
	],
	"126.0.6478.183": [
		"31.3.0"
	],
	"126.0.6478.185": [
		"31.3.1"
	],
	"126.0.6478.234": [
		"31.4.0",
		"31.5.0",
		"31.6.0",
		"31.7.0",
		"31.7.1",
		"31.7.2",
		"31.7.3",
		"31.7.4",
		"31.7.5",
		"31.7.6",
		"31.7.7"
	],
	"127.0.6521.0": [
		"32.0.0-alpha.1",
		"32.0.0-alpha.2",
		"32.0.0-alpha.3",
		"32.0.0-alpha.4",
		"32.0.0-alpha.5"
	],
	"128.0.6571.0": [
		"32.0.0-alpha.6",
		"32.0.0-alpha.7"
	],
	"128.0.6573.0": [
		"32.0.0-alpha.8",
		"32.0.0-alpha.9",
		"32.0.0-alpha.10",
		"32.0.0-beta.1"
	],
	"128.0.6611.0": [
		"32.0.0-beta.2"
	],
	"128.0.6613.7": [
		"32.0.0-beta.3"
	],
	"128.0.6613.18": [
		"32.0.0-beta.4"
	],
	"128.0.6613.27": [
		"32.0.0-beta.5",
		"32.0.0-beta.6",
		"32.0.0-beta.7"
	],
	"128.0.6613.36": [
		"32.0.0",
		"32.0.1"
	],
	"128.0.6613.84": [
		"32.0.2"
	],
	"128.0.6613.120": [
		"32.1.0"
	],
	"128.0.6613.137": [
		"32.1.1"
	],
	"128.0.6613.162": [
		"32.1.2"
	],
	"128.0.6613.178": [
		"32.2.0"
	],
	"128.0.6613.186": [
		"32.2.1",
		"32.2.2",
		"32.2.3",
		"32.2.4",
		"32.2.5",
		"32.2.6",
		"32.2.7",
		"32.2.8",
		"32.3.0",
		"32.3.1",
		"32.3.2",
		"32.3.3"
	],
	"129.0.6668.0": [
		"33.0.0-alpha.1"
	],
	"130.0.6672.0": [
		"33.0.0-alpha.2",
		"33.0.0-alpha.3",
		"33.0.0-alpha.4",
		"33.0.0-alpha.5",
		"33.0.0-alpha.6",
		"33.0.0-beta.1",
		"33.0.0-beta.2",
		"33.0.0-beta.3",
		"33.0.0-beta.4"
	],
	"130.0.6723.19": [
		"33.0.0-beta.5",
		"33.0.0-beta.6",
		"33.0.0-beta.7"
	],
	"130.0.6723.31": [
		"33.0.0-beta.8",
		"33.0.0-beta.9",
		"33.0.0-beta.10"
	],
	"130.0.6723.44": [
		"33.0.0-beta.11",
		"33.0.0"
	],
	"130.0.6723.59": [
		"33.0.1",
		"33.0.2"
	],
	"130.0.6723.91": [
		"33.1.0"
	],
	"130.0.6723.118": [
		"33.2.0"
	],
	"130.0.6723.137": [
		"33.2.1"
	],
	"130.0.6723.152": [
		"33.3.0"
	],
	"130.0.6723.170": [
		"33.3.1"
	],
	"130.0.6723.191": [
		"33.3.2",
		"33.4.0",
		"33.4.1",
		"33.4.2",
		"33.4.3",
		"33.4.4",
		"33.4.5",
		"33.4.6",
		"33.4.7",
		"33.4.8",
		"33.4.9",
		"33.4.10",
		"33.4.11"
	],
	"131.0.6776.0": [
		"34.0.0-alpha.1"
	],
	"132.0.6779.0": [
		"34.0.0-alpha.2"
	],
	"132.0.6789.1": [
		"34.0.0-alpha.3",
		"34.0.0-alpha.4",
		"34.0.0-alpha.5",
		"34.0.0-alpha.6",
		"34.0.0-alpha.7"
	],
	"132.0.6820.0": [
		"34.0.0-alpha.8"
	],
	"132.0.6824.0": [
		"34.0.0-alpha.9",
		"34.0.0-beta.1",
		"34.0.0-beta.2",
		"34.0.0-beta.3"
	],
	"132.0.6834.6": [
		"34.0.0-beta.4",
		"34.0.0-beta.5"
	],
	"132.0.6834.15": [
		"34.0.0-beta.6",
		"34.0.0-beta.7",
		"34.0.0-beta.8"
	],
	"132.0.6834.32": [
		"34.0.0-beta.9",
		"34.0.0-beta.10",
		"34.0.0-beta.11"
	],
	"132.0.6834.46": [
		"34.0.0-beta.12",
		"34.0.0-beta.13"
	],
	"132.0.6834.57": [
		"34.0.0-beta.14",
		"34.0.0-beta.15",
		"34.0.0-beta.16"
	],
	"132.0.6834.83": [
		"34.0.0",
		"34.0.1"
	],
	"132.0.6834.159": [
		"34.0.2"
	],
	"132.0.6834.194": [
		"34.1.0",
		"34.1.1"
	],
	"132.0.6834.196": [
		"34.2.0"
	],
	"132.0.6834.210": [
		"34.3.0",
		"34.3.1",
		"34.3.2",
		"34.3.3",
		"34.3.4",
		"34.4.0",
		"34.4.1",
		"34.5.0",
		"34.5.1",
		"34.5.2",
		"34.5.3",
		"34.5.4",
		"34.5.5",
		"34.5.6",
		"34.5.7",
		"34.5.8"
	],
	"133.0.6920.0": [
		"35.0.0-alpha.1",
		"35.0.0-alpha.2",
		"35.0.0-alpha.3",
		"35.0.0-alpha.4",
		"35.0.0-alpha.5",
		"35.0.0-beta.1"
	],
	"134.0.6968.0": [
		"35.0.0-beta.2",
		"35.0.0-beta.3",
		"35.0.0-beta.4"
	],
	"134.0.6989.0": [
		"35.0.0-beta.5"
	],
	"134.0.6990.0": [
		"35.0.0-beta.6",
		"35.0.0-beta.7"
	],
	"134.0.6998.10": [
		"35.0.0-beta.8",
		"35.0.0-beta.9"
	],
	"134.0.6998.23": [
		"35.0.0-beta.10",
		"35.0.0-beta.11",
		"35.0.0-beta.12"
	],
	"134.0.6998.44": [
		"35.0.0-beta.13",
		"35.0.0",
		"35.0.1"
	],
	"134.0.6998.88": [
		"35.0.2",
		"35.0.3"
	],
	"134.0.6998.165": [
		"35.1.0",
		"35.1.1"
	],
	"134.0.6998.178": [
		"35.1.2"
	],
	"134.0.6998.179": [
		"35.1.3",
		"35.1.4",
		"35.1.5"
	],
	"134.0.6998.205": [
		"35.2.0",
		"35.2.1",
		"35.2.2",
		"35.3.0",
		"35.4.0",
		"35.5.0",
		"35.5.1",
		"35.6.0"
	],
	"135.0.7049.5": [
		"36.0.0-alpha.1"
	],
	"136.0.7062.0": [
		"36.0.0-alpha.2",
		"36.0.0-alpha.3",
		"36.0.0-alpha.4"
	],
	"136.0.7067.0": [
		"36.0.0-alpha.5",
		"36.0.0-alpha.6",
		"36.0.0-beta.1",
		"36.0.0-beta.2",
		"36.0.0-beta.3",
		"36.0.0-beta.4"
	],
	"136.0.7103.17": [
		"36.0.0-beta.5"
	],
	"136.0.7103.25": [
		"36.0.0-beta.6",
		"36.0.0-beta.7"
	],
	"136.0.7103.33": [
		"36.0.0-beta.8",
		"36.0.0-beta.9"
	],
	"136.0.7103.48": [
		"36.0.0",
		"36.0.1"
	],
	"136.0.7103.49": [
		"36.1.0",
		"36.2.0"
	],
	"136.0.7103.93": [
		"36.2.1"
	],
	"136.0.7103.113": [
		"36.3.0",
		"36.3.1"
	],
	"136.0.7103.115": [
		"36.3.2"
	],
	"136.0.7103.149": [
		"36.4.0"
	],
	"136.0.7103.168": [
		"36.5.0"
	],
	"136.0.7103.177": [
		"36.6.0"
	],
	"137.0.7151.0": [
		"37.0.0-alpha.1",
		"37.0.0-alpha.2"
	],
	"138.0.7156.0": [
		"37.0.0-alpha.3"
	],
	"138.0.7165.0": [
		"37.0.0-alpha.4"
	],
	"138.0.7177.0": [
		"37.0.0-alpha.5"
	],
	"138.0.7178.0": [
		"37.0.0-alpha.6",
		"37.0.0-alpha.7",
		"37.0.0-beta.1",
		"37.0.0-beta.2"
	],
	"138.0.7190.0": [
		"37.0.0-beta.3"
	],
	"138.0.7204.15": [
		"37.0.0-beta.4",
		"37.0.0-beta.5",
		"37.0.0-beta.6",
		"37.0.0-beta.7"
	],
	"138.0.7204.23": [
		"37.0.0-beta.8"
	],
	"138.0.7204.35": [
		"37.0.0-beta.9",
		"37.0.0",
		"37.1.0"
	],
	"139.0.7219.0": [
		"38.0.0-alpha.1",
		"38.0.0-alpha.2",
		"38.0.0-alpha.3"
	]
};

---

File name: node_modules\electron-to-chromium\full-chromium-versions.json

Code:
{"39.0.2171.65":["0.20.0","0.20.1","0.20.2","0.20.3","0.20.4","0.20.5","0.20.6","0.20.7","0.20.8"],"40.0.2214.91":["0.21.0","0.21.1","0.21.2"],"41.0.2272.76":["0.21.3","0.22.1","0.22.2","0.22.3","0.23.0","0.24.0"],"42.0.2311.107":["0.25.0","0.25.1","0.25.2","0.25.3","0.26.0","0.26.1","0.27.0","0.27.1"],"43.0.2357.65":["0.27.2","0.27.3","0.28.0","0.28.1","0.28.2","0.28.3","0.29.1","0.29.2"],"44.0.2403.125":["0.30.4","0.31.0"],"45.0.2454.85":["0.31.2","0.32.2","0.32.3","0.33.0","0.33.1","0.33.2","0.33.3","0.33.4","0.33.6","0.33.7","0.33.8","0.33.9","0.34.0","0.34.1","0.34.2","0.34.3","0.34.4","0.35.1","0.35.2","0.35.3","0.35.4","0.35.5"],"47.0.2526.73":["0.36.0","0.36.2","0.36.3","0.36.4"],"47.0.2526.110":["0.36.5","0.36.6","0.36.7","0.36.8","0.36.9","0.36.10","0.36.11","0.36.12"],"49.0.2623.75":["0.37.0","0.37.1","0.37.3","0.37.4","0.37.5","0.37.6","0.37.7","0.37.8","1.0.0","1.0.1","1.0.2"],"50.0.2661.102":["1.1.0","1.1.1","1.1.2","1.1.3"],"51.0.2704.63":["1.2.0","1.2.1"],"51.0.2704.84":["1.2.2","1.2.3"],"51.0.2704.103":["1.2.4","1.2.5"],"51.0.2704.106":["1.2.6","1.2.7","1.2.8"],"52.0.2743.82":["1.3.0","1.3.1","1.3.2","1.3.3","1.3.4","1.3.5","1.3.6","1.3.7","1.3.9","1.3.10","1.3.13","1.3.14","1.3.15"],"53.0.2785.113":["1.4.0","1.4.1","1.4.2","1.4.3","1.4.4","1.4.5"],"53.0.2785.143":["1.4.6","1.4.7","1.4.8","1.4.10","1.4.11","1.4.13","1.4.14","1.4.15","1.4.16"],"54.0.2840.51":["1.4.12"],"54.0.2840.101":["1.5.0","1.5.1"],"56.0.2924.87":["1.6.0","1.6.1","1.6.2","1.6.3","1.6.4","1.6.5","1.6.6","1.6.7","1.6.8","1.6.9","1.6.10","1.6.11","1.6.12","1.6.13","1.6.14","1.6.15","1.6.16","1.6.17","1.6.18"],"58.0.3029.110":["1.7.0","1.7.1","1.7.2","1.7.3","1.7.4","1.7.5","1.7.6","1.7.7","1.7.8","1.7.9","1.7.10","1.7.11","1.7.12","1.7.13","1.7.14","1.7.15","1.7.16"],"59.0.3071.115":["1.8.0","1.8.1","1.8.2-beta.1","1.8.2-beta.2","1.8.2-beta.3","1.8.2-beta.4","1.8.2-beta.5","1.8.2","1.8.3","1.8.4","1.8.5","1.8.6","1.8.7","1.8.8"],"61.0.3163.100":["2.0.0-beta.1","2.0.0-beta.2","2.0.0-beta.3","2.0.0-beta.4","2.0.0-beta.5","2.0.0-beta.6","2.0.0-beta.7","2.0.0-beta.8","2.0.0","2.0.1","2.0.2","2.0.3","2.0.4","2.0.5","2.0.6","2.0.7","2.0.8","2.0.9","2.0.10","2.0.11","2.0.12","2.0.13","2.0.14","2.0.15","2.0.16","2.0.17","2.0.18","2.1.0-unsupported.20180809"],"66.0.3359.181":["3.0.0-beta.1","3.0.0-beta.2","3.0.0-beta.3","3.0.0-beta.4","3.0.0-beta.5","3.0.0-beta.6","3.0.0-beta.7","3.0.0-beta.8","3.0.0-beta.9","3.0.0-beta.10","3.0.0-beta.11","3.0.0-beta.12","3.0.0-beta.13","3.0.0","3.0.1","3.0.2","3.0.3","3.0.4","3.0.5","3.0.6","3.0.7","3.0.8","3.0.9","3.0.10","3.0.11","3.0.12","3.0.13","3.0.14","3.0.15","3.0.16","3.1.0-beta.1","3.1.0-beta.2","3.1.0-beta.3","3.1.0-beta.4","3.1.0-beta.5","3.1.0","3.1.1","3.1.2","3.1.3","3.1.4","3.1.5","3.1.6","3.1.7","3.1.8","3.1.9","3.1.10","3.1.11","3.1.12","3.1.13"],"69.0.3497.106":["4.0.0-beta.1","4.0.0-beta.2","4.0.0-beta.3","4.0.0-beta.4","4.0.0-beta.5","4.0.0-beta.6","4.0.0-beta.7","4.0.0-beta.8","4.0.0-beta.9","4.0.0-beta.10","4.0.0-beta.11","4.0.0","4.0.1","4.0.2","4.0.3","4.0.4","4.0.5","4.0.6"],"69.0.3497.128":["4.0.7","4.0.8","4.1.0","4.1.1","4.1.2","4.1.3","4.1.4","4.1.5","4.2.0","4.2.1","4.2.2","4.2.3","4.2.4","4.2.5","4.2.6","4.2.7","4.2.8","4.2.9","4.2.10","4.2.11","4.2.12"],"72.0.3626.52":["5.0.0-beta.1","5.0.0-beta.2"],"73.0.3683.27":["5.0.0-beta.3"],"73.0.3683.54":["5.0.0-beta.4"],"73.0.3683.61":["5.0.0-beta.5"],"73.0.3683.84":["5.0.0-beta.6"],"73.0.3683.94":["5.0.0-beta.7"],"73.0.3683.104":["5.0.0-beta.8"],"73.0.3683.117":["5.0.0-beta.9"],"73.0.3683.119":["5.0.0"],"73.0.3683.121":["5.0.1","5.0.2","5.0.3","5.0.4","5.0.5","5.0.6","5.0.7","5.0.8","5.0.9","5.0.10","5.0.11","5.0.12","5.0.13"],"76.0.3774.1":["6.0.0-beta.1"],"76.0.3783.1":["6.0.0-beta.2","6.0.0-beta.3","6.0.0-beta.4"],"76.0.3805.4":["6.0.0-beta.5"],"76.0.3809.3":["6.0.0-beta.6"],"76.0.3809.22":["6.0.0-beta.7"],"76.0.3809.26":["6.0.0-beta.8","6.0.0-beta.9"],"76.0.3809.37":["6.0.0-beta.10"],"76.0.3809.42":["6.0.0-beta.11"],"76.0.3809.54":["6.0.0-beta.12"],"76.0.3809.60":["6.0.0-beta.13"],"76.0.3809.68":["6.0.0-beta.14"],"76.0.3809.74":["6.0.0-beta.15"],"76.0.3809.88":["6.0.0"],"76.0.3809.102":["6.0.1"],"76.0.3809.110":["6.0.2"],"76.0.3809.126":["6.0.3"],"76.0.3809.131":["6.0.4"],"76.0.3809.136":["6.0.5"],"76.0.3809.138":["6.0.6"],"76.0.3809.139":["6.0.7"],"76.0.3809.146":["6.0.8","6.0.9","6.0.10","6.0.11","6.0.12","6.1.0","6.1.1","6.1.2","6.1.3","6.1.4","6.1.5","6.1.6","6.1.7","6.1.8","6.1.9","6.1.10","6.1.11","6.1.12"],"78.0.3866.0":["7.0.0-beta.1","7.0.0-beta.2","7.0.0-beta.3"],"78.0.3896.6":["7.0.0-beta.4"],"78.0.3905.1":["7.0.0-beta.5","7.0.0-beta.6","7.0.0-beta.7","7.0.0"],"78.0.3904.92":["7.0.1"],"78.0.3904.94":["7.1.0"],"78.0.3904.99":["7.1.1"],"78.0.3904.113":["7.1.2"],"78.0.3904.126":["7.1.3"],"78.0.3904.130":["7.1.4","7.1.5","7.1.6","7.1.7","7.1.8","7.1.9","7.1.10","7.1.11","7.1.12","7.1.13","7.1.14","7.2.0","7.2.1","7.2.2","7.2.3","7.2.4","7.3.0","7.3.1","7.3.2","7.3.3"],"79.0.3931.0":["8.0.0-beta.1","8.0.0-beta.2"],"80.0.3955.0":["8.0.0-beta.3","8.0.0-beta.4"],"80.0.3987.14":["8.0.0-beta.5"],"80.0.3987.51":["8.0.0-beta.6"],"80.0.3987.59":["8.0.0-beta.7"],"80.0.3987.75":["8.0.0-beta.8","8.0.0-beta.9"],"80.0.3987.86":["8.0.0","8.0.1","8.0.2"],"80.0.3987.134":["8.0.3"],"80.0.3987.137":["8.1.0"],"80.0.3987.141":["8.1.1"],"80.0.3987.158":["8.2.0"],"80.0.3987.163":["8.2.1","8.2.2","8.2.3","8.5.3","8.5.4","8.5.5"],"80.0.3987.165":["8.2.4","8.2.5","8.3.0","8.3.1","8.3.2","8.3.3","8.3.4","8.4.0","8.4.1","8.5.0","8.5.1","8.5.2"],"82.0.4048.0":["9.0.0-beta.1","9.0.0-beta.2","9.0.0-beta.3","9.0.0-beta.4","9.0.0-beta.5"],"82.0.4058.2":["9.0.0-beta.6","9.0.0-beta.7","9.0.0-beta.9"],"82.0.4085.10":["9.0.0-beta.10"],"82.0.4085.14":["9.0.0-beta.11","9.0.0-beta.12","9.0.0-beta.13"],"82.0.4085.27":["9.0.0-beta.14"],"83.0.4102.3":["9.0.0-beta.15","9.0.0-beta.16"],"83.0.4103.14":["9.0.0-beta.17"],"83.0.4103.16":["9.0.0-beta.18"],"83.0.4103.24":["9.0.0-beta.19"],"83.0.4103.26":["9.0.0-beta.20","9.0.0-beta.21"],"83.0.4103.34":["9.0.0-beta.22"],"83.0.4103.44":["9.0.0-beta.23"],"83.0.4103.45":["9.0.0-beta.24"],"83.0.4103.64":["9.0.0"],"83.0.4103.94":["9.0.1","9.0.2"],"83.0.4103.100":["9.0.3"],"83.0.4103.104":["9.0.4"],"83.0.4103.119":["9.0.5"],"83.0.4103.122":["9.1.0","9.1.1","9.1.2","9.2.0","9.2.1","9.3.0","9.3.1","9.3.2","9.3.3","9.3.4","9.3.5","9.4.0","9.4.1","9.4.2","9.4.3","9.4.4"],"84.0.4129.0":["10.0.0-beta.1","10.0.0-beta.2"],"85.0.4161.2":["10.0.0-beta.3","10.0.0-beta.4"],"85.0.4181.1":["10.0.0-beta.8","10.0.0-beta.9"],"85.0.4183.19":["10.0.0-beta.10"],"85.0.4183.20":["10.0.0-beta.11"],"85.0.4183.26":["10.0.0-beta.12"],"85.0.4183.39":["10.0.0-beta.13","10.0.0-beta.14","10.0.0-beta.15","10.0.0-beta.17","10.0.0-beta.19","10.0.0-beta.20","10.0.0-beta.21"],"85.0.4183.70":["10.0.0-beta.23"],"85.0.4183.78":["10.0.0-beta.24"],"85.0.4183.80":["10.0.0-beta.25"],"85.0.4183.84":["10.0.0"],"85.0.4183.86":["10.0.1"],"85.0.4183.87":["10.1.0"],"85.0.4183.93":["10.1.1"],"85.0.4183.98":["10.1.2"],"85.0.4183.121":["10.1.3","10.1.4","10.1.5","10.1.6","10.1.7","10.2.0","10.3.0","10.3.1","10.3.2","10.4.0","10.4.1","10.4.2","10.4.3","10.4.4","10.4.5","10.4.6","10.4.7"],"86.0.4234.0":["11.0.0-beta.1","11.0.0-beta.3","11.0.0-beta.4","11.0.0-beta.5","11.0.0-beta.6","11.0.0-beta.7"],"87.0.4251.1":["11.0.0-beta.8","11.0.0-beta.9","11.0.0-beta.11"],"87.0.4280.11":["11.0.0-beta.12","11.0.0-beta.13"],"87.0.4280.27":["11.0.0-beta.16","11.0.0-beta.17","11.0.0-beta.18","11.0.0-beta.19"],"87.0.4280.40":["11.0.0-beta.20"],"87.0.4280.47":["11.0.0-beta.22","11.0.0-beta.23"],"87.0.4280.60":["11.0.0","11.0.1"],"87.0.4280.67":["11.0.2","11.0.3","11.0.4"],"87.0.4280.88":["11.0.5","11.1.0","11.1.1"],"87.0.4280.141":["11.2.0","11.2.1","11.2.2","11.2.3","11.3.0","11.4.0","11.4.1","11.4.2","11.4.3","11.4.4","11.4.5","11.4.6","11.4.7","11.4.8","11.4.9","11.4.10","11.4.11","11.4.12","11.5.0"],"89.0.4328.0":["12.0.0-beta.1","12.0.0-beta.3","12.0.0-beta.4","12.0.0-beta.5","12.0.0-beta.6","12.0.0-beta.7","12.0.0-beta.8","12.0.0-beta.9","12.0.0-beta.10","12.0.0-beta.11","12.0.0-beta.12","12.0.0-beta.14"],"89.0.4348.1":["12.0.0-beta.16","12.0.0-beta.18","12.0.0-beta.19","12.0.0-beta.20"],"89.0.4388.2":["12.0.0-beta.21","12.0.0-beta.22","12.0.0-beta.23","12.0.0-beta.24","12.0.0-beta.25","12.0.0-beta.26"],"89.0.4389.23":["12.0.0-beta.27","12.0.0-beta.28","12.0.0-beta.29"],"89.0.4389.58":["12.0.0-beta.30","12.0.0-beta.31"],"89.0.4389.69":["12.0.0"],"89.0.4389.82":["12.0.1"],"89.0.4389.90":["12.0.2"],"89.0.4389.114":["12.0.3","12.0.4"],"89.0.4389.128":["12.0.5","12.0.6","12.0.7","12.0.8","12.0.9","12.0.10","12.0.11","12.0.12","12.0.13","12.0.14","12.0.15","12.0.16","12.0.17","12.0.18","12.1.0","12.1.1","12.1.2","12.2.0","12.2.1","12.2.2","12.2.3"],"90.0.4402.0":["13.0.0-beta.2","13.0.0-beta.3"],"90.0.4415.0":["13.0.0-beta.4","13.0.0-beta.5","13.0.0-beta.6","13.0.0-beta.7","13.0.0-beta.8","13.0.0-beta.9","13.0.0-beta.10","13.0.0-beta.11","13.0.0-beta.12","13.0.0-beta.13"],"91.0.4448.0":["13.0.0-beta.14","13.0.0-beta.16","13.0.0-beta.17","13.0.0-beta.18","13.0.0-beta.20"],"91.0.4472.33":["13.0.0-beta.21","13.0.0-beta.22","13.0.0-beta.23"],"91.0.4472.38":["13.0.0-beta.24","13.0.0-beta.25","13.0.0-beta.26","13.0.0-beta.27","13.0.0-beta.28"],"91.0.4472.69":["13.0.0","13.0.1"],"91.0.4472.77":["13.1.0","13.1.1","13.1.2"],"91.0.4472.106":["13.1.3","13.1.4"],"91.0.4472.124":["13.1.5","13.1.6","13.1.7"],"91.0.4472.164":["13.1.8","13.1.9","13.2.0","13.2.1","13.2.2","13.2.3","13.3.0","13.4.0","13.5.0","13.5.1","13.5.2","13.6.0","13.6.1","13.6.2","13.6.3","13.6.6","13.6.7","13.6.8","13.6.9"],"92.0.4511.0":["14.0.0-beta.1","14.0.0-beta.2","14.0.0-beta.3"],"93.0.4536.0":["14.0.0-beta.5","14.0.0-beta.6","14.0.0-beta.7","14.0.0-beta.8"],"93.0.4539.0":["14.0.0-beta.9","14.0.0-beta.10"],"93.0.4557.4":["14.0.0-beta.11","14.0.0-beta.12"],"93.0.4566.0":["14.0.0-beta.13","14.0.0-beta.14","14.0.0-beta.15","14.0.0-beta.16","14.0.0-beta.17","15.0.0-alpha.1","15.0.0-alpha.2"],"93.0.4577.15":["14.0.0-beta.18","14.0.0-beta.19","14.0.0-beta.20","14.0.0-beta.21"],"93.0.4577.25":["14.0.0-beta.22","14.0.0-beta.23"],"93.0.4577.51":["14.0.0-beta.24","14.0.0-beta.25"],"93.0.4577.58":["14.0.0"],"93.0.4577.63":["14.0.1"],"93.0.4577.82":["14.0.2","14.1.0","14.1.1","14.2.0","14.2.1","14.2.2","14.2.3","14.2.4","14.2.5","14.2.6","14.2.7","14.2.8","14.2.9"],"94.0.4584.0":["15.0.0-alpha.3","15.0.0-alpha.4","15.0.0-alpha.5","15.0.0-alpha.6"],"94.0.4590.2":["15.0.0-alpha.7","15.0.0-alpha.8","15.0.0-alpha.9"],"94.0.4606.12":["15.0.0-alpha.10"],"94.0.4606.20":["15.0.0-beta.1","15.0.0-beta.2"],"94.0.4606.31":["15.0.0-beta.3","15.0.0-beta.4","15.0.0-beta.5","15.0.0-beta.6","15.0.0-beta.7"],"94.0.4606.51":["15.0.0"],"94.0.4606.61":["15.1.0","15.1.1"],"94.0.4606.71":["15.1.2"],"94.0.4606.81":["15.2.0","15.3.0","15.3.1","15.3.2","15.3.3","15.3.4","15.3.5","15.3.6","15.3.7","15.4.0","15.4.1","15.4.2","15.5.0","15.5.1","15.5.2","15.5.3","15.5.4","15.5.5","15.5.6","15.5.7"],"95.0.4629.0":["16.0.0-alpha.1","16.0.0-alpha.2","16.0.0-alpha.3","16.0.0-alpha.4","16.0.0-alpha.5","16.0.0-alpha.6","16.0.0-alpha.7"],"96.0.4647.0":["16.0.0-alpha.8","16.0.0-alpha.9","16.0.0-beta.1","16.0.0-beta.2","16.0.0-beta.3"],"96.0.4664.18":["16.0.0-beta.4","16.0.0-beta.5"],"96.0.4664.27":["16.0.0-beta.6","16.0.0-beta.7"],"96.0.4664.35":["16.0.0-beta.8","16.0.0-beta.9"],"96.0.4664.45":["16.0.0","16.0.1"],"96.0.4664.55":["16.0.2","16.0.3","16.0.4","16.0.5"],"96.0.4664.110":["16.0.6","16.0.7","16.0.8"],"96.0.4664.174":["16.0.9","16.0.10","16.1.0","16.1.1","16.2.0","16.2.1","16.2.2","16.2.3","16.2.4","16.2.5","16.2.6","16.2.7","16.2.8"],"96.0.4664.4":["17.0.0-alpha.1","17.0.0-alpha.2","17.0.0-alpha.3"],"98.0.4706.0":["17.0.0-alpha.4","17.0.0-alpha.5","17.0.0-alpha.6","17.0.0-beta.1","17.0.0-beta.2"],"98.0.4758.9":["17.0.0-beta.3"],"98.0.4758.11":["17.0.0-beta.4","17.0.0-beta.5","17.0.0-beta.6","17.0.0-beta.7","17.0.0-beta.8","17.0.0-beta.9"],"98.0.4758.74":["17.0.0"],"98.0.4758.82":["17.0.1"],"98.0.4758.102":["17.1.0"],"98.0.4758.109":["17.1.1","17.1.2","17.2.0"],"98.0.4758.141":["17.3.0","17.3.1","17.4.0","17.4.1","17.4.2","17.4.3","17.4.4","17.4.5","17.4.6","17.4.7","17.4.8","17.4.9","17.4.10","17.4.11"],"99.0.4767.0":["18.0.0-alpha.1","18.0.0-alpha.2","18.0.0-alpha.3","18.0.0-alpha.4","18.0.0-alpha.5"],"100.0.4894.0":["18.0.0-beta.1","18.0.0-beta.2","18.0.0-beta.3","18.0.0-beta.4","18.0.0-beta.5","18.0.0-beta.6"],"100.0.4896.56":["18.0.0"],"100.0.4896.60":["18.0.1","18.0.2"],"100.0.4896.75":["18.0.3","18.0.4"],"100.0.4896.127":["18.1.0"],"100.0.4896.143":["18.2.0","18.2.1","18.2.2","18.2.3"],"100.0.4896.160":["18.2.4","18.3.0","18.3.1","18.3.2","18.3.3","18.3.4","18.3.5","18.3.6","18.3.7","18.3.8","18.3.9","18.3.11","18.3.12","18.3.13","18.3.14","18.3.15"],"102.0.4962.3":["19.0.0-alpha.1"],"102.0.4971.0":["19.0.0-alpha.2","19.0.0-alpha.3"],"102.0.4989.0":["19.0.0-alpha.4","19.0.0-alpha.5"],"102.0.4999.0":["19.0.0-beta.1","19.0.0-beta.2","19.0.0-beta.3"],"102.0.5005.27":["19.0.0-beta.4"],"102.0.5005.40":["19.0.0-beta.5","19.0.0-beta.6","19.0.0-beta.7"],"102.0.5005.49":["19.0.0-beta.8"],"102.0.5005.61":["19.0.0","19.0.1"],"102.0.5005.63":["19.0.2","19.0.3","19.0.4"],"102.0.5005.115":["19.0.5","19.0.6"],"102.0.5005.134":["19.0.7"],"102.0.5005.148":["19.0.8"],"102.0.5005.167":["19.0.9","19.0.10","19.0.11","19.0.12","19.0.13","19.0.14","19.0.15","19.0.16","19.0.17","19.1.0","19.1.1","19.1.2","19.1.3","19.1.4","19.1.5","19.1.6","19.1.7","19.1.8","19.1.9"],"103.0.5044.0":["20.0.0-alpha.1"],"104.0.5073.0":["20.0.0-alpha.2","20.0.0-alpha.3","20.0.0-alpha.4","20.0.0-alpha.5","20.0.0-alpha.6","20.0.0-alpha.7","20.0.0-beta.1","20.0.0-beta.2","20.0.0-beta.3","20.0.0-beta.4","20.0.0-beta.5","20.0.0-beta.6","20.0.0-beta.7","20.0.0-beta.8"],"104.0.5112.39":["20.0.0-beta.9"],"104.0.5112.48":["20.0.0-beta.10","20.0.0-beta.11","20.0.0-beta.12"],"104.0.5112.57":["20.0.0-beta.13"],"104.0.5112.65":["20.0.0"],"104.0.5112.81":["20.0.1","20.0.2","20.0.3"],"104.0.5112.102":["20.1.0","20.1.1"],"104.0.5112.114":["20.1.2","20.1.3","20.1.4"],"104.0.5112.124":["20.2.0","20.3.0","20.3.1","20.3.2","20.3.3","20.3.4","20.3.5","20.3.6","20.3.7","20.3.8","20.3.9","20.3.10","20.3.11","20.3.12"],"105.0.5187.0":["21.0.0-alpha.1","21.0.0-alpha.2","21.0.0-alpha.3","21.0.0-alpha.4","21.0.0-alpha.5"],"106.0.5216.0":["21.0.0-alpha.6","21.0.0-beta.1","21.0.0-beta.2","21.0.0-beta.3","21.0.0-beta.4","21.0.0-beta.5"],"106.0.5249.40":["21.0.0-beta.6","21.0.0-beta.7","21.0.0-beta.8"],"106.0.5249.51":["21.0.0"],"106.0.5249.61":["21.0.1"],"106.0.5249.91":["21.1.0"],"106.0.5249.103":["21.1.1"],"106.0.5249.119":["21.2.0"],"106.0.5249.165":["21.2.1"],"106.0.5249.168":["21.2.2","21.2.3"],"106.0.5249.181":["21.3.0","21.3.1"],"106.0.5249.199":["21.3.3","21.3.4","21.3.5","21.4.0","21.4.1","21.4.2","21.4.3","21.4.4"],"107.0.5286.0":["22.0.0-alpha.1"],"108.0.5329.0":["22.0.0-alpha.3","22.0.0-alpha.4","22.0.0-alpha.5","22.0.0-alpha.6"],"108.0.5355.0":["22.0.0-alpha.7"],"108.0.5359.10":["22.0.0-alpha.8","22.0.0-beta.1","22.0.0-beta.2","22.0.0-beta.3"],"108.0.5359.29":["22.0.0-beta.4"],"108.0.5359.40":["22.0.0-beta.5","22.0.0-beta.6"],"108.0.5359.48":["22.0.0-beta.7","22.0.0-beta.8"],"108.0.5359.62":["22.0.0"],"108.0.5359.125":["22.0.1"],"108.0.5359.179":["22.0.2","22.0.3","22.1.0"],"108.0.5359.215":["22.2.0","22.2.1","22.3.0","22.3.1","22.3.2","22.3.3","22.3.4","22.3.5","22.3.6","22.3.7","22.3.8","22.3.9","22.3.10","22.3.11","22.3.12","22.3.13","22.3.14","22.3.15","22.3.16","22.3.17","22.3.18","22.3.20","22.3.21","22.3.22","22.3.23","22.3.24","22.3.25","22.3.26","22.3.27"],"110.0.5415.0":["23.0.0-alpha.1"],"110.0.5451.0":["23.0.0-alpha.2","23.0.0-alpha.3"],"110.0.5478.5":["23.0.0-beta.1","23.0.0-beta.2","23.0.0-beta.3"],"110.0.5481.30":["23.0.0-beta.4"],"110.0.5481.38":["23.0.0-beta.5"],"110.0.5481.52":["23.0.0-beta.6","23.0.0-beta.8"],"110.0.5481.77":["23.0.0"],"110.0.5481.100":["23.1.0"],"110.0.5481.104":["23.1.1"],"110.0.5481.177":["23.1.2"],"110.0.5481.179":["23.1.3"],"110.0.5481.192":["23.1.4","23.2.0"],"110.0.5481.208":["23.2.1","23.2.2","23.2.3","23.2.4","23.3.0","23.3.1","23.3.2","23.3.3","23.3.4","23.3.5","23.3.6","23.3.7","23.3.8","23.3.9","23.3.10","23.3.11","23.3.12","23.3.13"],"111.0.5560.0":["24.0.0-alpha.1","24.0.0-alpha.2","24.0.0-alpha.3","24.0.0-alpha.4","24.0.0-alpha.5","24.0.0-alpha.6","24.0.0-alpha.7"],"111.0.5563.50":["24.0.0-beta.1","24.0.0-beta.2"],"112.0.5615.20":["24.0.0-beta.3","24.0.0-beta.4"],"112.0.5615.29":["24.0.0-beta.5"],"112.0.5615.39":["24.0.0-beta.6","24.0.0-beta.7"],"112.0.5615.49":["24.0.0"],"112.0.5615.50":["24.1.0","24.1.1"],"112.0.5615.87":["24.1.2"],"112.0.5615.165":["24.1.3","24.2.0","24.3.0"],"112.0.5615.183":["24.3.1"],"112.0.5615.204":["24.4.0","24.4.1","24.5.0","24.5.1","24.6.0","24.6.1","24.6.2","24.6.3","24.6.4","24.6.5","24.7.0","24.7.1","24.8.0","24.8.1","24.8.2","24.8.3","24.8.4","24.8.5","24.8.6","24.8.7","24.8.8"],"114.0.5694.0":["25.0.0-alpha.1","25.0.0-alpha.2"],"114.0.5710.0":["25.0.0-alpha.3","25.0.0-alpha.4"],"114.0.5719.0":["25.0.0-alpha.5","25.0.0-alpha.6","25.0.0-beta.1","25.0.0-beta.2","25.0.0-beta.3"],"114.0.5735.16":["25.0.0-beta.4","25.0.0-beta.5","25.0.0-beta.6","25.0.0-beta.7"],"114.0.5735.35":["25.0.0-beta.8"],"114.0.5735.45":["25.0.0-beta.9","25.0.0","25.0.1"],"114.0.5735.106":["25.1.0","25.1.1"],"114.0.5735.134":["25.2.0"],"114.0.5735.199":["25.3.0"],"114.0.5735.243":["25.3.1"],"114.0.5735.248":["25.3.2","25.4.0"],"114.0.5735.289":["25.5.0","25.6.0","25.7.0","25.8.0","25.8.1","25.8.2","25.8.3","25.8.4","25.9.0","25.9.1","25.9.2","25.9.3","25.9.4","25.9.5","25.9.6","25.9.7","25.9.8"],"116.0.5791.0":["26.0.0-alpha.1","26.0.0-alpha.2","26.0.0-alpha.3","26.0.0-alpha.4","26.0.0-alpha.5"],"116.0.5815.0":["26.0.0-alpha.6"],"116.0.5831.0":["26.0.0-alpha.7"],"116.0.5845.0":["26.0.0-alpha.8","26.0.0-beta.1"],"116.0.5845.14":["26.0.0-beta.2","26.0.0-beta.3","26.0.0-beta.4","26.0.0-beta.5","26.0.0-beta.6","26.0.0-beta.7"],"116.0.5845.42":["26.0.0-beta.8","26.0.0-beta.9"],"116.0.5845.49":["26.0.0-beta.10","26.0.0-beta.11"],"116.0.5845.62":["26.0.0-beta.12"],"116.0.5845.82":["26.0.0"],"116.0.5845.97":["26.1.0"],"116.0.5845.179":["26.2.0"],"116.0.5845.188":["26.2.1"],"116.0.5845.190":["26.2.2","26.2.3","26.2.4"],"116.0.5845.228":["26.3.0","26.4.0","26.4.1","26.4.2","26.4.3","26.5.0","26.6.0","26.6.1","26.6.2","26.6.3","26.6.4","26.6.5","26.6.6","26.6.7","26.6.8","26.6.9","26.6.10"],"118.0.5949.0":["27.0.0-alpha.1","27.0.0-alpha.2","27.0.0-alpha.3","27.0.0-alpha.4","27.0.0-alpha.5","27.0.0-alpha.6"],"118.0.5993.5":["27.0.0-beta.1","27.0.0-beta.2","27.0.0-beta.3"],"118.0.5993.11":["27.0.0-beta.4"],"118.0.5993.18":["27.0.0-beta.5","27.0.0-beta.6","27.0.0-beta.7","27.0.0-beta.8","27.0.0-beta.9"],"118.0.5993.54":["27.0.0"],"118.0.5993.89":["27.0.1","27.0.2"],"118.0.5993.120":["27.0.3"],"118.0.5993.129":["27.0.4"],"118.0.5993.144":["27.1.0","27.1.2"],"118.0.5993.159":["27.1.3","27.2.0","27.2.1","27.2.2","27.2.3","27.2.4","27.3.0","27.3.1","27.3.2","27.3.3","27.3.4","27.3.5","27.3.6","27.3.7","27.3.8","27.3.9","27.3.10","27.3.11"],"119.0.6045.0":["28.0.0-alpha.1","28.0.0-alpha.2"],"119.0.6045.21":["28.0.0-alpha.3","28.0.0-alpha.4"],"119.0.6045.33":["28.0.0-alpha.5","28.0.0-alpha.6","28.0.0-alpha.7","28.0.0-beta.1"],"120.0.6099.0":["28.0.0-beta.2"],"120.0.6099.5":["28.0.0-beta.3","28.0.0-beta.4"],"120.0.6099.18":["28.0.0-beta.5","28.0.0-beta.6","28.0.0-beta.7","28.0.0-beta.8","28.0.0-beta.9","28.0.0-beta.10"],"120.0.6099.35":["28.0.0-beta.11"],"120.0.6099.56":["28.0.0"],"120.0.6099.109":["28.1.0","28.1.1"],"120.0.6099.199":["28.1.2","28.1.3"],"120.0.6099.216":["28.1.4"],"120.0.6099.227":["28.2.0"],"120.0.6099.268":["28.2.1"],"120.0.6099.276":["28.2.2"],"120.0.6099.283":["28.2.3"],"120.0.6099.291":["28.2.4","28.2.5","28.2.6","28.2.7","28.2.8","28.2.9","28.2.10","28.3.0","28.3.1","28.3.2","28.3.3"],"121.0.6147.0":["29.0.0-alpha.1","29.0.0-alpha.2","29.0.0-alpha.3"],"121.0.6159.0":["29.0.0-alpha.4","29.0.0-alpha.5","29.0.0-alpha.6","29.0.0-alpha.7"],"122.0.6194.0":["29.0.0-alpha.8"],"122.0.6236.2":["29.0.0-alpha.9","29.0.0-alpha.10","29.0.0-alpha.11","29.0.0-beta.1","29.0.0-beta.2"],"122.0.6261.6":["29.0.0-beta.3","29.0.0-beta.4"],"122.0.6261.18":["29.0.0-beta.5","29.0.0-beta.6","29.0.0-beta.7","29.0.0-beta.8","29.0.0-beta.9","29.0.0-beta.10","29.0.0-beta.11"],"122.0.6261.29":["29.0.0-beta.12"],"122.0.6261.39":["29.0.0"],"122.0.6261.57":["29.0.1"],"122.0.6261.70":["29.1.0"],"122.0.6261.111":["29.1.1"],"122.0.6261.112":["29.1.2","29.1.3"],"122.0.6261.129":["29.1.4"],"122.0.6261.130":["29.1.5"],"122.0.6261.139":["29.1.6"],"122.0.6261.156":["29.2.0","29.3.0","29.3.1","29.3.2","29.3.3","29.4.0","29.4.1","29.4.2","29.4.3","29.4.4","29.4.5","29.4.6"],"123.0.6296.0":["30.0.0-alpha.1"],"123.0.6312.5":["30.0.0-alpha.2"],"124.0.6323.0":["30.0.0-alpha.3","30.0.0-alpha.4"],"124.0.6331.0":["30.0.0-alpha.5","30.0.0-alpha.6"],"124.0.6353.0":["30.0.0-alpha.7"],"124.0.6359.0":["30.0.0-beta.1","30.0.0-beta.2"],"124.0.6367.9":["30.0.0-beta.3","30.0.0-beta.4","30.0.0-beta.5"],"124.0.6367.18":["30.0.0-beta.6"],"124.0.6367.29":["30.0.0-beta.7","30.0.0-beta.8"],"124.0.6367.49":["30.0.0"],"124.0.6367.60":["30.0.1"],"124.0.6367.91":["30.0.2"],"124.0.6367.119":["30.0.3"],"124.0.6367.201":["30.0.4"],"124.0.6367.207":["30.0.5","30.0.6"],"124.0.6367.221":["30.0.7"],"124.0.6367.230":["30.0.8"],"124.0.6367.233":["30.0.9"],"124.0.6367.243":["30.1.0","30.1.1","30.1.2","30.2.0","30.3.0","30.3.1","30.4.0","30.5.0","30.5.1"],"125.0.6412.0":["31.0.0-alpha.1","31.0.0-alpha.2","31.0.0-alpha.3","31.0.0-alpha.4","31.0.0-alpha.5"],"126.0.6445.0":["31.0.0-beta.1","31.0.0-beta.2","31.0.0-beta.3","31.0.0-beta.4","31.0.0-beta.5","31.0.0-beta.6","31.0.0-beta.7","31.0.0-beta.8","31.0.0-beta.9"],"126.0.6478.36":["31.0.0-beta.10","31.0.0","31.0.1"],"126.0.6478.61":["31.0.2"],"126.0.6478.114":["31.1.0"],"126.0.6478.127":["31.2.0","31.2.1"],"126.0.6478.183":["31.3.0"],"126.0.6478.185":["31.3.1"],"126.0.6478.234":["31.4.0","31.5.0","31.6.0","31.7.0","31.7.1","31.7.2","31.7.3","31.7.4","31.7.5","31.7.6","31.7.7"],"127.0.6521.0":["32.0.0-alpha.1","32.0.0-alpha.2","32.0.0-alpha.3","32.0.0-alpha.4","32.0.0-alpha.5"],"128.0.6571.0":["32.0.0-alpha.6","32.0.0-alpha.7"],"128.0.6573.0":["32.0.0-alpha.8","32.0.0-alpha.9","32.0.0-alpha.10","32.0.0-beta.1"],"128.0.6611.0":["32.0.0-beta.2"],"128.0.6613.7":["32.0.0-beta.3"],"128.0.6613.18":["32.0.0-beta.4"],"128.0.6613.27":["32.0.0-beta.5","32.0.0-beta.6","32.0.0-beta.7"],"128.0.6613.36":["32.0.0","32.0.1"],"128.0.6613.84":["32.0.2"],"128.0.6613.120":["32.1.0"],"128.0.6613.137":["32.1.1"],"128.0.6613.162":["32.1.2"],"128.0.6613.178":["32.2.0"],"128.0.6613.186":["32.2.1","32.2.2","32.2.3","32.2.4","32.2.5","32.2.6","32.2.7","32.2.8","32.3.0","32.3.1","32.3.2","32.3.3"],"129.0.6668.0":["33.0.0-alpha.1"],"130.0.6672.0":["33.0.0-alpha.2","33.0.0-alpha.3","33.0.0-alpha.4","33.0.0-alpha.5","33.0.0-alpha.6","33.0.0-beta.1","33.0.0-beta.2","33.0.0-beta.3","33.0.0-beta.4"],"130.0.6723.19":["33.0.0-beta.5","33.0.0-beta.6","33.0.0-beta.7"],"130.0.6723.31":["33.0.0-beta.8","33.0.0-beta.9","33.0.0-beta.10"],"130.0.6723.44":["33.0.0-beta.11","33.0.0"],"130.0.6723.59":["33.0.1","33.0.2"],"130.0.6723.91":["33.1.0"],"130.0.6723.118":["33.2.0"],"130.0.6723.137":["33.2.1"],"130.0.6723.152":["33.3.0"],"130.0.6723.170":["33.3.1"],"130.0.6723.191":["33.3.2","33.4.0","33.4.1","33.4.2","33.4.3","33.4.4","33.4.5","33.4.6","33.4.7","33.4.8","33.4.9","33.4.10","33.4.11"],"131.0.6776.0":["34.0.0-alpha.1"],"132.0.6779.0":["34.0.0-alpha.2"],"132.0.6789.1":["34.0.0-alpha.3","34.0.0-alpha.4","34.0.0-alpha.5","34.0.0-alpha.6","34.0.0-alpha.7"],"132.0.6820.0":["34.0.0-alpha.8"],"132.0.6824.0":["34.0.0-alpha.9","34.0.0-beta.1","34.0.0-beta.2","34.0.0-beta.3"],"132.0.6834.6":["34.0.0-beta.4","34.0.0-beta.5"],"132.0.6834.15":["34.0.0-beta.6","34.0.0-beta.7","34.0.0-beta.8"],"132.0.6834.32":["34.0.0-beta.9","34.0.0-beta.10","34.0.0-beta.11"],"132.0.6834.46":["34.0.0-beta.12","34.0.0-beta.13"],"132.0.6834.57":["34.0.0-beta.14","34.0.0-beta.15","34.0.0-beta.16"],"132.0.6834.83":["34.0.0","34.0.1"],"132.0.6834.159":["34.0.2"],"132.0.6834.194":["34.1.0","34.1.1"],"132.0.6834.196":["34.2.0"],"132.0.6834.210":["34.3.0","34.3.1","34.3.2","34.3.3","34.3.4","34.4.0","34.4.1","34.5.0","34.5.1","34.5.2","34.5.3","34.5.4","34.5.5","34.5.6","34.5.7","34.5.8"],"133.0.6920.0":["35.0.0-alpha.1","35.0.0-alpha.2","35.0.0-alpha.3","35.0.0-alpha.4","35.0.0-alpha.5","35.0.0-beta.1"],"134.0.6968.0":["35.0.0-beta.2","35.0.0-beta.3","35.0.0-beta.4"],"134.0.6989.0":["35.0.0-beta.5"],"134.0.6990.0":["35.0.0-beta.6","35.0.0-beta.7"],"134.0.6998.10":["35.0.0-beta.8","35.0.0-beta.9"],"134.0.6998.23":["35.0.0-beta.10","35.0.0-beta.11","35.0.0-beta.12"],"134.0.6998.44":["35.0.0-beta.13","35.0.0","35.0.1"],"134.0.6998.88":["35.0.2","35.0.3"],"134.0.6998.165":["35.1.0","35.1.1"],"134.0.6998.178":["35.1.2"],"134.0.6998.179":["35.1.3","35.1.4","35.1.5"],"134.0.6998.205":["35.2.0","35.2.1","35.2.2","35.3.0","35.4.0","35.5.0","35.5.1","35.6.0"],"135.0.7049.5":["36.0.0-alpha.1"],"136.0.7062.0":["36.0.0-alpha.2","36.0.0-alpha.3","36.0.0-alpha.4"],"136.0.7067.0":["36.0.0-alpha.5","36.0.0-alpha.6","36.0.0-beta.1","36.0.0-beta.2","36.0.0-beta.3","36.0.0-beta.4"],"136.0.7103.17":["36.0.0-beta.5"],"136.0.7103.25":["36.0.0-beta.6","36.0.0-beta.7"],"136.0.7103.33":["36.0.0-beta.8","36.0.0-beta.9"],"136.0.7103.48":["36.0.0","36.0.1"],"136.0.7103.49":["36.1.0","36.2.0"],"136.0.7103.93":["36.2.1"],"136.0.7103.113":["36.3.0","36.3.1"],"136.0.7103.115":["36.3.2"],"136.0.7103.149":["36.4.0"],"136.0.7103.168":["36.5.0"],"136.0.7103.177":["36.6.0"],"137.0.7151.0":["37.0.0-alpha.1","37.0.0-alpha.2"],"138.0.7156.0":["37.0.0-alpha.3"],"138.0.7165.0":["37.0.0-alpha.4"],"138.0.7177.0":["37.0.0-alpha.5"],"138.0.7178.0":["37.0.0-alpha.6","37.0.0-alpha.7","37.0.0-beta.1","37.0.0-beta.2"],"138.0.7190.0":["37.0.0-beta.3"],"138.0.7204.15":["37.0.0-beta.4","37.0.0-beta.5","37.0.0-beta.6","37.0.0-beta.7"],"138.0.7204.23":["37.0.0-beta.8"],"138.0.7204.35":["37.0.0-beta.9","37.0.0","37.1.0"],"139.0.7219.0":["38.0.0-alpha.1","38.0.0-alpha.2","38.0.0-alpha.3"]}

---

File name: node_modules\electron-to-chromium\full-versions.js

Code:
module.exports = {
	"0.20.0": "39.0.2171.65",
	"0.20.1": "39.0.2171.65",
	"0.20.2": "39.0.2171.65",
	"0.20.3": "39.0.2171.65",
	"0.20.4": "39.0.2171.65",
	"0.20.5": "39.0.2171.65",
	"0.20.6": "39.0.2171.65",
	"0.20.7": "39.0.2171.65",
	"0.20.8": "39.0.2171.65",
	"0.21.0": "40.0.2214.91",
	"0.21.1": "40.0.2214.91",
	"0.21.2": "40.0.2214.91",
	"0.21.3": "41.0.2272.76",
	"0.22.1": "41.0.2272.76",
	"0.22.2": "41.0.2272.76",
	"0.22.3": "41.0.2272.76",
	"0.23.0": "41.0.2272.76",
	"0.24.0": "41.0.2272.76",
	"0.25.0": "42.0.2311.107",
	"0.25.1": "42.0.2311.107",
	"0.25.2": "42.0.2311.107",
	"0.25.3": "42.0.2311.107",
	"0.26.0": "42.0.2311.107",
	"0.26.1": "42.0.2311.107",
	"0.27.0": "42.0.2311.107",
	"0.27.1": "42.0.2311.107",
	"0.27.2": "43.0.2357.65",
	"0.27.3": "43.0.2357.65",
	"0.28.0": "43.0.2357.65",
	"0.28.1": "43.0.2357.65",
	"0.28.2": "43.0.2357.65",
	"0.28.3": "43.0.2357.65",
	"0.29.1": "43.0.2357.65",
	"0.29.2": "43.0.2357.65",
	"0.30.4": "44.0.2403.125",
	"0.31.0": "44.0.2403.125",
	"0.31.2": "45.0.2454.85",
	"0.32.2": "45.0.2454.85",
	"0.32.3": "45.0.2454.85",
	"0.33.0": "45.0.2454.85",
	"0.33.1": "45.0.2454.85",
	"0.33.2": "45.0.2454.85",
	"0.33.3": "45.0.2454.85",
	"0.33.4": "45.0.2454.85",
	"0.33.6": "45.0.2454.85",
	"0.33.7": "45.0.2454.85",
	"0.33.8": "45.0.2454.85",
	"0.33.9": "45.0.2454.85",
	"0.34.0": "45.0.2454.85",
	"0.34.1": "45.0.2454.85",
	"0.34.2": "45.0.2454.85",
	"0.34.3": "45.0.2454.85",
	"0.34.4": "45.0.2454.85",
	"0.35.1": "45.0.2454.85",
	"0.35.2": "45.0.2454.85",
	"0.35.3": "45.0.2454.85",
	"0.35.4": "45.0.2454.85",
	"0.35.5": "45.0.2454.85",
	"0.36.0": "47.0.2526.73",
	"0.36.2": "47.0.2526.73",
	"0.36.3": "47.0.2526.73",
	"0.36.4": "47.0.2526.73",
	"0.36.5": "47.0.2526.110",
	"0.36.6": "47.0.2526.110",
	"0.36.7": "47.0.2526.110",
	"0.36.8": "47.0.2526.110",
	"0.36.9": "47.0.2526.110",
	"0.36.10": "47.0.2526.110",
	"0.36.11": "47.0.2526.110",
	"0.36.12": "47.0.2526.110",
	"0.37.0": "49.0.2623.75",
	"0.37.1": "49.0.2623.75",
	"0.37.3": "49.0.2623.75",
	"0.37.4": "49.0.2623.75",
	"0.37.5": "49.0.2623.75",
	"0.37.6": "49.0.2623.75",
	"0.37.7": "49.0.2623.75",
	"0.37.8": "49.0.2623.75",
	"1.0.0": "49.0.2623.75",
	"1.0.1": "49.0.2623.75",
	"1.0.2": "49.0.2623.75",
	"1.1.0": "50.0.2661.102",
	"1.1.1": "50.0.2661.102",
	"1.1.2": "50.0.2661.102",
	"1.1.3": "50.0.2661.102",
	"1.2.0": "51.0.2704.63",
	"1.2.1": "51.0.2704.63",
	"1.2.2": "51.0.2704.84",
	"1.2.3": "51.0.2704.84",
	"1.2.4": "51.0.2704.103",
	"1.2.5": "51.0.2704.103",
	"1.2.6": "51.0.2704.106",
	"1.2.7": "51.0.2704.106",
	"1.2.8": "51.0.2704.106",
	"1.3.0": "52.0.2743.82",
	"1.3.1": "52.0.2743.82",
	"1.3.2": "52.0.2743.82",
	"1.3.3": "52.0.2743.82",
	"1.3.4": "52.0.2743.82",
	"1.3.5": "52.0.2743.82",
	"1.3.6": "52.0.2743.82",
	"1.3.7": "52.0.2743.82",
	"1.3.9": "52.0.2743.82",
	"1.3.10": "52.0.2743.82",
	"1.3.13": "52.0.2743.82",
	"1.3.14": "52.0.2743.82",
	"1.3.15": "52.0.2743.82",
	"1.4.0": "53.0.2785.113",
	"1.4.1": "53.0.2785.113",
	"1.4.2": "53.0.2785.113",
	"1.4.3": "53.0.2785.113",
	"1.4.4": "53.0.2785.113",
	"1.4.5": "53.0.2785.113",
	"1.4.6": "53.0.2785.143",
	"1.4.7": "53.0.2785.143",
	"1.4.8": "53.0.2785.143",
	"1.4.10": "53.0.2785.143",
	"1.4.11": "53.0.2785.143",
	"1.4.12": "54.0.2840.51",
	"1.4.13": "53.0.2785.143",
	"1.4.14": "53.0.2785.143",
	"1.4.15": "53.0.2785.143",
	"1.4.16": "53.0.2785.143",
	"1.5.0": "54.0.2840.101",
	"1.5.1": "54.0.2840.101",
	"1.6.0": "56.0.2924.87",
	"1.6.1": "56.0.2924.87",
	"1.6.2": "56.0.2924.87",
	"1.6.3": "56.0.2924.87",
	"1.6.4": "56.0.2924.87",
	"1.6.5": "56.0.2924.87",
	"1.6.6": "56.0.2924.87",
	"1.6.7": "56.0.2924.87",
	"1.6.8": "56.0.2924.87",
	"1.6.9": "56.0.2924.87",
	"1.6.10": "56.0.2924.87",
	"1.6.11": "56.0.2924.87",
	"1.6.12": "56.0.2924.87",
	"1.6.13": "56.0.2924.87",
	"1.6.14": "56.0.2924.87",
	"1.6.15": "56.0.2924.87",
	"1.6.16": "56.0.2924.87",
	"1.6.17": "56.0.2924.87",
	"1.6.18": "56.0.2924.87",
	"1.7.0": "58.0.3029.110",
	"1.7.1": "58.0.3029.110",
	"1.7.2": "58.0.3029.110",
	"1.7.3": "58.0.3029.110",
	"1.7.4": "58.0.3029.110",
	"1.7.5": "58.0.3029.110",
	"1.7.6": "58.0.3029.110",
	"1.7.7": "58.0.3029.110",
	"1.7.8": "58.0.3029.110",
	"1.7.9": "58.0.3029.110",
	"1.7.10": "58.0.3029.110",
	"1.7.11": "58.0.3029.110",
	"1.7.12": "58.0.3029.110",
	"1.7.13": "58.0.3029.110",
	"1.7.14": "58.0.3029.110",
	"1.7.15": "58.0.3029.110",
	"1.7.16": "58.0.3029.110",
	"1.8.0": "59.0.3071.115",
	"1.8.1": "59.0.3071.115",
	"1.8.2-beta.1": "59.0.3071.115",
	"1.8.2-beta.2": "59.0.3071.115",
	"1.8.2-beta.3": "59.0.3071.115",
	"1.8.2-beta.4": "59.0.3071.115",
	"1.8.2-beta.5": "59.0.3071.115",
	"1.8.2": "59.0.3071.115",
	"1.8.3": "59.0.3071.115",
	"1.8.4": "59.0.3071.115",
	"1.8.5": "59.0.3071.115",
	"1.8.6": "59.0.3071.115",
	"1.8.7": "59.0.3071.115",
	"1.8.8": "59.0.3071.115",
	"2.0.0-beta.1": "61.0.3163.100",
	"2.0.0-beta.2": "61.0.3163.100",
	"2.0.0-beta.3": "61.0.3163.100",
	"2.0.0-beta.4": "61.0.3163.100",
	"2.0.0-beta.5": "61.0.3163.100",
	"2.0.0-beta.6": "61.0.3163.100",
	"2.0.0-beta.7": "61.0.3163.100",
	"2.0.0-beta.8": "61.0.3163.100",
	"2.0.0": "61.0.3163.100",
	"2.0.1": "61.0.3163.100",
	"2.0.2": "61.0.3163.100",
	"2.0.3": "61.0.3163.100",
	"2.0.4": "61.0.3163.100",
	"2.0.5": "61.0.3163.100",
	"2.0.6": "61.0.3163.100",
	"2.0.7": "61.0.3163.100",
	"2.0.8": "61.0.3163.100",
	"2.0.9": "61.0.3163.100",
	"2.0.10": "61.0.3163.100",
	"2.0.11": "61.0.3163.100",
	"2.0.12": "61.0.3163.100",
	"2.0.13": "61.0.3163.100",
	"2.0.14": "61.0.3163.100",
	"2.0.15": "61.0.3163.100",
	"2.0.16": "61.0.3163.100",
	"2.0.17": "61.0.3163.100",
	"2.0.18": "61.0.3163.100",
	"2.1.0-unsupported.20180809": "61.0.3163.100",
	"3.0.0-beta.1": "66.0.3359.181",
	"3.0.0-beta.2": "66.0.3359.181",
	"3.0.0-beta.3": "66.0.3359.181",
	"3.0.0-beta.4": "66.0.3359.181",
	"3.0.0-beta.5": "66.0.3359.181",
	"3.0.0-beta.6": "66.0.3359.181",
	"3.0.0-beta.7": "66.0.3359.181",
	"3.0.0-beta.8": "66.0.3359.181",
	"3.0.0-beta.9": "66.0.3359.181",
	"3.0.0-beta.10": "66.0.3359.181",
	"3.0.0-beta.11": "66.0.3359.181",
	"3.0.0-beta.12": "66.0.3359.181",
	"3.0.0-beta.13": "66.0.3359.181",
	"3.0.0": "66.0.3359.181",
	"3.0.1": "66.0.3359.181",
	"3.0.2": "66.0.3359.181",
	"3.0.3": "66.0.3359.181",
	"3.0.4": "66.0.3359.181",
	"3.0.5": "66.0.3359.181",
	"3.0.6": "66.0.3359.181",
	"3.0.7": "66.0.3359.181",
	"3.0.8": "66.0.3359.181",
	"3.0.9": "66.0.3359.181",
	"3.0.10": "66.0.3359.181",
	"3.0.11": "66.0.3359.181",
	"3.0.12": "66.0.3359.181",
	"3.0.13": "66.0.3359.181",
	"3.0.14": "66.0.3359.181",
	"3.0.15": "66.0.3359.181",
	"3.0.16": "66.0.3359.181",
	"3.1.0-beta.1": "66.0.3359.181",
	"3.1.0-beta.2": "66.0.3359.181",
	"3.1.0-beta.3": "66.0.3359.181",
	"3.1.0-beta.4": "66.0.3359.181",
	"3.1.0-beta.5": "66.0.3359.181",
	"3.1.0": "66.0.3359.181",
	"3.1.1": "66.0.3359.181",
	"3.1.2": "66.0.3359.181",
	"3.1.3": "66.0.3359.181",
	"3.1.4": "66.0.3359.181",
	"3.1.5": "66.0.3359.181",
	"3.1.6": "66.0.3359.181",
	"3.1.7": "66.0.3359.181",
	"3.1.8": "66.0.3359.181",
	"3.1.9": "66.0.3359.181",
	"3.1.10": "66.0.3359.181",
	"3.1.11": "66.0.3359.181",
	"3.1.12": "66.0.3359.181",
	"3.1.13": "66.0.3359.181",
	"4.0.0-beta.1": "69.0.3497.106",
	"4.0.0-beta.2": "69.0.3497.106",
	"4.0.0-beta.3": "69.0.3497.106",
	"4.0.0-beta.4": "69.0.3497.106",
	"4.0.0-beta.5": "69.0.3497.106",
	"4.0.0-beta.6": "69.0.3497.106",
	"4.0.0-beta.7": "69.0.3497.106",
	"4.0.0-beta.8": "69.0.3497.106",
	"4.0.0-beta.9": "69.0.3497.106",
	"4.0.0-beta.10": "69.0.3497.106",
	"4.0.0-beta.11": "69.0.3497.106",
	"4.0.0": "69.0.3497.106",
	"4.0.1": "69.0.3497.106",
	"4.0.2": "69.0.3497.106",
	"4.0.3": "69.0.3497.106",
	"4.0.4": "69.0.3497.106",
	"4.0.5": "69.0.3497.106",
	"4.0.6": "69.0.3497.106",
	"4.0.7": "69.0.3497.128",
	"4.0.8": "69.0.3497.128",
	"4.1.0": "69.0.3497.128",
	"4.1.1": "69.0.3497.128",
	"4.1.2": "69.0.3497.128",
	"4.1.3": "69.0.3497.128",
	"4.1.4": "69.0.3497.128",
	"4.1.5": "69.0.3497.128",
	"4.2.0": "69.0.3497.128",
	"4.2.1": "69.0.3497.128",
	"4.2.2": "69.0.3497.128",
	"4.2.3": "69.0.3497.128",
	"4.2.4": "69.0.3497.128",
	"4.2.5": "69.0.3497.128",
	"4.2.6": "69.0.3497.128",
	"4.2.7": "69.0.3497.128",
	"4.2.8": "69.0.3497.128",
	"4.2.9": "69.0.3497.128",
	"4.2.10": "69.0.3497.128",
	"4.2.11": "69.0.3497.128",
	"4.2.12": "69.0.3497.128",
	"5.0.0-beta.1": "72.0.3626.52",
	"5.0.0-beta.2": "72.0.3626.52",
	"5.0.0-beta.3": "73.0.3683.27",
	"5.0.0-beta.4": "73.0.3683.54",
	"5.0.0-beta.5": "73.0.3683.61",
	"5.0.0-beta.6": "73.0.3683.84",
	"5.0.0-beta.7": "73.0.3683.94",
	"5.0.0-beta.8": "73.0.3683.104",
	"5.0.0-beta.9": "73.0.3683.117",
	"5.0.0": "73.0.3683.119",
	"5.0.1": "73.0.3683.121",
	"5.0.2": "73.0.3683.121",
	"5.0.3": "73.0.3683.121",
	"5.0.4": "73.0.3683.121",
	"5.0.5": "73.0.3683.121",
	"5.0.6": "73.0.3683.121",
	"5.0.7": "73.0.3683.121",
	"5.0.8": "73.0.3683.121",
	"5.0.9": "73.0.3683.121",
	"5.0.10": "73.0.3683.121",
	"5.0.11": "73.0.3683.121",
	"5.0.12": "73.0.3683.121",
	"5.0.13": "73.0.3683.121",
	"6.0.0-beta.1": "76.0.3774.1",
	"6.0.0-beta.2": "76.0.3783.1",
	"6.0.0-beta.3": "76.0.3783.1",
	"6.0.0-beta.4": "76.0.3783.1",
	"6.0.0-beta.5": "76.0.3805.4",
	"6.0.0-beta.6": "76.0.3809.3",
	"6.0.0-beta.7": "76.0.3809.22",
	"6.0.0-beta.8": "76.0.3809.26",
	"6.0.0-beta.9": "76.0.3809.26",
	"6.0.0-beta.10": "76.0.3809.37",
	"6.0.0-beta.11": "76.0.3809.42",
	"6.0.0-beta.12": "76.0.3809.54",
	"6.0.0-beta.13": "76.0.3809.60",
	"6.0.0-beta.14": "76.0.3809.68",
	"6.0.0-beta.15": "76.0.3809.74",
	"6.0.0": "76.0.3809.88",
	"6.0.1": "76.0.3809.102",
	"6.0.2": "76.0.3809.110",
	"6.0.3": "76.0.3809.126",
	"6.0.4": "76.0.3809.131",
	"6.0.5": "76.0.3809.136",
	"6.0.6": "76.0.3809.138",
	"6.0.7": "76.0.3809.139",
	"6.0.8": "76.0.3809.146",
	"6.0.9": "76.0.3809.146",
	"6.0.10": "76.0.3809.146",
	"6.0.11": "76.0.3809.146",
	"6.0.12": "76.0.3809.146",
	"6.1.0": "76.0.3809.146",
	"6.1.1": "76.0.3809.146",
	"6.1.2": "76.0.3809.146",
	"6.1.3": "76.0.3809.146",
	"6.1.4": "76.0.3809.146",
	"6.1.5": "76.0.3809.146",
	"6.1.6": "76.0.3809.146",
	"6.1.7": "76.0.3809.146",
	"6.1.8": "76.0.3809.146",
	"6.1.9": "76.0.3809.146",
	"6.1.10": "76.0.3809.146",
	"6.1.11": "76.0.3809.146",
	"6.1.12": "76.0.3809.146",
	"7.0.0-beta.1": "78.0.3866.0",
	"7.0.0-beta.2": "78.0.3866.0",
	"7.0.0-beta.3": "78.0.3866.0",
	"7.0.0-beta.4": "78.0.3896.6",
	"7.0.0-beta.5": "78.0.3905.1",
	"7.0.0-beta.6": "78.0.3905.1",
	"7.0.0-beta.7": "78.0.3905.1",
	"7.0.0": "78.0.3905.1",
	"7.0.1": "78.0.3904.92",
	"7.1.0": "78.0.3904.94",
	"7.1.1": "78.0.3904.99",
	"7.1.2": "78.0.3904.113",
	"7.1.3": "78.0.3904.126",
	"7.1.4": "78.0.3904.130",
	"7.1.5": "78.0.3904.130",
	"7.1.6": "78.0.3904.130",
	"7.1.7": "78.0.3904.130",
	"7.1.8": "78.0.3904.130",
	"7.1.9": "78.0.3904.130",
	"7.1.10": "78.0.3904.130",
	"7.1.11": "78.0.3904.130",
	"7.1.12": "78.0.3904.130",
	"7.1.13": "78.0.3904.130",
	"7.1.14": "78.0.3904.130",
	"7.2.0": "78.0.3904.130",
	"7.2.1": "78.0.3904.130",
	"7.2.2": "78.0.3904.130",
	"7.2.3": "78.0.3904.130",
	"7.2.4": "78.0.3904.130",
	"7.3.0": "78.0.3904.130",
	"7.3.1": "78.0.3904.130",
	"7.3.2": "78.0.3904.130",
	"7.3.3": "78.0.3904.130",
	"8.0.0-beta.1": "79.0.3931.0",
	"8.0.0-beta.2": "79.0.3931.0",
	"8.0.0-beta.3": "80.0.3955.0",
	"8.0.0-beta.4": "80.0.3955.0",
	"8.0.0-beta.5": "80.0.3987.14",
	"8.0.0-beta.6": "80.0.3987.51",
	"8.0.0-beta.7": "80.0.3987.59",
	"8.0.0-beta.8": "80.0.3987.75",
	"8.0.0-beta.9": "80.0.3987.75",
	"8.0.0": "80.0.3987.86",
	"8.0.1": "80.0.3987.86",
	"8.0.2": "80.0.3987.86",
	"8.0.3": "80.0.3987.134",
	"8.1.0": "80.0.3987.137",
	"8.1.1": "80.0.3987.141",
	"8.2.0": "80.0.3987.158",
	"8.2.1": "80.0.3987.163",
	"8.2.2": "80.0.3987.163",
	"8.2.3": "80.0.3987.163",
	"8.2.4": "80.0.3987.165",
	"8.2.5": "80.0.3987.165",
	"8.3.0": "80.0.3987.165",
	"8.3.1": "80.0.3987.165",
	"8.3.2": "80.0.3987.165",
	"8.3.3": "80.0.3987.165",
	"8.3.4": "80.0.3987.165",
	"8.4.0": "80.0.3987.165",
	"8.4.1": "80.0.3987.165",
	"8.5.0": "80.0.3987.165",
	"8.5.1": "80.0.3987.165",
	"8.5.2": "80.0.3987.165",
	"8.5.3": "80.0.3987.163",
	"8.5.4": "80.0.3987.163",
	"8.5.5": "80.0.3987.163",
	"9.0.0-beta.1": "82.0.4048.0",
	"9.0.0-beta.2": "82.0.4048.0",
	"9.0.0-beta.3": "82.0.4048.0",
	"9.0.0-beta.4": "82.0.4048.0",
	"9.0.0-beta.5": "82.0.4048.0",
	"9.0.0-beta.6": "82.0.4058.2",
	"9.0.0-beta.7": "82.0.4058.2",
	"9.0.0-beta.9": "82.0.4058.2",
	"9.0.0-beta.10": "82.0.4085.10",
	"9.0.0-beta.11": "82.0.4085.14",
	"9.0.0-beta.12": "82.0.4085.14",
	"9.0.0-beta.13": "82.0.4085.14",
	"9.0.0-beta.14": "82.0.4085.27",
	"9.0.0-beta.15": "83.0.4102.3",
	"9.0.0-beta.16": "83.0.4102.3",
	"9.0.0-beta.17": "83.0.4103.14",
	"9.0.0-beta.18": "83.0.4103.16",
	"9.0.0-beta.19": "83.0.4103.24",
	"9.0.0-beta.20": "83.0.4103.26",
	"9.0.0-beta.21": "83.0.4103.26",
	"9.0.0-beta.22": "83.0.4103.34",
	"9.0.0-beta.23": "83.0.4103.44",
	"9.0.0-beta.24": "83.0.4103.45",
	"9.0.0": "83.0.4103.64",
	"9.0.1": "83.0.4103.94",
	"9.0.2": "83.0.4103.94",
	"9.0.3": "83.0.4103.100",
	"9.0.4": "83.0.4103.104",
	"9.0.5": "83.0.4103.119",
	"9.1.0": "83.0.4103.122",
	"9.1.1": "83.0.4103.122",
	"9.1.2": "83.0.4103.122",
	"9.2.0": "83.0.4103.122",
	"9.2.1": "83.0.4103.122",
	"9.3.0": "83.0.4103.122",
	"9.3.1": "83.0.4103.122",
	"9.3.2": "83.0.4103.122",
	"9.3.3": "83.0.4103.122",
	"9.3.4": "83.0.4103.122",
	"9.3.5": "83.0.4103.122",
	"9.4.0": "83.0.4103.122",
	"9.4.1": "83.0.4103.122",
	"9.4.2": "83.0.4103.122",
	"9.4.3": "83.0.4103.122",
	"9.4.4": "83.0.4103.122",
	"10.0.0-beta.1": "84.0.4129.0",
	"10.0.0-beta.2": "84.0.4129.0",
	"10.0.0-beta.3": "85.0.4161.2",
	"10.0.0-beta.4": "85.0.4161.2",
	"10.0.0-beta.8": "85.0.4181.1",
	"10.0.0-beta.9": "85.0.4181.1",
	"10.0.0-beta.10": "85.0.4183.19",
	"10.0.0-beta.11": "85.0.4183.20",
	"10.0.0-beta.12": "85.0.4183.26",
	"10.0.0-beta.13": "85.0.4183.39",
	"10.0.0-beta.14": "85.0.4183.39",
	"10.0.0-beta.15": "85.0.4183.39",
	"10.0.0-beta.17": "85.0.4183.39",
	"10.0.0-beta.19": "85.0.4183.39",
	"10.0.0-beta.20": "85.0.4183.39",
	"10.0.0-beta.21": "85.0.4183.39",
	"10.0.0-beta.23": "85.0.4183.70",
	"10.0.0-beta.24": "85.0.4183.78",
	"10.0.0-beta.25": "85.0.4183.80",
	"10.0.0": "85.0.4183.84",
	"10.0.1": "85.0.4183.86",
	"10.1.0": "85.0.4183.87",
	"10.1.1": "85.0.4183.93",
	"10.1.2": "85.0.4183.98",
	"10.1.3": "85.0.4183.121",
	"10.1.4": "85.0.4183.121",
	"10.1.5": "85.0.4183.121",
	"10.1.6": "85.0.4183.121",
	"10.1.7": "85.0.4183.121",
	"10.2.0": "85.0.4183.121",
	"10.3.0": "85.0.4183.121",
	"10.3.1": "85.0.4183.121",
	"10.3.2": "85.0.4183.121",
	"10.4.0": "85.0.4183.121",
	"10.4.1": "85.0.4183.121",
	"10.4.2": "85.0.4183.121",
	"10.4.3": "85.0.4183.121",
	"10.4.4": "85.0.4183.121",
	"10.4.5": "85.0.4183.121",
	"10.4.6": "85.0.4183.121",
	"10.4.7": "85.0.4183.121",
	"11.0.0-beta.1": "86.0.4234.0",
	"11.0.0-beta.3": "86.0.4234.0",
	"11.0.0-beta.4": "86.0.4234.0",
	"11.0.0-beta.5": "86.0.4234.0",
	"11.0.0-beta.6": "86.0.4234.0",
	"11.0.0-beta.7": "86.0.4234.0",
	"11.0.0-beta.8": "87.0.4251.1",
	"11.0.0-beta.9": "87.0.4251.1",
	"11.0.0-beta.11": "87.0.4251.1",
	"11.0.0-beta.12": "87.0.4280.11",
	"11.0.0-beta.13": "87.0.4280.11",
	"11.0.0-beta.16": "87.0.4280.27",
	"11.0.0-beta.17": "87.0.4280.27",
	"11.0.0-beta.18": "87.0.4280.27",
	"11.0.0-beta.19": "87.0.4280.27",
	"11.0.0-beta.20": "87.0.4280.40",
	"11.0.0-beta.22": "87.0.4280.47",
	"11.0.0-beta.23": "87.0.4280.47",
	"11.0.0": "87.0.4280.60",
	"11.0.1": "87.0.4280.60",
	"11.0.2": "87.0.4280.67",
	"11.0.3": "87.0.4280.67",
	"11.0.4": "87.0.4280.67",
	"11.0.5": "87.0.4280.88",
	"11.1.0": "87.0.4280.88",
	"11.1.1": "87.0.4280.88",
	"11.2.0": "87.0.4280.141",
	"11.2.1": "87.0.4280.141",
	"11.2.2": "87.0.4280.141",
	"11.2.3": "87.0.4280.141",
	"11.3.0": "87.0.4280.141",
	"11.4.0": "87.0.4280.141",
	"11.4.1": "87.0.4280.141",
	"11.4.2": "87.0.4280.141",
	"11.4.3": "87.0.4280.141",
	"11.4.4": "87.0.4280.141",
	"11.4.5": "87.0.4280.141",
	"11.4.6": "87.0.4280.141",
	"11.4.7": "87.0.4280.141",
	"11.4.8": "87.0.4280.141",
	"11.4.9": "87.0.4280.141",
	"11.4.10": "87.0.4280.141",
	"11.4.11": "87.0.4280.141",
	"11.4.12": "87.0.4280.141",
	"11.5.0": "87.0.4280.141",
	"12.0.0-beta.1": "89.0.4328.0",
	"12.0.0-beta.3": "89.0.4328.0",
	"12.0.0-beta.4": "89.0.4328.0",
	"12.0.0-beta.5": "89.0.4328.0",
	"12.0.0-beta.6": "89.0.4328.0",
	"12.0.0-beta.7": "89.0.4328.0",
	"12.0.0-beta.8": "89.0.4328.0",
	"12.0.0-beta.9": "89.0.4328.0",
	"12.0.0-beta.10": "89.0.4328.0",
	"12.0.0-beta.11": "89.0.4328.0",
	"12.0.0-beta.12": "89.0.4328.0",
	"12.0.0-beta.14": "89.0.4328.0",
	"12.0.0-beta.16": "89.0.4348.1",
	"12.0.0-beta.18": "89.0.4348.1",
	"12.0.0-beta.19": "89.0.4348.1",
	"12.0.0-beta.20": "89.0.4348.1",
	"12.0.0-beta.21": "89.0.4388.2",
	"12.0.0-beta.22": "89.0.4388.2",
	"12.0.0-beta.23": "89.0.4388.2",
	"12.0.0-beta.24": "89.0.4388.2",
	"12.0.0-beta.25": "89.0.4388.2",
	"12.0.0-beta.26": "89.0.4388.2",
	"12.0.0-beta.27": "89.0.4389.23",
	"12.0.0-beta.28": "89.0.4389.23",
	"12.0.0-beta.29": "89.0.4389.23",
	"12.0.0-beta.30": "89.0.4389.58",
	"12.0.0-beta.31": "89.0.4389.58",
	"12.0.0": "89.0.4389.69",
	"12.0.1": "89.0.4389.82",
	"12.0.2": "89.0.4389.90",
	"12.0.3": "89.0.4389.114",
	"12.0.4": "89.0.4389.114",
	"12.0.5": "89.0.4389.128",
	"12.0.6": "89.0.4389.128",
	"12.0.7": "89.0.4389.128",
	"12.0.8": "89.0.4389.128",
	"12.0.9": "89.0.4389.128",
	"12.0.10": "89.0.4389.128",
	"12.0.11": "89.0.4389.128",
	"12.0.12": "89.0.4389.128",
	"12.0.13": "89.0.4389.128",
	"12.0.14": "89.0.4389.128",
	"12.0.15": "89.0.4389.128",
	"12.0.16": "89.0.4389.128",
	"12.0.17": "89.0.4389.128",
	"12.0.18": "89.0.4389.128",
	"12.1.0": "89.0.4389.128",
	"12.1.1": "89.0.4389.128",
	"12.1.2": "89.0.4389.128",
	"12.2.0": "89.0.4389.128",
	"12.2.1": "89.0.4389.128",
	"12.2.2": "89.0.4389.128",
	"12.2.3": "89.0.4389.128",
	"13.0.0-beta.2": "90.0.4402.0",
	"13.0.0-beta.3": "90.0.4402.0",
	"13.0.0-beta.4": "90.0.4415.0",
	"13.0.0-beta.5": "90.0.4415.0",
	"13.0.0-beta.6": "90.0.4415.0",
	"13.0.0-beta.7": "90.0.4415.0",
	"13.0.0-beta.8": "90.0.4415.0",
	"13.0.0-beta.9": "90.0.4415.0",
	"13.0.0-beta.10": "90.0.4415.0",
	"13.0.0-beta.11": "90.0.4415.0",
	"13.0.0-beta.12": "90.0.4415.0",
	"13.0.0-beta.13": "90.0.4415.0",
	"13.0.0-beta.14": "91.0.4448.0",
	"13.0.0-beta.16": "91.0.4448.0",
	"13.0.0-beta.17": "91.0.4448.0",
	"13.0.0-beta.18": "91.0.4448.0",
	"13.0.0-beta.20": "91.0.4448.0",
	"13.0.0-beta.21": "91.0.4472.33",
	"13.0.0-beta.22": "91.0.4472.33",
	"13.0.0-beta.23": "91.0.4472.33",
	"13.0.0-beta.24": "91.0.4472.38",
	"13.0.0-beta.25": "91.0.4472.38",
	"13.0.0-beta.26": "91.0.4472.38",
	"13.0.0-beta.27": "91.0.4472.38",
	"13.0.0-beta.28": "91.0.4472.38",
	"13.0.0": "91.0.4472.69",
	"13.0.1": "91.0.4472.69",
	"13.1.0": "91.0.4472.77",
	"13.1.1": "91.0.4472.77",
	"13.1.2": "91.0.4472.77",
	"13.1.3": "91.0.4472.106",
	"13.1.4": "91.0.4472.106",
	"13.1.5": "91.0.4472.124",
	"13.1.6": "91.0.4472.124",
	"13.1.7": "91.0.4472.124",
	"13.1.8": "91.0.4472.164",
	"13.1.9": "91.0.4472.164",
	"13.2.0": "91.0.4472.164",
	"13.2.1": "91.0.4472.164",
	"13.2.2": "91.0.4472.164",
	"13.2.3": "91.0.4472.164",
	"13.3.0": "91.0.4472.164",
	"13.4.0": "91.0.4472.164",
	"13.5.0": "91.0.4472.164",
	"13.5.1": "91.0.4472.164",
	"13.5.2": "91.0.4472.164",
	"13.6.0": "91.0.4472.164",
	"13.6.1": "91.0.4472.164",
	"13.6.2": "91.0.4472.164",
	"13.6.3": "91.0.4472.164",
	"13.6.6": "91.0.4472.164",
	"13.6.7": "91.0.4472.164",
	"13.6.8": "91.0.4472.164",
	"13.6.9": "91.0.4472.164",
	"14.0.0-beta.1": "92.0.4511.0",
	"14.0.0-beta.2": "92.0.4511.0",
	"14.0.0-beta.3": "92.0.4511.0",
	"14.0.0-beta.5": "93.0.4536.0",
	"14.0.0-beta.6": "93.0.4536.0",
	"14.0.0-beta.7": "93.0.4536.0",
	"14.0.0-beta.8": "93.0.4536.0",
	"14.0.0-beta.9": "93.0.4539.0",
	"14.0.0-beta.10": "93.0.4539.0",
	"14.0.0-beta.11": "93.0.4557.4",
	"14.0.0-beta.12": "93.0.4557.4",
	"14.0.0-beta.13": "93.0.4566.0",
	"14.0.0-beta.14": "93.0.4566.0",
	"14.0.0-beta.15": "93.0.4566.0",
	"14.0.0-beta.16": "93.0.4566.0",
	"14.0.0-beta.17": "93.0.4566.0",
	"14.0.0-beta.18": "93.0.4577.15",
	"14.0.0-beta.19": "93.0.4577.15",
	"14.0.0-beta.20": "93.0.4577.15",
	"14.0.0-beta.21": "93.0.4577.15",
	"14.0.0-beta.22": "93.0.4577.25",
	"14.0.0-beta.23": "93.0.4577.25",
	"14.0.0-beta.24": "93.0.4577.51",
	"14.0.0-beta.25": "93.0.4577.51",
	"14.0.0": "93.0.4577.58",
	"14.0.1": "93.0.4577.63",
	"14.0.2": "93.0.4577.82",
	"14.1.0": "93.0.4577.82",
	"14.1.1": "93.0.4577.82",
	"14.2.0": "93.0.4577.82",
	"14.2.1": "93.0.4577.82",
	"14.2.2": "93.0.4577.82",
	"14.2.3": "93.0.4577.82",
	"14.2.4": "93.0.4577.82",
	"14.2.5": "93.0.4577.82",
	"14.2.6": "93.0.4577.82",
	"14.2.7": "93.0.4577.82",
	"14.2.8": "93.0.4577.82",
	"14.2.9": "93.0.4577.82",
	"15.0.0-alpha.1": "93.0.4566.0",
	"15.0.0-alpha.2": "93.0.4566.0",
	"15.0.0-alpha.3": "94.0.4584.0",
	"15.0.0-alpha.4": "94.0.4584.0",
	"15.0.0-alpha.5": "94.0.4584.0",
	"15.0.0-alpha.6": "94.0.4584.0",
	"15.0.0-alpha.7": "94.0.4590.2",
	"15.0.0-alpha.8": "94.0.4590.2",
	"15.0.0-alpha.9": "94.0.4590.2",
	"15.0.0-alpha.10": "94.0.4606.12",
	"15.0.0-beta.1": "94.0.4606.20",
	"15.0.0-beta.2": "94.0.4606.20",
	"15.0.0-beta.3": "94.0.4606.31",
	"15.0.0-beta.4": "94.0.4606.31",
	"15.0.0-beta.5": "94.0.4606.31",
	"15.0.0-beta.6": "94.0.4606.31",
	"15.0.0-beta.7": "94.0.4606.31",
	"15.0.0": "94.0.4606.51",
	"15.1.0": "94.0.4606.61",
	"15.1.1": "94.0.4606.61",
	"15.1.2": "94.0.4606.71",
	"15.2.0": "94.0.4606.81",
	"15.3.0": "94.0.4606.81",
	"15.3.1": "94.0.4606.81",
	"15.3.2": "94.0.4606.81",
	"15.3.3": "94.0.4606.81",
	"15.3.4": "94.0.4606.81",
	"15.3.5": "94.0.4606.81",
	"15.3.6": "94.0.4606.81",
	"15.3.7": "94.0.4606.81",
	"15.4.0": "94.0.4606.81",
	"15.4.1": "94.0.4606.81",
	"15.4.2": "94.0.4606.81",
	"15.5.0": "94.0.4606.81",
	"15.5.1": "94.0.4606.81",
	"15.5.2": "94.0.4606.81",
	"15.5.3": "94.0.4606.81",
	"15.5.4": "94.0.4606.81",
	"15.5.5": "94.0.4606.81",
	"15.5.6": "94.0.4606.81",
	"15.5.7": "94.0.4606.81",
	"16.0.0-alpha.1": "95.0.4629.0",
	"16.0.0-alpha.2": "95.0.4629.0",
	"16.0.0-alpha.3": "95.0.4629.0",
	"16.0.0-alpha.4": "95.0.4629.0",
	"16.0.0-alpha.5": "95.0.4629.0",
	"16.0.0-alpha.6": "95.0.4629.0",
	"16.0.0-alpha.7": "95.0.4629.0",
	"16.0.0-alpha.8": "96.0.4647.0",
	"16.0.0-alpha.9": "96.0.4647.0",
	"16.0.0-beta.1": "96.0.4647.0",
	"16.0.0-beta.2": "96.0.4647.0",
	"16.0.0-beta.3": "96.0.4647.0",
	"16.0.0-beta.4": "96.0.4664.18",
	"16.0.0-beta.5": "96.0.4664.18",
	"16.0.0-beta.6": "96.0.4664.27",
	"16.0.0-beta.7": "96.0.4664.27",
	"16.0.0-beta.8": "96.0.4664.35",
	"16.0.0-beta.9": "96.0.4664.35",
	"16.0.0": "96.0.4664.45",
	"16.0.1": "96.0.4664.45",
	"16.0.2": "96.0.4664.55",
	"16.0.3": "96.0.4664.55",
	"16.0.4": "96.0.4664.55",
	"16.0.5": "96.0.4664.55",
	"16.0.6": "96.0.4664.110",
	"16.0.7": "96.0.4664.110",
	"16.0.8": "96.0.4664.110",
	"16.0.9": "96.0.4664.174",
	"16.0.10": "96.0.4664.174",
	"16.1.0": "96.0.4664.174",
	"16.1.1": "96.0.4664.174",
	"16.2.0": "96.0.4664.174",
	"16.2.1": "96.0.4664.174",
	"16.2.2": "96.0.4664.174",
	"16.2.3": "96.0.4664.174",
	"16.2.4": "96.0.4664.174",
	"16.2.5": "96.0.4664.174",
	"16.2.6": "96.0.4664.174",
	"16.2.7": "96.0.4664.174",
	"16.2.8": "96.0.4664.174",
	"17.0.0-alpha.1": "96.0.4664.4",
	"17.0.0-alpha.2": "96.0.4664.4",
	"17.0.0-alpha.3": "96.0.4664.4",
	"17.0.0-alpha.4": "98.0.4706.0",
	"17.0.0-alpha.5": "98.0.4706.0",
	"17.0.0-alpha.6": "98.0.4706.0",
	"17.0.0-beta.1": "98.0.4706.0",
	"17.0.0-beta.2": "98.0.4706.0",
	"17.0.0-beta.3": "98.0.4758.9",
	"17.0.0-beta.4": "98.0.4758.11",
	"17.0.0-beta.5": "98.0.4758.11",
	"17.0.0-beta.6": "98.0.4758.11",
	"17.0.0-beta.7": "98.0.4758.11",
	"17.0.0-beta.8": "98.0.4758.11",
	"17.0.0-beta.9": "98.0.4758.11",
	"17.0.0": "98.0.4758.74",
	"17.0.1": "98.0.4758.82",
	"17.1.0": "98.0.4758.102",
	"17.1.1": "98.0.4758.109",
	"17.1.2": "98.0.4758.109",
	"17.2.0": "98.0.4758.109",
	"17.3.0": "98.0.4758.141",
	"17.3.1": "98.0.4758.141",
	"17.4.0": "98.0.4758.141",
	"17.4.1": "98.0.4758.141",
	"17.4.2": "98.0.4758.141",
	"17.4.3": "98.0.4758.141",
	"17.4.4": "98.0.4758.141",
	"17.4.5": "98.0.4758.141",
	"17.4.6": "98.0.4758.141",
	"17.4.7": "98.0.4758.141",
	"17.4.8": "98.0.4758.141",
	"17.4.9": "98.0.4758.141",
	"17.4.10": "98.0.4758.141",
	"17.4.11": "98.0.4758.141",
	"18.0.0-alpha.1": "99.0.4767.0",
	"18.0.0-alpha.2": "99.0.4767.0",
	"18.0.0-alpha.3": "99.0.4767.0",
	"18.0.0-alpha.4": "99.0.4767.0",
	"18.0.0-alpha.5": "99.0.4767.0",
	"18.0.0-beta.1": "100.0.4894.0",
	"18.0.0-beta.2": "100.0.4894.0",
	"18.0.0-beta.3": "100.0.4894.0",
	"18.0.0-beta.4": "100.0.4894.0",
	"18.0.0-beta.5": "100.0.4894.0",
	"18.0.0-beta.6": "100.0.4894.0",
	"18.0.0": "100.0.4896.56",
	"18.0.1": "100.0.4896.60",
	"18.0.2": "100.0.4896.60",
	"18.0.3": "100.0.4896.75",
	"18.0.4": "100.0.4896.75",
	"18.1.0": "100.0.4896.127",
	"18.2.0": "100.0.4896.143",
	"18.2.1": "100.0.4896.143",
	"18.2.2": "100.0.4896.143",
	"18.2.3": "100.0.4896.143",
	"18.2.4": "100.0.4896.160",
	"18.3.0": "100.0.4896.160",
	"18.3.1": "100.0.4896.160",
	"18.3.2": "100.0.4896.160",
	"18.3.3": "100.0.4896.160",
	"18.3.4": "100.0.4896.160",
	"18.3.5": "100.0.4896.160",
	"18.3.6": "100.0.4896.160",
	"18.3.7": "100.0.4896.160",
	"18.3.8": "100.0.4896.160",
	"18.3.9": "100.0.4896.160",
	"18.3.11": "100.0.4896.160",
	"18.3.12": "100.0.4896.160",
	"18.3.13": "100.0.4896.160",
	"18.3.14": "100.0.4896.160",
	"18.3.15": "100.0.4896.160",
	"19.0.0-alpha.1": "102.0.4962.3",
	"19.0.0-alpha.2": "102.0.4971.0",
	"19.0.0-alpha.3": "102.0.4971.0",
	"19.0.0-alpha.4": "102.0.4989.0",
	"19.0.0-alpha.5": "102.0.4989.0",
	"19.0.0-beta.1": "102.0.4999.0",
	"19.0.0-beta.2": "102.0.4999.0",
	"19.0.0-beta.3": "102.0.4999.0",
	"19.0.0-beta.4": "102.0.5005.27",
	"19.0.0-beta.5": "102.0.5005.40",
	"19.0.0-beta.6": "102.0.5005.40",
	"19.0.0-beta.7": "102.0.5005.40",
	"19.0.0-beta.8": "102.0.5005.49",
	"19.0.0": "102.0.5005.61",
	"19.0.1": "102.0.5005.61",
	"19.0.2": "102.0.5005.63",
	"19.0.3": "102.0.5005.63",
	"19.0.4": "102.0.5005.63",
	"19.0.5": "102.0.5005.115",
	"19.0.6": "102.0.5005.115",
	"19.0.7": "102.0.5005.134",
	"19.0.8": "102.0.5005.148",
	"19.0.9": "102.0.5005.167",
	"19.0.10": "102.0.5005.167",
	"19.0.11": "102.0.5005.167",
	"19.0.12": "102.0.5005.167",
	"19.0.13": "102.0.5005.167",
	"19.0.14": "102.0.5005.167",
	"19.0.15": "102.0.5005.167",
	"19.0.16": "102.0.5005.167",
	"19.0.17": "102.0.5005.167",
	"19.1.0": "102.0.5005.167",
	"19.1.1": "102.0.5005.167",
	"19.1.2": "102.0.5005.167",
	"19.1.3": "102.0.5005.167",
	"19.1.4": "102.0.5005.167",
	"19.1.5": "102.0.5005.167",
	"19.1.6": "102.0.5005.167",
	"19.1.7": "102.0.5005.167",
	"19.1.8": "102.0.5005.167",
	"19.1.9": "102.0.5005.167",
	"20.0.0-alpha.1": "103.0.5044.0",
	"20.0.0-alpha.2": "104.0.5073.0",
	"20.0.0-alpha.3": "104.0.5073.0",
	"20.0.0-alpha.4": "104.0.5073.0",
	"20.0.0-alpha.5": "104.0.5073.0",
	"20.0.0-alpha.6": "104.0.5073.0",
	"20.0.0-alpha.7": "104.0.5073.0",
	"20.0.0-beta.1": "104.0.5073.0",
	"20.0.0-beta.2": "104.0.5073.0",
	"20.0.0-beta.3": "104.0.5073.0",
	"20.0.0-beta.4": "104.0.5073.0",
	"20.0.0-beta.5": "104.0.5073.0",
	"20.0.0-beta.6": "104.0.5073.0",
	"20.0.0-beta.7": "104.0.5073.0",
	"20.0.0-beta.8": "104.0.5073.0",
	"20.0.0-beta.9": "104.0.5112.39",
	"20.0.0-beta.10": "104.0.5112.48",
	"20.0.0-beta.11": "104.0.5112.48",
	"20.0.0-beta.12": "104.0.5112.48",
	"20.0.0-beta.13": "104.0.5112.57",
	"20.0.0": "104.0.5112.65",
	"20.0.1": "104.0.5112.81",
	"20.0.2": "104.0.5112.81",
	"20.0.3": "104.0.5112.81",
	"20.1.0": "104.0.5112.102",
	"20.1.1": "104.0.5112.102",
	"20.1.2": "104.0.5112.114",
	"20.1.3": "104.0.5112.114",
	"20.1.4": "104.0.5112.114",
	"20.2.0": "104.0.5112.124",
	"20.3.0": "104.0.5112.124",
	"20.3.1": "104.0.5112.124",
	"20.3.2": "104.0.5112.124",
	"20.3.3": "104.0.5112.124",
	"20.3.4": "104.0.5112.124",
	"20.3.5": "104.0.5112.124",
	"20.3.6": "104.0.5112.124",
	"20.3.7": "104.0.5112.124",
	"20.3.8": "104.0.5112.124",
	"20.3.9": "104.0.5112.124",
	"20.3.10": "104.0.5112.124",
	"20.3.11": "104.0.5112.124",
	"20.3.12": "104.0.5112.124",
	"21.0.0-alpha.1": "105.0.5187.0",
	"21.0.0-alpha.2": "105.0.5187.0",
	"21.0.0-alpha.3": "105.0.5187.0",
	"21.0.0-alpha.4": "105.0.5187.0",
	"21.0.0-alpha.5": "105.0.5187.0",
	"21.0.0-alpha.6": "106.0.5216.0",
	"21.0.0-beta.1": "106.0.5216.0",
	"21.0.0-beta.2": "106.0.5216.0",
	"21.0.0-beta.3": "106.0.5216.0",
	"21.0.0-beta.4": "106.0.5216.0",
	"21.0.0-beta.5": "106.0.5216.0",
	"21.0.0-beta.6": "106.0.5249.40",
	"21.0.0-beta.7": "106.0.5249.40",
	"21.0.0-beta.8": "106.0.5249.40",
	"21.0.0": "106.0.5249.51",
	"21.0.1": "106.0.5249.61",
	"21.1.0": "106.0.5249.91",
	"21.1.1": "106.0.5249.103",
	"21.2.0": "106.0.5249.119",
	"21.2.1": "106.0.5249.165",
	"21.2.2": "106.0.5249.168",
	"21.2.3": "106.0.5249.168",
	"21.3.0": "106.0.5249.181",
	"21.3.1": "106.0.5249.181",
	"21.3.3": "106.0.5249.199",
	"21.3.4": "106.0.5249.199",
	"21.3.5": "106.0.5249.199",
	"21.4.0": "106.0.5249.199",
	"21.4.1": "106.0.5249.199",
	"21.4.2": "106.0.5249.199",
	"21.4.3": "106.0.5249.199",
	"21.4.4": "106.0.5249.199",
	"22.0.0-alpha.1": "107.0.5286.0",
	"22.0.0-alpha.3": "108.0.5329.0",
	"22.0.0-alpha.4": "108.0.5329.0",
	"22.0.0-alpha.5": "108.0.5329.0",
	"22.0.0-alpha.6": "108.0.5329.0",
	"22.0.0-alpha.7": "108.0.5355.0",
	"22.0.0-alpha.8": "108.0.5359.10",
	"22.0.0-beta.1": "108.0.5359.10",
	"22.0.0-beta.2": "108.0.5359.10",
	"22.0.0-beta.3": "108.0.5359.10",
	"22.0.0-beta.4": "108.0.5359.29",
	"22.0.0-beta.5": "108.0.5359.40",
	"22.0.0-beta.6": "108.0.5359.40",
	"22.0.0-beta.7": "108.0.5359.48",
	"22.0.0-beta.8": "108.0.5359.48",
	"22.0.0": "108.0.5359.62",
	"22.0.1": "108.0.5359.125",
	"22.0.2": "108.0.5359.179",
	"22.0.3": "108.0.5359.179",
	"22.1.0": "108.0.5359.179",
	"22.2.0": "108.0.5359.215",
	"22.2.1": "108.0.5359.215",
	"22.3.0": "108.0.5359.215",
	"22.3.1": "108.0.5359.215",
	"22.3.2": "108.0.5359.215",
	"22.3.3": "108.0.5359.215",
	"22.3.4": "108.0.5359.215",
	"22.3.5": "108.0.5359.215",
	"22.3.6": "108.0.5359.215",
	"22.3.7": "108.0.5359.215",
	"22.3.8": "108.0.5359.215",
	"22.3.9": "108.0.5359.215",
	"22.3.10": "108.0.5359.215",
	"22.3.11": "108.0.5359.215",
	"22.3.12": "108.0.5359.215",
	"22.3.13": "108.0.5359.215",
	"22.3.14": "108.0.5359.215",
	"22.3.15": "108.0.5359.215",
	"22.3.16": "108.0.5359.215",
	"22.3.17": "108.0.5359.215",
	"22.3.18": "108.0.5359.215",
	"22.3.20": "108.0.5359.215",
	"22.3.21": "108.0.5359.215",
	"22.3.22": "108.0.5359.215",
	"22.3.23": "108.0.5359.215",
	"22.3.24": "108.0.5359.215",
	"22.3.25": "108.0.5359.215",
	"22.3.26": "108.0.5359.215",
	"22.3.27": "108.0.5359.215",
	"23.0.0-alpha.1": "110.0.5415.0",
	"23.0.0-alpha.2": "110.0.5451.0",
	"23.0.0-alpha.3": "110.0.5451.0",
	"23.0.0-beta.1": "110.0.5478.5",
	"23.0.0-beta.2": "110.0.5478.5",
	"23.0.0-beta.3": "110.0.5478.5",
	"23.0.0-beta.4": "110.0.5481.30",
	"23.0.0-beta.5": "110.0.5481.38",
	"23.0.0-beta.6": "110.0.5481.52",
	"23.0.0-beta.8": "110.0.5481.52",
	"23.0.0": "110.0.5481.77",
	"23.1.0": "110.0.5481.100",
	"23.1.1": "110.0.5481.104",
	"23.1.2": "110.0.5481.177",
	"23.1.3": "110.0.5481.179",
	"23.1.4": "110.0.5481.192",
	"23.2.0": "110.0.5481.192",
	"23.2.1": "110.0.5481.208",
	"23.2.2": "110.0.5481.208",
	"23.2.3": "110.0.5481.208",
	"23.2.4": "110.0.5481.208",
	"23.3.0": "110.0.5481.208",
	"23.3.1": "110.0.5481.208",
	"23.3.2": "110.0.5481.208",
	"23.3.3": "110.0.5481.208",
	"23.3.4": "110.0.5481.208",
	"23.3.5": "110.0.5481.208",
	"23.3.6": "110.0.5481.208",
	"23.3.7": "110.0.5481.208",
	"23.3.8": "110.0.5481.208",
	"23.3.9": "110.0.5481.208",
	"23.3.10": "110.0.5481.208",
	"23.3.11": "110.0.5481.208",
	"23.3.12": "110.0.5481.208",
	"23.3.13": "110.0.5481.208",
	"24.0.0-alpha.1": "111.0.5560.0",
	"24.0.0-alpha.2": "111.0.5560.0",
	"24.0.0-alpha.3": "111.0.5560.0",
	"24.0.0-alpha.4": "111.0.5560.0",
	"24.0.0-alpha.5": "111.0.5560.0",
	"24.0.0-alpha.6": "111.0.5560.0",
	"24.0.0-alpha.7": "111.0.5560.0",
	"24.0.0-beta.1": "111.0.5563.50",
	"24.0.0-beta.2": "111.0.5563.50",
	"24.0.0-beta.3": "112.0.5615.20",
	"24.0.0-beta.4": "112.0.5615.20",
	"24.0.0-beta.5": "112.0.5615.29",
	"24.0.0-beta.6": "112.0.5615.39",
	"24.0.0-beta.7": "112.0.5615.39",
	"24.0.0": "112.0.5615.49",
	"24.1.0": "112.0.5615.50",
	"24.1.1": "112.0.5615.50",
	"24.1.2": "112.0.5615.87",
	"24.1.3": "112.0.5615.165",
	"24.2.0": "112.0.5615.165",
	"24.3.0": "112.0.5615.165",
	"24.3.1": "112.0.5615.183",
	"24.4.0": "112.0.5615.204",
	"24.4.1": "112.0.5615.204",
	"24.5.0": "112.0.5615.204",
	"24.5.1": "112.0.5615.204",
	"24.6.0": "112.0.5615.204",
	"24.6.1": "112.0.5615.204",
	"24.6.2": "112.0.5615.204",
	"24.6.3": "112.0.5615.204",
	"24.6.4": "112.0.5615.204",
	"24.6.5": "112.0.5615.204",
	"24.7.0": "112.0.5615.204",
	"24.7.1": "112.0.5615.204",
	"24.8.0": "112.0.5615.204",
	"24.8.1": "112.0.5615.204",
	"24.8.2": "112.0.5615.204",
	"24.8.3": "112.0.5615.204",
	"24.8.4": "112.0.5615.204",
	"24.8.5": "112.0.5615.204",
	"24.8.6": "112.0.5615.204",
	"24.8.7": "112.0.5615.204",
	"24.8.8": "112.0.5615.204",
	"25.0.0-alpha.1": "114.0.5694.0",
	"25.0.0-alpha.2": "114.0.5694.0",
	"25.0.0-alpha.3": "114.0.5710.0",
	"25.0.0-alpha.4": "114.0.5710.0",
	"25.0.0-alpha.5": "114.0.5719.0",
	"25.0.0-alpha.6": "114.0.5719.0",
	"25.0.0-beta.1": "114.0.5719.0",
	"25.0.0-beta.2": "114.0.5719.0",
	"25.0.0-beta.3": "114.0.5719.0",
	"25.0.0-beta.4": "114.0.5735.16",
	"25.0.0-beta.5": "114.0.5735.16",
	"25.0.0-beta.6": "114.0.5735.16",
	"25.0.0-beta.7": "114.0.5735.16",
	"25.0.0-beta.8": "114.0.5735.35",
	"25.0.0-beta.9": "114.0.5735.45",
	"25.0.0": "114.0.5735.45",
	"25.0.1": "114.0.5735.45",
	"25.1.0": "114.0.5735.106",
	"25.1.1": "114.0.5735.106",
	"25.2.0": "114.0.5735.134",
	"25.3.0": "114.0.5735.199",
	"25.3.1": "114.0.5735.243",
	"25.3.2": "114.0.5735.248",
	"25.4.0": "114.0.5735.248",
	"25.5.0": "114.0.5735.289",
	"25.6.0": "114.0.5735.289",
	"25.7.0": "114.0.5735.289",
	"25.8.0": "114.0.5735.289",
	"25.8.1": "114.0.5735.289",
	"25.8.2": "114.0.5735.289",
	"25.8.3": "114.0.5735.289",
	"25.8.4": "114.0.5735.289",
	"25.9.0": "114.0.5735.289",
	"25.9.1": "114.0.5735.289",
	"25.9.2": "114.0.5735.289",
	"25.9.3": "114.0.5735.289",
	"25.9.4": "114.0.5735.289",
	"25.9.5": "114.0.5735.289",
	"25.9.6": "114.0.5735.289",
	"25.9.7": "114.0.5735.289",
	"25.9.8": "114.0.5735.289",
	"26.0.0-alpha.1": "116.0.5791.0",
	"26.0.0-alpha.2": "116.0.5791.0",
	"26.0.0-alpha.3": "116.0.5791.0",
	"26.0.0-alpha.4": "116.0.5791.0",
	"26.0.0-alpha.5": "116.0.5791.0",
	"26.0.0-alpha.6": "116.0.5815.0",
	"26.0.0-alpha.7": "116.0.5831.0",
	"26.0.0-alpha.8": "116.0.5845.0",
	"26.0.0-beta.1": "116.0.5845.0",
	"26.0.0-beta.2": "116.0.5845.14",
	"26.0.0-beta.3": "116.0.5845.14",
	"26.0.0-beta.4": "116.0.5845.14",
	"26.0.0-beta.5": "116.0.5845.14",
	"26.0.0-beta.6": "116.0.5845.14",
	"26.0.0-beta.7": "116.0.5845.14",
	"26.0.0-beta.8": "116.0.5845.42",
	"26.0.0-beta.9": "116.0.5845.42",
	"26.0.0-beta.10": "116.0.5845.49",
	"26.0.0-beta.11": "116.0.5845.49",
	"26.0.0-beta.12": "116.0.5845.62",
	"26.0.0": "116.0.5845.82",
	"26.1.0": "116.0.5845.97",
	"26.2.0": "116.0.5845.179",
	"26.2.1": "116.0.5845.188",
	"26.2.2": "116.0.5845.190",
	"26.2.3": "116.0.5845.190",
	"26.2.4": "116.0.5845.190",
	"26.3.0": "116.0.5845.228",
	"26.4.0": "116.0.5845.228",
	"26.4.1": "116.0.5845.228",
	"26.4.2": "116.0.5845.228",
	"26.4.3": "116.0.5845.228",
	"26.5.0": "116.0.5845.228",
	"26.6.0": "116.0.5845.228",
	"26.6.1": "116.0.5845.228",
	"26.6.2": "116.0.5845.228",
	"26.6.3": "116.0.5845.228",
	"26.6.4": "116.0.5845.228",
	"26.6.5": "116.0.5845.228",
	"26.6.6": "116.0.5845.228",
	"26.6.7": "116.0.5845.228",
	"26.6.8": "116.0.5845.228",
	"26.6.9": "116.0.5845.228",
	"26.6.10": "116.0.5845.228",
	"27.0.0-alpha.1": "118.0.5949.0",
	"27.0.0-alpha.2": "118.0.5949.0",
	"27.0.0-alpha.3": "118.0.5949.0",
	"27.0.0-alpha.4": "118.0.5949.0",
	"27.0.0-alpha.5": "118.0.5949.0",
	"27.0.0-alpha.6": "118.0.5949.0",
	"27.0.0-beta.1": "118.0.5993.5",
	"27.0.0-beta.2": "118.0.5993.5",
	"27.0.0-beta.3": "118.0.5993.5",
	"27.0.0-beta.4": "118.0.5993.11",
	"27.0.0-beta.5": "118.0.5993.18",
	"27.0.0-beta.6": "118.0.5993.18",
	"27.0.0-beta.7": "118.0.5993.18",
	"27.0.0-beta.8": "118.0.5993.18",
	"27.0.0-beta.9": "118.0.5993.18",
	"27.0.0": "118.0.5993.54",
	"27.0.1": "118.0.5993.89",
	"27.0.2": "118.0.5993.89",
	"27.0.3": "118.0.5993.120",
	"27.0.4": "118.0.5993.129",
	"27.1.0": "118.0.5993.144",
	"27.1.2": "118.0.5993.144",
	"27.1.3": "118.0.5993.159",
	"27.2.0": "118.0.5993.159",
	"27.2.1": "118.0.5993.159",
	"27.2.2": "118.0.5993.159",
	"27.2.3": "118.0.5993.159",
	"27.2.4": "118.0.5993.159",
	"27.3.0": "118.0.5993.159",
	"27.3.1": "118.0.5993.159",
	"27.3.2": "118.0.5993.159",
	"27.3.3": "118.0.5993.159",
	"27.3.4": "118.0.5993.159",
	"27.3.5": "118.0.5993.159",
	"27.3.6": "118.0.5993.159",
	"27.3.7": "118.0.5993.159",
	"27.3.8": "118.0.5993.159",
	"27.3.9": "118.0.5993.159",
	"27.3.10": "118.0.5993.159",
	"27.3.11": "118.0.5993.159",
	"28.0.0-alpha.1": "119.0.6045.0",
	"28.0.0-alpha.2": "119.0.6045.0",
	"28.0.0-alpha.3": "119.0.6045.21",
	"28.0.0-alpha.4": "119.0.6045.21",
	"28.0.0-alpha.5": "119.0.6045.33",
	"28.0.0-alpha.6": "119.0.6045.33",
	"28.0.0-alpha.7": "119.0.6045.33",
	"28.0.0-beta.1": "119.0.6045.33",
	"28.0.0-beta.2": "120.0.6099.0",
	"28.0.0-beta.3": "120.0.6099.5",
	"28.0.0-beta.4": "120.0.6099.5",
	"28.0.0-beta.5": "120.0.6099.18",
	"28.0.0-beta.6": "120.0.6099.18",
	"28.0.0-beta.7": "120.0.6099.18",
	"28.0.0-beta.8": "120.0.6099.18",
	"28.0.0-beta.9": "120.0.6099.18",
	"28.0.0-beta.10": "120.0.6099.18",
	"28.0.0-beta.11": "120.0.6099.35",
	"28.0.0": "120.0.6099.56",
	"28.1.0": "120.0.6099.109",
	"28.1.1": "120.0.6099.109",
	"28.1.2": "120.0.6099.199",
	"28.1.3": "120.0.6099.199",
	"28.1.4": "120.0.6099.216",
	"28.2.0": "120.0.6099.227",
	"28.2.1": "120.0.6099.268",
	"28.2.2": "120.0.6099.276",
	"28.2.3": "120.0.6099.283",
	"28.2.4": "120.0.6099.291",
	"28.2.5": "120.0.6099.291",
	"28.2.6": "120.0.6099.291",
	"28.2.7": "120.0.6099.291",
	"28.2.8": "120.0.6099.291",
	"28.2.9": "120.0.6099.291",
	"28.2.10": "120.0.6099.291",
	"28.3.0": "120.0.6099.291",
	"28.3.1": "120.0.6099.291",
	"28.3.2": "120.0.6099.291",
	"28.3.3": "120.0.6099.291",
	"29.0.0-alpha.1": "121.0.6147.0",
	"29.0.0-alpha.2": "121.0.6147.0",
	"29.0.0-alpha.3": "121.0.6147.0",
	"29.0.0-alpha.4": "121.0.6159.0",
	"29.0.0-alpha.5": "121.0.6159.0",
	"29.0.0-alpha.6": "121.0.6159.0",
	"29.0.0-alpha.7": "121.0.6159.0",
	"29.0.0-alpha.8": "122.0.6194.0",
	"29.0.0-alpha.9": "122.0.6236.2",
	"29.0.0-alpha.10": "122.0.6236.2",
	"29.0.0-alpha.11": "122.0.6236.2",
	"29.0.0-beta.1": "122.0.6236.2",
	"29.0.0-beta.2": "122.0.6236.2",
	"29.0.0-beta.3": "122.0.6261.6",
	"29.0.0-beta.4": "122.0.6261.6",
	"29.0.0-beta.5": "122.0.6261.18",
	"29.0.0-beta.6": "122.0.6261.18",
	"29.0.0-beta.7": "122.0.6261.18",
	"29.0.0-beta.8": "122.0.6261.18",
	"29.0.0-beta.9": "122.0.6261.18",
	"29.0.0-beta.10": "122.0.6261.18",
	"29.0.0-beta.11": "122.0.6261.18",
	"29.0.0-beta.12": "122.0.6261.29",
	"29.0.0": "122.0.6261.39",
	"29.0.1": "122.0.6261.57",
	"29.1.0": "122.0.6261.70",
	"29.1.1": "122.0.6261.111",
	"29.1.2": "122.0.6261.112",
	"29.1.3": "122.0.6261.112",
	"29.1.4": "122.0.6261.129",
	"29.1.5": "122.0.6261.130",
	"29.1.6": "122.0.6261.139",
	"29.2.0": "122.0.6261.156",
	"29.3.0": "122.0.6261.156",
	"29.3.1": "122.0.6261.156",
	"29.3.2": "122.0.6261.156",
	"29.3.3": "122.0.6261.156",
	"29.4.0": "122.0.6261.156",
	"29.4.1": "122.0.6261.156",
	"29.4.2": "122.0.6261.156",
	"29.4.3": "122.0.6261.156",
	"29.4.4": "122.0.6261.156",
	"29.4.5": "122.0.6261.156",
	"29.4.6": "122.0.6261.156",
	"30.0.0-alpha.1": "123.0.6296.0",
	"30.0.0-alpha.2": "123.0.6312.5",
	"30.0.0-alpha.3": "124.0.6323.0",
	"30.0.0-alpha.4": "124.0.6323.0",
	"30.0.0-alpha.5": "124.0.6331.0",
	"30.0.0-alpha.6": "124.0.6331.0",
	"30.0.0-alpha.7": "124.0.6353.0",
	"30.0.0-beta.1": "124.0.6359.0",
	"30.0.0-beta.2": "124.0.6359.0",
	"30.0.0-beta.3": "124.0.6367.9",
	"30.0.0-beta.4": "124.0.6367.9",
	"30.0.0-beta.5": "124.0.6367.9",
	"30.0.0-beta.6": "124.0.6367.18",
	"30.0.0-beta.7": "124.0.6367.29",
	"30.0.0-beta.8": "124.0.6367.29",
	"30.0.0": "124.0.6367.49",
	"30.0.1": "124.0.6367.60",
	"30.0.2": "124.0.6367.91",
	"30.0.3": "124.0.6367.119",
	"30.0.4": "124.0.6367.201",
	"30.0.5": "124.0.6367.207",
	"30.0.6": "124.0.6367.207",
	"30.0.7": "124.0.6367.221",
	"30.0.8": "124.0.6367.230",
	"30.0.9": "124.0.6367.233",
	"30.1.0": "124.0.6367.243",
	"30.1.1": "124.0.6367.243",
	"30.1.2": "124.0.6367.243",
	"30.2.0": "124.0.6367.243",
	"30.3.0": "124.0.6367.243",
	"30.3.1": "124.0.6367.243",
	"30.4.0": "124.0.6367.243",
	"30.5.0": "124.0.6367.243",
	"30.5.1": "124.0.6367.243",
	"31.0.0-alpha.1": "125.0.6412.0",
	"31.0.0-alpha.2": "125.0.6412.0",
	"31.0.0-alpha.3": "125.0.6412.0",
	"31.0.0-alpha.4": "125.0.6412.0",
	"31.0.0-alpha.5": "125.0.6412.0",
	"31.0.0-beta.1": "126.0.6445.0",
	"31.0.0-beta.2": "126.0.6445.0",
	"31.0.0-beta.3": "126.0.6445.0",
	"31.0.0-beta.4": "126.0.6445.0",
	"31.0.0-beta.5": "126.0.6445.0",
	"31.0.0-beta.6": "126.0.6445.0",
	"31.0.0-beta.7": "126.0.6445.0",
	"31.0.0-beta.8": "126.0.6445.0",
	"31.0.0-beta.9": "126.0.6445.0",
	"31.0.0-beta.10": "126.0.6478.36",
	"31.0.0": "126.0.6478.36",
	"31.0.1": "126.0.6478.36",
	"31.0.2": "126.0.6478.61",
	"31.1.0": "126.0.6478.114",
	"31.2.0": "126.0.6478.127",
	"31.2.1": "126.0.6478.127",
	"31.3.0": "126.0.6478.183",
	"31.3.1": "126.0.6478.185",
	"31.4.0": "126.0.6478.234",
	"31.5.0": "126.0.6478.234",
	"31.6.0": "126.0.6478.234",
	"31.7.0": "126.0.6478.234",
	"31.7.1": "126.0.6478.234",
	"31.7.2": "126.0.6478.234",
	"31.7.3": "126.0.6478.234",
	"31.7.4": "126.0.6478.234",
	"31.7.5": "126.0.6478.234",
	"31.7.6": "126.0.6478.234",
	"31.7.7": "126.0.6478.234",
	"32.0.0-alpha.1": "127.0.6521.0",
	"32.0.0-alpha.2": "127.0.6521.0",
	"32.0.0-alpha.3": "127.0.6521.0",
	"32.0.0-alpha.4": "127.0.6521.0",
	"32.0.0-alpha.5": "127.0.6521.0",
	"32.0.0-alpha.6": "128.0.6571.0",
	"32.0.0-alpha.7": "128.0.6571.0",
	"32.0.0-alpha.8": "128.0.6573.0",
	"32.0.0-alpha.9": "128.0.6573.0",
	"32.0.0-alpha.10": "128.0.6573.0",
	"32.0.0-beta.1": "128.0.6573.0",
	"32.0.0-beta.2": "128.0.6611.0",
	"32.0.0-beta.3": "128.0.6613.7",
	"32.0.0-beta.4": "128.0.6613.18",
	"32.0.0-beta.5": "128.0.6613.27",
	"32.0.0-beta.6": "128.0.6613.27",
	"32.0.0-beta.7": "128.0.6613.27",
	"32.0.0": "128.0.6613.36",
	"32.0.1": "128.0.6613.36",
	"32.0.2": "128.0.6613.84",
	"32.1.0": "128.0.6613.120",
	"32.1.1": "128.0.6613.137",
	"32.1.2": "128.0.6613.162",
	"32.2.0": "128.0.6613.178",
	"32.2.1": "128.0.6613.186",
	"32.2.2": "128.0.6613.186",
	"32.2.3": "128.0.6613.186",
	"32.2.4": "128.0.6613.186",
	"32.2.5": "128.0.6613.186",
	"32.2.6": "128.0.6613.186",
	"32.2.7": "128.0.6613.186",
	"32.2.8": "128.0.6613.186",
	"32.3.0": "128.0.6613.186",
	"32.3.1": "128.0.6613.186",
	"32.3.2": "128.0.6613.186",
	"32.3.3": "128.0.6613.186",
	"33.0.0-alpha.1": "129.0.6668.0",
	"33.0.0-alpha.2": "130.0.6672.0",
	"33.0.0-alpha.3": "130.0.6672.0",
	"33.0.0-alpha.4": "130.0.6672.0",
	"33.0.0-alpha.5": "130.0.6672.0",
	"33.0.0-alpha.6": "130.0.6672.0",
	"33.0.0-beta.1": "130.0.6672.0",
	"33.0.0-beta.2": "130.0.6672.0",
	"33.0.0-beta.3": "130.0.6672.0",
	"33.0.0-beta.4": "130.0.6672.0",
	"33.0.0-beta.5": "130.0.6723.19",
	"33.0.0-beta.6": "130.0.6723.19",
	"33.0.0-beta.7": "130.0.6723.19",
	"33.0.0-beta.8": "130.0.6723.31",
	"33.0.0-beta.9": "130.0.6723.31",
	"33.0.0-beta.10": "130.0.6723.31",
	"33.0.0-beta.11": "130.0.6723.44",
	"33.0.0": "130.0.6723.44",
	"33.0.1": "130.0.6723.59",
	"33.0.2": "130.0.6723.59",
	"33.1.0": "130.0.6723.91",
	"33.2.0": "130.0.6723.118",
	"33.2.1": "130.0.6723.137",
	"33.3.0": "130.0.6723.152",
	"33.3.1": "130.0.6723.170",
	"33.3.2": "130.0.6723.191",
	"33.4.0": "130.0.6723.191",
	"33.4.1": "130.0.6723.191",
	"33.4.2": "130.0.6723.191",
	"33.4.3": "130.0.6723.191",
	"33.4.4": "130.0.6723.191",
	"33.4.5": "130.0.6723.191",
	"33.4.6": "130.0.6723.191",
	"33.4.7": "130.0.6723.191",
	"33.4.8": "130.0.6723.191",
	"33.4.9": "130.0.6723.191",
	"33.4.10": "130.0.6723.191",
	"33.4.11": "130.0.6723.191",
	"34.0.0-alpha.1": "131.0.6776.0",
	"34.0.0-alpha.2": "132.0.6779.0",
	"34.0.0-alpha.3": "132.0.6789.1",
	"34.0.0-alpha.4": "132.0.6789.1",
	"34.0.0-alpha.5": "132.0.6789.1",
	"34.0.0-alpha.6": "132.0.6789.1",
	"34.0.0-alpha.7": "132.0.6789.1",
	"34.0.0-alpha.8": "132.0.6820.0",
	"34.0.0-alpha.9": "132.0.6824.0",
	"34.0.0-beta.1": "132.0.6824.0",
	"34.0.0-beta.2": "132.0.6824.0",
	"34.0.0-beta.3": "132.0.6824.0",
	"34.0.0-beta.4": "132.0.6834.6",
	"34.0.0-beta.5": "132.0.6834.6",
	"34.0.0-beta.6": "132.0.6834.15",
	"34.0.0-beta.7": "132.0.6834.15",
	"34.0.0-beta.8": "132.0.6834.15",
	"34.0.0-beta.9": "132.0.6834.32",
	"34.0.0-beta.10": "132.0.6834.32",
	"34.0.0-beta.11": "132.0.6834.32",
	"34.0.0-beta.12": "132.0.6834.46",
	"34.0.0-beta.13": "132.0.6834.46",
	"34.0.0-beta.14": "132.0.6834.57",
	"34.0.0-beta.15": "132.0.6834.57",
	"34.0.0-beta.16": "132.0.6834.57",
	"34.0.0": "132.0.6834.83",
	"34.0.1": "132.0.6834.83",
	"34.0.2": "132.0.6834.159",
	"34.1.0": "132.0.6834.194",
	"34.1.1": "132.0.6834.194",
	"34.2.0": "132.0.6834.196",
	"34.3.0": "132.0.6834.210",
	"34.3.1": "132.0.6834.210",
	"34.3.2": "132.0.6834.210",
	"34.3.3": "132.0.6834.210",
	"34.3.4": "132.0.6834.210",
	"34.4.0": "132.0.6834.210",
	"34.4.1": "132.0.6834.210",
	"34.5.0": "132.0.6834.210",
	"34.5.1": "132.0.6834.210",
	"34.5.2": "132.0.6834.210",
	"34.5.3": "132.0.6834.210",
	"34.5.4": "132.0.6834.210",
	"34.5.5": "132.0.6834.210",
	"34.5.6": "132.0.6834.210",
	"34.5.7": "132.0.6834.210",
	"34.5.8": "132.0.6834.210",
	"35.0.0-alpha.1": "133.0.6920.0",
	"35.0.0-alpha.2": "133.0.6920.0",
	"35.0.0-alpha.3": "133.0.6920.0",
	"35.0.0-alpha.4": "133.0.6920.0",
	"35.0.0-alpha.5": "133.0.6920.0",
	"35.0.0-beta.1": "133.0.6920.0",
	"35.0.0-beta.2": "134.0.6968.0",
	"35.0.0-beta.3": "134.0.6968.0",
	"35.0.0-beta.4": "134.0.6968.0",
	"35.0.0-beta.5": "134.0.6989.0",
	"35.0.0-beta.6": "134.0.6990.0",
	"35.0.0-beta.7": "134.0.6990.0",
	"35.0.0-beta.8": "134.0.6998.10",
	"35.0.0-beta.9": "134.0.6998.10",
	"35.0.0-beta.10": "134.0.6998.23",
	"35.0.0-beta.11": "134.0.6998.23",
	"35.0.0-beta.12": "134.0.6998.23",
	"35.0.0-beta.13": "134.0.6998.44",
	"35.0.0": "134.0.6998.44",
	"35.0.1": "134.0.6998.44",
	"35.0.2": "134.0.6998.88",
	"35.0.3": "134.0.6998.88",
	"35.1.0": "134.0.6998.165",
	"35.1.1": "134.0.6998.165",
	"35.1.2": "134.0.6998.178",
	"35.1.3": "134.0.6998.179",
	"35.1.4": "134.0.6998.179",
	"35.1.5": "134.0.6998.179",
	"35.2.0": "134.0.6998.205",
	"35.2.1": "134.0.6998.205",
	"35.2.2": "134.0.6998.205",
	"35.3.0": "134.0.6998.205",
	"35.4.0": "134.0.6998.205",
	"35.5.0": "134.0.6998.205",
	"35.5.1": "134.0.6998.205",
	"35.6.0": "134.0.6998.205",
	"36.0.0-alpha.1": "135.0.7049.5",
	"36.0.0-alpha.2": "136.0.7062.0",
	"36.0.0-alpha.3": "136.0.7062.0",
	"36.0.0-alpha.4": "136.0.7062.0",
	"36.0.0-alpha.5": "136.0.7067.0",
	"36.0.0-alpha.6": "136.0.7067.0",
	"36.0.0-beta.1": "136.0.7067.0",
	"36.0.0-beta.2": "136.0.7067.0",
	"36.0.0-beta.3": "136.0.7067.0",
	"36.0.0-beta.4": "136.0.7067.0",
	"36.0.0-beta.5": "136.0.7103.17",
	"36.0.0-beta.6": "136.0.7103.25",
	"36.0.0-beta.7": "136.0.7103.25",
	"36.0.0-beta.8": "136.0.7103.33",
	"36.0.0-beta.9": "136.0.7103.33",
	"36.0.0": "136.0.7103.48",
	"36.0.1": "136.0.7103.48",
	"36.1.0": "136.0.7103.49",
	"36.2.0": "136.0.7103.49",
	"36.2.1": "136.0.7103.93",
	"36.3.0": "136.0.7103.113",
	"36.3.1": "136.0.7103.113",
	"36.3.2": "136.0.7103.115",
	"36.4.0": "136.0.7103.149",
	"36.5.0": "136.0.7103.168",
	"36.6.0": "136.0.7103.177",
	"37.0.0-alpha.1": "137.0.7151.0",
	"37.0.0-alpha.2": "137.0.7151.0",
	"37.0.0-alpha.3": "138.0.7156.0",
	"37.0.0-alpha.4": "138.0.7165.0",
	"37.0.0-alpha.5": "138.0.7177.0",
	"37.0.0-alpha.6": "138.0.7178.0",
	"37.0.0-alpha.7": "138.0.7178.0",
	"37.0.0-beta.1": "138.0.7178.0",
	"37.0.0-beta.2": "138.0.7178.0",
	"37.0.0-beta.3": "138.0.7190.0",
	"37.0.0-beta.4": "138.0.7204.15",
	"37.0.0-beta.5": "138.0.7204.15",
	"37.0.0-beta.6": "138.0.7204.15",
	"37.0.0-beta.7": "138.0.7204.15",
	"37.0.0-beta.8": "138.0.7204.23",
	"37.0.0-beta.9": "138.0.7204.35",
	"37.0.0": "138.0.7204.35",
	"37.1.0": "138.0.7204.35",
	"38.0.0-alpha.1": "139.0.7219.0",
	"38.0.0-alpha.2": "139.0.7219.0",
	"38.0.0-alpha.3": "139.0.7219.0"
};

---

