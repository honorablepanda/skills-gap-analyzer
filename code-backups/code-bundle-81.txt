File name: code-backups\code-bundle-81.txt

Code:
File name: node_modules\regenerate-unicode-properties\Script_Extensions\Phags_Pa.js

Code:
const set = require('regenerate')(0x1805, 0x202F, 0x3002);
set.addRange(0x1802, 0x1803).addRange(0xA840, 0xA877);
exports.characters = set;


---

File name: node_modules\regenerate-unicode-properties\Script_Extensions\Phoenician.js

Code:
const set = require('regenerate')(0x1091F);
set.addRange(0x10900, 0x1091B);
exports.characters = set;


---

File name: node_modules\regenerate-unicode-properties\Script_Extensions\Psalter_Pahlavi.js

Code:
const set = require('regenerate')(0x640);
set.addRange(0x10B80, 0x10B91).addRange(0x10B99, 0x10B9C).addRange(0x10BA9, 0x10BAF);
exports.characters = set;


---

File name: node_modules\regenerate-unicode-properties\Script_Extensions\Rejang.js

Code:
const set = require('regenerate')(0xA95F);
set.addRange(0xA930, 0xA953);
exports.characters = set;


---

File name: node_modules\regenerate-unicode-properties\Script_Extensions\Runic.js

Code:
const set = require('regenerate')();
set.addRange(0x16A0, 0x16F8);
exports.characters = set;


---

File name: node_modules\regenerate-unicode-properties\Script_Extensions\Samaritan.js

Code:
const set = require('regenerate')(0x2E31);
set.addRange(0x800, 0x82D).addRange(0x830, 0x83E);
exports.characters = set;


---

File name: node_modules\regenerate-unicode-properties\Script_Extensions\Saurashtra.js

Code:
const set = require('regenerate')();
set.addRange(0xA880, 0xA8C5).addRange(0xA8CE, 0xA8D9);
exports.characters = set;


---

File name: node_modules\regenerate-unicode-properties\Script_Extensions\Sharada.js

Code:
const set = require('regenerate')(0x951, 0x1CD7, 0x1CD9, 0x1CE0, 0xA838);
set.addRange(0x1CDC, 0x1CDD).addRange(0xA830, 0xA835).addRange(0x11180, 0x111DF);
exports.characters = set;


---

File name: node_modules\regenerate-unicode-properties\Script_Extensions\Shavian.js

Code:
const set = require('regenerate')(0xB7);
set.addRange(0x10450, 0x1047F);
exports.characters = set;


---

File name: node_modules\regenerate-unicode-properties\Script_Extensions\Siddham.js

Code:
const set = require('regenerate')();
set.addRange(0x11580, 0x115B5).addRange(0x115B8, 0x115DD);
exports.characters = set;


---

File name: node_modules\regenerate-unicode-properties\Script_Extensions\SignWriting.js

Code:
const set = require('regenerate')();
set.addRange(0x1D800, 0x1DA8B).addRange(0x1DA9B, 0x1DA9F).addRange(0x1DAA1, 0x1DAAF);
exports.characters = set;


---

File name: node_modules\regenerate-unicode-properties\Script_Extensions\Sinhala.js

Code:
const set = require('regenerate')(0xDBD, 0xDCA, 0xDD6, 0x1CF2);
set.addRange(0x964, 0x965).addRange(0xD81, 0xD83).addRange(0xD85, 0xD96).addRange(0xD9A, 0xDB1).addRange(0xDB3, 0xDBB).addRange(0xDC0, 0xDC6).addRange(0xDCF, 0xDD4).addRange(0xDD8, 0xDDF).addRange(0xDE6, 0xDEF).addRange(0xDF2, 0xDF4).addRange(0x111E1, 0x111F4);
exports.characters = set;


---

File name: node_modules\regenerate-unicode-properties\Script_Extensions\Sogdian.js

Code:
const set = require('regenerate')(0x640);
set.addRange(0x10F30, 0x10F59);
exports.characters = set;


---

File name: node_modules\regenerate-unicode-properties\Script_Extensions\Sora_Sompeng.js

Code:
const set = require('regenerate')();
set.addRange(0x110D0, 0x110E8).addRange(0x110F0, 0x110F9);
exports.characters = set;


---

File name: node_modules\regenerate-unicode-properties\Script_Extensions\Soyombo.js

Code:
const set = require('regenerate')();
set.addRange(0x11A50, 0x11AA2);
exports.characters = set;


---

File name: node_modules\regenerate-unicode-properties\Script_Extensions\Sundanese.js

Code:
const set = require('regenerate')();
set.addRange(0x1B80, 0x1BBF).addRange(0x1CC0, 0x1CC7);
exports.characters = set;


---

File name: node_modules\regenerate-unicode-properties\Script_Extensions\Sunuwar.js

Code:
const set = require('regenerate')(0x303, 0x30D, 0x310, 0x32D, 0x331);
set.addRange(0x300, 0x301).addRange(0x11BC0, 0x11BE1).addRange(0x11BF0, 0x11BF9);
exports.characters = set;


---

File name: node_modules\regenerate-unicode-properties\Script_Extensions\Syloti_Nagri.js

Code:
const set = require('regenerate')();
set.addRange(0x964, 0x965).addRange(0x9E6, 0x9EF).addRange(0xA800, 0xA82C);
exports.characters = set;


---

File name: node_modules\regenerate-unicode-properties\Script_Extensions\Syriac.js

Code:
const set = require('regenerate')(0x30A, 0x320, 0x330, 0x60C, 0x61F, 0x640, 0x670, 0x1DF8, 0x1DFA);
set.addRange(0x303, 0x304).addRange(0x307, 0x308).addRange(0x323, 0x325).addRange(0x32D, 0x32E).addRange(0x61B, 0x61C).addRange(0x64B, 0x655).addRange(0x700, 0x70D).addRange(0x70F, 0x74A).addRange(0x74D, 0x74F).addRange(0x860, 0x86A);
exports.characters = set;


---

File name: node_modules\regenerate-unicode-properties\Script_Extensions\Tagalog.js

Code:
const set = require('regenerate')(0x171F);
set.addRange(0x1700, 0x1715).addRange(0x1735, 0x1736);
exports.characters = set;


---

File name: node_modules\regenerate-unicode-properties\Script_Extensions\Tagbanwa.js

Code:
const set = require('regenerate')();
set.addRange(0x1735, 0x1736).addRange(0x1760, 0x176C).addRange(0x176E, 0x1770).addRange(0x1772, 0x1773);
exports.characters = set;


---

File name: node_modules\regenerate-unicode-properties\Script_Extensions\Tai_Le.js

Code:
const set = require('regenerate')(0x30C);
set.addRange(0x300, 0x301).addRange(0x307, 0x308).addRange(0x1040, 0x1049).addRange(0x1950, 0x196D).addRange(0x1970, 0x1974);
exports.characters = set;


---

File name: node_modules\regenerate-unicode-properties\Script_Extensions\Tai_Tham.js

Code:
const set = require('regenerate')();
set.addRange(0x1A20, 0x1A5E).addRange(0x1A60, 0x1A7C).addRange(0x1A7F, 0x1A89).addRange(0x1A90, 0x1A99).addRange(0x1AA0, 0x1AAD);
exports.characters = set;


---

File name: node_modules\regenerate-unicode-properties\Script_Extensions\Tai_Viet.js

Code:
const set = require('regenerate')();
set.addRange(0xAA80, 0xAAC2).addRange(0xAADB, 0xAADF);
exports.characters = set;


---

File name: node_modules\regenerate-unicode-properties\Script_Extensions\Takri.js

Code:
const set = require('regenerate')();
set.addRange(0x964, 0x965).addRange(0xA830, 0xA839).addRange(0x11680, 0x116B9).addRange(0x116C0, 0x116C9);
exports.characters = set;


---

File name: node_modules\regenerate-unicode-properties\Script_Extensions\Tamil.js

Code:
const set = require('regenerate')(0xB9C, 0xBD0, 0xBD7, 0x1CDA, 0xA8F3, 0x11301, 0x11303, 0x11FFF);
set.addRange(0x951, 0x952).addRange(0x964, 0x965).addRange(0xB82, 0xB83).addRange(0xB85, 0xB8A).addRange(0xB8E, 0xB90).addRange(0xB92, 0xB95).addRange(0xB99, 0xB9A).addRange(0xB9E, 0xB9F).addRange(0xBA3, 0xBA4).addRange(0xBA8, 0xBAA).addRange(0xBAE, 0xBB9).addRange(0xBBE, 0xBC2).addRange(0xBC6, 0xBC8).addRange(0xBCA, 0xBCD).addRange(0xBE6, 0xBFA).addRange(0x1133B, 0x1133C).addRange(0x11FC0, 0x11FF1);
exports.characters = set;


---

File name: node_modules\regenerate-unicode-properties\Script_Extensions\Tangsa.js

Code:
const set = require('regenerate')();
set.addRange(0x16A70, 0x16ABE).addRange(0x16AC0, 0x16AC9);
exports.characters = set;


---

File name: node_modules\regenerate-unicode-properties\Script_Extensions\Tangut.js

Code:
const set = require('regenerate')(0x31EF, 0x16FE0);
set.addRange(0x2FF0, 0x2FFF).addRange(0x17000, 0x187F7).addRange(0x18800, 0x18AFF).addRange(0x18D00, 0x18D08);
exports.characters = set;


---

File name: node_modules\regenerate-unicode-properties\Script_Extensions\Telugu.js

Code:
const set = require('regenerate')(0xC5D, 0x1CDA, 0x1CF2);
set.addRange(0x951, 0x952).addRange(0x964, 0x965).addRange(0xC00, 0xC0C).addRange(0xC0E, 0xC10).addRange(0xC12, 0xC28).addRange(0xC2A, 0xC39).addRange(0xC3C, 0xC44).addRange(0xC46, 0xC48).addRange(0xC4A, 0xC4D).addRange(0xC55, 0xC56).addRange(0xC58, 0xC5A).addRange(0xC60, 0xC63).addRange(0xC66, 0xC6F).addRange(0xC77, 0xC7F);
exports.characters = set;


---

File name: node_modules\regenerate-unicode-properties\Script_Extensions\Thaana.js

Code:
const set = require('regenerate')(0x60C, 0x61F, 0xFDF2, 0xFDFD);
set.addRange(0x61B, 0x61C).addRange(0x660, 0x669).addRange(0x780, 0x7B1);
exports.characters = set;


---

File name: node_modules\regenerate-unicode-properties\Script_Extensions\Thai.js

Code:
const set = require('regenerate')(0x2BC, 0x2D7, 0x303, 0x331);
set.addRange(0xE01, 0xE3A).addRange(0xE40, 0xE5B);
exports.characters = set;


---

File name: node_modules\regenerate-unicode-properties\Script_Extensions\Tibetan.js

Code:
const set = require('regenerate')();
set.addRange(0xF00, 0xF47).addRange(0xF49, 0xF6C).addRange(0xF71, 0xF97).addRange(0xF99, 0xFBC).addRange(0xFBE, 0xFCC).addRange(0xFCE, 0xFD4).addRange(0xFD9, 0xFDA).addRange(0x3008, 0x300B);
exports.characters = set;


---

File name: node_modules\regenerate-unicode-properties\Script_Extensions\Tifinagh.js

Code:
const set = require('regenerate')(0x302, 0x304, 0x307, 0x309, 0x2D7F);
set.addRange(0x2D30, 0x2D67).addRange(0x2D6F, 0x2D70);
exports.characters = set;


---

File name: node_modules\regenerate-unicode-properties\Script_Extensions\Tirhuta.js

Code:
const set = require('regenerate')(0x1CF2);
set.addRange(0x951, 0x952).addRange(0x964, 0x965).addRange(0xA830, 0xA839).addRange(0x11480, 0x114C7).addRange(0x114D0, 0x114D9);
exports.characters = set;


---

File name: node_modules\regenerate-unicode-properties\Script_Extensions\Todhri.js

Code:
const set = require('regenerate')(0x301, 0x304, 0x307, 0x311, 0x313, 0x35E);
set.addRange(0x105C0, 0x105F3);
exports.characters = set;


---

File name: node_modules\regenerate-unicode-properties\Script_Extensions\Toto.js

Code:
const set = require('regenerate')(0x2BC);
set.addRange(0x1E290, 0x1E2AE);
exports.characters = set;


---

File name: node_modules\regenerate-unicode-properties\Script_Extensions\Tulu_Tigalari.js

Code:
const set = require('regenerate')(0x1CF2, 0x1CF4, 0xA8F1, 0x1138B, 0x1138E, 0x113C2, 0x113C5);
set.addRange(0xCE6, 0xCEF).addRange(0xA830, 0xA835).addRange(0x11380, 0x11389).addRange(0x11390, 0x113B5).addRange(0x113B7, 0x113C0).addRange(0x113C7, 0x113CA).addRange(0x113CC, 0x113D5).addRange(0x113D7, 0x113D8).addRange(0x113E1, 0x113E2);
exports.characters = set;


---

File name: node_modules\regenerate-unicode-properties\Script_Extensions\Ugaritic.js

Code:
const set = require('regenerate')(0x1039F);
set.addRange(0x10380, 0x1039D);
exports.characters = set;


---

File name: node_modules\regenerate-unicode-properties\Script_Extensions\Vai.js

Code:
const set = require('regenerate')();
set.addRange(0xA500, 0xA62B);
exports.characters = set;


---

File name: node_modules\regenerate-unicode-properties\Script_Extensions\Vithkuqi.js

Code:
const set = require('regenerate')();
set.addRange(0x10570, 0x1057A).addRange(0x1057C, 0x1058A).addRange(0x1058C, 0x10592).addRange(0x10594, 0x10595).addRange(0x10597, 0x105A1).addRange(0x105A3, 0x105B1).addRange(0x105B3, 0x105B9).addRange(0x105BB, 0x105BC);
exports.characters = set;


---

File name: node_modules\regenerate-unicode-properties\Script_Extensions\Wancho.js

Code:
const set = require('regenerate')(0x1E2FF);
set.addRange(0x1E2C0, 0x1E2F9);
exports.characters = set;


---

File name: node_modules\regenerate-unicode-properties\Script_Extensions\Warang_Citi.js

Code:
const set = require('regenerate')(0x118FF);
set.addRange(0x118A0, 0x118F2);
exports.characters = set;


---

File name: node_modules\regenerate-unicode-properties\Script_Extensions\Yezidi.js

Code:
const set = require('regenerate')(0x60C, 0x61B, 0x61F);
set.addRange(0x660, 0x669).addRange(0x10E80, 0x10EA9).addRange(0x10EAB, 0x10EAD).addRange(0x10EB0, 0x10EB1);
exports.characters = set;


---

File name: node_modules\regenerate-unicode-properties\Script_Extensions\Yi.js

Code:
const set = require('regenerate')(0x30FB);
set.addRange(0x3001, 0x3002).addRange(0x3008, 0x3011).addRange(0x3014, 0x301B).addRange(0xA000, 0xA48C).addRange(0xA490, 0xA4C6).addRange(0xFF61, 0xFF65);
exports.characters = set;


---

File name: node_modules\regenerate-unicode-properties\Script_Extensions\Zanabazar_Square.js

Code:
const set = require('regenerate')();
set.addRange(0x11A00, 0x11A47);
exports.characters = set;


---

File name: node_modules\regenerate-unicode-properties\unicode-version.js

Code:
module.exports = '16.0.0';


---

File name: node_modules\regexp.prototype.flags\auto.js

Code:
'use strict';

require('./shim')();


---

File name: node_modules\regexp.prototype.flags\CHANGELOG.md

Code:
# Changelog

All notable changes to this project will be documented in this file.

The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/)
and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).

## [v1.5.4](https://github.com/es-shims/RegExp.prototype.flags/compare/v1.5.3...v1.5.4) - 2025-01-02

### Commits

- [Refactor] use `get-proto` and `es-errors` [`6355772`](https://github.com/es-shims/RegExp.prototype.flags/commit/6355772344db0465e11c58e387f968de0cf4e4fa)
- [Deps] update `call-bind` [`c630183`](https://github.com/es-shims/RegExp.prototype.flags/commit/c6301838b07f3e71b3dc1d5b2cfa88f88b9f6a6d)
- [Dev Deps] update `object-inspect` [`c0201af`](https://github.com/es-shims/RegExp.prototype.flags/commit/c0201af97cb849947d5246fa7d9f9a8ea5bc5b36)

## [v1.5.3](https://github.com/es-shims/RegExp.prototype.flags/compare/v1.5.2...v1.5.3) - 2024-10-03

### Fixed

- [Fix] avoid unnecessary polyfill [`#31`](https://github.com/es-shims/RegExp.prototype.flags/issues/31)

### Commits

- [Dev Deps] update `@es-shims/api`, `@ljharb/eslint-config`, `aud`, `object-inspect`, `tape` [`9e8bc20`](https://github.com/es-shims/RegExp.prototype.flags/commit/9e8bc20868a6366c08cfa9f37648573b8bcab449)
- [Dev Deps] update `@es-shims/api`, `auto-changelog`, `es-value-fixtures`, `tape` [`c32be8e`](https://github.com/es-shims/RegExp.prototype.flags/commit/c32be8e8bb8b6726376ba82d27a31087b4847444)
- [readme] fix typos [`195c32e`](https://github.com/es-shims/RegExp.prototype.flags/commit/195c32e7f48d09b12428442aaaa5a28a72d56287)
- [Deps] update `call-bind`, `set-function-name` [`207517f`](https://github.com/es-shims/RegExp.prototype.flags/commit/207517f62aa8f6a9c721c6d484c2c7f5a386864a)
- [Dev Deps] update `available-regexp-flags`, `tape` [`b3854f7`](https://github.com/es-shims/RegExp.prototype.flags/commit/b3854f70afa7a5da8c0f4cac40bb8ad8df71d297)
- [Tests] replace `aud` with `npm audit` [`d3ee951`](https://github.com/es-shims/RegExp.prototype.flags/commit/d3ee951c0760b3f9f01e5a953dfef92c8d6fcfb4)
- [Dev Deps] update `hasown` [`9e407c4`](https://github.com/es-shims/RegExp.prototype.flags/commit/9e407c41cd8db52b1fd602ae3117b3cd3e1beecc)
- [Dev Deps] add missing peer dep [`0199bfd`](https://github.com/es-shims/RegExp.prototype.flags/commit/0199bfd69dd140bdee743d6a874d758349aaaaaa)

## [v1.5.2](https://github.com/es-shims/RegExp.prototype.flags/compare/v1.5.1...v1.5.2) - 2024-02-11

### Commits

- [Tests] increase coverage [`c692c88`](https://github.com/es-shims/RegExp.prototype.flags/commit/c692c88e073f6d17fc5b6b1c740ef1ecb433eb4b)
- [Dev Deps] use `hasown` instead of `has` [`fb5b350`](https://github.com/es-shims/RegExp.prototype.flags/commit/fb5b350122507e4bec68fb417a46f07d062caf77)
- [Dev Deps] update `aud`, `hasown`, `npmignore`, `tape` [`fd0ddd9`](https://github.com/es-shims/RegExp.prototype.flags/commit/fd0ddd9c837c0a8066de37a41eb4f83310f15a57)
- [Deps] update `call-bind`, `define-properties`, `set-function-name` [`ca53f66`](https://github.com/es-shims/RegExp.prototype.flags/commit/ca53f662549b2fbff61323a6d2aa9af15a6c836b)
- [Dev Deps] update `object-inspect`, `tape` [`4491680`](https://github.com/es-shims/RegExp.prototype.flags/commit/449168010d4d63a2cd854dcec9f37efacda19082)
- [Refactor] use `es-errors` [`1d03d22`](https://github.com/es-shims/RegExp.prototype.flags/commit/1d03d225327008aeb6b4b501a4720318d717621e)
- [Fix] properly check for a non-object receiver [`024d442`](https://github.com/es-shims/RegExp.prototype.flags/commit/024d4421edd8922f9acbac35afcfe69a8a3db6a9)
- [Deps] update `call-bind` [`f222ce0`](https://github.com/es-shims/RegExp.prototype.flags/commit/f222ce0925a7431d1d3dd113d803746f07e1175d)

## [v1.5.1](https://github.com/es-shims/RegExp.prototype.flags/compare/v1.5.0...v1.5.1) - 2023-09-12

### Commits

- [Refactor] use `set-function-name` [`1384147`](https://github.com/es-shims/RegExp.prototype.flags/commit/13841474baf5700de8e3f65fae3670ad1b233483)
- [Dev Deps] update `@es-shims/api`, `@ljharb/eslint-config`, `aud`, `available-regexp-flags`, `tape` [`07bf9a2`](https://github.com/es-shims/RegExp.prototype.flags/commit/07bf9a2c354cc41379b01fe5c383233adaaccf0e)
- [Dev Deps] add missing `npmignore` dep [`8ca9dfe`](https://github.com/es-shims/RegExp.prototype.flags/commit/8ca9dfe4da31ef74ee48a4dcf62692eebb8f8fdd)

## [v1.5.0](https://github.com/es-shims/RegExp.prototype.flags/compare/v1.4.3...v1.5.0) - 2023-04-18

### Commits

- [meta] use `npmignore` to autogenerate an npmignore file [`f7438ad`](https://github.com/es-shims/RegExp.prototype.flags/commit/f7438ad3728128b99daaeb1d3133a40d906d3621)
- [New] add `unicodeSets`/`v` flag [`f922170`](https://github.com/es-shims/RegExp.prototype.flags/commit/f92217039c9c86a61421ce69594e93a546721397)
- [Dev Deps] update `@es-shims/api`, `@ljharb/eslint-config`, `aud`, `available-regexp-flags`, `object-inspect`, `tape` [`1203078`](https://github.com/es-shims/RegExp.prototype.flags/commit/12030785e6beb1f06c406a4731714012d93867e2)
- [actions] update rebase action to use reusable workflow [`c562ea2`](https://github.com/es-shims/RegExp.prototype.flags/commit/c562ea20c27442ff30ce65091a313b5e49ae8515)
- [Dev Deps] update `aud`, `object-inspect`, `tape` [`f3ae811`](https://github.com/es-shims/RegExp.prototype.flags/commit/f3ae81109dd08b200dce8bd52c183bc44662c3b4)
- [Deps] update `define-properties`, `functions-have-names` [`2d0476e`](https://github.com/es-shims/RegExp.prototype.flags/commit/2d0476e5eba1e4a9b786f169f3be96c2f5a192b2)
- [Tests] use `for-each` instead of `foreach` [`d9f30da`](https://github.com/es-shims/RegExp.prototype.flags/commit/d9f30dab65ff0185a8688c6e62dc1fe650879cc0)
- [Deps] update `define-properties` [`81c1c20`](https://github.com/es-shims/RegExp.prototype.flags/commit/81c1c2012070c1f4480a9ab55bc0cff206152603)

## [v1.4.3](https://github.com/es-shims/RegExp.prototype.flags/compare/v1.4.2...v1.4.3) - 2022-04-14

### Commits

- [Fix] when shimmed, name must be `get flags` [`fcefd00`](https://github.com/es-shims/RegExp.prototype.flags/commit/fcefd0039177e9cbcb2ed842d353131ace7a3377)

## [v1.4.2](https://github.com/es-shims/RegExp.prototype.flags/compare/v1.4.1...v1.4.2) - 2022-04-12

### Commits

- [Fix] ensure `hasIndices` is patched properly, and getter order is correct [`a1af45a`](https://github.com/es-shims/RegExp.prototype.flags/commit/a1af45a8a6f7305b097b83f96ee9fc45abb3e733)
- [Dev Deps] update `eslint`, `@ljharb/eslint-config`, `auto-changelog`, `tape` [`24f5a0c`](https://github.com/es-shims/RegExp.prototype.flags/commit/24f5a0c84f2e7d263ae0e2008def870afd6d5a4f)

## [v1.4.1](https://github.com/es-shims/RegExp.prototype.flags/compare/v1.4.0...v1.4.1) - 2022-01-13

### Commits

- [Fix] `polyfill`: do not throw in a descriptorless environment [`e2d24e7`](https://github.com/es-shims/RegExp.prototype.flags/commit/e2d24e707a44d958a0b6d3a114effb2f2b475337)

## [v1.4.0](https://github.com/es-shims/RegExp.prototype.flags/compare/v1.3.2...v1.4.0) - 2022-01-13

### Commits

- [Tests] use `available-regexp-flags` [`95af246`](https://github.com/es-shims/RegExp.prototype.flags/commit/95af2463f1373282087528f8566e20ffae26c3db)
- [New] add `hasIndices`/`d` flag [`89959ca`](https://github.com/es-shims/RegExp.prototype.flags/commit/89959ca1128ea48dcd0ec1416355264425fa3bc5)

## [v1.3.2](https://github.com/es-shims/RegExp.prototype.flags/compare/v1.3.1...v1.3.2) - 2022-01-13

### Commits

- [actions] reuse common workflows [`6665b5d`](https://github.com/es-shims/RegExp.prototype.flags/commit/6665b5db7c45ce6b987d08ebaf6d2767eec95b94)
- [actions] use `node/install` instead of `node/run`; use `codecov` action [`babce94`](https://github.com/es-shims/RegExp.prototype.flags/commit/babce94b5ca96e93e74e384c0a01295943677a3f)
- [Dev Deps] update `eslint`, `@ljharb/eslint-config`, `@es-shims/api`, `object-inspect`, `safe-publish-latest`, `tape` [`52132d9`](https://github.com/es-shims/RegExp.prototype.flags/commit/52132d9f3df904864d4cf3fd44892ee563aee524)
- [Dev Deps] update `eslint`, `@ljharb/eslint-config`, `@es-shims/api`, `aud`, `auto-changelog`, `object-inspect`, `tape` [`c16687c`](https://github.com/es-shims/RegExp.prototype.flags/commit/c16687c118d374d8997a8d885467507bf943b4bc)
- [actions] update codecov uploader [`0a3c904`](https://github.com/es-shims/RegExp.prototype.flags/commit/0a3c904a9fd1247b3b8e0fb6b451b3fbe97735bd)
- [Dev Deps] update `eslint`, `@ljharb/eslint-config`, `aud`, `object-inspect`, `tape` [`3fce7f2`](https://github.com/es-shims/RegExp.prototype.flags/commit/3fce7f27c753440003675d03ae9a7ecfa6a74d30)
- [Dev Deps] update `eslint`, `@ljharb/eslint-config`, `aud`, `tape` [`75ca498`](https://github.com/es-shims/RegExp.prototype.flags/commit/75ca49889349fc42e51ea79b2ec7a1996fb3eb18)
- [actions] update workflows [`300f321`](https://github.com/es-shims/RegExp.prototype.flags/commit/300f321984526066656bec791f0bb3861b33cfbc)
- [meta] better `eccheck` command [`5f735ab`](https://github.com/es-shims/RegExp.prototype.flags/commit/5f735ab1b1c87dbd05c0096249160587f166cd51)
- [Dev Deps] update `eslint`, `tape` [`3059637`](https://github.com/es-shims/RegExp.prototype.flags/commit/3059637210eb5c9fa97160ec2f0aea1d1d724eb7)
- [actions] update workflows` [`dbd8ab4`](https://github.com/es-shims/RegExp.prototype.flags/commit/dbd8ab49fa2196dd74791107825c43e4481cdfd2)
- [meta] use `prepublishOnly` script for npm 7+ [`5cc8652`](https://github.com/es-shims/RegExp.prototype.flags/commit/5cc86524a41bf358b6701bcf46e480f0e3e470b4)
- [Fix] use polyfill, not implementation, in main export [`15ab4b8`](https://github.com/es-shims/RegExp.prototype.flags/commit/15ab4b85f3904e48664e26394dc12765ed666da4)
- [meta] remove `audit-level` config, which breaks npm 7 installs [`1cb98ae`](https://github.com/es-shims/RegExp.prototype.flags/commit/1cb98aed731e73d11df5ed3b853b371d35a69f5a)

## [v1.3.1](https://github.com/es-shims/RegExp.prototype.flags/compare/v1.3.0...v1.3.1) - 2021-01-15

### Commits

- [Tests] run `nyc` on all tests; use `tape` runner; add full es-shims test suite [`047a1e8`](https://github.com/es-shims/RegExp.prototype.flags/commit/047a1e8ff250220254b0e9598d962a56c8ec3ffc)
- [Tests] migrate tests to Github Actions [`e4e391f`](https://github.com/es-shims/RegExp.prototype.flags/commit/e4e391fd3e6f057172994ad0c33ca128568c0b06)
- [meta] use `auto-changelog` for changelog [`afbcd06`](https://github.com/es-shims/RegExp.prototype.flags/commit/afbcd06402e97e975af797e2c1375e35e22e90f2)
- [actions] add Require Allow Edits workflow [`0db5d50`](https://github.com/es-shims/RegExp.prototype.flags/commit/0db5d50cdf59e3e5529024af4f8ce05829edc06d)
- [meta] do not publish github action workflow files [`53f2902`](https://github.com/es-shims/RegExp.prototype.flags/commit/53f29020e5a1f517e91b8cf226ed6bc97eadc090)
- [Dev Deps] update `eslint`, `@ljharb/eslint-config`, `tape`; add `aud` [`05f2a85`](https://github.com/es-shims/RegExp.prototype.flags/commit/05f2a851869069c7911176809028be8491465f86)
- [Dev Deps] update `eslint`, `@ljharb/eslint-config`, `aud`, `tape` [`2a197b8`](https://github.com/es-shims/RegExp.prototype.flags/commit/2a197b84916f094946c5cad56ef8e7bb7e8f12ac)
- [Dev Deps] update `eslint`, `@ljharb/eslint-config`, `tape`; add `safe-publish-latest` [`e40bd37`](https://github.com/es-shims/RegExp.prototype.flags/commit/e40bd37de9bb756672832a6c994652965d09b9ae)
- [Refactor] use `call-bind` instead of `es-abstract` [`e6eac90`](https://github.com/es-shims/RegExp.prototype.flags/commit/e6eac9052ebdb4bc28cb83b5d3017a4ed74fe3f1)
- [Deps] update `es-abstract` [`f198075`](https://github.com/es-shims/RegExp.prototype.flags/commit/f198075d6fc075e0d98967af98a512742e6e7e4f)
- [actions] switch Automatic Rebase workflow to `pull_request_target` event [`2d21727`](https://github.com/es-shims/RegExp.prototype.flags/commit/2d217275d78214b82c7f5cacca85ca2308df83f1)
- [Deps] update `es-abstract` [`7e7ddc6`](https://github.com/es-shims/RegExp.prototype.flags/commit/7e7ddc66174256f6688a857b09c9a02bafcf4866)

## [v1.3.0](https://github.com/es-shims/RegExp.prototype.flags/compare/v1.2.0...v1.3.0) - 2019-12-14

### Commits

- [Tests] remove `jscs` [`4a09ab4`](https://github.com/es-shims/RegExp.prototype.flags/commit/4a09ab467f62065a1718b0dcc50f7818b5400ab6)
- [Tests] use shared travis-ci configs [`8afa6a9`](https://github.com/es-shims/RegExp.prototype.flags/commit/8afa6a99fd35c19fb49ba630fd17159a5da2a34e)
- [Dev Deps] update `eslint`, `@ljharb/eslint-config`, `covert`, `has`, `tape` [`13a9fc9`](https://github.com/es-shims/RegExp.prototype.flags/commit/13a9fc9d6bc2600681eb3f638668beccf80b843c)
- [Refactor] use `callBind` helper from `es-abstract` [`c3a3727`](https://github.com/es-shims/RegExp.prototype.flags/commit/c3a37276764d99c1e4f7e9467ad636fce8c92c58)
- [actions] add automatic rebasing / merge commit blocking [`51e3f93`](https://github.com/es-shims/RegExp.prototype.flags/commit/51e3f9366d15a07edaf532884948ce74b6827125)
- [Tests] use `npx aud` instead of `nsp` or `npm audit` with hoops [`7e1ee50`](https://github.com/es-shims/RegExp.prototype.flags/commit/7e1ee505df374867c2c04d500aa1c36265161b6f)
- [meta] add `funding` field [`c99cbec`](https://github.com/es-shims/RegExp.prototype.flags/commit/c99cbec1af9b0e0be42e82f164adacf2e1bdee16)
- [New] add `auto` entry point [`1e53e85`](https://github.com/es-shims/RegExp.prototype.flags/commit/1e53e854f663472e74dd0350e0c095df9c2b9c7b)
- [Tests] use `eclint` instead of `editorconfig-tools` [`8600bfe`](https://github.com/es-shims/RegExp.prototype.flags/commit/8600bfed42ab8d294463df482874c344fc079f82)
- [Deps] update `define-properties` [`ad221fa`](https://github.com/es-shims/RegExp.prototype.flags/commit/ad221fa2a26a9c2bc8d274b689cf7a626b58f4e9)

## [v1.2.0](https://github.com/es-shims/RegExp.prototype.flags/compare/v1.1.1...v1.2.0) - 2017-10-24

### Commits

- [Tests] up to `node` `v8.8`, `v7.10`, `v6.11`, `v4.8`; improve matrix; use `nvm install-latest-npm` so new npm doesn’t break old node [`5a9653d`](https://github.com/es-shims/RegExp.prototype.flags/commit/5a9653d1904eb8ad8baffe43cd065b6f36013e5a)
- [Dev Deps] update `tape`, `jscs`, `nsp`, `eslint`, `@ljharb/eslint-config`; add `has` [`556de86`](https://github.com/es-shims/RegExp.prototype.flags/commit/556de8632bbe7a23279717f7d0b6ee841514fbe1)
- [Dev Deps] update `tape`, `jscs`, `nsp`, `eslint`, `@ljharb/eslint-config` [`726772c`](https://github.com/es-shims/RegExp.prototype.flags/commit/726772c054a499ab7680823c4bd8fa9b048d9420)
- [New] add support for `dotAll` regex flag. [`fcbd64f`](https://github.com/es-shims/RegExp.prototype.flags/commit/fcbd64f84fd974d98384bdb093bf25656eb72e8f)
- [Dev Deps] update `eslint`, `jscs`, `nsp`, `tape`, `@ljharb/eslint-config`, `@es-shims/api` [`0272934`](https://github.com/es-shims/RegExp.prototype.flags/commit/02729344addadc105b9c5e12d90cca85a75d16d6)
- [Dev Deps] update `jscs`, `nsp`, `eslint` [`e4cd264`](https://github.com/es-shims/RegExp.prototype.flags/commit/e4cd264f4afa33ff865325b04791de95696e3ae4)
- [Dev Deps] update `jscs`, `nsp`, `eslint`, `@es-shims/api` [`baf5169`](https://github.com/es-shims/RegExp.prototype.flags/commit/baf51698ac00b31b6a4a6d5646a183a409ad1118)
- [Dev Deps] update `tape`, `nsp`, `eslint`, `@ljharb/eslint-config` [`97cea15`](https://github.com/es-shims/RegExp.prototype.flags/commit/97cea152c20bb0e63e9c5111780f7b4af5d1a0e8)
- [Dev Deps] update `tape`, `discs`, `eslint`, `@ljharb/eslint-config` [`b6872f4`](https://github.com/es-shims/RegExp.prototype.flags/commit/b6872f44c833f6f7faf63881657208b6cd43ef49)
- [Dev Deps] update `tape`, `jscs`, `nsp`, `eslint`, `@ljharb/eslint-config` [`14702cc`](https://github.com/es-shims/RegExp.prototype.flags/commit/14702ccd050029d4e6ea2e59d0912e6bfc16ffc0)
- [Dev Deps] update `jscs`, `@es-shims/api` [`cd060a6`](https://github.com/es-shims/RegExp.prototype.flags/commit/cd060a650db019be5244e1c1b77a29f6d79c89db)
- [Tests] up to `node` `v6.2`, `v5.11` [`14638bd`](https://github.com/es-shims/RegExp.prototype.flags/commit/14638bdbd62d6b6a7c89efb8ec57a7815032b4bb)
- [Tests] up to `io.js` `v3.3`, `node` `v4.1` [`b0a5ffb`](https://github.com/es-shims/RegExp.prototype.flags/commit/b0a5ffb25a76783053652e0d7f835e354f9b29b6)
- [Tests] npm run silently [`35804d4`](https://github.com/es-shims/RegExp.prototype.flags/commit/35804d45dd7f57faab923aaab914e6390813e700)
- [Tests] up to `node` `v5.9`, `v4.4` [`e0fe80d`](https://github.com/es-shims/RegExp.prototype.flags/commit/e0fe80d96783820444d6dea1e6b5739032a50c1b)
- [Tests] up to `node` `v5.7`, `v4.3` [`9739c42`](https://github.com/es-shims/RegExp.prototype.flags/commit/9739c422523571cc439d73a9ecaf5dc2e2643bec)
- [Dev Deps] update `jscs` [`4aa1699`](https://github.com/es-shims/RegExp.prototype.flags/commit/4aa1699a0582b7739f14c6cd8d5ae1a4515bd604)
- [Dev Deps] update `tape`, `jscs`, `nsp`, `@ljharb/eslint-config` [`8bc5e6b`](https://github.com/es-shims/RegExp.prototype.flags/commit/8bc5e6ba5befc8f399e00f3c2d064519457fb57c)
- [Tests] fix npm upgrades on older nodes [`ae00bb9`](https://github.com/es-shims/RegExp.prototype.flags/commit/ae00bb9d979605f41fc598156b5c590923ac8184)
- Only apps should have lockfiles. [`6d14965`](https://github.com/es-shims/RegExp.prototype.flags/commit/6d1496550a962ea8525fb7b62dc4ac99d9513a6d)
- [Tests] use pretest/posttest for better organization [`0520cfd`](https://github.com/es-shims/RegExp.prototype.flags/commit/0520cfda23835fb5bff038a6e5cc530b0ce66985)
- [Tests] up to `node` `v5.5` [`810f62b`](https://github.com/es-shims/RegExp.prototype.flags/commit/810f62b6d2418e843b7c2c225841e9305dbc01ee)
- [Tests] on `node` `v5.3` [`f839662`](https://github.com/es-shims/RegExp.prototype.flags/commit/f839662887cbb1a5e472a9302185355b431c85c1)
- [Dev Deps] update `eslint`, `@ljharb/eslint-config` [`78ecaa5`](https://github.com/es-shims/RegExp.prototype.flags/commit/78ecaa5b203a07f76505824f77ce1e5d60d8b0ca)
- [Tests] up to `node` `v5.2` [`c04d762`](https://github.com/es-shims/RegExp.prototype.flags/commit/c04d762a8c09ab544df14c14521f32dac3f67823)
- [Tests] up to `node` `v5.0` [`7c0d5b9`](https://github.com/es-shims/RegExp.prototype.flags/commit/7c0d5b944d9ba30f38227d0750109d582be254e2)
- [Tests] on `node` `v5.10` [`40ddafd`](https://github.com/es-shims/RegExp.prototype.flags/commit/40ddafd83e2e1c959ee8ba24cb296559f2545a0c)
- [Deps] update `define-properties` [`98ea89d`](https://github.com/es-shims/RegExp.prototype.flags/commit/98ea89dc9c41b81b84d4071105048687dab0660e)

## [v1.1.1](https://github.com/es-shims/RegExp.prototype.flags/compare/v1.1.0...v1.1.1) - 2015-08-16

### Commits

- [Fix] cover the case where there is no descriptor on the prototype [`67014c3`](https://github.com/es-shims/RegExp.prototype.flags/commit/67014c35a93c76e28c4ab5cd3e5a54f7f40c2ddf)

## [v1.1.0](https://github.com/es-shims/RegExp.prototype.flags/compare/v1.0.1...v1.1.0) - 2015-08-16

### Commits

- Update `jscs`, `eslint`; use my personal shared `eslint` config. [`37ca379`](https://github.com/es-shims/RegExp.prototype.flags/commit/37ca379bc72620fa6785b0a9ca791b160328c236)
- Update `eslint`, `tape`, `editorconfig-tools`, `nsp` [`cb92d6e`](https://github.com/es-shims/RegExp.prototype.flags/commit/cb92d6e8a8c1df5f00a226e11a78f38c6f7c3055)
- Implement the [es-shim API](es-shims/api). [`15eb821`](https://github.com/es-shims/RegExp.prototype.flags/commit/15eb821be2771e03a1341a08483513702118b45c)
- Refactoring to reduce complexity. [`aeb4785`](https://github.com/es-shims/RegExp.prototype.flags/commit/aeb47854f6b00355702104066c63f6eed38b5e81)
- Move implementation to `implementation.js` [`a698925`](https://github.com/es-shims/RegExp.prototype.flags/commit/a698925b4c1c78cd1ed4315b9deb5bb1707d5203)
- Update `eslint`, `jscs` [`277a4a1`](https://github.com/es-shims/RegExp.prototype.flags/commit/277a4a15e663eb823b63743b84645158b9bb9a43)
- Update `nsp`, `eslint` [`c9f3866`](https://github.com/es-shims/RegExp.prototype.flags/commit/c9f3866e25b52050f6bfe3fd0de8849de0271ea4)
- Update `tape`, `eslint` [`a08795b`](https://github.com/es-shims/RegExp.prototype.flags/commit/a08795b688b186fa5a2ec207358d81c16a07d30d)
- Make some things a bit more robust. [`450abb4`](https://github.com/es-shims/RegExp.prototype.flags/commit/450abb48974f10bfd2d9478e7ea1b9d87f004fb9)
- Update `eslint` [`25d898f`](https://github.com/es-shims/RegExp.prototype.flags/commit/25d898f62719b26fea5f9245be141103d4ec58cd)
- Test on latest two `io.js` versions. [`2e17ca3`](https://github.com/es-shims/RegExp.prototype.flags/commit/2e17ca304e12fb5071a091706a4d559b3eac968a)
- All grade A-supported `node`/`iojs` versions now ship with an `npm` that understands `^`. [`4a2a548`](https://github.com/es-shims/RegExp.prototype.flags/commit/4a2a5480c50f30814000684462a8a3b44c87ae2e)
- Update `eslint` [`64df4e0`](https://github.com/es-shims/RegExp.prototype.flags/commit/64df4e0a2d0e2901b57652e30913db797dc0829b)
- Update `eslint` [`ac05ae5`](https://github.com/es-shims/RegExp.prototype.flags/commit/ac05ae509a4a70d107820a749ea6f02784fc41eb)
- Clean up `supportsDescriptors` check. [`e44d0de`](https://github.com/es-shims/RegExp.prototype.flags/commit/e44d0dec9c8415ff9a911b8806e1d245d6919a11)
- [Dev Deps] Update `jscs` [`8741758`](https://github.com/es-shims/RegExp.prototype.flags/commit/87417588f52f1176fc37d7c32221aa85f749aa34)
- Update `tape`, `jscs`, `nsp`, `eslint` [`db1f658`](https://github.com/es-shims/RegExp.prototype.flags/commit/db1f6584b18cc035ef3b5aec556f54e0ee8c639d)
- Test on `io.js` `v2.3` [`18c948f`](https://github.com/es-shims/RegExp.prototype.flags/commit/18c948f033c87ab2657a0395052cbec531c40900)
- Run `travis-ci` tests on `iojs` and `node` v0.12; speed up builds; allow 0.8 failures. [`c37e79f`](https://github.com/es-shims/RegExp.prototype.flags/commit/c37e79f380d87a226a6cdaa5f09f832f5dc21b7d)
- Update `tape`, `jscs`, `eslint` [`4b652bf`](https://github.com/es-shims/RegExp.prototype.flags/commit/4b652bf5f2f0e36a15227d0b4048de91ee6c4433)
- [Dev Deps] Update `tape`, `eslint` [`29d4ac0`](https://github.com/es-shims/RegExp.prototype.flags/commit/29d4ac0bea16c6a9f611cb15baccd30449f30a91)
- Test up to `io.js` `v2.1` [`9f9e342`](https://github.com/es-shims/RegExp.prototype.flags/commit/9f9e34295ced1b288dea08e0a66dffd2bc03ff8b)
- Update `covert`, `jscs` [`c98f3b4`](https://github.com/es-shims/RegExp.prototype.flags/commit/c98f3b47f01f317e8a589486dfaee482c66b8b64)
- Update `jscs` [`9e5e220`](https://github.com/es-shims/RegExp.prototype.flags/commit/9e5e220be6ec5d5b9b658235287e35bded580b06)
- [Dev Deps] update `tape` [`cdd3af2`](https://github.com/es-shims/RegExp.prototype.flags/commit/cdd3af21507b01aa524f8b87f158dfc8a8153c85)
- [Dev Deps] update `tape` [`d42d0bf`](https://github.com/es-shims/RegExp.prototype.flags/commit/d42d0bf28f8da2cb47fff49283a07a693f8cb626)
- Switch from vb.teelaun.ch to versionbadg.es for the npm version badge SVG. [`a5e7453`](https://github.com/es-shims/RegExp.prototype.flags/commit/a5e745375c01e9f90ff632c55a5b44b6ada38217)
- Update `tape` [`2a675ec`](https://github.com/es-shims/RegExp.prototype.flags/commit/2a675ec707a9d89aea403d0b9a723ea531e50c2d)
- Test on `io.js` `v2.5` [`448cbdb`](https://github.com/es-shims/RegExp.prototype.flags/commit/448cbdb7df47e52677daea4e0c41e892ad8770e4)
- Test on `io.js` `v2.4` [`948e511`](https://github.com/es-shims/RegExp.prototype.flags/commit/948e51129c01147ffe4dedc3a7d4980128d0cf73)
- Test on `io.js` `v2.2` [`4793278`](https://github.com/es-shims/RegExp.prototype.flags/commit/4793278f5aca187e36b42b08fc1388d8021400e2)
- Update `eslint` [`0f463da`](https://github.com/es-shims/RegExp.prototype.flags/commit/0f463daa14a193ed94b16c46832074d63e861c91)
- Update `eslint` [`5a16967`](https://github.com/es-shims/RegExp.prototype.flags/commit/5a16967db71bb8a24c81a27ee366f0b02b663e34)
- Test on `io.js` `v3.0` [`7ba8706`](https://github.com/es-shims/RegExp.prototype.flags/commit/7ba87064bc8520d34a9560bea8e366d70c93dbbb)
- Test on `iojs-v1.2` [`b521e09`](https://github.com/es-shims/RegExp.prototype.flags/commit/b521e099b7de48cfbdd6860265eb5e972d2859a5)

## [v1.0.1](https://github.com/es-shims/RegExp.prototype.flags/compare/v1.0.0...v1.0.1) - 2014-12-13

### Merged

- Match the spec properly: throw when not an object; make getter generic. [`#3`](https://github.com/es-shims/RegExp.prototype.flags/pull/3)

### Fixed

- Match the spec properly [`#1`](https://github.com/es-shims/RegExp.prototype.flags/issues/1)

### Commits

- Speed up the “is object” check in case of `null` or `undefined` [`77137f9`](https://github.com/es-shims/RegExp.prototype.flags/commit/77137f99449c9b6583cdfda295a00b832dfd45f3)

## v1.0.0 - 2014-12-10

### Commits

- Adding dotfiles [`313812e`](https://github.com/es-shims/RegExp.prototype.flags/commit/313812e1d8ff42a13dbc8689f2e719324c46c9ca)
- Tests [`625a042`](https://github.com/es-shims/RegExp.prototype.flags/commit/625a042220a3152b49608fb6f187f67bff02b6fb)
- Add package.json [`8b98257`](https://github.com/es-shims/RegExp.prototype.flags/commit/8b98257f900d0a73c8eb3805b9b01999e05e880a)
- Adding the README [`884798b`](https://github.com/es-shims/RegExp.prototype.flags/commit/884798b710d5a85bc6d9a6879f509766e2e57c0e)
- Implementation. [`4186cc9`](https://github.com/es-shims/RegExp.prototype.flags/commit/4186cc9d9a7533f78d88be976f0a8a2757604fc5)
- Adding LICENSE and CHANGELOG [`f87fa81`](https://github.com/es-shims/RegExp.prototype.flags/commit/f87fa8126cc6c39747fbe0dc6cb40ca0ff77fbbc)
- Fixing README URLs [`b821703`](https://github.com/es-shims/RegExp.prototype.flags/commit/b821703d5e5b01ee4f526f15c8e525645cf95ef7)
- Clean up dependencies; update `tape`, `jscs`, `nsp` [`0e13fc1`](https://github.com/es-shims/RegExp.prototype.flags/commit/0e13fc12df09f3a7ac30116ef13bba820c220730)
- Initial commit. [`8a9e35e`](https://github.com/es-shims/RegExp.prototype.flags/commit/8a9e35e15f65c9640e64ee14fab190a60993efaa)


---

File name: node_modules\regexp.prototype.flags\implementation.js

Code:
'use strict';

var setFunctionName = require('set-function-name');
var $TypeError = require('es-errors/type');

var $Object = Object;

module.exports = setFunctionName(function flags() {
	if (this == null || this !== $Object(this)) {
		throw new $TypeError('RegExp.prototype.flags getter called on non-object');
	}
	var result = '';
	if (this.hasIndices) {
		result += 'd';
	}
	if (this.global) {
		result += 'g';
	}
	if (this.ignoreCase) {
		result += 'i';
	}
	if (this.multiline) {
		result += 'm';
	}
	if (this.dotAll) {
		result += 's';
	}
	if (this.unicode) {
		result += 'u';
	}
	if (this.unicodeSets) {
		result += 'v';
	}
	if (this.sticky) {
		result += 'y';
	}
	return result;
}, 'get flags', true);



---

File name: node_modules\regexp.prototype.flags\index.js

Code:
'use strict';

var define = require('define-properties');
var callBind = require('call-bind');

var implementation = require('./implementation');
var getPolyfill = require('./polyfill');
var shim = require('./shim');

var flagsBound = callBind(getPolyfill());

define(flagsBound, {
	getPolyfill: getPolyfill,
	implementation: implementation,
	shim: shim
});

module.exports = flagsBound;


---

File name: node_modules\regexp.prototype.flags\package.json

Code:
{
	"name": "regexp.prototype.flags",
	"version": "1.5.4",
	"author": "Jordan Harband <ljharb@gmail.com>",
	"funding": {
		"url": "https://github.com/sponsors/ljharb"
	},
	"description": "ES6 spec-compliant RegExp.prototype.flags shim.",
	"license": "MIT",
	"main": "index.js",
	"scripts": {
		"prepack": "npmignore --auto --commentLines=autogenerated",
		"prepublish": "not-in-publish || npm run prepublishOnly",
		"prepublishOnly": "safe-publish-latest",
		"pretest": "npm run lint",
		"test": "npm run tests-only",
		"posttest": "npx npm@'>=10.2' audit --production",
		"tests-only": "nyc tape 'test/**/*.js'",
		"prelint": "eclint check $(git ls-files | xargs find 2> /dev/null | grep -vE 'node_modules|\\.git')",
		"lint": "eslint --ext=js,mjs .",
		"postlint": "evalmd README.md && es-shim-api --bound",
		"version": "auto-changelog && git add CHANGELOG.md",
		"postversion": "auto-changelog && git add CHANGELOG.md && git commit --no-edit --amend && git tag -f \"v$(node -e \"console.log(require('./package.json').version)\")\""
	},
	"repository": {
		"type": "git",
		"url": "git://github.com/es-shims/RegExp.prototype.flags.git"
	},
	"keywords": [
		"RegExp.prototype.flags",
		"regex",
		"regular expression",
		"ES6",
		"shim",
		"flag",
		"flags",
		"regexp",
		"RegExp#flags",
		"polyfill",
		"es-shim API"
	],
	"dependencies": {
		"call-bind": "^1.0.8",
		"define-properties": "^1.2.1",
		"es-errors": "^1.3.0",
		"get-proto": "^1.0.1",
		"gopd": "^1.2.0",
		"set-function-name": "^2.0.2"
	},
	"devDependencies": {
		"@es-shims/api": "^2.5.1",
		"@ljharb/eslint-config": "^21.1.1",
		"auto-changelog": "^2.5.0",
		"available-regexp-flags": "^1.0.4",
		"eclint": "^2.8.1",
		"encoding": "^0.1.13",
		"es-value-fixtures": "^1.5.0",
		"eslint": "=8.8.0",
		"evalmd": "^0.0.19",
		"for-each": "^0.3.3",
		"functions-have-names": "^1.2.3",
		"has-strict-mode": "^1.0.1",
		"hasown": "^2.0.2",
		"in-publish": "^2.0.1",
		"npmignore": "^0.3.1",
		"nyc": "^10.3.2",
		"object-inspect": "^1.13.3",
		"safe-publish-latest": "^2.0.0",
		"tape": "^5.9.0"
	},
	"testling": {
		"files": "test/index.js",
		"browsers": [
			"iexplore/9.0..latest",
			"firefox/4.0..6.0",
			"firefox/15.0..latest",
			"firefox/nightly",
			"chrome/4.0..10.0",
			"chrome/20.0..latest",
			"chrome/canary",
			"opera/11.6..latest",
			"opera/next",
			"safari/5.0..latest",
			"ipad/6.0..latest",
			"iphone/6.0..latest",
			"android-browser/4.2"
		]
	},
	"engines": {
		"node": ">= 0.4"
	},
	"auto-changelog": {
		"output": "CHANGELOG.md",
		"template": "keepachangelog",
		"unreleased": false,
		"commitLimit": false,
		"backfillLimit": false,
		"hideCredit": true
	},
	"publishConfig": {
		"ignore": [
			".github/workflows"
		]
	}
}


---

File name: node_modules\regexp.prototype.flags\polyfill.js

Code:
'use strict';

var implementation = require('./implementation');

var supportsDescriptors = require('define-properties').supportsDescriptors;
var $gOPD = Object.getOwnPropertyDescriptor;

module.exports = function getPolyfill() {
	if (supportsDescriptors && (/a/mig).flags === 'gim') {
		var descriptor = $gOPD(RegExp.prototype, 'flags');
		if (
			descriptor
			&& typeof descriptor.get === 'function'
			&& 'dotAll' in RegExp.prototype
			&& 'hasIndices' in RegExp.prototype
		) {
			/* eslint getter-return: 0 */
			var calls = '';
			var o = {};
			Object.defineProperty(o, 'hasIndices', {
				get: function () {
					calls += 'd';
				}
			});
			Object.defineProperty(o, 'sticky', {
				get: function () {
					calls += 'y';
				}
			});

			descriptor.get.call(o);

			if (calls === 'dy') {
				return descriptor.get;
			}
		}
	}
	return implementation;
};


---

File name: node_modules\regexp.prototype.flags\README.md

Code:
RegExp.prototype.flags <sup>[![Version Badge][npm-version-svg]][package-url]</sup>

[![Build Status][travis-svg]][travis-url]
[![dependency status][deps-svg]][deps-url]
[![dev dependency status][dev-deps-svg]][dev-deps-url]
[![License][license-image]][license-url]
[![Downloads][downloads-image]][downloads-url]

[![npm badge][npm-badge-png]][package-url]

[![browser support][testling-svg]][testling-url]

An ES6 spec-compliant `RegExp.prototype.flags` shim. Invoke its "shim" method to shim RegExp.prototype.flags if it is unavailable.
*Note*: `RegExp#flags` requires a true ES5 environment - specifically, one with ES5 getters.

This package implements the [es-shim API](https://github.com/es-shims/api) interface. It works in an ES5-supported environment and complies with the [spec](http://www.ecma-international.org/ecma-262/6.0/#sec-get-regexp.prototype.flags).

Most common usage:
```js
var flags = require('regexp.prototype.flags');
var assert = require('assert');

assert(flags(/a/) === '');
assert(flags(new RegExp('a')) === '');
assert(flags(/a/mig) === 'gim');
assert(flags(new RegExp('a', 'mig')) === 'gim');

if (!RegExp.prototype.flags) {
	flags.shim();
}

assert(flags(/a/) === /a/.flags);
assert(flags(new RegExp('a')) === new RegExp('a').flags);
assert(flags(/a/mig) === /a/mig.flags);
assert(flags(new RegExp('a', 'mig')) === new RegExp('a', 'mig').flags);
```

## Tests
Simply clone the repo, `npm install`, and run `npm test`

[package-url]: https://npmjs.com/package/regexp.prototype.flags
[npm-version-svg]: http://versionbadg.es/es-shims/RegExp.prototype.flags.svg
[travis-svg]: https://travis-ci.org/es-shims/RegExp.prototype.flags.svg
[travis-url]: https://travis-ci.org/es-shims/RegExp.prototype.flags
[deps-svg]: https://david-dm.org/es-shims/RegExp.prototype.flags.svg
[deps-url]: https://david-dm.org/es-shims/RegExp.prototype.flags
[dev-deps-svg]: https://david-dm.org/es-shims/RegExp.prototype.flags/dev-status.svg
[dev-deps-url]: https://david-dm.org/es-shims/RegExp.prototype.flags#info=devDependencies
[testling-svg]: https://ci.testling.com/es-shims/RegExp.prototype.flags.png
[testling-url]: https://ci.testling.com/es-shims/RegExp.prototype.flags
[npm-badge-png]: https://nodei.co/npm/regexp.prototype.flags.png?downloads=true&stars=true
[license-image]: http://img.shields.io/npm/l/regexp.prototype.flags.svg
[license-url]: LICENSE
[downloads-image]: http://img.shields.io/npm/dm/regexp.prototype.flags.svg
[downloads-url]: http://npm-stat.com/charts.html?package=regexp.prototype.flags


---

File name: node_modules\regexp.prototype.flags\shim.js

Code:
'use strict';

var supportsDescriptors = require('define-properties').supportsDescriptors;
var getPolyfill = require('./polyfill');
var gOPD = require('gopd');
var defineProperty = Object.defineProperty;
var $TypeError = require('es-errors');
var getProto = require('get-proto');
var regex = /a/;

module.exports = function shimFlags() {
	if (!supportsDescriptors || !getProto) {
		throw new $TypeError('RegExp.prototype.flags requires a true ES5 environment that supports property descriptors');
	}
	var polyfill = getPolyfill();
	var proto = getProto(regex);
	var descriptor = gOPD(proto, 'flags');
	if (!descriptor || descriptor.get !== polyfill) {
		defineProperty(proto, 'flags', {
			configurable: true,
			enumerable: false,
			get: polyfill
		});
	}
	return polyfill;
};


---

File name: node_modules\regexp.prototype.flags\test\builtin.js

Code:
'use strict';

var test = require('tape');
var defineProperties = require('define-properties');
var callBind = require('call-bind');

var isEnumerable = Object.prototype.propertyIsEnumerable;
var functionsHaveNames = require('functions-have-names')();
var functionsHaveConfigurableNames = require('functions-have-names').functionsHaveConfigurableNames();
var hasStrictMode = require('has-strict-mode')();

var runTests = require('./tests');

test('builtin', function (t) {
	var descriptor = Object.getOwnPropertyDescriptor(RegExp.prototype, 'flags');

	t.equal(descriptor.get.length, 0, 'RegExp#flags getter has a length of 0');

	t.test('Function name', { skip: !functionsHaveNames }, function (st) {
		st.equal(descriptor.get.name, functionsHaveConfigurableNames ? 'get flags' : 'flags', 'RegExp#flags getter has name "get flags" (or "flags" if function names are not configurable)');
		st.end();
	});

	t.test('enumerability', { skip: !defineProperties.supportsDescriptors }, function (et) {
		et.equal(false, isEnumerable.call(RegExp.prototype, 'flags'), 'RegExp#flags is not enumerable');
		et.end();
	});

	t.test('bad array/this value', { skip: !hasStrictMode }, function (st) {
		st['throws'](function () { return descriptor.get.call(undefined); }, TypeError, 'undefined is not an object');
		st['throws'](function () { return descriptor.get.call(null); }, TypeError, 'null is not an object');
		st.end();
	});

	t.test('has the correct descriptor', function (st) {
		st.equal(descriptor.configurable, true);
		st.equal(descriptor.enumerable, false);
		st.equal(typeof descriptor.get, 'function');
		st.equal(descriptor.set, undefined);
		st.end();
	});

	runTests(callBind(descriptor.get), t);

	t.end();
});


---

File name: node_modules\regexp.prototype.flags\test\implementation.js

Code:
'use strict';

var flags = require('../implementation');
var callBind = require('call-bind');
var test = require('tape');
var hasStrictMode = require('has-strict-mode')();
var runTests = require('./tests');

test('as a function', function (t) {
	t.test('bad array/this value', { skip: !hasStrictMode }, function (st) {
		/* eslint no-useless-call: 0 */
		st['throws'](function () { flags.call(undefined); }, TypeError, 'undefined is not an object');
		st['throws'](function () { flags.call(null); }, TypeError, 'null is not an object');
		st.end();
	});

	runTests(callBind(flags), t);

	t.end();
});


---

File name: node_modules\regexp.prototype.flags\test\index.js

Code:
'use strict';

var flags = require('../');
var test = require('tape');
var runTests = require('./tests');

test('as a function', function (t) {
	t.test('bad array/this value', function (st) {
		st['throws'](function () { flags(undefined); }, TypeError, 'undefined is not an object');
		st['throws'](function () { flags(null); }, TypeError, 'null is not an object');
		st.end();
	});

	runTests(flags, t);

	t.end();
});


---

File name: node_modules\regexp.prototype.flags\test\shimmed.js

Code:
'use strict';

require('../auto');

var test = require('tape');
var defineProperties = require('define-properties');
var callBind = require('call-bind');

var isEnumerable = Object.prototype.propertyIsEnumerable;
var functionsHaveNames = require('functions-have-names')();
var functionsHaveConfigurableNames = require('functions-have-names').functionsHaveConfigurableNames();
var hasStrictMode = require('has-strict-mode')();

var runTests = require('./tests');

test('shimmed', function (t) {
	var descriptor = Object.getOwnPropertyDescriptor(RegExp.prototype, 'flags');

	t.equal(descriptor.get.length, 0, 'RegExp#flags getter has a length of 0');

	t.test('Function name', { skip: !functionsHaveNames }, function (st) {
		st.equal(descriptor.get.name, functionsHaveConfigurableNames ? 'get flags' : 'flags', 'RegExp#flags getter has name "get flags" (or "flags" if function names are not configurable)');
		st.end();
	});

	t.test('enumerability', { skip: !defineProperties.supportsDescriptors }, function (et) {
		et.equal(false, isEnumerable.call(RegExp.prototype, 'flags'), 'RegExp#flags is not enumerable');
		et.end();
	});

	t.test('bad array/this value', { skip: !hasStrictMode }, function (st) {
		st['throws'](function () { return descriptor.get.call(undefined); }, TypeError, 'undefined is not an object');
		st['throws'](function () { return descriptor.get.call(null); }, TypeError, 'null is not an object');
		st.end();
	});

	t.test('has the correct descriptor', function (st) {
		st.equal(descriptor.configurable, true);
		st.equal(descriptor.enumerable, false);
		st.equal(typeof descriptor.get, 'function');
		st.equal(descriptor.set, undefined);
		st.end();
	});

	runTests(callBind(descriptor.get), t);

	t.end();
});


---

File name: node_modules\regexp.prototype.flags\test\tests.js

Code:
'use strict';

var hasOwn = require('hasown');
var inspect = require('object-inspect');
var supportsDescriptors = require('define-properties').supportsDescriptors;
var v = require('es-value-fixtures');

var forEach = require('for-each');
var availableFlags = require('available-regexp-flags');
var regexProperties = require('available-regexp-flags/properties');

var sortedFlags = availableFlags.slice().sort(function (a, b) { return a.localeCompare(b); }).join('');

var getRegexLiteral = function (stringRegex) {
	try {
		// eslint-disable-next-line no-new-func
		return Function('return ' + stringRegex + ';')();
	} catch (e) { /**/ }
	return null;
};

module.exports = function runTests(flags, t) {
	forEach(v.primitives, function (nonObject) {
		t['throws'](
			function () { flags(nonObject); },
			TypeError,
			'throws when called with a non-object receiver: ' + inspect(nonObject)
		);
	});

	t.equal(flags(/a/g), 'g', 'flags(/a/g) !== "g"');
	t.equal(flags(/a/gmi), 'gim', 'flags(/a/gmi) !== "gim"');
	t.equal(flags(new RegExp('a', 'gmi')), 'gim', 'flags(new RegExp("a", "gmi")) !== "gim"');
	t.equal(flags(/a/), '', 'flags(/a/) !== ""');
	t.equal(flags(new RegExp('a')), '', 'flags(new RegExp("a")) !== ""');

	forEach(availableFlags, function (flag) {
		var property = regexProperties[flag];
		t.test(property + ' flag', function (st) {
			st.equal(flags(getRegexLiteral('/a/' + flag)), flag, 'flags(/a/' + flag + ') !== ' + inspect(flag));
			st.equal(flags(new RegExp('a', flag)), flag, 'flags(new RegExp("a", ' + inspect(flag) + ')) !== ' + inspect(flag));
			st.end();
		});
	});

	t.test('sorting', function (st) {
		st.equal(flags(/a/gim), 'gim', 'flags(/a/gim) !== "gim"');
		st.equal(flags(/a/mig), 'gim', 'flags(/a/mig) !== "gim"');
		st.equal(flags(/a/mgi), 'gim', 'flags(/a/mgi) !== "gim"');
		if (hasOwn(RegExp.prototype, 'sticky')) {
			st.equal(flags(getRegexLiteral('/a/gyim')), 'gimy', 'flags(/a/gyim) !== "gimy"');
		}
		if (hasOwn(RegExp.prototype, 'unicode')) {
			st.equal(flags(getRegexLiteral('/a/ugmi')), 'gimu', 'flags(/a/ugmi) !== "gimu"');
		}
		if (hasOwn(RegExp.prototype, 'dotAll')) {
			st.equal(flags(getRegexLiteral('/a/sgmi')), 'gims', 'flags(/a/sgmi) !== "gims"');
		}

		var randomFlags = availableFlags.slice().sort(function () { return Math.random() > 0.5 ? 1 : -1; }).join('').replace('v', '');
		st.equal(
			flags(getRegexLiteral('/a/' + randomFlags)),
			sortedFlags.replace('v', ''),
			'random: flags(/a/' + randomFlags + ') === ' + inspect(sortedFlags)
		);

		st.end();
	});

	t.test('basic examples', function (st) {
		st.equal(flags(/a/g), 'g', '(/a/g).flags !== "g"');
		st.equal(flags(/a/gmi), 'gim', '(/a/gmi).flags !== "gim"');
		st.equal(flags(new RegExp('a', 'gmi')), 'gim', 'new RegExp("a", "gmi").flags !== "gim"');
		st.equal(flags(/a/), '', '(/a/).flags !== ""');
		st.equal(flags(new RegExp('a')), '', 'new RegExp("a").flags !== ""');

		st.end();
	});

	t.test('generic flags', function (st) {
		st.equal(flags({}), '');
		st.equal(flags({ ignoreCase: true }), 'i');
		st.equal(flags({ dotAll: 1, global: 0, sticky: 1, unicode: 1 }), 'suy');
		st.equal(flags({ __proto__: { multiline: true } }), 'm');

		var obj = {};
		forEach(availableFlags, function (flag) {
			if (flag !== 'v') {
				obj[regexProperties[flag]] = true;
			}
		});
		st.equal(flags(obj), sortedFlags.replace('v', ''), 'an object with every available flag: ' + sortedFlags);

		st.end();
	});

	t.test('getters', { skip: !supportsDescriptors }, function (st) {
		/* eslint getter-return: 0 */
		var calls = '';
		var re = {};
		Object.defineProperty(re, 'hasIndices', {
			get: function () {
				calls += 'd';
			}
		});
		Object.defineProperty(re, 'global', {
			get: function () {
				calls += 'g';
			}
		});
		Object.defineProperty(re, 'ignoreCase', {
			get: function () {
				calls += 'i';
			}
		});
		Object.defineProperty(re, 'multiline', {
			get: function () {
				calls += 'm';
			}
		});
		Object.defineProperty(re, 'dotAll', {
			get: function () {
				calls += 's';
			}
		});
		Object.defineProperty(re, 'unicode', {
			get: function () {
				calls += 'u';
			}
		});
		Object.defineProperty(re, 'sticky', {
			get: function () {
				calls += 'y';
			}
		});

		flags(re);

		st.equal(calls, 'dgimsuy', 'getters are called in expected order');

		st.end();
	});
};


---

File name: node_modules\regexpu-core\data\all-characters.js

Code:
// Generated using `npm run build`. Do not edit.
'use strict';

const regenerate = require('regenerate');

exports.UNICODE_SET = regenerate()
		.addRange(0x0, 0x10FFFF)

exports.UNICODE_IV_SET = regenerate(0xD7, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x133, 0x135, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x180, 0x183, 0x185, 0x188, 0x192, 0x195, 0x19E, 0x1A1, 0x1A3, 0x1A5, 0x1A8, 0x1AD, 0x1B0, 0x1B4, 0x1B6, 0x1C6, 0x1C9, 0x1CC, 0x1CE, 0x1D0, 0x1D2, 0x1D4, 0x1D6, 0x1D8, 0x1DA, 0x1DF, 0x1E1, 0x1E3, 0x1E5, 0x1E7, 0x1E9, 0x1EB, 0x1ED, 0x1F3, 0x1F5, 0x1F9, 0x1FB, 0x1FD, 0x1FF, 0x201, 0x203, 0x205, 0x207, 0x209, 0x20B, 0x20D, 0x20F, 0x211, 0x213, 0x215, 0x217, 0x219, 0x21B, 0x21D, 0x21F, 0x221, 0x223, 0x225, 0x227, 0x229, 0x22B, 0x22D, 0x22F, 0x231, 0x23C, 0x242, 0x247, 0x249, 0x24B, 0x24D, 0x371, 0x387, 0x38B, 0x38D, 0x390, 0x3A2, 0x3D7, 0x3D9, 0x3DB, 0x3DD, 0x3DF, 0x3E1, 0x3E3, 0x3E5, 0x3E7, 0x3E9, 0x3EB, 0x3ED, 0x3EF, 0x3F6, 0x3F8, 0x461, 0x463, 0x465, 0x467, 0x469, 0x46B, 0x46D, 0x46F, 0x471, 0x473, 0x475, 0x477, 0x479, 0x47B, 0x47D, 0x47F, 0x48B, 0x48D, 0x48F, 0x491, 0x493, 0x495, 0x497, 0x499, 0x49B, 0x49D, 0x49F, 0x4A1, 0x4A3, 0x4A5, 0x4A7, 0x4A9, 0x4AB, 0x4AD, 0x4AF, 0x4B1, 0x4B3, 0x4B5, 0x4B7, 0x4B9, 0x4BB, 0x4BD, 0x4BF, 0x4C2, 0x4C4, 0x4C6, 0x4C8, 0x4CA, 0x4CC, 0x4D1, 0x4D3, 0x4D5, 0x4D7, 0x4D9, 0x4DB, 0x4DD, 0x4DF, 0x4E1, 0x4E3, 0x4E5, 0x4E7, 0x4E9, 0x4EB, 0x4ED, 0x4EF, 0x4F1, 0x4F3, 0x4F5, 0x4F7, 0x4F9, 0x4FB, 0x4FD, 0x4FF, 0x501, 0x503, 0x505, 0x507, 0x509, 0x50B, 0x50D, 0x50F, 0x511, 0x513, 0x515, 0x517, 0x519, 0x51B, 0x51D, 0x51F, 0x521, 0x523, 0x525, 0x527, 0x529, 0x52B, 0x52D, 0x10C6, 0x1E01, 0x1E03, 0x1E05, 0x1E07, 0x1E09, 0x1E0B, 0x1E0D, 0x1E0F, 0x1E11, 0x1E13, 0x1E15, 0x1E17, 0x1E19, 0x1E1B, 0x1E1D, 0x1E1F, 0x1E21, 0x1E23, 0x1E25, 0x1E27, 0x1E29, 0x1E2B, 0x1E2D, 0x1E2F, 0x1E31, 0x1E33, 0x1E35, 0x1E37, 0x1E39, 0x1E3B, 0x1E3D, 0x1E3F, 0x1E41, 0x1E43, 0x1E45, 0x1E47, 0x1E49, 0x1E4B, 0x1E4D, 0x1E4F, 0x1E51, 0x1E53, 0x1E55, 0x1E57, 0x1E59, 0x1E5B, 0x1E5D, 0x1E5F, 0x1E61, 0x1E63, 0x1E65, 0x1E67, 0x1E69, 0x1E6B, 0x1E6D, 0x1E6F, 0x1E71, 0x1E73, 0x1E75, 0x1E77, 0x1E79, 0x1E7B, 0x1E7D, 0x1E7F, 0x1E81, 0x1E83, 0x1E85, 0x1E87, 0x1E89, 0x1E8B, 0x1E8D, 0x1E8F, 0x1E91, 0x1E93, 0x1E9F, 0x1EA1, 0x1EA3, 0x1EA5, 0x1EA7, 0x1EA9, 0x1EAB, 0x1EAD, 0x1EAF, 0x1EB1, 0x1EB3, 0x1EB5, 0x1EB7, 0x1EB9, 0x1EBB, 0x1EBD, 0x1EBF, 0x1EC1, 0x1EC3, 0x1EC5, 0x1EC7, 0x1EC9, 0x1ECB, 0x1ECD, 0x1ECF, 0x1ED1, 0x1ED3, 0x1ED5, 0x1ED7, 0x1ED9, 0x1EDB, 0x1EDD, 0x1EDF, 0x1EE1, 0x1EE3, 0x1EE5, 0x1EE7, 0x1EE9, 0x1EEB, 0x1EED, 0x1EEF, 0x1EF1, 0x1EF3, 0x1EF5, 0x1EF7, 0x1EF9, 0x1EFB, 0x1EFD, 0x1F5A, 0x1F5C, 0x1F5E, 0x1FBD, 0x2C61, 0x2C68, 0x2C6A, 0x2C6C, 0x2C71, 0x2C81, 0x2C83, 0x2C85, 0x2C87, 0x2C89, 0x2C8B, 0x2C8D, 0x2C8F, 0x2C91, 0x2C93, 0x2C95, 0x2C97, 0x2C99, 0x2C9B, 0x2C9D, 0x2C9F, 0x2CA1, 0x2CA3, 0x2CA5, 0x2CA7, 0x2CA9, 0x2CAB, 0x2CAD, 0x2CAF, 0x2CB1, 0x2CB3, 0x2CB5, 0x2CB7, 0x2CB9, 0x2CBB, 0x2CBD, 0x2CBF, 0x2CC1, 0x2CC3, 0x2CC5, 0x2CC7, 0x2CC9, 0x2CCB, 0x2CCD, 0x2CCF, 0x2CD1, 0x2CD3, 0x2CD5, 0x2CD7, 0x2CD9, 0x2CDB, 0x2CDD, 0x2CDF, 0x2CE1, 0x2CEC, 0xA641, 0xA643, 0xA645, 0xA647, 0xA649, 0xA64B, 0xA64D, 0xA64F, 0xA651, 0xA653, 0xA655, 0xA657, 0xA659, 0xA65B, 0xA65D, 0xA65F, 0xA661, 0xA663, 0xA665, 0xA667, 0xA669, 0xA66B, 0xA681, 0xA683, 0xA685, 0xA687, 0xA689, 0xA68B, 0xA68D, 0xA68F, 0xA691, 0xA693, 0xA695, 0xA697, 0xA699, 0xA723, 0xA725, 0xA727, 0xA729, 0xA72B, 0xA72D, 0xA733, 0xA735, 0xA737, 0xA739, 0xA73B, 0xA73D, 0xA73F, 0xA741, 0xA743, 0xA745, 0xA747, 0xA749, 0xA74B, 0xA74D, 0xA74F, 0xA751, 0xA753, 0xA755, 0xA757, 0xA759, 0xA75B, 0xA75D, 0xA75F, 0xA761, 0xA763, 0xA765, 0xA767, 0xA769, 0xA76B, 0xA76D, 0xA77A, 0xA77C, 0xA77F, 0xA781, 0xA783, 0xA785, 0xA78C, 0xA791, 0xA797, 0xA799, 0xA79B, 0xA79D, 0xA79F, 0xA7A1, 0xA7A3, 0xA7A5, 0xA7A7, 0xA7A9, 0xA7AF, 0xA7B5, 0xA7B7, 0xA7B9, 0xA7BB, 0xA7BD, 0xA7BF, 0xA7C1, 0xA7C3, 0xA7C8, 0xA7CA, 0xA7D7, 0xA7D9, 0xA7DB, 0x1057B, 0x1058B, 0x10593)
		.addRange(0x0, 0x40)
		.addRange(0x5B, 0xB4)
		.addRange(0xB6, 0xBF)
		.addRange(0xDF, 0xFF)
		.addRange(0x12F, 0x131)
		.addRange(0x137, 0x138)
		.addRange(0x148, 0x149)
		.addRange(0x18C, 0x18D)
		.addRange(0x199, 0x19B)
		.addRange(0x1AA, 0x1AB)
		.addRange(0x1B9, 0x1BB)
		.addRange(0x1BD, 0x1C3)
		.addRange(0x1DC, 0x1DD)
		.addRange(0x1EF, 0x1F0)
		.addRange(0x233, 0x239)
		.addRange(0x23F, 0x240)
		.addRange(0x24F, 0x344)
		.addRange(0x346, 0x36F)
		.addRange(0x373, 0x375)
		.addRange(0x377, 0x37E)
		.addRange(0x380, 0x385)
		.addRange(0x3AC, 0x3C1)
		.addRange(0x3C3, 0x3CE)
		.addRange(0x3D2, 0x3D4)
		.addRange(0x3F2, 0x3F3)
		.addRange(0x3FB, 0x3FC)
		.addRange(0x430, 0x45F)
		.addRange(0x481, 0x489)
		.addRange(0x4CE, 0x4CF)
		.addRange(0x52F, 0x530)
		.addRange(0x557, 0x109F)
		.addRange(0x10C8, 0x10CC)
		.addRange(0x10CE, 0x13F7)
		.addRange(0x13FE, 0x1C7F)
		.addRange(0x1C8A, 0x1C8F)
		.addRange(0x1CBB, 0x1CBC)
		.addRange(0x1CC0, 0x1DFF)
		.addRange(0x1E95, 0x1E9A)
		.addRange(0x1E9C, 0x1E9D)
		.addRange(0x1EFF, 0x1F07)
		.addRange(0x1F10, 0x1F17)
		.addRange(0x1F1E, 0x1F27)
		.addRange(0x1F30, 0x1F37)
		.addRange(0x1F40, 0x1F47)
		.addRange(0x1F4E, 0x1F58)
		.addRange(0x1F60, 0x1F67)
		.addRange(0x1F70, 0x1F87)
		.addRange(0x1F90, 0x1F97)
		.addRange(0x1FA0, 0x1FA7)
		.addRange(0x1FB0, 0x1FB7)
		.addRange(0x1FBF, 0x1FC7)
		.addRange(0x1FCD, 0x1FD2)
		.addRange(0x1FD4, 0x1FD7)
		.addRange(0x1FDC, 0x1FE2)
		.addRange(0x1FE4, 0x1FE7)
		.addRange(0x1FED, 0x1FF7)
		.addRange(0x1FFD, 0x2125)
		.addRange(0x2127, 0x2129)
		.addRange(0x212C, 0x2131)
		.addRange(0x2133, 0x215F)
		.addRange(0x2170, 0x2182)
		.addRange(0x2184, 0x24B5)
		.addRange(0x24D0, 0x2BFF)
		.addRange(0x2C30, 0x2C5F)
		.addRange(0x2C65, 0x2C66)
		.addRange(0x2C73, 0x2C74)
		.addRange(0x2C76, 0x2C7D)
		.addRange(0x2CE3, 0x2CEA)
		.addRange(0x2CEE, 0x2CF1)
		.addRange(0x2CF3, 0xA63F)
		.addRange(0xA66D, 0xA67F)
		.addRange(0xA69B, 0xA721)
		.addRange(0xA72F, 0xA731)
		.addRange(0xA76F, 0xA778)
		.addRange(0xA787, 0xA78A)
		.addRange(0xA78E, 0xA78F)
		.addRange(0xA793, 0xA795)
		.addRange(0xA7CD, 0xA7CF)
		.addRange(0xA7D1, 0xA7D5)
		.addRange(0xA7DD, 0xA7F4)
		.addRange(0xA7F6, 0xAB6F)
		.addRange(0xABC0, 0xFB04)
		.addRange(0xFB06, 0xFF20)
		.addRange(0xFF3B, 0x103FF)
		.addRange(0x10428, 0x104AF)
		.addRange(0x104D4, 0x1056F)
		.addRange(0x10596, 0x10C7F)
		.addRange(0x10CB3, 0x10D4F)
		.addRange(0x10D66, 0x1189F)
		.addRange(0x118C0, 0x16E3F)
		.addRange(0x16E60, 0x1E8FF)
		.addRange(0x1E922, 0x10FFFF)


---

File name: node_modules\regexpu-core\data\character-class-escape-sets.js

Code:
// Generated using `npm run build`. Do not edit.
'use strict';

const regenerate = require('regenerate');
const UNICODE_IV_SET = require('./all-characters.js').UNICODE_IV_SET

exports.REGULAR = new Map([
	['d', regenerate()
		.addRange(0x30, 0x39)],
	['D', regenerate()
		.addRange(0x0, 0x2F)
		.addRange(0x3A, 0xFFFF)],
	['s', regenerate(0x20, 0xA0, 0x1680, 0x202F, 0x205F, 0x3000, 0xFEFF)
		.addRange(0x9, 0xD)
		.addRange(0x2000, 0x200A)
		.addRange(0x2028, 0x2029)],
	['S', regenerate()
		.addRange(0x0, 0x8)
		.addRange(0xE, 0x1F)
		.addRange(0x21, 0x9F)
		.addRange(0xA1, 0x167F)
		.addRange(0x1681, 0x1FFF)
		.addRange(0x200B, 0x2027)
		.addRange(0x202A, 0x202E)
		.addRange(0x2030, 0x205E)
		.addRange(0x2060, 0x2FFF)
		.addRange(0x3001, 0xFEFE)
		.addRange(0xFF00, 0xFFFF)],
	['w', regenerate(0x5F)
		.addRange(0x30, 0x39)
		.addRange(0x41, 0x5A)
		.addRange(0x61, 0x7A)],
	['W', regenerate(0x60)
		.addRange(0x0, 0x2F)
		.addRange(0x3A, 0x40)
		.addRange(0x5B, 0x5E)
		.addRange(0x7B, 0xFFFF)]
]);

exports.UNICODE = new Map([
	['d', regenerate()
		.addRange(0x30, 0x39)],
	['D', regenerate()
		.addRange(0x0, 0x2F)
		.addRange(0x3A, 0x10FFFF)],
	['s', regenerate(0x20, 0xA0, 0x1680, 0x202F, 0x205F, 0x3000, 0xFEFF)
		.addRange(0x9, 0xD)
		.addRange(0x2000, 0x200A)
		.addRange(0x2028, 0x2029)],
	['S', regenerate()
		.addRange(0x0, 0x8)
		.addRange(0xE, 0x1F)
		.addRange(0x21, 0x9F)
		.addRange(0xA1, 0x167F)
		.addRange(0x1681, 0x1FFF)
		.addRange(0x200B, 0x2027)
		.addRange(0x202A, 0x202E)
		.addRange(0x2030, 0x205E)
		.addRange(0x2060, 0x2FFF)
		.addRange(0x3001, 0xFEFE)
		.addRange(0xFF00, 0x10FFFF)],
	['w', regenerate(0x5F)
		.addRange(0x30, 0x39)
		.addRange(0x41, 0x5A)
		.addRange(0x61, 0x7A)],
	['W', regenerate(0x60)
		.addRange(0x0, 0x2F)
		.addRange(0x3A, 0x40)
		.addRange(0x5B, 0x5E)
		.addRange(0x7B, 0x10FFFF)]
]);

exports.UNICODE_IGNORE_CASE = new Map([
	['d', regenerate()
		.addRange(0x30, 0x39)],
	['D', regenerate()
		.addRange(0x0, 0x2F)
		.addRange(0x3A, 0x10FFFF)],
	['s', regenerate(0x20, 0xA0, 0x1680, 0x202F, 0x205F, 0x3000, 0xFEFF)
		.addRange(0x9, 0xD)
		.addRange(0x2000, 0x200A)
		.addRange(0x2028, 0x2029)],
	['S', regenerate()
		.addRange(0x0, 0x8)
		.addRange(0xE, 0x1F)
		.addRange(0x21, 0x9F)
		.addRange(0xA1, 0x167F)
		.addRange(0x1681, 0x1FFF)
		.addRange(0x200B, 0x2027)
		.addRange(0x202A, 0x202E)
		.addRange(0x2030, 0x205E)
		.addRange(0x2060, 0x2FFF)
		.addRange(0x3001, 0xFEFE)
		.addRange(0xFF00, 0x10FFFF)],
	['w', regenerate(0x5F, 0x17F, 0x212A)
		.addRange(0x30, 0x39)
		.addRange(0x41, 0x5A)
		.addRange(0x61, 0x7A)],
	['W', regenerate(0x60)
		.addRange(0x0, 0x2F)
		.addRange(0x3A, 0x40)
		.addRange(0x5B, 0x5E)
		.addRange(0x7B, 0x17E)
		.addRange(0x180, 0x2129)
		.addRange(0x212B, 0x10FFFF)]
]);

exports.UNICODESET_IGNORE_CASE = new Map([
	['d', regenerate()
		.addRange(0x30, 0x39)],
	['D', UNICODE_IV_SET.clone().remove(regenerate()
		.addRange(0x30, 0x39))],
	['s', regenerate(0x20, 0xA0, 0x1680, 0x202F, 0x205F, 0x3000, 0xFEFF)
		.addRange(0x9, 0xD)
		.addRange(0x2000, 0x200A)
		.addRange(0x2028, 0x2029)],
	['S', UNICODE_IV_SET.clone().remove(regenerate(0x20, 0xA0, 0x1680, 0x202F, 0x205F, 0x3000, 0xFEFF)
		.addRange(0x9, 0xD)
		.addRange(0x2000, 0x200A)
		.addRange(0x2028, 0x2029))],
	['w', regenerate(0x5F)
		.addRange(0x30, 0x39)
		.addRange(0x61, 0x7A)],
	['W', UNICODE_IV_SET.clone().remove(regenerate(0x5F)
		.addRange(0x30, 0x39)
		.addRange(0x61, 0x7A))]
]);


---

File name: node_modules\regexpu-core\data\i-bmp-mappings.js

Code:
module.exports = new Map([
	[0xB5, 0x3BC],
	[0xC0, 0xE0],
	[0xC1, 0xE1],
	[0xC2, 0xE2],
	[0xC3, 0xE3],
	[0xC4, 0xE4],
	[0xC5, 0xE5],
	[0xC6, 0xE6],
	[0xC7, 0xE7],
	[0xC8, 0xE8],
	[0xC9, 0xE9],
	[0xCA, 0xEA],
	[0xCB, 0xEB],
	[0xCC, 0xEC],
	[0xCD, 0xED],
	[0xCE, 0xEE],
	[0xCF, 0xEF],
	[0xD0, 0xF0],
	[0xD1, 0xF1],
	[0xD2, 0xF2],
	[0xD3, 0xF3],
	[0xD4, 0xF4],
	[0xD5, 0xF5],
	[0xD6, 0xF6],
	[0xD8, 0xF8],
	[0xD9, 0xF9],
	[0xDA, 0xFA],
	[0xDB, 0xFB],
	[0xDC, 0xFC],
	[0xDD, 0xFD],
	[0xDE, 0xFE],
	[0xE0, 0xC0],
	[0xE1, 0xC1],
	[0xE2, 0xC2],
	[0xE3, 0xC3],
	[0xE4, 0xC4],
	[0xE5, 0xC5],
	[0xE6, 0xC6],
	[0xE7, 0xC7],
	[0xE8, 0xC8],
	[0xE9, 0xC9],
	[0xEA, 0xCA],
	[0xEB, 0xCB],
	[0xEC, 0xCC],
	[0xED, 0xCD],
	[0xEE, 0xCE],
	[0xEF, 0xCF],
	[0xF0, 0xD0],
	[0xF1, 0xD1],
	[0xF2, 0xD2],
	[0xF3, 0xD3],
	[0xF4, 0xD4],
	[0xF5, 0xD5],
	[0xF6, 0xD6],
	[0xF8, 0xD8],
	[0xF9, 0xD9],
	[0xFA, 0xDA],
	[0xFB, 0xDB],
	[0xFC, 0xDC],
	[0xFD, 0xDD],
	[0xFE, 0xDE],
	[0xFF, 0x178],
	[0x100, 0x101],
	[0x101, 0x100],
	[0x102, 0x103],
	[0x103, 0x102],
	[0x104, 0x105],
	[0x105, 0x104],
	[0x106, 0x107],
	[0x107, 0x106],
	[0x108, 0x109],
	[0x109, 0x108],
	[0x10A, 0x10B],
	[0x10B, 0x10A],
	[0x10C, 0x10D],
	[0x10D, 0x10C],
	[0x10E, 0x10F],
	[0x10F, 0x10E],
	[0x110, 0x111],
	[0x111, 0x110],
	[0x112, 0x113],
	[0x113, 0x112],
	[0x114, 0x115],
	[0x115, 0x114],
	[0x116, 0x117],
	[0x117, 0x116],
	[0x118, 0x119],
	[0x119, 0x118],
	[0x11A, 0x11B],
	[0x11B, 0x11A],
	[0x11C, 0x11D],
	[0x11D, 0x11C],
	[0x11E, 0x11F],
	[0x11F, 0x11E],
	[0x120, 0x121],
	[0x121, 0x120],
	[0x122, 0x123],
	[0x123, 0x122],
	[0x124, 0x125],
	[0x125, 0x124],
	[0x126, 0x127],
	[0x127, 0x126],
	[0x128, 0x129],
	[0x129, 0x128],
	[0x12A, 0x12B],
	[0x12B, 0x12A],
	[0x12C, 0x12D],
	[0x12D, 0x12C],
	[0x12E, 0x12F],
	[0x12F, 0x12E],
	[0x132, 0x133],
	[0x133, 0x132],
	[0x134, 0x135],
	[0x135, 0x134],
	[0x136, 0x137],
	[0x137, 0x136],
	[0x139, 0x13A],
	[0x13A, 0x139],
	[0x13B, 0x13C],
	[0x13C, 0x13B],
	[0x13D, 0x13E],
	[0x13E, 0x13D],
	[0x13F, 0x140],
	[0x140, 0x13F],
	[0x141, 0x142],
	[0x142, 0x141],
	[0x143, 0x144],
	[0x144, 0x143],
	[0x145, 0x146],
	[0x146, 0x145],
	[0x147, 0x148],
	[0x148, 0x147],
	[0x14A, 0x14B],
	[0x14B, 0x14A],
	[0x14C, 0x14D],
	[0x14D, 0x14C],
	[0x14E, 0x14F],
	[0x14F, 0x14E],
	[0x150, 0x151],
	[0x151, 0x150],
	[0x152, 0x153],
	[0x153, 0x152],
	[0x154, 0x155],
	[0x155, 0x154],
	[0x156, 0x157],
	[0x157, 0x156],
	[0x158, 0x159],
	[0x159, 0x158],
	[0x15A, 0x15B],
	[0x15B, 0x15A],
	[0x15C, 0x15D],
	[0x15D, 0x15C],
	[0x15E, 0x15F],
	[0x15F, 0x15E],
	[0x160, 0x161],
	[0x161, 0x160],
	[0x162, 0x163],
	[0x163, 0x162],
	[0x164, 0x165],
	[0x165, 0x164],
	[0x166, 0x167],
	[0x167, 0x166],
	[0x168, 0x169],
	[0x169, 0x168],
	[0x16A, 0x16B],
	[0x16B, 0x16A],
	[0x16C, 0x16D],
	[0x16D, 0x16C],
	[0x16E, 0x16F],
	[0x16F, 0x16E],
	[0x170, 0x171],
	[0x171, 0x170],
	[0x172, 0x173],
	[0x173, 0x172],
	[0x174, 0x175],
	[0x175, 0x174],
	[0x176, 0x177],
	[0x177, 0x176],
	[0x178, 0xFF],
	[0x179, 0x17A],
	[0x17A, 0x179],
	[0x17B, 0x17C],
	[0x17C, 0x17B],
	[0x17D, 0x17E],
	[0x17E, 0x17D],
	[0x180, 0x243],
	[0x181, 0x253],
	[0x182, 0x183],
	[0x183, 0x182],
	[0x184, 0x185],
	[0x185, 0x184],
	[0x186, 0x254],
	[0x187, 0x188],
	[0x188, 0x187],
	[0x189, 0x256],
	[0x18A, 0x257],
	[0x18B, 0x18C],
	[0x18C, 0x18B],
	[0x18E, 0x1DD],
	[0x18F, 0x259],
	[0x190, 0x25B],
	[0x191, 0x192],
	[0x192, 0x191],
	[0x193, 0x260],
	[0x194, 0x263],
	[0x195, 0x1F6],
	[0x196, 0x269],
	[0x197, 0x268],
	[0x198, 0x199],
	[0x199, 0x198],
	[0x19A, 0x23D],
	[0x19B, 0xA7DC],
	[0x19C, 0x26F],
	[0x19D, 0x272],
	[0x19E, 0x220],
	[0x19F, 0x275],
	[0x1A0, 0x1A1],
	[0x1A1, 0x1A0],
	[0x1A2, 0x1A3],
	[0x1A3, 0x1A2],
	[0x1A4, 0x1A5],
	[0x1A5, 0x1A4],
	[0x1A6, 0x280],
	[0x1A7, 0x1A8],
	[0x1A8, 0x1A7],
	[0x1A9, 0x283],
	[0x1AC, 0x1AD],
	[0x1AD, 0x1AC],
	[0x1AE, 0x288],
	[0x1AF, 0x1B0],
	[0x1B0, 0x1AF],
	[0x1B1, 0x28A],
	[0x1B2, 0x28B],
	[0x1B3, 0x1B4],
	[0x1B4, 0x1B3],
	[0x1B5, 0x1B6],
	[0x1B6, 0x1B5],
	[0x1B7, 0x292],
	[0x1B8, 0x1B9],
	[0x1B9, 0x1B8],
	[0x1BC, 0x1BD],
	[0x1BD, 0x1BC],
	[0x1BF, 0x1F7],
	[0x1C4, 0x1C6],
	[0x1C5, 0x1C6],
	[0x1C6, [
		0x1C4,
		0x1C5
	]],
	[0x1C7, 0x1C9],
	[0x1C8, 0x1C9],
	[0x1C9, [
		0x1C7,
		0x1C8
	]],
	[0x1CA, 0x1CC],
	[0x1CB, 0x1CC],
	[0x1CC, [
		0x1CA,
		0x1CB
	]],
	[0x1CD, 0x1CE],
	[0x1CE, 0x1CD],
	[0x1CF, 0x1D0],
	[0x1D0, 0x1CF],
	[0x1D1, 0x1D2],
	[0x1D2, 0x1D1],
	[0x1D3, 0x1D4],
	[0x1D4, 0x1D3],
	[0x1D5, 0x1D6],
	[0x1D6, 0x1D5],
	[0x1D7, 0x1D8],
	[0x1D8, 0x1D7],
	[0x1D9, 0x1DA],
	[0x1DA, 0x1D9],
	[0x1DB, 0x1DC],
	[0x1DC, 0x1DB],
	[0x1DD, 0x18E],
	[0x1DE, 0x1DF],
	[0x1DF, 0x1DE],
	[0x1E0, 0x1E1],
	[0x1E1, 0x1E0],
	[0x1E2, 0x1E3],
	[0x1E3, 0x1E2],
	[0x1E4, 0x1E5],
	[0x1E5, 0x1E4],
	[0x1E6, 0x1E7],
	[0x1E7, 0x1E6],
	[0x1E8, 0x1E9],
	[0x1E9, 0x1E8],
	[0x1EA, 0x1EB],
	[0x1EB, 0x1EA],
	[0x1EC, 0x1ED],
	[0x1ED, 0x1EC],
	[0x1EE, 0x1EF],
	[0x1EF, 0x1EE],
	[0x1F1, 0x1F3],
	[0x1F2, 0x1F3],
	[0x1F3, [
		0x1F1,
		0x1F2
	]],
	[0x1F4, 0x1F5],
	[0x1F5, 0x1F4],
	[0x1F6, 0x195],
	[0x1F7, 0x1BF],
	[0x1F8, 0x1F9],
	[0x1F9, 0x1F8],
	[0x1FA, 0x1FB],
	[0x1FB, 0x1FA],
	[0x1FC, 0x1FD],
	[0x1FD, 0x1FC],
	[0x1FE, 0x1FF],
	[0x1FF, 0x1FE],
	[0x200, 0x201],
	[0x201, 0x200],
	[0x202, 0x203],
	[0x203, 0x202],
	[0x204, 0x205],
	[0x205, 0x204],
	[0x206, 0x207],
	[0x207, 0x206],
	[0x208, 0x209],
	[0x209, 0x208],
	[0x20A, 0x20B],
	[0x20B, 0x20A],
	[0x20C, 0x20D],
	[0x20D, 0x20C],
	[0x20E, 0x20F],
	[0x20F, 0x20E],
	[0x210, 0x211],
	[0x211, 0x210],
	[0x212, 0x213],
	[0x213, 0x212],
	[0x214, 0x215],
	[0x215, 0x214],
	[0x216, 0x217],
	[0x217, 0x216],
	[0x218, 0x219],
	[0x219, 0x218],
	[0x21A, 0x21B],
	[0x21B, 0x21A],
	[0x21C, 0x21D],
	[0x21D, 0x21C],
	[0x21E, 0x21F],
	[0x21F, 0x21E],
	[0x220, 0x19E],
	[0x222, 0x223],
	[0x223, 0x222],
	[0x224, 0x225],
	[0x225, 0x224],
	[0x226, 0x227],
	[0x227, 0x226],
	[0x228, 0x229],
	[0x229, 0x228],
	[0x22A, 0x22B],
	[0x22B, 0x22A],
	[0x22C, 0x22D],
	[0x22D, 0x22C],
	[0x22E, 0x22F],
	[0x22F, 0x22E],
	[0x230, 0x231],
	[0x231, 0x230],
	[0x232, 0x233],
	[0x233, 0x232],
	[0x23A, 0x2C65],
	[0x23B, 0x23C],
	[0x23C, 0x23B],
	[0x23D, 0x19A],
	[0x23E, 0x2C66],
	[0x23F, 0x2C7E],
	[0x240, 0x2C7F],
	[0x241, 0x242],
	[0x242, 0x241],
	[0x243, 0x180],
	[0x244, 0x289],
	[0x245, 0x28C],
	[0x246, 0x247],
	[0x247, 0x246],
	[0x248, 0x249],
	[0x249, 0x248],
	[0x24A, 0x24B],
	[0x24B, 0x24A],
	[0x24C, 0x24D],
	[0x24D, 0x24C],
	[0x24E, 0x24F],
	[0x24F, 0x24E],
	[0x250, 0x2C6F],
	[0x251, 0x2C6D],
	[0x252, 0x2C70],
	[0x253, 0x181],
	[0x254, 0x186],
	[0x256, 0x189],
	[0x257, 0x18A],
	[0x259, 0x18F],
	[0x25B, 0x190],
	[0x25C, 0xA7AB],
	[0x260, 0x193],
	[0x261, 0xA7AC],
	[0x263, 0x194],
	[0x264, 0xA7CB],
	[0x265, 0xA78D],
	[0x266, 0xA7AA],
	[0x268, 0x197],
	[0x269, 0x196],
	[0x26A, 0xA7AE],
	[0x26B, 0x2C62],
	[0x26C, 0xA7AD],
	[0x26F, 0x19C],
	[0x271, 0x2C6E],
	[0x272, 0x19D],
	[0x275, 0x19F],
	[0x27D, 0x2C64],
	[0x280, 0x1A6],
	[0x282, 0xA7C5],
	[0x283, 0x1A9],
	[0x287, 0xA7B1],
	[0x288, 0x1AE],
	[0x289, 0x244],
	[0x28A, 0x1B1],
	[0x28B, 0x1B2],
	[0x28C, 0x245],
	[0x292, 0x1B7],
	[0x29D, 0xA7B2],
	[0x29E, 0xA7B0],
	[0x345, 0x3B9],
	[0x370, 0x371],
	[0x371, 0x370],
	[0x372, 0x373],
	[0x373, 0x372],
	[0x376, 0x377],
	[0x377, 0x376],
	[0x37B, 0x3FD],
	[0x37C, 0x3FE],
	[0x37D, 0x3FF],
	[0x37F, 0x3F3],
	[0x386, 0x3AC],
	[0x388, 0x3AD],
	[0x389, 0x3AE],
	[0x38A, 0x3AF],
	[0x38C, 0x3CC],
	[0x38E, 0x3CD],
	[0x38F, 0x3CE],
	[0x391, 0x3B1],
	[0x392, 0x3B2],
	[0x393, 0x3B3],
	[0x394, 0x3B4],
	[0x395, 0x3B5],
	[0x396, 0x3B6],
	[0x397, 0x3B7],
	[0x398, 0x3B8],
	[0x399, 0x3B9],
	[0x39A, 0x3BA],
	[0x39B, 0x3BB],
	[0x39C, 0x3BC],
	[0x39D, 0x3BD],
	[0x39E, 0x3BE],
	[0x39F, 0x3BF],
	[0x3A0, 0x3C0],
	[0x3A1, 0x3C1],
	[0x3A3, 0x3C3],
	[0x3A4, 0x3C4],
	[0x3A5, 0x3C5],
	[0x3A6, 0x3C6],
	[0x3A7, 0x3C7],
	[0x3A8, 0x3C8],
	[0x3A9, 0x3C9],
	[0x3AA, 0x3CA],
	[0x3AB, 0x3CB],
	[0x3AC, 0x386],
	[0x3AD, 0x388],
	[0x3AE, 0x389],
	[0x3AF, 0x38A],
	[0x3B1, 0x391],
	[0x3B2, [
		0x392,
		0x3D0
	]],
	[0x3B3, 0x393],
	[0x3B4, 0x394],
	[0x3B5, [
		0x395,
		0x3F5
	]],
	[0x3B6, 0x396],
	[0x3B7, 0x397],
	[0x3B8, [
		0x398,
		0x3D1
	]],
	[0x3B9, [
		0x345,
		0x399,
		0x1FBE
	]],
	[0x3BA, [
		0x39A,
		0x3F0
	]],
	[0x3BB, 0x39B],
	[0x3BC, [
		0xB5,
		0x39C
	]],
	[0x3BD, 0x39D],
	[0x3BE, 0x39E],
	[0x3BF, 0x39F],
	[0x3C0, [
		0x3A0,
		0x3D6
	]],
	[0x3C1, [
		0x3A1,
		0x3F1
	]],
	[0x3C2, 0x3C3],
	[0x3C3, [
		0x3A3,
		0x3C2
	]],
	[0x3C4, 0x3A4],
	[0x3C5, 0x3A5],
	[0x3C6, [
		0x3A6,
		0x3D5
	]],
	[0x3C7, 0x3A7],
	[0x3C8, 0x3A8],
	[0x3C9, 0x3A9],
	[0x3CA, 0x3AA],
	[0x3CB, 0x3AB],
	[0x3CC, 0x38C],
	[0x3CD, 0x38E],
	[0x3CE, 0x38F],
	[0x3CF, 0x3D7],
	[0x3D0, 0x3B2],
	[0x3D1, 0x3B8],
	[0x3D5, 0x3C6],
	[0x3D6, 0x3C0],
	[0x3D7, 0x3CF],
	[0x3D8, 0x3D9],
	[0x3D9, 0x3D8],
	[0x3DA, 0x3DB],
	[0x3DB, 0x3DA],
	[0x3DC, 0x3DD],
	[0x3DD, 0x3DC],
	[0x3DE, 0x3DF],
	[0x3DF, 0x3DE],
	[0x3E0, 0x3E1],
	[0x3E1, 0x3E0],
	[0x3E2, 0x3E3],
	[0x3E3, 0x3E2],
	[0x3E4, 0x3E5],
	[0x3E5, 0x3E4],
	[0x3E6, 0x3E7],
	[0x3E7, 0x3E6],
	[0x3E8, 0x3E9],
	[0x3E9, 0x3E8],
	[0x3EA, 0x3EB],
	[0x3EB, 0x3EA],
	[0x3EC, 0x3ED],
	[0x3ED, 0x3EC],
	[0x3EE, 0x3EF],
	[0x3EF, 0x3EE],
	[0x3F0, 0x3BA],
	[0x3F1, 0x3C1],
	[0x3F2, 0x3F9],
	[0x3F3, 0x37F],
	[0x3F5, 0x3B5],
	[0x3F7, 0x3F8],
	[0x3F8, 0x3F7],
	[0x3F9, 0x3F2],
	[0x3FA, 0x3FB],
	[0x3FB, 0x3FA],
	[0x3FD, 0x37B],
	[0x3FE, 0x37C],
	[0x3FF, 0x37D],
	[0x400, 0x450],
	[0x401, 0x451],
	[0x402, 0x452],
	[0x403, 0x453],
	[0x404, 0x454],
	[0x405, 0x455],
	[0x406, 0x456],
	[0x407, 0x457],
	[0x408, 0x458],
	[0x409, 0x459],
	[0x40A, 0x45A],
	[0x40B, 0x45B],
	[0x40C, 0x45C],
	[0x40D, 0x45D],
	[0x40E, 0x45E],
	[0x40F, 0x45F],
	[0x410, 0x430],
	[0x411, 0x431],
	[0x412, 0x432],
	[0x413, 0x433],
	[0x414, 0x434],
	[0x415, 0x435],
	[0x416, 0x436],
	[0x417, 0x437],
	[0x418, 0x438],
	[0x419, 0x439],
	[0x41A, 0x43A],
	[0x41B, 0x43B],
	[0x41C, 0x43C],
	[0x41D, 0x43D],
	[0x41E, 0x43E],
	[0x41F, 0x43F],
	[0x420, 0x440],
	[0x421, 0x441],
	[0x422, 0x442],
	[0x423, 0x443],
	[0x424, 0x444],
	[0x425, 0x445],
	[0x426, 0x446],
	[0x427, 0x447],
	[0x428, 0x448],
	[0x429, 0x449],
	[0x42A, 0x44A],
	[0x42B, 0x44B],
	[0x42C, 0x44C],
	[0x42D, 0x44D],
	[0x42E, 0x44E],
	[0x42F, 0x44F],
	[0x430, 0x410],
	[0x431, 0x411],
	[0x432, [
		0x412,
		0x1C80
	]],
	[0x433, 0x413],
	[0x434, [
		0x414,
		0x1C81
	]],
	[0x435, 0x415],
	[0x436, 0x416],
	[0x437, 0x417],
	[0x438, 0x418],
	[0x439, 0x419],
	[0x43A, 0x41A],
	[0x43B, 0x41B],
	[0x43C, 0x41C],
	[0x43D, 0x41D],
	[0x43E, [
		0x41E,
		0x1C82
	]],
	[0x43F, 0x41F],
	[0x440, 0x420],
	[0x441, [
		0x421,
		0x1C83
	]],
	[0x442, [
		0x422,
		0x1C84,
		0x1C85
	]],
	[0x443, 0x423],
	[0x444, 0x424],
	[0x445, 0x425],
	[0x446, 0x426],
	[0x447, 0x427],
	[0x448, 0x428],
	[0x449, 0x429],
	[0x44A, [
		0x42A,
		0x1C86
	]],
	[0x44B, 0x42B],
	[0x44C, 0x42C],
	[0x44D, 0x42D],
	[0x44E, 0x42E],
	[0x44F, 0x42F],
	[0x450, 0x400],
	[0x451, 0x401],
	[0x452, 0x402],
	[0x453, 0x403],
	[0x454, 0x404],
	[0x455, 0x405],
	[0x456, 0x406],
	[0x457, 0x407],
	[0x458, 0x408],
	[0x459, 0x409],
	[0x45A, 0x40A],
	[0x45B, 0x40B],
	[0x45C, 0x40C],
	[0x45D, 0x40D],
	[0x45E, 0x40E],
	[0x45F, 0x40F],
	[0x460, 0x461],
	[0x461, 0x460],
	[0x462, 0x463],
	[0x463, [
		0x462,
		0x1C87
	]],
	[0x464, 0x465],
	[0x465, 0x464],
	[0x466, 0x467],
	[0x467, 0x466],
	[0x468, 0x469],
	[0x469, 0x468],
	[0x46A, 0x46B],
	[0x46B, 0x46A],
	[0x46C, 0x46D],
	[0x46D, 0x46C],
	[0x46E, 0x46F],
	[0x46F, 0x46E],
	[0x470, 0x471],
	[0x471, 0x470],
	[0x472, 0x473],
	[0x473, 0x472],
	[0x474, 0x475],
	[0x475, 0x474],
	[0x476, 0x477],
	[0x477, 0x476],
	[0x478, 0x479],
	[0x479, 0x478],
	[0x47A, 0x47B],
	[0x47B, 0x47A],
	[0x47C, 0x47D],
	[0x47D, 0x47C],
	[0x47E, 0x47F],
	[0x47F, 0x47E],
	[0x480, 0x481],
	[0x481, 0x480],
	[0x48A, 0x48B],
	[0x48B, 0x48A],
	[0x48C, 0x48D],
	[0x48D, 0x48C],
	[0x48E, 0x48F],
	[0x48F, 0x48E],
	[0x490, 0x491],
	[0x491, 0x490],
	[0x492, 0x493],
	[0x493, 0x492],
	[0x494, 0x495],
	[0x495, 0x494],
	[0x496, 0x497],
	[0x497, 0x496],
	[0x498, 0x499],
	[0x499, 0x498],
	[0x49A, 0x49B],
	[0x49B, 0x49A],
	[0x49C, 0x49D],
	[0x49D, 0x49C],
	[0x49E, 0x49F],
	[0x49F, 0x49E],
	[0x4A0, 0x4A1],
	[0x4A1, 0x4A0],
	[0x4A2, 0x4A3],
	[0x4A3, 0x4A2],
	[0x4A4, 0x4A5],
	[0x4A5, 0x4A4],
	[0x4A6, 0x4A7],
	[0x4A7, 0x4A6],
	[0x4A8, 0x4A9],
	[0x4A9, 0x4A8],
	[0x4AA, 0x4AB],
	[0x4AB, 0x4AA],
	[0x4AC, 0x4AD],
	[0x4AD, 0x4AC],
	[0x4AE, 0x4AF],
	[0x4AF, 0x4AE],
	[0x4B0, 0x4B1],
	[0x4B1, 0x4B0],
	[0x4B2, 0x4B3],
	[0x4B3, 0x4B2],
	[0x4B4, 0x4B5],
	[0x4B5, 0x4B4],
	[0x4B6, 0x4B7],
	[0x4B7, 0x4B6],
	[0x4B8, 0x4B9],
	[0x4B9, 0x4B8],
	[0x4BA, 0x4BB],
	[0x4BB, 0x4BA],
	[0x4BC, 0x4BD],
	[0x4BD, 0x4BC],
	[0x4BE, 0x4BF],
	[0x4BF, 0x4BE],
	[0x4C0, 0x4CF],
	[0x4C1, 0x4C2],
	[0x4C2, 0x4C1],
	[0x4C3, 0x4C4],
	[0x4C4, 0x4C3],
	[0x4C5, 0x4C6],
	[0x4C6, 0x4C5],
	[0x4C7, 0x4C8],
	[0x4C8, 0x4C7],
	[0x4C9, 0x4CA],
	[0x4CA, 0x4C9],
	[0x4CB, 0x4CC],
	[0x4CC, 0x4CB],
	[0x4CD, 0x4CE],
	[0x4CE, 0x4CD],
	[0x4CF, 0x4C0],
	[0x4D0, 0x4D1],
	[0x4D1, 0x4D0],
	[0x4D2, 0x4D3],
	[0x4D3, 0x4D2],
	[0x4D4, 0x4D5],
	[0x4D5, 0x4D4],
	[0x4D6, 0x4D7],
	[0x4D7, 0x4D6],
	[0x4D8, 0x4D9],
	[0x4D9, 0x4D8],
	[0x4DA, 0x4DB],
	[0x4DB, 0x4DA],
	[0x4DC, 0x4DD],
	[0x4DD, 0x4DC],
	[0x4DE, 0x4DF],
	[0x4DF, 0x4DE],
	[0x4E0, 0x4E1],
	[0x4E1, 0x4E0],
	[0x4E2, 0x4E3],
	[0x4E3, 0x4E2],
	[0x4E4, 0x4E5],
	[0x4E5, 0x4E4],
	[0x4E6, 0x4E7],
	[0x4E7, 0x4E6],
	[0x4E8, 0x4E9],
	[0x4E9, 0x4E8],
	[0x4EA, 0x4EB],
	[0x4EB, 0x4EA],
	[0x4EC, 0x4ED],
	[0x4ED, 0x4EC],
	[0x4EE, 0x4EF],
	[0x4EF, 0x4EE],
	[0x4F0, 0x4F1],
	[0x4F1, 0x4F0],
	[0x4F2, 0x4F3],
	[0x4F3, 0x4F2],
	[0x4F4, 0x4F5],
	[0x4F5, 0x4F4],
	[0x4F6, 0x4F7],
	[0x4F7, 0x4F6],
	[0x4F8, 0x4F9],
	[0x4F9, 0x4F8],
	[0x4FA, 0x4FB],
	[0x4FB, 0x4FA],
	[0x4FC, 0x4FD],
	[0x4FD, 0x4FC],
	[0x4FE, 0x4FF],
	[0x4FF, 0x4FE],
	[0x500, 0x501],
	[0x501, 0x500],
	[0x502, 0x503],
	[0x503, 0x502],
	[0x504, 0x505],
	[0x505, 0x504],
	[0x506, 0x507],
	[0x507, 0x506],
	[0x508, 0x509],
	[0x509, 0x508],
	[0x50A, 0x50B],
	[0x50B, 0x50A],
	[0x50C, 0x50D],
	[0x50D, 0x50C],
	[0x50E, 0x50F],
	[0x50F, 0x50E],
	[0x510, 0x511],
	[0x511, 0x510],
	[0x512, 0x513],
	[0x513, 0x512],
	[0x514, 0x515],
	[0x515, 0x514],
	[0x516, 0x517],
	[0x517, 0x516],
	[0x518, 0x519],
	[0x519, 0x518],
	[0x51A, 0x51B],
	[0x51B, 0x51A],
	[0x51C, 0x51D],
	[0x51D, 0x51C],
	[0x51E, 0x51F],
	[0x51F, 0x51E],
	[0x520, 0x521],
	[0x521, 0x520],
	[0x522, 0x523],
	[0x523, 0x522],
	[0x524, 0x525],
	[0x525, 0x524],
	[0x526, 0x527],
	[0x527, 0x526],
	[0x528, 0x529],
	[0x529, 0x528],
	[0x52A, 0x52B],
	[0x52B, 0x52A],
	[0x52C, 0x52D],
	[0x52D, 0x52C],
	[0x52E, 0x52F],
	[0x52F, 0x52E],
	[0x531, 0x561],
	[0x532, 0x562],
	[0x533, 0x563],
	[0x534, 0x564],
	[0x535, 0x565],
	[0x536, 0x566],
	[0x537, 0x567],
	[0x538, 0x568],
	[0x539, 0x569],
	[0x53A, 0x56A],
	[0x53B, 0x56B],
	[0x53C, 0x56C],
	[0x53D, 0x56D],
	[0x53E, 0x56E],
	[0x53F, 0x56F],
	[0x540, 0x570],
	[0x541, 0x571],
	[0x542, 0x572],
	[0x543, 0x573],
	[0x544, 0x574],
	[0x545, 0x575],
	[0x546, 0x576],
	[0x547, 0x577],
	[0x548, 0x578],
	[0x549, 0x579],
	[0x54A, 0x57A],
	[0x54B, 0x57B],
	[0x54C, 0x57C],
	[0x54D, 0x57D],
	[0x54E, 0x57E],
	[0x54F, 0x57F],
	[0x550, 0x580],
	[0x551, 0x581],
	[0x552, 0x582],
	[0x553, 0x583],
	[0x554, 0x584],
	[0x555, 0x585],
	[0x556, 0x586],
	[0x561, 0x531],
	[0x562, 0x532],
	[0x563, 0x533],
	[0x564, 0x534],
	[0x565, 0x535],
	[0x566, 0x536],
	[0x567, 0x537],
	[0x568, 0x538],
	[0x569, 0x539],
	[0x56A, 0x53A],
	[0x56B, 0x53B],
	[0x56C, 0x53C],
	[0x56D, 0x53D],
	[0x56E, 0x53E],
	[0x56F, 0x53F],
	[0x570, 0x540],
	[0x571, 0x541],
	[0x572, 0x542],
	[0x573, 0x543],
	[0x574, 0x544],
	[0x575, 0x545],
	[0x576, 0x546],
	[0x577, 0x547],
	[0x578, 0x548],
	[0x579, 0x549],
	[0x57A, 0x54A],
	[0x57B, 0x54B],
	[0x57C, 0x54C],
	[0x57D, 0x54D],
	[0x57E, 0x54E],
	[0x57F, 0x54F],
	[0x580, 0x550],
	[0x581, 0x551],
	[0x582, 0x552],
	[0x583, 0x553],
	[0x584, 0x554],
	[0x585, 0x555],
	[0x586, 0x556],
	[0x10A0, 0x2D00],
	[0x10A1, 0x2D01],
	[0x10A2, 0x2D02],
	[0x10A3, 0x2D03],
	[0x10A4, 0x2D04],
	[0x10A5, 0x2D05],
	[0x10A6, 0x2D06],
	[0x10A7, 0x2D07],
	[0x10A8, 0x2D08],
	[0x10A9, 0x2D09],
	[0x10AA, 0x2D0A],
	[0x10AB, 0x2D0B],
	[0x10AC, 0x2D0C],
	[0x10AD, 0x2D0D],
	[0x10AE, 0x2D0E],
	[0x10AF, 0x2D0F],
	[0x10B0, 0x2D10],
	[0x10B1, 0x2D11],
	[0x10B2, 0x2D12],
	[0x10B3, 0x2D13],
	[0x10B4, 0x2D14],
	[0x10B5, 0x2D15],
	[0x10B6, 0x2D16],
	[0x10B7, 0x2D17],
	[0x10B8, 0x2D18],
	[0x10B9, 0x2D19],
	[0x10BA, 0x2D1A],
	[0x10BB, 0x2D1B],
	[0x10BC, 0x2D1C],
	[0x10BD, 0x2D1D],
	[0x10BE, 0x2D1E],
	[0x10BF, 0x2D1F],
	[0x10C0, 0x2D20],
	[0x10C1, 0x2D21],
	[0x10C2, 0x2D22],
	[0x10C3, 0x2D23],
	[0x10C4, 0x2D24],
	[0x10C5, 0x2D25],
	[0x10C7, 0x2D27],
	[0x10CD, 0x2D2D],
	[0x10D0, 0x1C90],
	[0x10D1, 0x1C91],
	[0x10D2, 0x1C92],
	[0x10D3, 0x1C93],
	[0x10D4, 0x1C94],
	[0x10D5, 0x1C95],
	[0x10D6, 0x1C96],
	[0x10D7, 0x1C97],
	[0x10D8, 0x1C98],
	[0x10D9, 0x1C99],
	[0x10DA, 0x1C9A],
	[0x10DB, 0x1C9B],
	[0x10DC, 0x1C9C],
	[0x10DD, 0x1C9D],
	[0x10DE, 0x1C9E],
	[0x10DF, 0x1C9F],
	[0x10E0, 0x1CA0],
	[0x10E1, 0x1CA1],
	[0x10E2, 0x1CA2],
	[0x10E3, 0x1CA3],
	[0x10E4, 0x1CA4],
	[0x10E5, 0x1CA5],
	[0x10E6, 0x1CA6],
	[0x10E7, 0x1CA7],
	[0x10E8, 0x1CA8],
	[0x10E9, 0x1CA9],
	[0x10EA, 0x1CAA],
	[0x10EB, 0x1CAB],
	[0x10EC, 0x1CAC],
	[0x10ED, 0x1CAD],
	[0x10EE, 0x1CAE],
	[0x10EF, 0x1CAF],
	[0x10F0, 0x1CB0],
	[0x10F1, 0x1CB1],
	[0x10F2, 0x1CB2],
	[0x10F3, 0x1CB3],
	[0x10F4, 0x1CB4],
	[0x10F5, 0x1CB5],
	[0x10F6, 0x1CB6],
	[0x10F7, 0x1CB7],
	[0x10F8, 0x1CB8],
	[0x10F9, 0x1CB9],
	[0x10FA, 0x1CBA],
	[0x10FD, 0x1CBD],
	[0x10FE, 0x1CBE],
	[0x10FF, 0x1CBF],
	[0x13A0, 0xAB70],
	[0x13A1, 0xAB71],
	[0x13A2, 0xAB72],
	[0x13A3, 0xAB73],
	[0x13A4, 0xAB74],
	[0x13A5, 0xAB75],
	[0x13A6, 0xAB76],
	[0x13A7, 0xAB77],
	[0x13A8, 0xAB78],
	[0x13A9, 0xAB79],
	[0x13AA, 0xAB7A],
	[0x13AB, 0xAB7B],
	[0x13AC, 0xAB7C],
	[0x13AD, 0xAB7D],
	[0x13AE, 0xAB7E],
	[0x13AF, 0xAB7F],
	[0x13B0, 0xAB80],
	[0x13B1, 0xAB81],
	[0x13B2, 0xAB82],
	[0x13B3, 0xAB83],
	[0x13B4, 0xAB84],
	[0x13B5, 0xAB85],
	[0x13B6, 0xAB86],
	[0x13B7, 0xAB87],
	[0x13B8, 0xAB88],
	[0x13B9, 0xAB89],
	[0x13BA, 0xAB8A],
	[0x13BB, 0xAB8B],
	[0x13BC, 0xAB8C],
	[0x13BD, 0xAB8D],
	[0x13BE, 0xAB8E],
	[0x13BF, 0xAB8F],
	[0x13C0, 0xAB90],
	[0x13C1, 0xAB91],
	[0x13C2, 0xAB92],
	[0x13C3, 0xAB93],
	[0x13C4, 0xAB94],
	[0x13C5, 0xAB95],
	[0x13C6, 0xAB96],
	[0x13C7, 0xAB97],
	[0x13C8, 0xAB98],
	[0x13C9, 0xAB99],
	[0x13CA, 0xAB9A],
	[0x13CB, 0xAB9B],
	[0x13CC, 0xAB9C],
	[0x13CD, 0xAB9D],
	[0x13CE, 0xAB9E],
	[0x13CF, 0xAB9F],
	[0x13D0, 0xABA0],
	[0x13D1, 0xABA1],
	[0x13D2, 0xABA2],
	[0x13D3, 0xABA3],
	[0x13D4, 0xABA4],
	[0x13D5, 0xABA5],
	[0x13D6, 0xABA6],
	[0x13D7, 0xABA7],
	[0x13D8, 0xABA8],
	[0x13D9, 0xABA9],
	[0x13DA, 0xABAA],
	[0x13DB, 0xABAB],
	[0x13DC, 0xABAC],
	[0x13DD, 0xABAD],
	[0x13DE, 0xABAE],
	[0x13DF, 0xABAF],
	[0x13E0, 0xABB0],
	[0x13E1, 0xABB1],
	[0x13E2, 0xABB2],
	[0x13E3, 0xABB3],
	[0x13E4, 0xABB4],
	[0x13E5, 0xABB5],
	[0x13E6, 0xABB6],
	[0x13E7, 0xABB7],
	[0x13E8, 0xABB8],
	[0x13E9, 0xABB9],
	[0x13EA, 0xABBA],
	[0x13EB, 0xABBB],
	[0x13EC, 0xABBC],
	[0x13ED, 0xABBD],
	[0x13EE, 0xABBE],
	[0x13EF, 0xABBF],
	[0x13F0, 0x13F8],
	[0x13F1, 0x13F9],
	[0x13F2, 0x13FA],
	[0x13F3, 0x13FB],
	[0x13F4, 0x13FC],
	[0x13F5, 0x13FD],
	[0x13F8, 0x13F0],
	[0x13F9, 0x13F1],
	[0x13FA, 0x13F2],
	[0x13FB, 0x13F3],
	[0x13FC, 0x13F4],
	[0x13FD, 0x13F5],
	[0x1C80, 0x432],
	[0x1C81, 0x434],
	[0x1C82, 0x43E],
	[0x1C83, 0x441],
	[0x1C84, 0x442],
	[0x1C85, 0x442],
	[0x1C86, 0x44A],
	[0x1C87, 0x463],
	[0x1C88, 0xA64B],
	[0x1C89, 0x1C8A],
	[0x1C8A, 0x1C89],
	[0x1C90, 0x10D0],
	[0x1C91, 0x10D1],
	[0x1C92, 0x10D2],
	[0x1C93, 0x10D3],
	[0x1C94, 0x10D4],
	[0x1C95, 0x10D5],
	[0x1C96, 0x10D6],
	[0x1C97, 0x10D7],
	[0x1C98, 0x10D8],
	[0x1C99, 0x10D9],
	[0x1C9A, 0x10DA],
	[0x1C9B, 0x10DB],
	[0x1C9C, 0x10DC],
	[0x1C9D, 0x10DD],
	[0x1C9E, 0x10DE],
	[0x1C9F, 0x10DF],
	[0x1CA0, 0x10E0],
	[0x1CA1, 0x10E1],
	[0x1CA2, 0x10E2],
	[0x1CA3, 0x10E3],
	[0x1CA4, 0x10E4],
	[0x1CA5, 0x10E5],
	[0x1CA6, 0x10E6],
	[0x1CA7, 0x10E7],
	[0x1CA8, 0x10E8],
	[0x1CA9, 0x10E9],
	[0x1CAA, 0x10EA],
	[0x1CAB, 0x10EB],
	[0x1CAC, 0x10EC],
	[0x1CAD, 0x10ED],
	[0x1CAE, 0x10EE],
	[0x1CAF, 0x10EF],
	[0x1CB0, 0x10F0],
	[0x1CB1, 0x10F1],
	[0x1CB2, 0x10F2],
	[0x1CB3, 0x10F3],
	[0x1CB4, 0x10F4],
	[0x1CB5, 0x10F5],
	[0x1CB6, 0x10F6],
	[0x1CB7, 0x10F7],
	[0x1CB8, 0x10F8],
	[0x1CB9, 0x10F9],
	[0x1CBA, 0x10FA],
	[0x1CBD, 0x10FD],
	[0x1CBE, 0x10FE],
	[0x1CBF, 0x10FF],
	[0x1D79, 0xA77D],
	[0x1D7D, 0x2C63],
	[0x1D8E, 0xA7C6],
	[0x1E00, 0x1E01],
	[0x1E01, 0x1E00],
	[0x1E02, 0x1E03],
	[0x1E03, 0x1E02],
	[0x1E04, 0x1E05],
	[0x1E05, 0x1E04],
	[0x1E06, 0x1E07],
	[0x1E07, 0x1E06],
	[0x1E08, 0x1E09],
	[0x1E09, 0x1E08],
	[0x1E0A, 0x1E0B],
	[0x1E0B, 0x1E0A],
	[0x1E0C, 0x1E0D],
	[0x1E0D, 0x1E0C],
	[0x1E0E, 0x1E0F],
	[0x1E0F, 0x1E0E],
	[0x1E10, 0x1E11],
	[0x1E11, 0x1E10],
	[0x1E12, 0x1E13],
	[0x1E13, 0x1E12],
	[0x1E14, 0x1E15],
	[0x1E15, 0x1E14],
	[0x1E16, 0x1E17],
	[0x1E17, 0x1E16],
	[0x1E18, 0x1E19],
	[0x1E19, 0x1E18],
	[0x1E1A, 0x1E1B],
	[0x1E1B, 0x1E1A],
	[0x1E1C, 0x1E1D],
	[0x1E1D, 0x1E1C],
	[0x1E1E, 0x1E1F],
	[0x1E1F, 0x1E1E],
	[0x1E20, 0x1E21],
	[0x1E21, 0x1E20],
	[0x1E22, 0x1E23],
	[0x1E23, 0x1E22],
	[0x1E24, 0x1E25],
	[0x1E25, 0x1E24],
	[0x1E26, 0x1E27],
	[0x1E27, 0x1E26],
	[0x1E28, 0x1E29],
	[0x1E29, 0x1E28],
	[0x1E2A, 0x1E2B],
	[0x1E2B, 0x1E2A],
	[0x1E2C, 0x1E2D],
	[0x1E2D, 0x1E2C],
	[0x1E2E, 0x1E2F],
	[0x1E2F, 0x1E2E],
	[0x1E30, 0x1E31],
	[0x1E31, 0x1E30],
	[0x1E32, 0x1E33],
	[0x1E33, 0x1E32],
	[0x1E34, 0x1E35],
	[0x1E35, 0x1E34],
	[0x1E36, 0x1E37],
	[0x1E37, 0x1E36],
	[0x1E38, 0x1E39],
	[0x1E39, 0x1E38],
	[0x1E3A, 0x1E3B],
	[0x1E3B, 0x1E3A],
	[0x1E3C, 0x1E3D],
	[0x1E3D, 0x1E3C],
	[0x1E3E, 0x1E3F],
	[0x1E3F, 0x1E3E],
	[0x1E40, 0x1E41],
	[0x1E41, 0x1E40],
	[0x1E42, 0x1E43],
	[0x1E43, 0x1E42],
	[0x1E44, 0x1E45],
	[0x1E45, 0x1E44],
	[0x1E46, 0x1E47],
	[0x1E47, 0x1E46],
	[0x1E48, 0x1E49],
	[0x1E49, 0x1E48],
	[0x1E4A, 0x1E4B],
	[0x1E4B, 0x1E4A],
	[0x1E4C, 0x1E4D],
	[0x1E4D, 0x1E4C],
	[0x1E4E, 0x1E4F],
	[0x1E4F, 0x1E4E],
	[0x1E50, 0x1E51],
	[0x1E51, 0x1E50],
	[0x1E52, 0x1E53],
	[0x1E53, 0x1E52],
	[0x1E54, 0x1E55],
	[0x1E55, 0x1E54],
	[0x1E56, 0x1E57],
	[0x1E57, 0x1E56],
	[0x1E58, 0x1E59],
	[0x1E59, 0x1E58],
	[0x1E5A, 0x1E5B],
	[0x1E5B, 0x1E5A],
	[0x1E5C, 0x1E5D],
	[0x1E5D, 0x1E5C],
	[0x1E5E, 0x1E5F],
	[0x1E5F, 0x1E5E],
	[0x1E60, 0x1E61],
	[0x1E61, [
		0x1E60,
		0x1E9B
	]],
	[0x1E62, 0x1E63],
	[0x1E63, 0x1E62],
	[0x1E64, 0x1E65],
	[0x1E65, 0x1E64],
	[0x1E66, 0x1E67],
	[0x1E67, 0x1E66],
	[0x1E68, 0x1E69],
	[0x1E69, 0x1E68],
	[0x1E6A, 0x1E6B],
	[0x1E6B, 0x1E6A],
	[0x1E6C, 0x1E6D],
	[0x1E6D, 0x1E6C],
	[0x1E6E, 0x1E6F],
	[0x1E6F, 0x1E6E],
	[0x1E70, 0x1E71],
	[0x1E71, 0x1E70],
	[0x1E72, 0x1E73],
	[0x1E73, 0x1E72],
	[0x1E74, 0x1E75],
	[0x1E75, 0x1E74],
	[0x1E76, 0x1E77],
	[0x1E77, 0x1E76],
	[0x1E78, 0x1E79],
	[0x1E79, 0x1E78],
	[0x1E7A, 0x1E7B],
	[0x1E7B, 0x1E7A],
	[0x1E7C, 0x1E7D],
	[0x1E7D, 0x1E7C],
	[0x1E7E, 0x1E7F],
	[0x1E7F, 0x1E7E],
	[0x1E80, 0x1E81],
	[0x1E81, 0x1E80],
	[0x1E82, 0x1E83],
	[0x1E83, 0x1E82],
	[0x1E84, 0x1E85],
	[0x1E85, 0x1E84],
	[0x1E86, 0x1E87],
	[0x1E87, 0x1E86],
	[0x1E88, 0x1E89],
	[0x1E89, 0x1E88],
	[0x1E8A, 0x1E8B],
	[0x1E8B, 0x1E8A],
	[0x1E8C, 0x1E8D],
	[0x1E8D, 0x1E8C],
	[0x1E8E, 0x1E8F],
	[0x1E8F, 0x1E8E],
	[0x1E90, 0x1E91],
	[0x1E91, 0x1E90],
	[0x1E92, 0x1E93],
	[0x1E93, 0x1E92],
	[0x1E94, 0x1E95],
	[0x1E95, 0x1E94],
	[0x1E9B, 0x1E61],
	[0x1EA0, 0x1EA1],
	[0x1EA1, 0x1EA0],
	[0x1EA2, 0x1EA3],
	[0x1EA3, 0x1EA2],
	[0x1EA4, 0x1EA5],
	[0x1EA5, 0x1EA4],
	[0x1EA6, 0x1EA7],
	[0x1EA7, 0x1EA6],
	[0x1EA8, 0x1EA9],
	[0x1EA9, 0x1EA8],
	[0x1EAA, 0x1EAB],
	[0x1EAB, 0x1EAA],
	[0x1EAC, 0x1EAD],
	[0x1EAD, 0x1EAC],
	[0x1EAE, 0x1EAF],
	[0x1EAF, 0x1EAE],
	[0x1EB0, 0x1EB1],
	[0x1EB1, 0x1EB0],
	[0x1EB2, 0x1EB3],
	[0x1EB3, 0x1EB2],
	[0x1EB4, 0x1EB5],
	[0x1EB5, 0x1EB4],
	[0x1EB6, 0x1EB7],
	[0x1EB7, 0x1EB6],
	[0x1EB8, 0x1EB9],
	[0x1EB9, 0x1EB8],
	[0x1EBA, 0x1EBB],
	[0x1EBB, 0x1EBA],
	[0x1EBC, 0x1EBD],
	[0x1EBD, 0x1EBC],
	[0x1EBE, 0x1EBF],
	[0x1EBF, 0x1EBE],
	[0x1EC0, 0x1EC1],
	[0x1EC1, 0x1EC0],
	[0x1EC2, 0x1EC3],
	[0x1EC3, 0x1EC2],
	[0x1EC4, 0x1EC5],
	[0x1EC5, 0x1EC4],
	[0x1EC6, 0x1EC7],
	[0x1EC7, 0x1EC6],
	[0x1EC8, 0x1EC9],
	[0x1EC9, 0x1EC8],
	[0x1ECA, 0x1ECB],
	[0x1ECB, 0x1ECA],
	[0x1ECC, 0x1ECD],
	[0x1ECD, 0x1ECC],
	[0x1ECE, 0x1ECF],
	[0x1ECF, 0x1ECE],
	[0x1ED0, 0x1ED1],
	[0x1ED1, 0x1ED0],
	[0x1ED2, 0x1ED3],
	[0x1ED3, 0x1ED2],
	[0x1ED4, 0x1ED5],
	[0x1ED5, 0x1ED4],
	[0x1ED6, 0x1ED7],
	[0x1ED7, 0x1ED6],
	[0x1ED8, 0x1ED9],
	[0x1ED9, 0x1ED8],
	[0x1EDA, 0x1EDB],
	[0x1EDB, 0x1EDA],
	[0x1EDC, 0x1EDD],
	[0x1EDD, 0x1EDC],
	[0x1EDE, 0x1EDF],
	[0x1EDF, 0x1EDE],
	[0x1EE0, 0x1EE1],
	[0x1EE1, 0x1EE0],
	[0x1EE2, 0x1EE3],
	[0x1EE3, 0x1EE2],
	[0x1EE4, 0x1EE5],
	[0x1EE5, 0x1EE4],
	[0x1EE6, 0x1EE7],
	[0x1EE7, 0x1EE6],
	[0x1EE8, 0x1EE9],
	[0x1EE9, 0x1EE8],
	[0x1EEA, 0x1EEB],
	[0x1EEB, 0x1EEA],
	[0x1EEC, 0x1EED],
	[0x1EED, 0x1EEC],
	[0x1EEE, 0x1EEF],
	[0x1EEF, 0x1EEE],
	[0x1EF0, 0x1EF1],
	[0x1EF1, 0x1EF0],
	[0x1EF2, 0x1EF3],
	[0x1EF3, 0x1EF2],
	[0x1EF4, 0x1EF5],
	[0x1EF5, 0x1EF4],
	[0x1EF6, 0x1EF7],
	[0x1EF7, 0x1EF6],
	[0x1EF8, 0x1EF9],
	[0x1EF9, 0x1EF8],
	[0x1EFA, 0x1EFB],
	[0x1EFB, 0x1EFA],
	[0x1EFC, 0x1EFD],
	[0x1EFD, 0x1EFC],
	[0x1EFE, 0x1EFF],
	[0x1EFF, 0x1EFE],
	[0x1F00, 0x1F08],
	[0x1F01, 0x1F09],
	[0x1F02, 0x1F0A],
	[0x1F03, 0x1F0B],
	[0x1F04, 0x1F0C],
	[0x1F05, 0x1F0D],
	[0x1F06, 0x1F0E],
	[0x1F07, 0x1F0F],
	[0x1F08, 0x1F00],
	[0x1F09, 0x1F01],
	[0x1F0A, 0x1F02],
	[0x1F0B, 0x1F03],
	[0x1F0C, 0x1F04],
	[0x1F0D, 0x1F05],
	[0x1F0E, 0x1F06],
	[0x1F0F, 0x1F07],
	[0x1F10, 0x1F18],
	[0x1F11, 0x1F19],
	[0x1F12, 0x1F1A],
	[0x1F13, 0x1F1B],
	[0x1F14, 0x1F1C],
	[0x1F15, 0x1F1D],
	[0x1F18, 0x1F10],
	[0x1F19, 0x1F11],
	[0x1F1A, 0x1F12],
	[0x1F1B, 0x1F13],
	[0x1F1C, 0x1F14],
	[0x1F1D, 0x1F15],
	[0x1F20, 0x1F28],
	[0x1F21, 0x1F29],
	[0x1F22, 0x1F2A],
	[0x1F23, 0x1F2B],
	[0x1F24, 0x1F2C],
	[0x1F25, 0x1F2D],
	[0x1F26, 0x1F2E],
	[0x1F27, 0x1F2F],
	[0x1F28, 0x1F20],
	[0x1F29, 0x1F21],
	[0x1F2A, 0x1F22],
	[0x1F2B, 0x1F23],
	[0x1F2C, 0x1F24],
	[0x1F2D, 0x1F25],
	[0x1F2E, 0x1F26],
	[0x1F2F, 0x1F27],
	[0x1F30, 0x1F38],
	[0x1F31, 0x1F39],
	[0x1F32, 0x1F3A],
	[0x1F33, 0x1F3B],
	[0x1F34, 0x1F3C],
	[0x1F35, 0x1F3D],
	[0x1F36, 0x1F3E],
	[0x1F37, 0x1F3F],
	[0x1F38, 0x1F30],
	[0x1F39, 0x1F31],
	[0x1F3A, 0x1F32],
	[0x1F3B, 0x1F33],
	[0x1F3C, 0x1F34],
	[0x1F3D, 0x1F35],
	[0x1F3E, 0x1F36],
	[0x1F3F, 0x1F37],
	[0x1F40, 0x1F48],
	[0x1F41, 0x1F49],
	[0x1F42, 0x1F4A],
	[0x1F43, 0x1F4B],
	[0x1F44, 0x1F4C],
	[0x1F45, 0x1F4D],
	[0x1F48, 0x1F40],
	[0x1F49, 0x1F41],
	[0x1F4A, 0x1F42],
	[0x1F4B, 0x1F43],
	[0x1F4C, 0x1F44],
	[0x1F4D, 0x1F45],
	[0x1F51, 0x1F59],
	[0x1F53, 0x1F5B],
	[0x1F55, 0x1F5D],
	[0x1F57, 0x1F5F],
	[0x1F59, 0x1F51],
	[0x1F5B, 0x1F53],
	[0x1F5D, 0x1F55],
	[0x1F5F, 0x1F57],
	[0x1F60, 0x1F68],
	[0x1F61, 0x1F69],
	[0x1F62, 0x1F6A],
	[0x1F63, 0x1F6B],
	[0x1F64, 0x1F6C],
	[0x1F65, 0x1F6D],
	[0x1F66, 0x1F6E],
	[0x1F67, 0x1F6F],
	[0x1F68, 0x1F60],
	[0x1F69, 0x1F61],
	[0x1F6A, 0x1F62],
	[0x1F6B, 0x1F63],
	[0x1F6C, 0x1F64],
	[0x1F6D, 0x1F65],
	[0x1F6E, 0x1F66],
	[0x1F6F, 0x1F67],
	[0x1F70, 0x1FBA],
	[0x1F71, 0x1FBB],
	[0x1F72, 0x1FC8],
	[0x1F73, 0x1FC9],
	[0x1F74, 0x1FCA],
	[0x1F75, 0x1FCB],
	[0x1F76, 0x1FDA],
	[0x1F77, 0x1FDB],
	[0x1F78, 0x1FF8],
	[0x1F79, 0x1FF9],
	[0x1F7A, 0x1FEA],
	[0x1F7B, 0x1FEB],
	[0x1F7C, 0x1FFA],
	[0x1F7D, 0x1FFB],
	[0x1FB0, 0x1FB8],
	[0x1FB1, 0x1FB9],
	[0x1FB8, 0x1FB0],
	[0x1FB9, 0x1FB1],
	[0x1FBA, 0x1F70],
	[0x1FBB, 0x1F71],
	[0x1FBE, 0x3B9],
	[0x1FC8, 0x1F72],
	[0x1FC9, 0x1F73],
	[0x1FCA, 0x1F74],
	[0x1FCB, 0x1F75],
	[0x1FD0, 0x1FD8],
	[0x1FD1, 0x1FD9],
	[0x1FD8, 0x1FD0],
	[0x1FD9, 0x1FD1],
	[0x1FDA, 0x1F76],
	[0x1FDB, 0x1F77],
	[0x1FE0, 0x1FE8],
	[0x1FE1, 0x1FE9],
	[0x1FE5, 0x1FEC],
	[0x1FE8, 0x1FE0],
	[0x1FE9, 0x1FE1],
	[0x1FEA, 0x1F7A],
	[0x1FEB, 0x1F7B],
	[0x1FEC, 0x1FE5],
	[0x1FF8, 0x1F78],
	[0x1FF9, 0x1F79],
	[0x1FFA, 0x1F7C],
	[0x1FFB, 0x1F7D],
	[0x2132, 0x214E],
	[0x214E, 0x2132],
	[0x2160, 0x2170],
	[0x2161, 0x2171],
	[0x2162, 0x2172],
	[0x2163, 0x2173],
	[0x2164, 0x2174],
	[0x2165, 0x2175],
	[0x2166, 0x2176],
	[0x2167, 0x2177],
	[0x2168, 0x2178],
	[0x2169, 0x2179],
	[0x216A, 0x217A],
	[0x216B, 0x217B],
	[0x216C, 0x217C],
	[0x216D, 0x217D],
	[0x216E, 0x217E],
	[0x216F, 0x217F],
	[0x2170, 0x2160],
	[0x2171, 0x2161],
	[0x2172, 0x2162],
	[0x2173, 0x2163],
	[0x2174, 0x2164],
	[0x2175, 0x2165],
	[0x2176, 0x2166],
	[0x2177, 0x2167],
	[0x2178, 0x2168],
	[0x2179, 0x2169],
	[0x217A, 0x216A],
	[0x217B, 0x216B],
	[0x217C, 0x216C],
	[0x217D, 0x216D],
	[0x217E, 0x216E],
	[0x217F, 0x216F],
	[0x2183, 0x2184],
	[0x2184, 0x2183],
	[0x24B6, 0x24D0],
	[0x24B7, 0x24D1],
	[0x24B8, 0x24D2],
	[0x24B9, 0x24D3],
	[0x24BA, 0x24D4],
	[0x24BB, 0x24D5],
	[0x24BC, 0x24D6],
	[0x24BD, 0x24D7],
	[0x24BE, 0x24D8],
	[0x24BF, 0x24D9],
	[0x24C0, 0x24DA],
	[0x24C1, 0x24DB],
	[0x24C2, 0x24DC],
	[0x24C3, 0x24DD],
	[0x24C4, 0x24DE],
	[0x24C5, 0x24DF],
	[0x24C6, 0x24E0],
	[0x24C7, 0x24E1],
	[0x24C8, 0x24E2],
	[0x24C9, 0x24E3],
	[0x24CA, 0x24E4],
	[0x24CB, 0x24E5],
	[0x24CC, 0x24E6],
	[0x24CD, 0x24E7],
	[0x24CE, 0x24E8],
	[0x24CF, 0x24E9],
	[0x24D0, 0x24B6],
	[0x24D1, 0x24B7],
	[0x24D2, 0x24B8],
	[0x24D3, 0x24B9],
	[0x24D4, 0x24BA],
	[0x24D5, 0x24BB],
	[0x24D6, 0x24BC],
	[0x24D7, 0x24BD],
	[0x24D8, 0x24BE],
	[0x24D9, 0x24BF],
	[0x24DA, 0x24C0],
	[0x24DB, 0x24C1],
	[0x24DC, 0x24C2],
	[0x24DD, 0x24C3],
	[0x24DE, 0x24C4],
	[0x24DF, 0x24C5],
	[0x24E0, 0x24C6],
	[0x24E1, 0x24C7],
	[0x24E2, 0x24C8],
	[0x24E3, 0x24C9],
	[0x24E4, 0x24CA],
	[0x24E5, 0x24CB],
	[0x24E6, 0x24CC],
	[0x24E7, 0x24CD],
	[0x24E8, 0x24CE],
	[0x24E9, 0x24CF],
	[0x2C00, 0x2C30],
	[0x2C01, 0x2C31],
	[0x2C02, 0x2C32],
	[0x2C03, 0x2C33],
	[0x2C04, 0x2C34],
	[0x2C05, 0x2C35],
	[0x2C06, 0x2C36],
	[0x2C07, 0x2C37],
	[0x2C08, 0x2C38],
	[0x2C09, 0x2C39],
	[0x2C0A, 0x2C3A],
	[0x2C0B, 0x2C3B],
	[0x2C0C, 0x2C3C],
	[0x2C0D, 0x2C3D],
	[0x2C0E, 0x2C3E],
	[0x2C0F, 0x2C3F],
	[0x2C10, 0x2C40],
	[0x2C11, 0x2C41],
	[0x2C12, 0x2C42],
	[0x2C13, 0x2C43],
	[0x2C14, 0x2C44],
	[0x2C15, 0x2C45],
	[0x2C16, 0x2C46],
	[0x2C17, 0x2C47],
	[0x2C18, 0x2C48],
	[0x2C19, 0x2C49],
	[0x2C1A, 0x2C4A],
	[0x2C1B, 0x2C4B],
	[0x2C1C, 0x2C4C],
	[0x2C1D, 0x2C4D],
	[0x2C1E, 0x2C4E],
	[0x2C1F, 0x2C4F],
	[0x2C20, 0x2C50],
	[0x2C21, 0x2C51],
	[0x2C22, 0x2C52],
	[0x2C23, 0x2C53],
	[0x2C24, 0x2C54],
	[0x2C25, 0x2C55],
	[0x2C26, 0x2C56],
	[0x2C27, 0x2C57],
	[0x2C28, 0x2C58],
	[0x2C29, 0x2C59],
	[0x2C2A, 0x2C5A],
	[0x2C2B, 0x2C5B],
	[0x2C2C, 0x2C5C],
	[0x2C2D, 0x2C5D],
	[0x2C2E, 0x2C5E],
	[0x2C2F, 0x2C5F],
	[0x2C30, 0x2C00],
	[0x2C31, 0x2C01],
	[0x2C32, 0x2C02],
	[0x2C33, 0x2C03],
	[0x2C34, 0x2C04],
	[0x2C35, 0x2C05],
	[0x2C36, 0x2C06],
	[0x2C37, 0x2C07],
	[0x2C38, 0x2C08],
	[0x2C39, 0x2C09],
	[0x2C3A, 0x2C0A],
	[0x2C3B, 0x2C0B],
	[0x2C3C, 0x2C0C],
	[0x2C3D, 0x2C0D],
	[0x2C3E, 0x2C0E],
	[0x2C3F, 0x2C0F],
	[0x2C40, 0x2C10],
	[0x2C41, 0x2C11],
	[0x2C42, 0x2C12],
	[0x2C43, 0x2C13],
	[0x2C44, 0x2C14],
	[0x2C45, 0x2C15],
	[0x2C46, 0x2C16],
	[0x2C47, 0x2C17],
	[0x2C48, 0x2C18],
	[0x2C49, 0x2C19],
	[0x2C4A, 0x2C1A],
	[0x2C4B, 0x2C1B],
	[0x2C4C, 0x2C1C],
	[0x2C4D, 0x2C1D],
	[0x2C4E, 0x2C1E],
	[0x2C4F, 0x2C1F],
	[0x2C50, 0x2C20],
	[0x2C51, 0x2C21],
	[0x2C52, 0x2C22],
	[0x2C53, 0x2C23],
	[0x2C54, 0x2C24],
	[0x2C55, 0x2C25],
	[0x2C56, 0x2C26],
	[0x2C57, 0x2C27],
	[0x2C58, 0x2C28],
	[0x2C59, 0x2C29],
	[0x2C5A, 0x2C2A],
	[0x2C5B, 0x2C2B],
	[0x2C5C, 0x2C2C],
	[0x2C5D, 0x2C2D],
	[0x2C5E, 0x2C2E],
	[0x2C5F, 0x2C2F],
	[0x2C60, 0x2C61],
	[0x2C61, 0x2C60],
	[0x2C62, 0x26B],
	[0x2C63, 0x1D7D],
	[0x2C64, 0x27D],
	[0x2C65, 0x23A],
	[0x2C66, 0x23E],
	[0x2C67, 0x2C68],
	[0x2C68, 0x2C67],
	[0x2C69, 0x2C6A],
	[0x2C6A, 0x2C69],
	[0x2C6B, 0x2C6C],
	[0x2C6C, 0x2C6B],
	[0x2C6D, 0x251],
	[0x2C6E, 0x271],
	[0x2C6F, 0x250],
	[0x2C70, 0x252],
	[0x2C72, 0x2C73],
	[0x2C73, 0x2C72],
	[0x2C75, 0x2C76],
	[0x2C76, 0x2C75],
	[0x2C7E, 0x23F],
	[0x2C7F, 0x240],
	[0x2C80, 0x2C81],
	[0x2C81, 0x2C80],
	[0x2C82, 0x2C83],
	[0x2C83, 0x2C82],
	[0x2C84, 0x2C85],
	[0x2C85, 0x2C84],
	[0x2C86, 0x2C87],
	[0x2C87, 0x2C86],
	[0x2C88, 0x2C89],
	[0x2C89, 0x2C88],
	[0x2C8A, 0x2C8B],
	[0x2C8B, 0x2C8A],
	[0x2C8C, 0x2C8D],
	[0x2C8D, 0x2C8C],
	[0x2C8E, 0x2C8F],
	[0x2C8F, 0x2C8E],
	[0x2C90, 0x2C91],
	[0x2C91, 0x2C90],
	[0x2C92, 0x2C93],
	[0x2C93, 0x2C92],
	[0x2C94, 0x2C95],
	[0x2C95, 0x2C94],
	[0x2C96, 0x2C97],
	[0x2C97, 0x2C96],
	[0x2C98, 0x2C99],
	[0x2C99, 0x2C98],
	[0x2C9A, 0x2C9B],
	[0x2C9B, 0x2C9A],
	[0x2C9C, 0x2C9D],
	[0x2C9D, 0x2C9C],
	[0x2C9E, 0x2C9F],
	[0x2C9F, 0x2C9E],
	[0x2CA0, 0x2CA1],
	[0x2CA1, 0x2CA0],
	[0x2CA2, 0x2CA3],
	[0x2CA3, 0x2CA2],
	[0x2CA4, 0x2CA5],
	[0x2CA5, 0x2CA4],
	[0x2CA6, 0x2CA7],
	[0x2CA7, 0x2CA6],
	[0x2CA8, 0x2CA9],
	[0x2CA9, 0x2CA8],
	[0x2CAA, 0x2CAB],
	[0x2CAB, 0x2CAA],
	[0x2CAC, 0x2CAD],
	[0x2CAD, 0x2CAC],
	[0x2CAE, 0x2CAF],
	[0x2CAF, 0x2CAE],
	[0x2CB0, 0x2CB1],
	[0x2CB1, 0x2CB0],
	[0x2CB2, 0x2CB3],
	[0x2CB3, 0x2CB2],
	[0x2CB4, 0x2CB5],
	[0x2CB5, 0x2CB4],
	[0x2CB6, 0x2CB7],
	[0x2CB7, 0x2CB6],
	[0x2CB8, 0x2CB9],
	[0x2CB9, 0x2CB8],
	[0x2CBA, 0x2CBB],
	[0x2CBB, 0x2CBA],
	[0x2CBC, 0x2CBD],
	[0x2CBD, 0x2CBC],
	[0x2CBE, 0x2CBF],
	[0x2CBF, 0x2CBE],
	[0x2CC0, 0x2CC1],
	[0x2CC1, 0x2CC0],
	[0x2CC2, 0x2CC3],
	[0x2CC3, 0x2CC2],
	[0x2CC4, 0x2CC5],
	[0x2CC5, 0x2CC4],
	[0x2CC6, 0x2CC7],
	[0x2CC7, 0x2CC6],
	[0x2CC8, 0x2CC9],
	[0x2CC9, 0x2CC8],
	[0x2CCA, 0x2CCB],
	[0x2CCB, 0x2CCA],
	[0x2CCC, 0x2CCD],
	[0x2CCD, 0x2CCC],
	[0x2CCE, 0x2CCF],
	[0x2CCF, 0x2CCE],
	[0x2CD0, 0x2CD1],
	[0x2CD1, 0x2CD0],
	[0x2CD2, 0x2CD3],
	[0x2CD3, 0x2CD2],
	[0x2CD4, 0x2CD5],
	[0x2CD5, 0x2CD4],
	[0x2CD6, 0x2CD7],
	[0x2CD7, 0x2CD6],
	[0x2CD8, 0x2CD9],
	[0x2CD9, 0x2CD8],
	[0x2CDA, 0x2CDB],
	[0x2CDB, 0x2CDA],
	[0x2CDC, 0x2CDD],
	[0x2CDD, 0x2CDC],
	[0x2CDE, 0x2CDF],
	[0x2CDF, 0x2CDE],
	[0x2CE0, 0x2CE1],
	[0x2CE1, 0x2CE0],
	[0x2CE2, 0x2CE3],
	[0x2CE3, 0x2CE2],
	[0x2CEB, 0x2CEC],
	[0x2CEC, 0x2CEB],
	[0x2CED, 0x2CEE],
	[0x2CEE, 0x2CED],
	[0x2CF2, 0x2CF3],
	[0x2CF3, 0x2CF2],
	[0x2D00, 0x10A0],
	[0x2D01, 0x10A1],
	[0x2D02, 0x10A2],
	[0x2D03, 0x10A3],
	[0x2D04, 0x10A4],
	[0x2D05, 0x10A5],
	[0x2D06, 0x10A6],
	[0x2D07, 0x10A7],
	[0x2D08, 0x10A8],
	[0x2D09, 0x10A9],
	[0x2D0A, 0x10AA],
	[0x2D0B, 0x10AB],
	[0x2D0C, 0x10AC],
	[0x2D0D, 0x10AD],
	[0x2D0E, 0x10AE],
	[0x2D0F, 0x10AF],
	[0x2D10, 0x10B0],
	[0x2D11, 0x10B1],
	[0x2D12, 0x10B2],
	[0x2D13, 0x10B3],
	[0x2D14, 0x10B4],
	[0x2D15, 0x10B5],
	[0x2D16, 0x10B6],
	[0x2D17, 0x10B7],
	[0x2D18, 0x10B8],
	[0x2D19, 0x10B9],
	[0x2D1A, 0x10BA],
	[0x2D1B, 0x10BB],
	[0x2D1C, 0x10BC],
	[0x2D1D, 0x10BD],
	[0x2D1E, 0x10BE],
	[0x2D1F, 0x10BF],
	[0x2D20, 0x10C0],
	[0x2D21, 0x10C1],
	[0x2D22, 0x10C2],
	[0x2D23, 0x10C3],
	[0x2D24, 0x10C4],
	[0x2D25, 0x10C5],
	[0x2D27, 0x10C7],
	[0x2D2D, 0x10CD],
	[0xA640, 0xA641],
	[0xA641, 0xA640],
	[0xA642, 0xA643],
	[0xA643, 0xA642],
	[0xA644, 0xA645],
	[0xA645, 0xA644],
	[0xA646, 0xA647],
	[0xA647, 0xA646],
	[0xA648, 0xA649],
	[0xA649, 0xA648],
	[0xA64A, 0xA64B],
	[0xA64B, [
		0x1C88,
		0xA64A
	]],
	[0xA64C, 0xA64D],
	[0xA64D, 0xA64C],
	[0xA64E, 0xA64F],
	[0xA64F, 0xA64E],
	[0xA650, 0xA651],
	[0xA651, 0xA650],
	[0xA652, 0xA653],
	[0xA653, 0xA652],
	[0xA654, 0xA655],
	[0xA655, 0xA654],
	[0xA656, 0xA657],
	[0xA657, 0xA656],
	[0xA658, 0xA659],
	[0xA659, 0xA658],
	[0xA65A, 0xA65B],
	[0xA65B, 0xA65A],
	[0xA65C, 0xA65D],
	[0xA65D, 0xA65C],
	[0xA65E, 0xA65F],
	[0xA65F, 0xA65E],
	[0xA660, 0xA661],
	[0xA661, 0xA660],
	[0xA662, 0xA663],
	[0xA663, 0xA662],
	[0xA664, 0xA665],
	[0xA665, 0xA664],
	[0xA666, 0xA667],
	[0xA667, 0xA666],
	[0xA668, 0xA669],
	[0xA669, 0xA668],
	[0xA66A, 0xA66B],
	[0xA66B, 0xA66A],
	[0xA66C, 0xA66D],
	[0xA66D, 0xA66C],
	[0xA680, 0xA681],
	[0xA681, 0xA680],
	[0xA682, 0xA683],
	[0xA683, 0xA682],
	[0xA684, 0xA685],
	[0xA685, 0xA684],
	[0xA686, 0xA687],
	[0xA687, 0xA686],
	[0xA688, 0xA689],
	[0xA689, 0xA688],
	[0xA68A, 0xA68B],
	[0xA68B, 0xA68A],
	[0xA68C, 0xA68D],
	[0xA68D, 0xA68C],
	[0xA68E, 0xA68F],
	[0xA68F, 0xA68E],
	[0xA690, 0xA691],
	[0xA691, 0xA690],
	[0xA692, 0xA693],
	[0xA693, 0xA692],
	[0xA694, 0xA695],
	[0xA695, 0xA694],
	[0xA696, 0xA697],
	[0xA697, 0xA696],
	[0xA698, 0xA699],
	[0xA699, 0xA698],
	[0xA69A, 0xA69B],
	[0xA69B, 0xA69A],
	[0xA722, 0xA723],
	[0xA723, 0xA722],
	[0xA724, 0xA725],
	[0xA725, 0xA724],
	[0xA726, 0xA727],
	[0xA727, 0xA726],
	[0xA728, 0xA729],
	[0xA729, 0xA728],
	[0xA72A, 0xA72B],
	[0xA72B, 0xA72A],
	[0xA72C, 0xA72D],
	[0xA72D, 0xA72C],
	[0xA72E, 0xA72F],
	[0xA72F, 0xA72E],
	[0xA732, 0xA733],
	[0xA733, 0xA732],
	[0xA734, 0xA735],
	[0xA735, 0xA734],
	[0xA736, 0xA737],
	[0xA737, 0xA736],
	[0xA738, 0xA739],
	[0xA739, 0xA738],
	[0xA73A, 0xA73B],
	[0xA73B, 0xA73A],
	[0xA73C, 0xA73D],
	[0xA73D, 0xA73C],
	[0xA73E, 0xA73F],
	[0xA73F, 0xA73E],
	[0xA740, 0xA741],
	[0xA741, 0xA740],
	[0xA742, 0xA743],
	[0xA743, 0xA742],
	[0xA744, 0xA745],
	[0xA745, 0xA744],
	[0xA746, 0xA747],
	[0xA747, 0xA746],
	[0xA748, 0xA749],
	[0xA749, 0xA748],
	[0xA74A, 0xA74B],
	[0xA74B, 0xA74A],
	[0xA74C, 0xA74D],
	[0xA74D, 0xA74C],
	[0xA74E, 0xA74F],
	[0xA74F, 0xA74E],
	[0xA750, 0xA751],
	[0xA751, 0xA750],
	[0xA752, 0xA753],
	[0xA753, 0xA752],
	[0xA754, 0xA755],
	[0xA755, 0xA754],
	[0xA756, 0xA757],
	[0xA757, 0xA756],
	[0xA758, 0xA759],
	[0xA759, 0xA758],
	[0xA75A, 0xA75B],
	[0xA75B, 0xA75A],
	[0xA75C, 0xA75D],
	[0xA75D, 0xA75C],
	[0xA75E, 0xA75F],
	[0xA75F, 0xA75E],
	[0xA760, 0xA761],
	[0xA761, 0xA760],
	[0xA762, 0xA763],
	[0xA763, 0xA762],
	[0xA764, 0xA765],
	[0xA765, 0xA764],
	[0xA766, 0xA767],
	[0xA767, 0xA766],
	[0xA768, 0xA769],
	[0xA769, 0xA768],
	[0xA76A, 0xA76B],
	[0xA76B, 0xA76A],
	[0xA76C, 0xA76D],
	[0xA76D, 0xA76C],
	[0xA76E, 0xA76F],
	[0xA76F, 0xA76E],
	[0xA779, 0xA77A],
	[0xA77A, 0xA779],
	[0xA77B, 0xA77C],
	[0xA77C, 0xA77B],
	[0xA77D, 0x1D79],
	[0xA77E, 0xA77F],
	[0xA77F, 0xA77E],
	[0xA780, 0xA781],
	[0xA781, 0xA780],
	[0xA782, 0xA783],
	[0xA783, 0xA782],
	[0xA784, 0xA785],
	[0xA785, 0xA784],
	[0xA786, 0xA787],
	[0xA787, 0xA786],
	[0xA78B, 0xA78C],
	[0xA78C, 0xA78B],
	[0xA78D, 0x265],
	[0xA790, 0xA791],
	[0xA791, 0xA790],
	[0xA792, 0xA793],
	[0xA793, 0xA792],
	[0xA794, 0xA7C4],
	[0xA796, 0xA797],
	[0xA797, 0xA796],
	[0xA798, 0xA799],
	[0xA799, 0xA798],
	[0xA79A, 0xA79B],
	[0xA79B, 0xA79A],
	[0xA79C, 0xA79D],
	[0xA79D, 0xA79C],
	[0xA79E, 0xA79F],
	[0xA79F, 0xA79E],
	[0xA7A0, 0xA7A1],
	[0xA7A1, 0xA7A0],
	[0xA7A2, 0xA7A3],
	[0xA7A3, 0xA7A2],
	[0xA7A4, 0xA7A5],
	[0xA7A5, 0xA7A4],
	[0xA7A6, 0xA7A7],
	[0xA7A7, 0xA7A6],
	[0xA7A8, 0xA7A9],
	[0xA7A9, 0xA7A8],
	[0xA7AA, 0x266],
	[0xA7AB, 0x25C],
	[0xA7AC, 0x261],
	[0xA7AD, 0x26C],
	[0xA7AE, 0x26A],
	[0xA7B0, 0x29E],
	[0xA7B1, 0x287],
	[0xA7B2, 0x29D],
	[0xA7B3, 0xAB53],
	[0xA7B4, 0xA7B5],
	[0xA7B5, 0xA7B4],
	[0xA7B6, 0xA7B7],
	[0xA7B7, 0xA7B6],
	[0xA7B8, 0xA7B9],
	[0xA7B9, 0xA7B8],
	[0xA7BA, 0xA7BB],
	[0xA7BB, 0xA7BA],
	[0xA7BC, 0xA7BD],
	[0xA7BD, 0xA7BC],
	[0xA7BE, 0xA7BF],
	[0xA7BF, 0xA7BE],
	[0xA7C0, 0xA7C1],
	[0xA7C1, 0xA7C0],
	[0xA7C2, 0xA7C3],
	[0xA7C3, 0xA7C2],
	[0xA7C4, 0xA794],
	[0xA7C5, 0x282],
	[0xA7C6, 0x1D8E],
	[0xA7C7, 0xA7C8],
	[0xA7C8, 0xA7C7],
	[0xA7C9, 0xA7CA],
	[0xA7CA, 0xA7C9],
	[0xA7CB, 0x264],
	[0xA7CC, 0xA7CD],
	[0xA7CD, 0xA7CC],
	[0xA7D0, 0xA7D1],
	[0xA7D1, 0xA7D0],
	[0xA7D6, 0xA7D7],
	[0xA7D7, 0xA7D6],
	[0xA7D8, 0xA7D9],
	[0xA7D9, 0xA7D8],
	[0xA7DA, 0xA7DB],
	[0xA7DB, 0xA7DA],
	[0xA7DC, 0x19B],
	[0xA7F5, 0xA7F6],
	[0xA7F6, 0xA7F5],
	[0xAB53, 0xA7B3],
	[0xAB70, 0x13A0],
	[0xAB71, 0x13A1],
	[0xAB72, 0x13A2],
	[0xAB73, 0x13A3],
	[0xAB74, 0x13A4],
	[0xAB75, 0x13A5],
	[0xAB76, 0x13A6],
	[0xAB77, 0x13A7],
	[0xAB78, 0x13A8],
	[0xAB79, 0x13A9],
	[0xAB7A, 0x13AA],
	[0xAB7B, 0x13AB],
	[0xAB7C, 0x13AC],
	[0xAB7D, 0x13AD],
	[0xAB7E, 0x13AE],
	[0xAB7F, 0x13AF],
	[0xAB80, 0x13B0],
	[0xAB81, 0x13B1],
	[0xAB82, 0x13B2],
	[0xAB83, 0x13B3],
	[0xAB84, 0x13B4],
	[0xAB85, 0x13B5],
	[0xAB86, 0x13B6],
	[0xAB87, 0x13B7],
	[0xAB88, 0x13B8],
	[0xAB89, 0x13B9],
	[0xAB8A, 0x13BA],
	[0xAB8B, 0x13BB],
	[0xAB8C, 0x13BC],
	[0xAB8D, 0x13BD],
	[0xAB8E, 0x13BE],
	[0xAB8F, 0x13BF],
	[0xAB90, 0x13C0],
	[0xAB91, 0x13C1],
	[0xAB92, 0x13C2],
	[0xAB93, 0x13C3],
	[0xAB94, 0x13C4],
	[0xAB95, 0x13C5],
	[0xAB96, 0x13C6],
	[0xAB97, 0x13C7],
	[0xAB98, 0x13C8],
	[0xAB99, 0x13C9],
	[0xAB9A, 0x13CA],
	[0xAB9B, 0x13CB],
	[0xAB9C, 0x13CC],
	[0xAB9D, 0x13CD],
	[0xAB9E, 0x13CE],
	[0xAB9F, 0x13CF],
	[0xABA0, 0x13D0],
	[0xABA1, 0x13D1],
	[0xABA2, 0x13D2],
	[0xABA3, 0x13D3],
	[0xABA4, 0x13D4],
	[0xABA5, 0x13D5],
	[0xABA6, 0x13D6],
	[0xABA7, 0x13D7],
	[0xABA8, 0x13D8],
	[0xABA9, 0x13D9],
	[0xABAA, 0x13DA],
	[0xABAB, 0x13DB],
	[0xABAC, 0x13DC],
	[0xABAD, 0x13DD],
	[0xABAE, 0x13DE],
	[0xABAF, 0x13DF],
	[0xABB0, 0x13E0],
	[0xABB1, 0x13E1],
	[0xABB2, 0x13E2],
	[0xABB3, 0x13E3],
	[0xABB4, 0x13E4],
	[0xABB5, 0x13E5],
	[0xABB6, 0x13E6],
	[0xABB7, 0x13E7],
	[0xABB8, 0x13E8],
	[0xABB9, 0x13E9],
	[0xABBA, 0x13EA],
	[0xABBB, 0x13EB],
	[0xABBC, 0x13EC],
	[0xABBD, 0x13ED],
	[0xABBE, 0x13EE],
	[0xABBF, 0x13EF],
	[0xFF21, 0xFF41],
	[0xFF22, 0xFF42],
	[0xFF23, 0xFF43],
	[0xFF24, 0xFF44],
	[0xFF25, 0xFF45],
	[0xFF26, 0xFF46],
	[0xFF27, 0xFF47],
	[0xFF28, 0xFF48],
	[0xFF29, 0xFF49],
	[0xFF2A, 0xFF4A],
	[0xFF2B, 0xFF4B],
	[0xFF2C, 0xFF4C],
	[0xFF2D, 0xFF4D],
	[0xFF2E, 0xFF4E],
	[0xFF2F, 0xFF4F],
	[0xFF30, 0xFF50],
	[0xFF31, 0xFF51],
	[0xFF32, 0xFF52],
	[0xFF33, 0xFF53],
	[0xFF34, 0xFF54],
	[0xFF35, 0xFF55],
	[0xFF36, 0xFF56],
	[0xFF37, 0xFF57],
	[0xFF38, 0xFF58],
	[0xFF39, 0xFF59],
	[0xFF3A, 0xFF5A],
	[0xFF41, 0xFF21],
	[0xFF42, 0xFF22],
	[0xFF43, 0xFF23],
	[0xFF44, 0xFF24],
	[0xFF45, 0xFF25],
	[0xFF46, 0xFF26],
	[0xFF47, 0xFF27],
	[0xFF48, 0xFF28],
	[0xFF49, 0xFF29],
	[0xFF4A, 0xFF2A],
	[0xFF4B, 0xFF2B],
	[0xFF4C, 0xFF2C],
	[0xFF4D, 0xFF2D],
	[0xFF4E, 0xFF2E],
	[0xFF4F, 0xFF2F],
	[0xFF50, 0xFF30],
	[0xFF51, 0xFF31],
	[0xFF52, 0xFF32],
	[0xFF53, 0xFF33],
	[0xFF54, 0xFF34],
	[0xFF55, 0xFF35],
	[0xFF56, 0xFF36],
	[0xFF57, 0xFF37],
	[0xFF58, 0xFF38],
	[0xFF59, 0xFF39],
	[0xFF5A, 0xFF3A]
]);


---

File name: node_modules\regexpu-core\data\iu-foldings.js

Code:
module.exports = new Map([
	[0x41, 0x61],
	[0x42, 0x62],
	[0x43, 0x63],
	[0x44, 0x64],
	[0x45, 0x65],
	[0x46, 0x66],
	[0x47, 0x67],
	[0x48, 0x68],
	[0x49, 0x69],
	[0x4A, 0x6A],
	[0x4B, 0x6B],
	[0x4C, 0x6C],
	[0x4D, 0x6D],
	[0x4E, 0x6E],
	[0x4F, 0x6F],
	[0x50, 0x70],
	[0x51, 0x71],
	[0x52, 0x72],
	[0x53, 0x73],
	[0x54, 0x74],
	[0x55, 0x75],
	[0x56, 0x76],
	[0x57, 0x77],
	[0x58, 0x78],
	[0x59, 0x79],
	[0x5A, 0x7A],
	[0xB5, 0x3BC],
	[0xC0, 0xE0],
	[0xC1, 0xE1],
	[0xC2, 0xE2],
	[0xC3, 0xE3],
	[0xC4, 0xE4],
	[0xC5, 0xE5],
	[0xC6, 0xE6],
	[0xC7, 0xE7],
	[0xC8, 0xE8],
	[0xC9, 0xE9],
	[0xCA, 0xEA],
	[0xCB, 0xEB],
	[0xCC, 0xEC],
	[0xCD, 0xED],
	[0xCE, 0xEE],
	[0xCF, 0xEF],
	[0xD0, 0xF0],
	[0xD1, 0xF1],
	[0xD2, 0xF2],
	[0xD3, 0xF3],
	[0xD4, 0xF4],
	[0xD5, 0xF5],
	[0xD6, 0xF6],
	[0xD8, 0xF8],
	[0xD9, 0xF9],
	[0xDA, 0xFA],
	[0xDB, 0xFB],
	[0xDC, 0xFC],
	[0xDD, 0xFD],
	[0xDE, 0xFE],
	[0x100, 0x101],
	[0x102, 0x103],
	[0x104, 0x105],
	[0x106, 0x107],
	[0x108, 0x109],
	[0x10A, 0x10B],
	[0x10C, 0x10D],
	[0x10E, 0x10F],
	[0x110, 0x111],
	[0x112, 0x113],
	[0x114, 0x115],
	[0x116, 0x117],
	[0x118, 0x119],
	[0x11A, 0x11B],
	[0x11C, 0x11D],
	[0x11E, 0x11F],
	[0x120, 0x121],
	[0x122, 0x123],
	[0x124, 0x125],
	[0x126, 0x127],
	[0x128, 0x129],
	[0x12A, 0x12B],
	[0x12C, 0x12D],
	[0x12E, 0x12F],
	[0x132, 0x133],
	[0x134, 0x135],
	[0x136, 0x137],
	[0x139, 0x13A],
	[0x13B, 0x13C],
	[0x13D, 0x13E],
	[0x13F, 0x140],
	[0x141, 0x142],
	[0x143, 0x144],
	[0x145, 0x146],
	[0x147, 0x148],
	[0x14A, 0x14B],
	[0x14C, 0x14D],
	[0x14E, 0x14F],
	[0x150, 0x151],
	[0x152, 0x153],
	[0x154, 0x155],
	[0x156, 0x157],
	[0x158, 0x159],
	[0x15A, 0x15B],
	[0x15C, 0x15D],
	[0x15E, 0x15F],
	[0x160, 0x161],
	[0x162, 0x163],
	[0x164, 0x165],
	[0x166, 0x167],
	[0x168, 0x169],
	[0x16A, 0x16B],
	[0x16C, 0x16D],
	[0x16E, 0x16F],
	[0x170, 0x171],
	[0x172, 0x173],
	[0x174, 0x175],
	[0x176, 0x177],
	[0x178, 0xFF],
	[0x179, 0x17A],
	[0x17B, 0x17C],
	[0x17D, 0x17E],
	[0x17F, 0x73],
	[0x181, 0x253],
	[0x182, 0x183],
	[0x184, 0x185],
	[0x186, 0x254],
	[0x187, 0x188],
	[0x189, 0x256],
	[0x18A, 0x257],
	[0x18B, 0x18C],
	[0x18E, 0x1DD],
	[0x18F, 0x259],
	[0x190, 0x25B],
	[0x191, 0x192],
	[0x193, 0x260],
	[0x194, 0x263],
	[0x196, 0x269],
	[0x197, 0x268],
	[0x198, 0x199],
	[0x19C, 0x26F],
	[0x19D, 0x272],
	[0x19F, 0x275],
	[0x1A0, 0x1A1],
	[0x1A2, 0x1A3],
	[0x1A4, 0x1A5],
	[0x1A6, 0x280],
	[0x1A7, 0x1A8],
	[0x1A9, 0x283],
	[0x1AC, 0x1AD],
	[0x1AE, 0x288],
	[0x1AF, 0x1B0],
	[0x1B1, 0x28A],
	[0x1B2, 0x28B],
	[0x1B3, 0x1B4],
	[0x1B5, 0x1B6],
	[0x1B7, 0x292],
	[0x1B8, 0x1B9],
	[0x1BC, 0x1BD],
	[0x1C4, 0x1C6],
	[0x1C5, 0x1C6],
	[0x1C7, 0x1C9],
	[0x1C8, 0x1C9],
	[0x1CA, 0x1CC],
	[0x1CB, 0x1CC],
	[0x1CD, 0x1CE],
	[0x1CF, 0x1D0],
	[0x1D1, 0x1D2],
	[0x1D3, 0x1D4],
	[0x1D5, 0x1D6],
	[0x1D7, 0x1D8],
	[0x1D9, 0x1DA],
	[0x1DB, 0x1DC],
	[0x1DE, 0x1DF],
	[0x1E0, 0x1E1],
	[0x1E2, 0x1E3],
	[0x1E4, 0x1E5],
	[0x1E6, 0x1E7],
	[0x1E8, 0x1E9],
	[0x1EA, 0x1EB],
	[0x1EC, 0x1ED],
	[0x1EE, 0x1EF],
	[0x1F1, 0x1F3],
	[0x1F2, 0x1F3],
	[0x1F4, 0x1F5],
	[0x1F6, 0x195],
	[0x1F7, 0x1BF],
	[0x1F8, 0x1F9],
	[0x1FA, 0x1FB],
	[0x1FC, 0x1FD],
	[0x1FE, 0x1FF],
	[0x200, 0x201],
	[0x202, 0x203],
	[0x204, 0x205],
	[0x206, 0x207],
	[0x208, 0x209],
	[0x20A, 0x20B],
	[0x20C, 0x20D],
	[0x20E, 0x20F],
	[0x210, 0x211],
	[0x212, 0x213],
	[0x214, 0x215],
	[0x216, 0x217],
	[0x218, 0x219],
	[0x21A, 0x21B],
	[0x21C, 0x21D],
	[0x21E, 0x21F],
	[0x220, 0x19E],
	[0x222, 0x223],
	[0x224, 0x225],
	[0x226, 0x227],
	[0x228, 0x229],
	[0x22A, 0x22B],
	[0x22C, 0x22D],
	[0x22E, 0x22F],
	[0x230, 0x231],
	[0x232, 0x233],
	[0x23A, 0x2C65],
	[0x23B, 0x23C],
	[0x23D, 0x19A],
	[0x23E, 0x2C66],
	[0x241, 0x242],
	[0x243, 0x180],
	[0x244, 0x289],
	[0x245, 0x28C],
	[0x246, 0x247],
	[0x248, 0x249],
	[0x24A, 0x24B],
	[0x24C, 0x24D],
	[0x24E, 0x24F],
	[0x345, 0x3B9],
	[0x370, 0x371],
	[0x372, 0x373],
	[0x376, 0x377],
	[0x37F, 0x3F3],
	[0x386, 0x3AC],
	[0x388, 0x3AD],
	[0x389, 0x3AE],
	[0x38A, 0x3AF],
	[0x38C, 0x3CC],
	[0x38E, 0x3CD],
	[0x38F, 0x3CE],
	[0x391, 0x3B1],
	[0x392, 0x3B2],
	[0x393, 0x3B3],
	[0x394, 0x3B4],
	[0x395, 0x3B5],
	[0x396, 0x3B6],
	[0x397, 0x3B7],
	[0x398, 0x3B8],
	[0x399, 0x3B9],
	[0x39A, 0x3BA],
	[0x39B, 0x3BB],
	[0x39C, 0x3BC],
	[0x39D, 0x3BD],
	[0x39E, 0x3BE],
	[0x39F, 0x3BF],
	[0x3A0, 0x3C0],
	[0x3A1, 0x3C1],
	[0x3A3, 0x3C3],
	[0x3A4, 0x3C4],
	[0x3A5, 0x3C5],
	[0x3A6, 0x3C6],
	[0x3A7, 0x3C7],
	[0x3A8, 0x3C8],
	[0x3A9, 0x3C9],
	[0x3AA, 0x3CA],
	[0x3AB, 0x3CB],
	[0x3C2, 0x3C3],
	[0x3CF, 0x3D7],
	[0x3D0, 0x3B2],
	[0x3D1, 0x3B8],
	[0x3D5, 0x3C6],
	[0x3D6, 0x3C0],
	[0x3D8, 0x3D9],
	[0x3DA, 0x3DB],
	[0x3DC, 0x3DD],
	[0x3DE, 0x3DF],
	[0x3E0, 0x3E1],
	[0x3E2, 0x3E3],
	[0x3E4, 0x3E5],
	[0x3E6, 0x3E7],
	[0x3E8, 0x3E9],
	[0x3EA, 0x3EB],
	[0x3EC, 0x3ED],
	[0x3EE, 0x3EF],
	[0x3F0, 0x3BA],
	[0x3F1, 0x3C1],
	[0x3F4, 0x3B8],
	[0x3F5, 0x3B5],
	[0x3F7, 0x3F8],
	[0x3F9, 0x3F2],
	[0x3FA, 0x3FB],
	[0x3FD, 0x37B],
	[0x3FE, 0x37C],
	[0x3FF, 0x37D],
	[0x400, 0x450],
	[0x401, 0x451],
	[0x402, 0x452],
	[0x403, 0x453],
	[0x404, 0x454],
	[0x405, 0x455],
	[0x406, 0x456],
	[0x407, 0x457],
	[0x408, 0x458],
	[0x409, 0x459],
	[0x40A, 0x45A],
	[0x40B, 0x45B],
	[0x40C, 0x45C],
	[0x40D, 0x45D],
	[0x40E, 0x45E],
	[0x40F, 0x45F],
	[0x410, 0x430],
	[0x411, 0x431],
	[0x412, 0x432],
	[0x413, 0x433],
	[0x414, 0x434],
	[0x415, 0x435],
	[0x416, 0x436],
	[0x417, 0x437],
	[0x418, 0x438],
	[0x419, 0x439],
	[0x41A, 0x43A],
	[0x41B, 0x43B],
	[0x41C, 0x43C],
	[0x41D, 0x43D],
	[0x41E, 0x43E],
	[0x41F, 0x43F],
	[0x420, 0x440],
	[0x421, 0x441],
	[0x422, 0x442],
	[0x423, 0x443],
	[0x424, 0x444],
	[0x425, 0x445],
	[0x426, 0x446],
	[0x427, 0x447],
	[0x428, 0x448],
	[0x429, 0x449],
	[0x42A, 0x44A],
	[0x42B, 0x44B],
	[0x42C, 0x44C],
	[0x42D, 0x44D],
	[0x42E, 0x44E],
	[0x42F, 0x44F],
	[0x460, 0x461],
	[0x462, 0x463],
	[0x464, 0x465],
	[0x466, 0x467],
	[0x468, 0x469],
	[0x46A, 0x46B],
	[0x46C, 0x46D],
	[0x46E, 0x46F],
	[0x470, 0x471],
	[0x472, 0x473],
	[0x474, 0x475],
	[0x476, 0x477],
	[0x478, 0x479],
	[0x47A, 0x47B],
	[0x47C, 0x47D],
	[0x47E, 0x47F],
	[0x480, 0x481],
	[0x48A, 0x48B],
	[0x48C, 0x48D],
	[0x48E, 0x48F],
	[0x490, 0x491],
	[0x492, 0x493],
	[0x494, 0x495],
	[0x496, 0x497],
	[0x498, 0x499],
	[0x49A, 0x49B],
	[0x49C, 0x49D],
	[0x49E, 0x49F],
	[0x4A0, 0x4A1],
	[0x4A2, 0x4A3],
	[0x4A4, 0x4A5],
	[0x4A6, 0x4A7],
	[0x4A8, 0x4A9],
	[0x4AA, 0x4AB],
	[0x4AC, 0x4AD],
	[0x4AE, 0x4AF],
	[0x4B0, 0x4B1],
	[0x4B2, 0x4B3],
	[0x4B4, 0x4B5],
	[0x4B6, 0x4B7],
	[0x4B8, 0x4B9],
	[0x4BA, 0x4BB],
	[0x4BC, 0x4BD],
	[0x4BE, 0x4BF],
	[0x4C0, 0x4CF],
	[0x4C1, 0x4C2],
	[0x4C3, 0x4C4],
	[0x4C5, 0x4C6],
	[0x4C7, 0x4C8],
	[0x4C9, 0x4CA],
	[0x4CB, 0x4CC],
	[0x4CD, 0x4CE],
	[0x4D0, 0x4D1],
	[0x4D2, 0x4D3],
	[0x4D4, 0x4D5],
	[0x4D6, 0x4D7],
	[0x4D8, 0x4D9],
	[0x4DA, 0x4DB],
	[0x4DC, 0x4DD],
	[0x4DE, 0x4DF],
	[0x4E0, 0x4E1],
	[0x4E2, 0x4E3],
	[0x4E4, 0x4E5],
	[0x4E6, 0x4E7],
	[0x4E8, 0x4E9],
	[0x4EA, 0x4EB],
	[0x4EC, 0x4ED],
	[0x4EE, 0x4EF],
	[0x4F0, 0x4F1],
	[0x4F2, 0x4F3],
	[0x4F4, 0x4F5],
	[0x4F6, 0x4F7],
	[0x4F8, 0x4F9],
	[0x4FA, 0x4FB],
	[0x4FC, 0x4FD],
	[0x4FE, 0x4FF],
	[0x500, 0x501],
	[0x502, 0x503],
	[0x504, 0x505],
	[0x506, 0x507],
	[0x508, 0x509],
	[0x50A, 0x50B],
	[0x50C, 0x50D],
	[0x50E, 0x50F],
	[0x510, 0x511],
	[0x512, 0x513],
	[0x514, 0x515],
	[0x516, 0x517],
	[0x518, 0x519],
	[0x51A, 0x51B],
	[0x51C, 0x51D],
	[0x51E, 0x51F],
	[0x520, 0x521],
	[0x522, 0x523],
	[0x524, 0x525],
	[0x526, 0x527],
	[0x528, 0x529],
	[0x52A, 0x52B],
	[0x52C, 0x52D],
	[0x52E, 0x52F],
	[0x531, 0x561],
	[0x532, 0x562],
	[0x533, 0x563],
	[0x534, 0x564],
	[0x535, 0x565],
	[0x536, 0x566],
	[0x537, 0x567],
	[0x538, 0x568],
	[0x539, 0x569],
	[0x53A, 0x56A],
	[0x53B, 0x56B],
	[0x53C, 0x56C],
	[0x53D, 0x56D],
	[0x53E, 0x56E],
	[0x53F, 0x56F],
	[0x540, 0x570],
	[0x541, 0x571],
	[0x542, 0x572],
	[0x543, 0x573],
	[0x544, 0x574],
	[0x545, 0x575],
	[0x546, 0x576],
	[0x547, 0x577],
	[0x548, 0x578],
	[0x549, 0x579],
	[0x54A, 0x57A],
	[0x54B, 0x57B],
	[0x54C, 0x57C],
	[0x54D, 0x57D],
	[0x54E, 0x57E],
	[0x54F, 0x57F],
	[0x550, 0x580],
	[0x551, 0x581],
	[0x552, 0x582],
	[0x553, 0x583],
	[0x554, 0x584],
	[0x555, 0x585],
	[0x556, 0x586],
	[0x10A0, 0x2D00],
	[0x10A1, 0x2D01],
	[0x10A2, 0x2D02],
	[0x10A3, 0x2D03],
	[0x10A4, 0x2D04],
	[0x10A5, 0x2D05],
	[0x10A6, 0x2D06],
	[0x10A7, 0x2D07],
	[0x10A8, 0x2D08],
	[0x10A9, 0x2D09],
	[0x10AA, 0x2D0A],
	[0x10AB, 0x2D0B],
	[0x10AC, 0x2D0C],
	[0x10AD, 0x2D0D],
	[0x10AE, 0x2D0E],
	[0x10AF, 0x2D0F],
	[0x10B0, 0x2D10],
	[0x10B1, 0x2D11],
	[0x10B2, 0x2D12],
	[0x10B3, 0x2D13],
	[0x10B4, 0x2D14],
	[0x10B5, 0x2D15],
	[0x10B6, 0x2D16],
	[0x10B7, 0x2D17],
	[0x10B8, 0x2D18],
	[0x10B9, 0x2D19],
	[0x10BA, 0x2D1A],
	[0x10BB, 0x2D1B],
	[0x10BC, 0x2D1C],
	[0x10BD, 0x2D1D],
	[0x10BE, 0x2D1E],
	[0x10BF, 0x2D1F],
	[0x10C0, 0x2D20],
	[0x10C1, 0x2D21],
	[0x10C2, 0x2D22],
	[0x10C3, 0x2D23],
	[0x10C4, 0x2D24],
	[0x10C5, 0x2D25],
	[0x10C7, 0x2D27],
	[0x10CD, 0x2D2D],
	[0x13F8, 0x13F0],
	[0x13F9, 0x13F1],
	[0x13FA, 0x13F2],
	[0x13FB, 0x13F3],
	[0x13FC, 0x13F4],
	[0x13FD, 0x13F5],
	[0x1C80, 0x432],
	[0x1C81, 0x434],
	[0x1C82, 0x43E],
	[0x1C83, 0x441],
	[0x1C84, 0x442],
	[0x1C85, 0x442],
	[0x1C86, 0x44A],
	[0x1C87, 0x463],
	[0x1C88, 0xA64B],
	[0x1C89, 0x1C8A],
	[0x1C90, 0x10D0],
	[0x1C91, 0x10D1],
	[0x1C92, 0x10D2],
	[0x1C93, 0x10D3],
	[0x1C94, 0x10D4],
	[0x1C95, 0x10D5],
	[0x1C96, 0x10D6],
	[0x1C97, 0x10D7],
	[0x1C98, 0x10D8],
	[0x1C99, 0x10D9],
	[0x1C9A, 0x10DA],
	[0x1C9B, 0x10DB],
	[0x1C9C, 0x10DC],
	[0x1C9D, 0x10DD],
	[0x1C9E, 0x10DE],
	[0x1C9F, 0x10DF],
	[0x1CA0, 0x10E0],
	[0x1CA1, 0x10E1],
	[0x1CA2, 0x10E2],
	[0x1CA3, 0x10E3],
	[0x1CA4, 0x10E4],
	[0x1CA5, 0x10E5],
	[0x1CA6, 0x10E6],
	[0x1CA7, 0x10E7],
	[0x1CA8, 0x10E8],
	[0x1CA9, 0x10E9],
	[0x1CAA, 0x10EA],
	[0x1CAB, 0x10EB],
	[0x1CAC, 0x10EC],
	[0x1CAD, 0x10ED],
	[0x1CAE, 0x10EE],
	[0x1CAF, 0x10EF],
	[0x1CB0, 0x10F0],
	[0x1CB1, 0x10F1],
	[0x1CB2, 0x10F2],
	[0x1CB3, 0x10F3],
	[0x1CB4, 0x10F4],
	[0x1CB5, 0x10F5],
	[0x1CB6, 0x10F6],
	[0x1CB7, 0x10F7],
	[0x1CB8, 0x10F8],
	[0x1CB9, 0x10F9],
	[0x1CBA, 0x10FA],
	[0x1CBD, 0x10FD],
	[0x1CBE, 0x10FE],
	[0x1CBF, 0x10FF],
	[0x1E00, 0x1E01],
	[0x1E02, 0x1E03],
	[0x1E04, 0x1E05],
	[0x1E06, 0x1E07],
	[0x1E08, 0x1E09],
	[0x1E0A, 0x1E0B],
	[0x1E0C, 0x1E0D],
	[0x1E0E, 0x1E0F],
	[0x1E10, 0x1E11],
	[0x1E12, 0x1E13],
	[0x1E14, 0x1E15],
	[0x1E16, 0x1E17],
	[0x1E18, 0x1E19],
	[0x1E1A, 0x1E1B],
	[0x1E1C, 0x1E1D],
	[0x1E1E, 0x1E1F],
	[0x1E20, 0x1E21],
	[0x1E22, 0x1E23],
	[0x1E24, 0x1E25],
	[0x1E26, 0x1E27],
	[0x1E28, 0x1E29],
	[0x1E2A, 0x1E2B],
	[0x1E2C, 0x1E2D],
	[0x1E2E, 0x1E2F],
	[0x1E30, 0x1E31],
	[0x1E32, 0x1E33],
	[0x1E34, 0x1E35],
	[0x1E36, 0x1E37],
	[0x1E38, 0x1E39],
	[0x1E3A, 0x1E3B],
	[0x1E3C, 0x1E3D],
	[0x1E3E, 0x1E3F],
	[0x1E40, 0x1E41],
	[0x1E42, 0x1E43],
	[0x1E44, 0x1E45],
	[0x1E46, 0x1E47],
	[0x1E48, 0x1E49],
	[0x1E4A, 0x1E4B],
	[0x1E4C, 0x1E4D],
	[0x1E4E, 0x1E4F],
	[0x1E50, 0x1E51],
	[0x1E52, 0x1E53],
	[0x1E54, 0x1E55],
	[0x1E56, 0x1E57],
	[0x1E58, 0x1E59],
	[0x1E5A, 0x1E5B],
	[0x1E5C, 0x1E5D],
	[0x1E5E, 0x1E5F],
	[0x1E60, 0x1E61],
	[0x1E62, 0x1E63],
	[0x1E64, 0x1E65],
	[0x1E66, 0x1E67],
	[0x1E68, 0x1E69],
	[0x1E6A, 0x1E6B],
	[0x1E6C, 0x1E6D],
	[0x1E6E, 0x1E6F],
	[0x1E70, 0x1E71],
	[0x1E72, 0x1E73],
	[0x1E74, 0x1E75],
	[0x1E76, 0x1E77],
	[0x1E78, 0x1E79],
	[0x1E7A, 0x1E7B],
	[0x1E7C, 0x1E7D],
	[0x1E7E, 0x1E7F],
	[0x1E80, 0x1E81],
	[0x1E82, 0x1E83],
	[0x1E84, 0x1E85],
	[0x1E86, 0x1E87],
	[0x1E88, 0x1E89],
	[0x1E8A, 0x1E8B],
	[0x1E8C, 0x1E8D],
	[0x1E8E, 0x1E8F],
	[0x1E90, 0x1E91],
	[0x1E92, 0x1E93],
	[0x1E94, 0x1E95],
	[0x1E9B, 0x1E61],
	[0x1E9E, 0xDF],
	[0x1EA0, 0x1EA1],
	[0x1EA2, 0x1EA3],
	[0x1EA4, 0x1EA5],
	[0x1EA6, 0x1EA7],
	[0x1EA8, 0x1EA9],
	[0x1EAA, 0x1EAB],
	[0x1EAC, 0x1EAD],
	[0x1EAE, 0x1EAF],
	[0x1EB0, 0x1EB1],
	[0x1EB2, 0x1EB3],
	[0x1EB4, 0x1EB5],
	[0x1EB6, 0x1EB7],
	[0x1EB8, 0x1EB9],
	[0x1EBA, 0x1EBB],
	[0x1EBC, 0x1EBD],
	[0x1EBE, 0x1EBF],
	[0x1EC0, 0x1EC1],
	[0x1EC2, 0x1EC3],
	[0x1EC4, 0x1EC5],
	[0x1EC6, 0x1EC7],
	[0x1EC8, 0x1EC9],
	[0x1ECA, 0x1ECB],
	[0x1ECC, 0x1ECD],
	[0x1ECE, 0x1ECF],
	[0x1ED0, 0x1ED1],
	[0x1ED2, 0x1ED3],
	[0x1ED4, 0x1ED5],
	[0x1ED6, 0x1ED7],
	[0x1ED8, 0x1ED9],
	[0x1EDA, 0x1EDB],
	[0x1EDC, 0x1EDD],
	[0x1EDE, 0x1EDF],
	[0x1EE0, 0x1EE1],
	[0x1EE2, 0x1EE3],
	[0x1EE4, 0x1EE5],
	[0x1EE6, 0x1EE7],
	[0x1EE8, 0x1EE9],
	[0x1EEA, 0x1EEB],
	[0x1EEC, 0x1EED],
	[0x1EEE, 0x1EEF],
	[0x1EF0, 0x1EF1],
	[0x1EF2, 0x1EF3],
	[0x1EF4, 0x1EF5],
	[0x1EF6, 0x1EF7],
	[0x1EF8, 0x1EF9],
	[0x1EFA, 0x1EFB],
	[0x1EFC, 0x1EFD],
	[0x1EFE, 0x1EFF],
	[0x1F08, 0x1F00],
	[0x1F09, 0x1F01],
	[0x1F0A, 0x1F02],
	[0x1F0B, 0x1F03],
	[0x1F0C, 0x1F04],
	[0x1F0D, 0x1F05],
	[0x1F0E, 0x1F06],
	[0x1F0F, 0x1F07],
	[0x1F18, 0x1F10],
	[0x1F19, 0x1F11],
	[0x1F1A, 0x1F12],
	[0x1F1B, 0x1F13],
	[0x1F1C, 0x1F14],
	[0x1F1D, 0x1F15],
	[0x1F28, 0x1F20],
	[0x1F29, 0x1F21],
	[0x1F2A, 0x1F22],
	[0x1F2B, 0x1F23],
	[0x1F2C, 0x1F24],
	[0x1F2D, 0x1F25],
	[0x1F2E, 0x1F26],
	[0x1F2F, 0x1F27],
	[0x1F38, 0x1F30],
	[0x1F39, 0x1F31],
	[0x1F3A, 0x1F32],
	[0x1F3B, 0x1F33],
	[0x1F3C, 0x1F34],
	[0x1F3D, 0x1F35],
	[0x1F3E, 0x1F36],
	[0x1F3F, 0x1F37],
	[0x1F48, 0x1F40],
	[0x1F49, 0x1F41],
	[0x1F4A, 0x1F42],
	[0x1F4B, 0x1F43],
	[0x1F4C, 0x1F44],
	[0x1F4D, 0x1F45],
	[0x1F59, 0x1F51],
	[0x1F5B, 0x1F53],
	[0x1F5D, 0x1F55],
	[0x1F5F, 0x1F57],
	[0x1F68, 0x1F60],
	[0x1F69, 0x1F61],
	[0x1F6A, 0x1F62],
	[0x1F6B, 0x1F63],
	[0x1F6C, 0x1F64],
	[0x1F6D, 0x1F65],
	[0x1F6E, 0x1F66],
	[0x1F6F, 0x1F67],
	[0x1F88, 0x1F80],
	[0x1F89, 0x1F81],
	[0x1F8A, 0x1F82],
	[0x1F8B, 0x1F83],
	[0x1F8C, 0x1F84],
	[0x1F8D, 0x1F85],
	[0x1F8E, 0x1F86],
	[0x1F8F, 0x1F87],
	[0x1F98, 0x1F90],
	[0x1F99, 0x1F91],
	[0x1F9A, 0x1F92],
	[0x1F9B, 0x1F93],
	[0x1F9C, 0x1F94],
	[0x1F9D, 0x1F95],
	[0x1F9E, 0x1F96],
	[0x1F9F, 0x1F97],
	[0x1FA8, 0x1FA0],
	[0x1FA9, 0x1FA1],
	[0x1FAA, 0x1FA2],
	[0x1FAB, 0x1FA3],
	[0x1FAC, 0x1FA4],
	[0x1FAD, 0x1FA5],
	[0x1FAE, 0x1FA6],
	[0x1FAF, 0x1FA7],
	[0x1FB8, 0x1FB0],
	[0x1FB9, 0x1FB1],
	[0x1FBA, 0x1F70],
	[0x1FBB, 0x1F71],
	[0x1FBC, 0x1FB3],
	[0x1FBE, 0x3B9],
	[0x1FC8, 0x1F72],
	[0x1FC9, 0x1F73],
	[0x1FCA, 0x1F74],
	[0x1FCB, 0x1F75],
	[0x1FCC, 0x1FC3],
	[0x1FD3, 0x390],
	[0x1FD8, 0x1FD0],
	[0x1FD9, 0x1FD1],
	[0x1FDA, 0x1F76],
	[0x1FDB, 0x1F77],
	[0x1FE3, 0x3B0],
	[0x1FE8, 0x1FE0],
	[0x1FE9, 0x1FE1],
	[0x1FEA, 0x1F7A],
	[0x1FEB, 0x1F7B],
	[0x1FEC, 0x1FE5],
	[0x1FF8, 0x1F78],
	[0x1FF9, 0x1F79],
	[0x1FFA, 0x1F7C],
	[0x1FFB, 0x1F7D],
	[0x1FFC, 0x1FF3],
	[0x2126, 0x3C9],
	[0x212A, 0x6B],
	[0x212B, 0xE5],
	[0x2132, 0x214E],
	[0x2160, 0x2170],
	[0x2161, 0x2171],
	[0x2162, 0x2172],
	[0x2163, 0x2173],
	[0x2164, 0x2174],
	[0x2165, 0x2175],
	[0x2166, 0x2176],
	[0x2167, 0x2177],
	[0x2168, 0x2178],
	[0x2169, 0x2179],
	[0x216A, 0x217A],
	[0x216B, 0x217B],
	[0x216C, 0x217C],
	[0x216D, 0x217D],
	[0x216E, 0x217E],
	[0x216F, 0x217F],
	[0x2183, 0x2184],
	[0x24B6, 0x24D0],
	[0x24B7, 0x24D1],
	[0x24B8, 0x24D2],
	[0x24B9, 0x24D3],
	[0x24BA, 0x24D4],
	[0x24BB, 0x24D5],
	[0x24BC, 0x24D6],
	[0x24BD, 0x24D7],
	[0x24BE, 0x24D8],
	[0x24BF, 0x24D9],
	[0x24C0, 0x24DA],
	[0x24C1, 0x24DB],
	[0x24C2, 0x24DC],
	[0x24C3, 0x24DD],
	[0x24C4, 0x24DE],
	[0x24C5, 0x24DF],
	[0x24C6, 0x24E0],
	[0x24C7, 0x24E1],
	[0x24C8, 0x24E2],
	[0x24C9, 0x24E3],
	[0x24CA, 0x24E4],
	[0x24CB, 0x24E5],
	[0x24CC, 0x24E6],
	[0x24CD, 0x24E7],
	[0x24CE, 0x24E8],
	[0x24CF, 0x24E9],
	[0x2C00, 0x2C30],
	[0x2C01, 0x2C31],
	[0x2C02, 0x2C32],
	[0x2C03, 0x2C33],
	[0x2C04, 0x2C34],
	[0x2C05, 0x2C35],
	[0x2C06, 0x2C36],
	[0x2C07, 0x2C37],
	[0x2C08, 0x2C38],
	[0x2C09, 0x2C39],
	[0x2C0A, 0x2C3A],
	[0x2C0B, 0x2C3B],
	[0x2C0C, 0x2C3C],
	[0x2C0D, 0x2C3D],
	[0x2C0E, 0x2C3E],
	[0x2C0F, 0x2C3F],
	[0x2C10, 0x2C40],
	[0x2C11, 0x2C41],
	[0x2C12, 0x2C42],
	[0x2C13, 0x2C43],
	[0x2C14, 0x2C44],
	[0x2C15, 0x2C45],
	[0x2C16, 0x2C46],
	[0x2C17, 0x2C47],
	[0x2C18, 0x2C48],
	[0x2C19, 0x2C49],
	[0x2C1A, 0x2C4A],
	[0x2C1B, 0x2C4B],
	[0x2C1C, 0x2C4C],
	[0x2C1D, 0x2C4D],
	[0x2C1E, 0x2C4E],
	[0x2C1F, 0x2C4F],
	[0x2C20, 0x2C50],
	[0x2C21, 0x2C51],
	[0x2C22, 0x2C52],
	[0x2C23, 0x2C53],
	[0x2C24, 0x2C54],
	[0x2C25, 0x2C55],
	[0x2C26, 0x2C56],
	[0x2C27, 0x2C57],
	[0x2C28, 0x2C58],
	[0x2C29, 0x2C59],
	[0x2C2A, 0x2C5A],
	[0x2C2B, 0x2C5B],
	[0x2C2C, 0x2C5C],
	[0x2C2D, 0x2C5D],
	[0x2C2E, 0x2C5E],
	[0x2C2F, 0x2C5F],
	[0x2C60, 0x2C61],
	[0x2C62, 0x26B],
	[0x2C63, 0x1D7D],
	[0x2C64, 0x27D],
	[0x2C67, 0x2C68],
	[0x2C69, 0x2C6A],
	[0x2C6B, 0x2C6C],
	[0x2C6D, 0x251],
	[0x2C6E, 0x271],
	[0x2C6F, 0x250],
	[0x2C70, 0x252],
	[0x2C72, 0x2C73],
	[0x2C75, 0x2C76],
	[0x2C7E, 0x23F],
	[0x2C7F, 0x240],
	[0x2C80, 0x2C81],
	[0x2C82, 0x2C83],
	[0x2C84, 0x2C85],
	[0x2C86, 0x2C87],
	[0x2C88, 0x2C89],
	[0x2C8A, 0x2C8B],
	[0x2C8C, 0x2C8D],
	[0x2C8E, 0x2C8F],
	[0x2C90, 0x2C91],
	[0x2C92, 0x2C93],
	[0x2C94, 0x2C95],
	[0x2C96, 0x2C97],
	[0x2C98, 0x2C99],
	[0x2C9A, 0x2C9B],
	[0x2C9C, 0x2C9D],
	[0x2C9E, 0x2C9F],
	[0x2CA0, 0x2CA1],
	[0x2CA2, 0x2CA3],
	[0x2CA4, 0x2CA5],
	[0x2CA6, 0x2CA7],
	[0x2CA8, 0x2CA9],
	[0x2CAA, 0x2CAB],
	[0x2CAC, 0x2CAD],
	[0x2CAE, 0x2CAF],
	[0x2CB0, 0x2CB1],
	[0x2CB2, 0x2CB3],
	[0x2CB4, 0x2CB5],
	[0x2CB6, 0x2CB7],
	[0x2CB8, 0x2CB9],
	[0x2CBA, 0x2CBB],
	[0x2CBC, 0x2CBD],
	[0x2CBE, 0x2CBF],
	[0x2CC0, 0x2CC1],
	[0x2CC2, 0x2CC3],
	[0x2CC4, 0x2CC5],
	[0x2CC6, 0x2CC7],
	[0x2CC8, 0x2CC9],
	[0x2CCA, 0x2CCB],
	[0x2CCC, 0x2CCD],
	[0x2CCE, 0x2CCF],
	[0x2CD0, 0x2CD1],
	[0x2CD2, 0x2CD3],
	[0x2CD4, 0x2CD5],
	[0x2CD6, 0x2CD7],
	[0x2CD8, 0x2CD9],
	[0x2CDA, 0x2CDB],
	[0x2CDC, 0x2CDD],
	[0x2CDE, 0x2CDF],
	[0x2CE0, 0x2CE1],
	[0x2CE2, 0x2CE3],
	[0x2CEB, 0x2CEC],
	[0x2CED, 0x2CEE],
	[0x2CF2, 0x2CF3],
	[0xA640, 0xA641],
	[0xA642, 0xA643],
	[0xA644, 0xA645],
	[0xA646, 0xA647],
	[0xA648, 0xA649],
	[0xA64A, 0xA64B],
	[0xA64C, 0xA64D],
	[0xA64E, 0xA64F],
	[0xA650, 0xA651],
	[0xA652, 0xA653],
	[0xA654, 0xA655],
	[0xA656, 0xA657],
	[0xA658, 0xA659],
	[0xA65A, 0xA65B],
	[0xA65C, 0xA65D],
	[0xA65E, 0xA65F],
	[0xA660, 0xA661],
	[0xA662, 0xA663],
	[0xA664, 0xA665],
	[0xA666, 0xA667],
	[0xA668, 0xA669],
	[0xA66A, 0xA66B],
	[0xA66C, 0xA66D],
	[0xA680, 0xA681],
	[0xA682, 0xA683],
	[0xA684, 0xA685],
	[0xA686, 0xA687],
	[0xA688, 0xA689],
	[0xA68A, 0xA68B],
	[0xA68C, 0xA68D],
	[0xA68E, 0xA68F],
	[0xA690, 0xA691],
	[0xA692, 0xA693],
	[0xA694, 0xA695],
	[0xA696, 0xA697],
	[0xA698, 0xA699],
	[0xA69A, 0xA69B],
	[0xA722, 0xA723],
	[0xA724, 0xA725],
	[0xA726, 0xA727],
	[0xA728, 0xA729],
	[0xA72A, 0xA72B],
	[0xA72C, 0xA72D],
	[0xA72E, 0xA72F],
	[0xA732, 0xA733],
	[0xA734, 0xA735],
	[0xA736, 0xA737],
	[0xA738, 0xA739],
	[0xA73A, 0xA73B],
	[0xA73C, 0xA73D],
	[0xA73E, 0xA73F],
	[0xA740, 0xA741],
	[0xA742, 0xA743],
	[0xA744, 0xA745],
	[0xA746, 0xA747],
	[0xA748, 0xA749],
	[0xA74A, 0xA74B],
	[0xA74C, 0xA74D],
	[0xA74E, 0xA74F],
	[0xA750, 0xA751],
	[0xA752, 0xA753],
	[0xA754, 0xA755],
	[0xA756, 0xA757],
	[0xA758, 0xA759],
	[0xA75A, 0xA75B],
	[0xA75C, 0xA75D],
	[0xA75E, 0xA75F],
	[0xA760, 0xA761],
	[0xA762, 0xA763],
	[0xA764, 0xA765],
	[0xA766, 0xA767],
	[0xA768, 0xA769],
	[0xA76A, 0xA76B],
	[0xA76C, 0xA76D],
	[0xA76E, 0xA76F],
	[0xA779, 0xA77A],
	[0xA77B, 0xA77C],
	[0xA77D, 0x1D79],
	[0xA77E, 0xA77F],
	[0xA780, 0xA781],
	[0xA782, 0xA783],
	[0xA784, 0xA785],
	[0xA786, 0xA787],
	[0xA78B, 0xA78C],
	[0xA78D, 0x265],
	[0xA790, 0xA791],
	[0xA792, 0xA793],
	[0xA796, 0xA797],
	[0xA798, 0xA799],
	[0xA79A, 0xA79B],
	[0xA79C, 0xA79D],
	[0xA79E, 0xA79F],
	[0xA7A0, 0xA7A1],
	[0xA7A2, 0xA7A3],
	[0xA7A4, 0xA7A5],
	[0xA7A6, 0xA7A7],
	[0xA7A8, 0xA7A9],
	[0xA7AA, 0x266],
	[0xA7AB, 0x25C],
	[0xA7AC, 0x261],
	[0xA7AD, 0x26C],
	[0xA7AE, 0x26A],
	[0xA7B0, 0x29E],
	[0xA7B1, 0x287],
	[0xA7B2, 0x29D],
	[0xA7B3, 0xAB53],
	[0xA7B4, 0xA7B5],
	[0xA7B6, 0xA7B7],
	[0xA7B8, 0xA7B9],
	[0xA7BA, 0xA7BB],
	[0xA7BC, 0xA7BD],
	[0xA7BE, 0xA7BF],
	[0xA7C0, 0xA7C1],
	[0xA7C2, 0xA7C3],
	[0xA7C4, 0xA794],
	[0xA7C5, 0x282],
	[0xA7C6, 0x1D8E],
	[0xA7C7, 0xA7C8],
	[0xA7C9, 0xA7CA],
	[0xA7CB, 0x264],
	[0xA7CC, 0xA7CD],
	[0xA7D0, 0xA7D1],
	[0xA7D6, 0xA7D7],
	[0xA7D8, 0xA7D9],
	[0xA7DA, 0xA7DB],
	[0xA7DC, 0x19B],
	[0xA7F5, 0xA7F6],
	[0xAB70, 0x13A0],
	[0xAB71, 0x13A1],
	[0xAB72, 0x13A2],
	[0xAB73, 0x13A3],
	[0xAB74, 0x13A4],
	[0xAB75, 0x13A5],
	[0xAB76, 0x13A6],
	[0xAB77, 0x13A7],
	[0xAB78, 0x13A8],
	[0xAB79, 0x13A9],
	[0xAB7A, 0x13AA],
	[0xAB7B, 0x13AB],
	[0xAB7C, 0x13AC],
	[0xAB7D, 0x13AD],
	[0xAB7E, 0x13AE],
	[0xAB7F, 0x13AF],
	[0xAB80, 0x13B0],
	[0xAB81, 0x13B1],
	[0xAB82, 0x13B2],
	[0xAB83, 0x13B3],
	[0xAB84, 0x13B4],
	[0xAB85, 0x13B5],
	[0xAB86, 0x13B6],
	[0xAB87, 0x13B7],
	[0xAB88, 0x13B8],
	[0xAB89, 0x13B9],
	[0xAB8A, 0x13BA],
	[0xAB8B, 0x13BB],
	[0xAB8C, 0x13BC],
	[0xAB8D, 0x13BD],
	[0xAB8E, 0x13BE],
	[0xAB8F, 0x13BF],
	[0xAB90, 0x13C0],
	[0xAB91, 0x13C1],
	[0xAB92, 0x13C2],
	[0xAB93, 0x13C3],
	[0xAB94, 0x13C4],
	[0xAB95, 0x13C5],
	[0xAB96, 0x13C6],
	[0xAB97, 0x13C7],
	[0xAB98, 0x13C8],
	[0xAB99, 0x13C9],
	[0xAB9A, 0x13CA],
	[0xAB9B, 0x13CB],
	[0xAB9C, 0x13CC],
	[0xAB9D, 0x13CD],
	[0xAB9E, 0x13CE],
	[0xAB9F, 0x13CF],
	[0xABA0, 0x13D0],
	[0xABA1, 0x13D1],
	[0xABA2, 0x13D2],
	[0xABA3, 0x13D3],
	[0xABA4, 0x13D4],
	[0xABA5, 0x13D5],
	[0xABA6, 0x13D6],
	[0xABA7, 0x13D7],
	[0xABA8, 0x13D8],
	[0xABA9, 0x13D9],
	[0xABAA, 0x13DA],
	[0xABAB, 0x13DB],
	[0xABAC, 0x13DC],
	[0xABAD, 0x13DD],
	[0xABAE, 0x13DE],
	[0xABAF, 0x13DF],
	[0xABB0, 0x13E0],
	[0xABB1, 0x13E1],
	[0xABB2, 0x13E2],
	[0xABB3, 0x13E3],
	[0xABB4, 0x13E4],
	[0xABB5, 0x13E5],
	[0xABB6, 0x13E6],
	[0xABB7, 0x13E7],
	[0xABB8, 0x13E8],
	[0xABB9, 0x13E9],
	[0xABBA, 0x13EA],
	[0xABBB, 0x13EB],
	[0xABBC, 0x13EC],
	[0xABBD, 0x13ED],
	[0xABBE, 0x13EE],
	[0xABBF, 0x13EF],
	[0xFB05, 0xFB06],
	[0xFF21, 0xFF41],
	[0xFF22, 0xFF42],
	[0xFF23, 0xFF43],
	[0xFF24, 0xFF44],
	[0xFF25, 0xFF45],
	[0xFF26, 0xFF46],
	[0xFF27, 0xFF47],
	[0xFF28, 0xFF48],
	[0xFF29, 0xFF49],
	[0xFF2A, 0xFF4A],
	[0xFF2B, 0xFF4B],
	[0xFF2C, 0xFF4C],
	[0xFF2D, 0xFF4D],
	[0xFF2E, 0xFF4E],
	[0xFF2F, 0xFF4F],
	[0xFF30, 0xFF50],
	[0xFF31, 0xFF51],
	[0xFF32, 0xFF52],
	[0xFF33, 0xFF53],
	[0xFF34, 0xFF54],
	[0xFF35, 0xFF55],
	[0xFF36, 0xFF56],
	[0xFF37, 0xFF57],
	[0xFF38, 0xFF58],
	[0xFF39, 0xFF59],
	[0xFF3A, 0xFF5A],
	[0x10400, 0x10428],
	[0x10401, 0x10429],
	[0x10402, 0x1042A],
	[0x10403, 0x1042B],
	[0x10404, 0x1042C],
	[0x10405, 0x1042D],
	[0x10406, 0x1042E],
	[0x10407, 0x1042F],
	[0x10408, 0x10430],
	[0x10409, 0x10431],
	[0x1040A, 0x10432],
	[0x1040B, 0x10433],
	[0x1040C, 0x10434],
	[0x1040D, 0x10435],
	[0x1040E, 0x10436],
	[0x1040F, 0x10437],
	[0x10410, 0x10438],
	[0x10411, 0x10439],
	[0x10412, 0x1043A],
	[0x10413, 0x1043B],
	[0x10414, 0x1043C],
	[0x10415, 0x1043D],
	[0x10416, 0x1043E],
	[0x10417, 0x1043F],
	[0x10418, 0x10440],
	[0x10419, 0x10441],
	[0x1041A, 0x10442],
	[0x1041B, 0x10443],
	[0x1041C, 0x10444],
	[0x1041D, 0x10445],
	[0x1041E, 0x10446],
	[0x1041F, 0x10447],
	[0x10420, 0x10448],
	[0x10421, 0x10449],
	[0x10422, 0x1044A],
	[0x10423, 0x1044B],
	[0x10424, 0x1044C],
	[0x10425, 0x1044D],
	[0x10426, 0x1044E],
	[0x10427, 0x1044F],
	[0x104B0, 0x104D8],
	[0x104B1, 0x104D9],
	[0x104B2, 0x104DA],
	[0x104B3, 0x104DB],
	[0x104B4, 0x104DC],
	[0x104B5, 0x104DD],
	[0x104B6, 0x104DE],
	[0x104B7, 0x104DF],
	[0x104B8, 0x104E0],
	[0x104B9, 0x104E1],
	[0x104BA, 0x104E2],
	[0x104BB, 0x104E3],
	[0x104BC, 0x104E4],
	[0x104BD, 0x104E5],
	[0x104BE, 0x104E6],
	[0x104BF, 0x104E7],
	[0x104C0, 0x104E8],
	[0x104C1, 0x104E9],
	[0x104C2, 0x104EA],
	[0x104C3, 0x104EB],
	[0x104C4, 0x104EC],
	[0x104C5, 0x104ED],
	[0x104C6, 0x104EE],
	[0x104C7, 0x104EF],
	[0x104C8, 0x104F0],
	[0x104C9, 0x104F1],
	[0x104CA, 0x104F2],
	[0x104CB, 0x104F3],
	[0x104CC, 0x104F4],
	[0x104CD, 0x104F5],
	[0x104CE, 0x104F6],
	[0x104CF, 0x104F7],
	[0x104D0, 0x104F8],
	[0x104D1, 0x104F9],
	[0x104D2, 0x104FA],
	[0x104D3, 0x104FB],
	[0x10570, 0x10597],
	[0x10571, 0x10598],
	[0x10572, 0x10599],
	[0x10573, 0x1059A],
	[0x10574, 0x1059B],
	[0x10575, 0x1059C],
	[0x10576, 0x1059D],
	[0x10577, 0x1059E],
	[0x10578, 0x1059F],
	[0x10579, 0x105A0],
	[0x1057A, 0x105A1],
	[0x1057C, 0x105A3],
	[0x1057D, 0x105A4],
	[0x1057E, 0x105A5],
	[0x1057F, 0x105A6],
	[0x10580, 0x105A7],
	[0x10581, 0x105A8],
	[0x10582, 0x105A9],
	[0x10583, 0x105AA],
	[0x10584, 0x105AB],
	[0x10585, 0x105AC],
	[0x10586, 0x105AD],
	[0x10587, 0x105AE],
	[0x10588, 0x105AF],
	[0x10589, 0x105B0],
	[0x1058A, 0x105B1],
	[0x1058C, 0x105B3],
	[0x1058D, 0x105B4],
	[0x1058E, 0x105B5],
	[0x1058F, 0x105B6],
	[0x10590, 0x105B7],
	[0x10591, 0x105B8],
	[0x10592, 0x105B9],
	[0x10594, 0x105BB],
	[0x10595, 0x105BC],
	[0x10C80, 0x10CC0],
	[0x10C81, 0x10CC1],
	[0x10C82, 0x10CC2],
	[0x10C83, 0x10CC3],
	[0x10C84, 0x10CC4],
	[0x10C85, 0x10CC5],
	[0x10C86, 0x10CC6],
	[0x10C87, 0x10CC7],
	[0x10C88, 0x10CC8],
	[0x10C89, 0x10CC9],
	[0x10C8A, 0x10CCA],
	[0x10C8B, 0x10CCB],
	[0x10C8C, 0x10CCC],
	[0x10C8D, 0x10CCD],
	[0x10C8E, 0x10CCE],
	[0x10C8F, 0x10CCF],
	[0x10C90, 0x10CD0],
	[0x10C91, 0x10CD1],
	[0x10C92, 0x10CD2],
	[0x10C93, 0x10CD3],
	[0x10C94, 0x10CD4],
	[0x10C95, 0x10CD5],
	[0x10C96, 0x10CD6],
	[0x10C97, 0x10CD7],
	[0x10C98, 0x10CD8],
	[0x10C99, 0x10CD9],
	[0x10C9A, 0x10CDA],
	[0x10C9B, 0x10CDB],
	[0x10C9C, 0x10CDC],
	[0x10C9D, 0x10CDD],
	[0x10C9E, 0x10CDE],
	[0x10C9F, 0x10CDF],
	[0x10CA0, 0x10CE0],
	[0x10CA1, 0x10CE1],
	[0x10CA2, 0x10CE2],
	[0x10CA3, 0x10CE3],
	[0x10CA4, 0x10CE4],
	[0x10CA5, 0x10CE5],
	[0x10CA6, 0x10CE6],
	[0x10CA7, 0x10CE7],
	[0x10CA8, 0x10CE8],
	[0x10CA9, 0x10CE9],
	[0x10CAA, 0x10CEA],
	[0x10CAB, 0x10CEB],
	[0x10CAC, 0x10CEC],
	[0x10CAD, 0x10CED],
	[0x10CAE, 0x10CEE],
	[0x10CAF, 0x10CEF],
	[0x10CB0, 0x10CF0],
	[0x10CB1, 0x10CF1],
	[0x10CB2, 0x10CF2],
	[0x10D50, 0x10D70],
	[0x10D51, 0x10D71],
	[0x10D52, 0x10D72],
	[0x10D53, 0x10D73],
	[0x10D54, 0x10D74],
	[0x10D55, 0x10D75],
	[0x10D56, 0x10D76],
	[0x10D57, 0x10D77],
	[0x10D58, 0x10D78],
	[0x10D59, 0x10D79],
	[0x10D5A, 0x10D7A],
	[0x10D5B, 0x10D7B],
	[0x10D5C, 0x10D7C],
	[0x10D5D, 0x10D7D],
	[0x10D5E, 0x10D7E],
	[0x10D5F, 0x10D7F],
	[0x10D60, 0x10D80],
	[0x10D61, 0x10D81],
	[0x10D62, 0x10D82],
	[0x10D63, 0x10D83],
	[0x10D64, 0x10D84],
	[0x10D65, 0x10D85],
	[0x118A0, 0x118C0],
	[0x118A1, 0x118C1],
	[0x118A2, 0x118C2],
	[0x118A3, 0x118C3],
	[0x118A4, 0x118C4],
	[0x118A5, 0x118C5],
	[0x118A6, 0x118C6],
	[0x118A7, 0x118C7],
	[0x118A8, 0x118C8],
	[0x118A9, 0x118C9],
	[0x118AA, 0x118CA],
	[0x118AB, 0x118CB],
	[0x118AC, 0x118CC],
	[0x118AD, 0x118CD],
	[0x118AE, 0x118CE],
	[0x118AF, 0x118CF],
	[0x118B0, 0x118D0],
	[0x118B1, 0x118D1],
	[0x118B2, 0x118D2],
	[0x118B3, 0x118D3],
	[0x118B4, 0x118D4],
	[0x118B5, 0x118D5],
	[0x118B6, 0x118D6],
	[0x118B7, 0x118D7],
	[0x118B8, 0x118D8],
	[0x118B9, 0x118D9],
	[0x118BA, 0x118DA],
	[0x118BB, 0x118DB],
	[0x118BC, 0x118DC],
	[0x118BD, 0x118DD],
	[0x118BE, 0x118DE],
	[0x118BF, 0x118DF],
	[0x16E40, 0x16E60],
	[0x16E41, 0x16E61],
	[0x16E42, 0x16E62],
	[0x16E43, 0x16E63],
	[0x16E44, 0x16E64],
	[0x16E45, 0x16E65],
	[0x16E46, 0x16E66],
	[0x16E47, 0x16E67],
	[0x16E48, 0x16E68],
	[0x16E49, 0x16E69],
	[0x16E4A, 0x16E6A],
	[0x16E4B, 0x16E6B],
	[0x16E4C, 0x16E6C],
	[0x16E4D, 0x16E6D],
	[0x16E4E, 0x16E6E],
	[0x16E4F, 0x16E6F],
	[0x16E50, 0x16E70],
	[0x16E51, 0x16E71],
	[0x16E52, 0x16E72],
	[0x16E53, 0x16E73],
	[0x16E54, 0x16E74],
	[0x16E55, 0x16E75],
	[0x16E56, 0x16E76],
	[0x16E57, 0x16E77],
	[0x16E58, 0x16E78],
	[0x16E59, 0x16E79],
	[0x16E5A, 0x16E7A],
	[0x16E5B, 0x16E7B],
	[0x16E5C, 0x16E7C],
	[0x16E5D, 0x16E7D],
	[0x16E5E, 0x16E7E],
	[0x16E5F, 0x16E7F],
	[0x1E900, 0x1E922],
	[0x1E901, 0x1E923],
	[0x1E902, 0x1E924],
	[0x1E903, 0x1E925],
	[0x1E904, 0x1E926],
	[0x1E905, 0x1E927],
	[0x1E906, 0x1E928],
	[0x1E907, 0x1E929],
	[0x1E908, 0x1E92A],
	[0x1E909, 0x1E92B],
	[0x1E90A, 0x1E92C],
	[0x1E90B, 0x1E92D],
	[0x1E90C, 0x1E92E],
	[0x1E90D, 0x1E92F],
	[0x1E90E, 0x1E930],
	[0x1E90F, 0x1E931],
	[0x1E910, 0x1E932],
	[0x1E911, 0x1E933],
	[0x1E912, 0x1E934],
	[0x1E913, 0x1E935],
	[0x1E914, 0x1E936],
	[0x1E915, 0x1E937],
	[0x1E916, 0x1E938],
	[0x1E917, 0x1E939],
	[0x1E918, 0x1E93A],
	[0x1E919, 0x1E93B],
	[0x1E91A, 0x1E93C],
	[0x1E91B, 0x1E93D],
	[0x1E91C, 0x1E93E],
	[0x1E91D, 0x1E93F],
	[0x1E91E, 0x1E940],
	[0x1E91F, 0x1E941],
	[0x1E920, 0x1E942],
	[0x1E921, 0x1E943]
]);


---

File name: node_modules\regexpu-core\data\iu-mappings.js

Code:
module.exports = new Map([
	[0x4B, 0x212A],
	[0x53, 0x17F],
	[0x6B, 0x212A],
	[0x73, 0x17F],
	[0xB5, 0x39C],
	[0xC5, 0x212B],
	[0xDF, 0x1E9E],
	[0xE5, 0x212B],
	[0x17F, 0x53],
	[0x1C4, 0x1C5],
	[0x1C5, 0x1C4],
	[0x1C7, 0x1C8],
	[0x1C8, 0x1C7],
	[0x1CA, 0x1CB],
	[0x1CB, 0x1CA],
	[0x1F1, 0x1F2],
	[0x1F2, 0x1F1],
	[0x345, 0x1FBE],
	[0x390, 0x1FD3],
	[0x392, 0x3D0],
	[0x395, 0x3F5],
	[0x398, 0x3F4],
	[0x399, 0x1FBE],
	[0x39A, 0x3F0],
	[0x39C, 0xB5],
	[0x3A0, 0x3D6],
	[0x3A1, 0x3F1],
	[0x3A3, 0x3C2],
	[0x3A6, 0x3D5],
	[0x3A9, 0x2126],
	[0x3B0, 0x1FE3],
	[0x3B8, 0x3F4],
	[0x3C2, 0x3A3],
	[0x3C9, 0x2126],
	[0x3D0, 0x392],
	[0x3D1, 0x3F4],
	[0x3D5, 0x3A6],
	[0x3D6, 0x3A0],
	[0x3F0, 0x39A],
	[0x3F1, 0x3A1],
	[0x3F4, [
		0x398,
		0x3D1,
		0x3B8
	]],
	[0x3F5, 0x395],
	[0x412, 0x1C80],
	[0x414, 0x1C81],
	[0x41E, 0x1C82],
	[0x421, 0x1C83],
	[0x422, 0x1C85],
	[0x42A, 0x1C86],
	[0x462, 0x1C87],
	[0x1C80, 0x412],
	[0x1C81, 0x414],
	[0x1C82, 0x41E],
	[0x1C83, 0x421],
	[0x1C84, 0x1C85],
	[0x1C85, [
		0x422,
		0x1C84
	]],
	[0x1C86, 0x42A],
	[0x1C87, 0x462],
	[0x1C88, 0xA64A],
	[0x1E60, 0x1E9B],
	[0x1E9B, 0x1E60],
	[0x1E9E, 0xDF],
	[0x1F80, 0x1F88],
	[0x1F81, 0x1F89],
	[0x1F82, 0x1F8A],
	[0x1F83, 0x1F8B],
	[0x1F84, 0x1F8C],
	[0x1F85, 0x1F8D],
	[0x1F86, 0x1F8E],
	[0x1F87, 0x1F8F],
	[0x1F88, 0x1F80],
	[0x1F89, 0x1F81],
	[0x1F8A, 0x1F82],
	[0x1F8B, 0x1F83],
	[0x1F8C, 0x1F84],
	[0x1F8D, 0x1F85],
	[0x1F8E, 0x1F86],
	[0x1F8F, 0x1F87],
	[0x1F90, 0x1F98],
	[0x1F91, 0x1F99],
	[0x1F92, 0x1F9A],
	[0x1F93, 0x1F9B],
	[0x1F94, 0x1F9C],
	[0x1F95, 0x1F9D],
	[0x1F96, 0x1F9E],
	[0x1F97, 0x1F9F],
	[0x1F98, 0x1F90],
	[0x1F99, 0x1F91],
	[0x1F9A, 0x1F92],
	[0x1F9B, 0x1F93],
	[0x1F9C, 0x1F94],
	[0x1F9D, 0x1F95],
	[0x1F9E, 0x1F96],
	[0x1F9F, 0x1F97],
	[0x1FA0, 0x1FA8],
	[0x1FA1, 0x1FA9],
	[0x1FA2, 0x1FAA],
	[0x1FA3, 0x1FAB],
	[0x1FA4, 0x1FAC],
	[0x1FA5, 0x1FAD],
	[0x1FA6, 0x1FAE],
	[0x1FA7, 0x1FAF],
	[0x1FA8, 0x1FA0],
	[0x1FA9, 0x1FA1],
	[0x1FAA, 0x1FA2],
	[0x1FAB, 0x1FA3],
	[0x1FAC, 0x1FA4],
	[0x1FAD, 0x1FA5],
	[0x1FAE, 0x1FA6],
	[0x1FAF, 0x1FA7],
	[0x1FB3, 0x1FBC],
	[0x1FBC, 0x1FB3],
	[0x1FBE, [
		0x345,
		0x399
	]],
	[0x1FC3, 0x1FCC],
	[0x1FCC, 0x1FC3],
	[0x1FD3, 0x390],
	[0x1FE3, 0x3B0],
	[0x1FF3, 0x1FFC],
	[0x1FFC, 0x1FF3],
	[0x2126, [
		0x3A9,
		0x3C9
	]],
	[0x212A, 0x4B],
	[0x212B, [
		0xC5,
		0xE5
	]],
	[0xA64A, 0x1C88],
	[0xFB05, 0xFB06],
	[0xFB06, 0xFB05],
	[0x10400, 0x10428],
	[0x10401, 0x10429],
	[0x10402, 0x1042A],
	[0x10403, 0x1042B],
	[0x10404, 0x1042C],
	[0x10405, 0x1042D],
	[0x10406, 0x1042E],
	[0x10407, 0x1042F],
	[0x10408, 0x10430],
	[0x10409, 0x10431],
	[0x1040A, 0x10432],
	[0x1040B, 0x10433],
	[0x1040C, 0x10434],
	[0x1040D, 0x10435],
	[0x1040E, 0x10436],
	[0x1040F, 0x10437],
	[0x10410, 0x10438],
	[0x10411, 0x10439],
	[0x10412, 0x1043A],
	[0x10413, 0x1043B],
	[0x10414, 0x1043C],
	[0x10415, 0x1043D],
	[0x10416, 0x1043E],
	[0x10417, 0x1043F],
	[0x10418, 0x10440],
	[0x10419, 0x10441],
	[0x1041A, 0x10442],
	[0x1041B, 0x10443],
	[0x1041C, 0x10444],
	[0x1041D, 0x10445],
	[0x1041E, 0x10446],
	[0x1041F, 0x10447],
	[0x10420, 0x10448],
	[0x10421, 0x10449],
	[0x10422, 0x1044A],
	[0x10423, 0x1044B],
	[0x10424, 0x1044C],
	[0x10425, 0x1044D],
	[0x10426, 0x1044E],
	[0x10427, 0x1044F],
	[0x10428, 0x10400],
	[0x10429, 0x10401],
	[0x1042A, 0x10402],
	[0x1042B, 0x10403],
	[0x1042C, 0x10404],
	[0x1042D, 0x10405],
	[0x1042E, 0x10406],
	[0x1042F, 0x10407],
	[0x10430, 0x10408],
	[0x10431, 0x10409],
	[0x10432, 0x1040A],
	[0x10433, 0x1040B],
	[0x10434, 0x1040C],
	[0x10435, 0x1040D],
	[0x10436, 0x1040E],
	[0x10437, 0x1040F],
	[0x10438, 0x10410],
	[0x10439, 0x10411],
	[0x1043A, 0x10412],
	[0x1043B, 0x10413],
	[0x1043C, 0x10414],
	[0x1043D, 0x10415],
	[0x1043E, 0x10416],
	[0x1043F, 0x10417],
	[0x10440, 0x10418],
	[0x10441, 0x10419],
	[0x10442, 0x1041A],
	[0x10443, 0x1041B],
	[0x10444, 0x1041C],
	[0x10445, 0x1041D],
	[0x10446, 0x1041E],
	[0x10447, 0x1041F],
	[0x10448, 0x10420],
	[0x10449, 0x10421],
	[0x1044A, 0x10422],
	[0x1044B, 0x10423],
	[0x1044C, 0x10424],
	[0x1044D, 0x10425],
	[0x1044E, 0x10426],
	[0x1044F, 0x10427],
	[0x104B0, 0x104D8],
	[0x104B1, 0x104D9],
	[0x104B2, 0x104DA],
	[0x104B3, 0x104DB],
	[0x104B4, 0x104DC],
	[0x104B5, 0x104DD],
	[0x104B6, 0x104DE],
	[0x104B7, 0x104DF],
	[0x104B8, 0x104E0],
	[0x104B9, 0x104E1],
	[0x104BA, 0x104E2],
	[0x104BB, 0x104E3],
	[0x104BC, 0x104E4],
	[0x104BD, 0x104E5],
	[0x104BE, 0x104E6],
	[0x104BF, 0x104E7],
	[0x104C0, 0x104E8],
	[0x104C1, 0x104E9],
	[0x104C2, 0x104EA],
	[0x104C3, 0x104EB],
	[0x104C4, 0x104EC],
	[0x104C5, 0x104ED],
	[0x104C6, 0x104EE],
	[0x104C7, 0x104EF],
	[0x104C8, 0x104F0],
	[0x104C9, 0x104F1],
	[0x104CA, 0x104F2],
	[0x104CB, 0x104F3],
	[0x104CC, 0x104F4],
	[0x104CD, 0x104F5],
	[0x104CE, 0x104F6],
	[0x104CF, 0x104F7],
	[0x104D0, 0x104F8],
	[0x104D1, 0x104F9],
	[0x104D2, 0x104FA],
	[0x104D3, 0x104FB],
	[0x104D8, 0x104B0],
	[0x104D9, 0x104B1],
	[0x104DA, 0x104B2],
	[0x104DB, 0x104B3],
	[0x104DC, 0x104B4],
	[0x104DD, 0x104B5],
	[0x104DE, 0x104B6],
	[0x104DF, 0x104B7],
	[0x104E0, 0x104B8],
	[0x104E1, 0x104B9],
	[0x104E2, 0x104BA],
	[0x104E3, 0x104BB],
	[0x104E4, 0x104BC],
	[0x104E5, 0x104BD],
	[0x104E6, 0x104BE],
	[0x104E7, 0x104BF],
	[0x104E8, 0x104C0],
	[0x104E9, 0x104C1],
	[0x104EA, 0x104C2],
	[0x104EB, 0x104C3],
	[0x104EC, 0x104C4],
	[0x104ED, 0x104C5],
	[0x104EE, 0x104C6],
	[0x104EF, 0x104C7],
	[0x104F0, 0x104C8],
	[0x104F1, 0x104C9],
	[0x104F2, 0x104CA],
	[0x104F3, 0x104CB],
	[0x104F4, 0x104CC],
	[0x104F5, 0x104CD],
	[0x104F6, 0x104CE],
	[0x104F7, 0x104CF],
	[0x104F8, 0x104D0],
	[0x104F9, 0x104D1],
	[0x104FA, 0x104D2],
	[0x104FB, 0x104D3],
	[0x10570, 0x10597],
	[0x10571, 0x10598],
	[0x10572, 0x10599],
	[0x10573, 0x1059A],
	[0x10574, 0x1059B],
	[0x10575, 0x1059C],
	[0x10576, 0x1059D],
	[0x10577, 0x1059E],
	[0x10578, 0x1059F],
	[0x10579, 0x105A0],
	[0x1057A, 0x105A1],
	[0x1057C, 0x105A3],
	[0x1057D, 0x105A4],
	[0x1057E, 0x105A5],
	[0x1057F, 0x105A6],
	[0x10580, 0x105A7],
	[0x10581, 0x105A8],
	[0x10582, 0x105A9],
	[0x10583, 0x105AA],
	[0x10584, 0x105AB],
	[0x10585, 0x105AC],
	[0x10586, 0x105AD],
	[0x10587, 0x105AE],
	[0x10588, 0x105AF],
	[0x10589, 0x105B0],
	[0x1058A, 0x105B1],
	[0x1058C, 0x105B3],
	[0x1058D, 0x105B4],
	[0x1058E, 0x105B5],
	[0x1058F, 0x105B6],
	[0x10590, 0x105B7],
	[0x10591, 0x105B8],
	[0x10592, 0x105B9],
	[0x10594, 0x105BB],
	[0x10595, 0x105BC],
	[0x10597, 0x10570],
	[0x10598, 0x10571],
	[0x10599, 0x10572],
	[0x1059A, 0x10573],
	[0x1059B, 0x10574],
	[0x1059C, 0x10575],
	[0x1059D, 0x10576],
	[0x1059E, 0x10577],
	[0x1059F, 0x10578],
	[0x105A0, 0x10579],
	[0x105A1, 0x1057A],
	[0x105A3, 0x1057C],
	[0x105A4, 0x1057D],
	[0x105A5, 0x1057E],
	[0x105A6, 0x1057F],
	[0x105A7, 0x10580],
	[0x105A8, 0x10581],
	[0x105A9, 0x10582],
	[0x105AA, 0x10583],
	[0x105AB, 0x10584],
	[0x105AC, 0x10585],
	[0x105AD, 0x10586],
	[0x105AE, 0x10587],
	[0x105AF, 0x10588],
	[0x105B0, 0x10589],
	[0x105B1, 0x1058A],
	[0x105B3, 0x1058C],
	[0x105B4, 0x1058D],
	[0x105B5, 0x1058E],
	[0x105B6, 0x1058F],
	[0x105B7, 0x10590],
	[0x105B8, 0x10591],
	[0x105B9, 0x10592],
	[0x105BB, 0x10594],
	[0x105BC, 0x10595],
	[0x10C80, 0x10CC0],
	[0x10C81, 0x10CC1],
	[0x10C82, 0x10CC2],
	[0x10C83, 0x10CC3],
	[0x10C84, 0x10CC4],
	[0x10C85, 0x10CC5],
	[0x10C86, 0x10CC6],
	[0x10C87, 0x10CC7],
	[0x10C88, 0x10CC8],
	[0x10C89, 0x10CC9],
	[0x10C8A, 0x10CCA],
	[0x10C8B, 0x10CCB],
	[0x10C8C, 0x10CCC],
	[0x10C8D, 0x10CCD],
	[0x10C8E, 0x10CCE],
	[0x10C8F, 0x10CCF],
	[0x10C90, 0x10CD0],
	[0x10C91, 0x10CD1],
	[0x10C92, 0x10CD2],
	[0x10C93, 0x10CD3],
	[0x10C94, 0x10CD4],
	[0x10C95, 0x10CD5],
	[0x10C96, 0x10CD6],
	[0x10C97, 0x10CD7],
	[0x10C98, 0x10CD8],
	[0x10C99, 0x10CD9],
	[0x10C9A, 0x10CDA],
	[0x10C9B, 0x10CDB],
	[0x10C9C, 0x10CDC],
	[0x10C9D, 0x10CDD],
	[0x10C9E, 0x10CDE],
	[0x10C9F, 0x10CDF],
	[0x10CA0, 0x10CE0],
	[0x10CA1, 0x10CE1],
	[0x10CA2, 0x10CE2],
	[0x10CA3, 0x10CE3],
	[0x10CA4, 0x10CE4],
	[0x10CA5, 0x10CE5],
	[0x10CA6, 0x10CE6],
	[0x10CA7, 0x10CE7],
	[0x10CA8, 0x10CE8],
	[0x10CA9, 0x10CE9],
	[0x10CAA, 0x10CEA],
	[0x10CAB, 0x10CEB],
	[0x10CAC, 0x10CEC],
	[0x10CAD, 0x10CED],
	[0x10CAE, 0x10CEE],
	[0x10CAF, 0x10CEF],
	[0x10CB0, 0x10CF0],
	[0x10CB1, 0x10CF1],
	[0x10CB2, 0x10CF2],
	[0x10CC0, 0x10C80],
	[0x10CC1, 0x10C81],
	[0x10CC2, 0x10C82],
	[0x10CC3, 0x10C83],
	[0x10CC4, 0x10C84],
	[0x10CC5, 0x10C85],
	[0x10CC6, 0x10C86],
	[0x10CC7, 0x10C87],
	[0x10CC8, 0x10C88],
	[0x10CC9, 0x10C89],
	[0x10CCA, 0x10C8A],
	[0x10CCB, 0x10C8B],
	[0x10CCC, 0x10C8C],
	[0x10CCD, 0x10C8D],
	[0x10CCE, 0x10C8E],
	[0x10CCF, 0x10C8F],
	[0x10CD0, 0x10C90],
	[0x10CD1, 0x10C91],
	[0x10CD2, 0x10C92],
	[0x10CD3, 0x10C93],
	[0x10CD4, 0x10C94],
	[0x10CD5, 0x10C95],
	[0x10CD6, 0x10C96],
	[0x10CD7, 0x10C97],
	[0x10CD8, 0x10C98],
	[0x10CD9, 0x10C99],
	[0x10CDA, 0x10C9A],
	[0x10CDB, 0x10C9B],
	[0x10CDC, 0x10C9C],
	[0x10CDD, 0x10C9D],
	[0x10CDE, 0x10C9E],
	[0x10CDF, 0x10C9F],
	[0x10CE0, 0x10CA0],
	[0x10CE1, 0x10CA1],
	[0x10CE2, 0x10CA2],
	[0x10CE3, 0x10CA3],
	[0x10CE4, 0x10CA4],
	[0x10CE5, 0x10CA5],
	[0x10CE6, 0x10CA6],
	[0x10CE7, 0x10CA7],
	[0x10CE8, 0x10CA8],
	[0x10CE9, 0x10CA9],
	[0x10CEA, 0x10CAA],
	[0x10CEB, 0x10CAB],
	[0x10CEC, 0x10CAC],
	[0x10CED, 0x10CAD],
	[0x10CEE, 0x10CAE],
	[0x10CEF, 0x10CAF],
	[0x10CF0, 0x10CB0],
	[0x10CF1, 0x10CB1],
	[0x10CF2, 0x10CB2],
	[0x10D50, 0x10D70],
	[0x10D51, 0x10D71],
	[0x10D52, 0x10D72],
	[0x10D53, 0x10D73],
	[0x10D54, 0x10D74],
	[0x10D55, 0x10D75],
	[0x10D56, 0x10D76],
	[0x10D57, 0x10D77],
	[0x10D58, 0x10D78],
	[0x10D59, 0x10D79],
	[0x10D5A, 0x10D7A],
	[0x10D5B, 0x10D7B],
	[0x10D5C, 0x10D7C],
	[0x10D5D, 0x10D7D],
	[0x10D5E, 0x10D7E],
	[0x10D5F, 0x10D7F],
	[0x10D60, 0x10D80],
	[0x10D61, 0x10D81],
	[0x10D62, 0x10D82],
	[0x10D63, 0x10D83],
	[0x10D64, 0x10D84],
	[0x10D65, 0x10D85],
	[0x10D70, 0x10D50],
	[0x10D71, 0x10D51],
	[0x10D72, 0x10D52],
	[0x10D73, 0x10D53],
	[0x10D74, 0x10D54],
	[0x10D75, 0x10D55],
	[0x10D76, 0x10D56],
	[0x10D77, 0x10D57],
	[0x10D78, 0x10D58],
	[0x10D79, 0x10D59],
	[0x10D7A, 0x10D5A],
	[0x10D7B, 0x10D5B],
	[0x10D7C, 0x10D5C],
	[0x10D7D, 0x10D5D],
	[0x10D7E, 0x10D5E],
	[0x10D7F, 0x10D5F],
	[0x10D80, 0x10D60],
	[0x10D81, 0x10D61],
	[0x10D82, 0x10D62],
	[0x10D83, 0x10D63],
	[0x10D84, 0x10D64],
	[0x10D85, 0x10D65],
	[0x118A0, 0x118C0],
	[0x118A1, 0x118C1],
	[0x118A2, 0x118C2],
	[0x118A3, 0x118C3],
	[0x118A4, 0x118C4],
	[0x118A5, 0x118C5],
	[0x118A6, 0x118C6],
	[0x118A7, 0x118C7],
	[0x118A8, 0x118C8],
	[0x118A9, 0x118C9],
	[0x118AA, 0x118CA],
	[0x118AB, 0x118CB],
	[0x118AC, 0x118CC],
	[0x118AD, 0x118CD],
	[0x118AE, 0x118CE],
	[0x118AF, 0x118CF],
	[0x118B0, 0x118D0],
	[0x118B1, 0x118D1],
	[0x118B2, 0x118D2],
	[0x118B3, 0x118D3],
	[0x118B4, 0x118D4],
	[0x118B5, 0x118D5],
	[0x118B6, 0x118D6],
	[0x118B7, 0x118D7],
	[0x118B8, 0x118D8],
	[0x118B9, 0x118D9],
	[0x118BA, 0x118DA],
	[0x118BB, 0x118DB],
	[0x118BC, 0x118DC],
	[0x118BD, 0x118DD],
	[0x118BE, 0x118DE],
	[0x118BF, 0x118DF],
	[0x118C0, 0x118A0],
	[0x118C1, 0x118A1],
	[0x118C2, 0x118A2],
	[0x118C3, 0x118A3],
	[0x118C4, 0x118A4],
	[0x118C5, 0x118A5],
	[0x118C6, 0x118A6],
	[0x118C7, 0x118A7],
	[0x118C8, 0x118A8],
	[0x118C9, 0x118A9],
	[0x118CA, 0x118AA],
	[0x118CB, 0x118AB],
	[0x118CC, 0x118AC],
	[0x118CD, 0x118AD],
	[0x118CE, 0x118AE],
	[0x118CF, 0x118AF],
	[0x118D0, 0x118B0],
	[0x118D1, 0x118B1],
	[0x118D2, 0x118B2],
	[0x118D3, 0x118B3],
	[0x118D4, 0x118B4],
	[0x118D5, 0x118B5],
	[0x118D6, 0x118B6],
	[0x118D7, 0x118B7],
	[0x118D8, 0x118B8],
	[0x118D9, 0x118B9],
	[0x118DA, 0x118BA],
	[0x118DB, 0x118BB],
	[0x118DC, 0x118BC],
	[0x118DD, 0x118BD],
	[0x118DE, 0x118BE],
	[0x118DF, 0x118BF],
	[0x16E40, 0x16E60],
	[0x16E41, 0x16E61],
	[0x16E42, 0x16E62],
	[0x16E43, 0x16E63],
	[0x16E44, 0x16E64],
	[0x16E45, 0x16E65],
	[0x16E46, 0x16E66],
	[0x16E47, 0x16E67],
	[0x16E48, 0x16E68],
	[0x16E49, 0x16E69],
	[0x16E4A, 0x16E6A],
	[0x16E4B, 0x16E6B],
	[0x16E4C, 0x16E6C],
	[0x16E4D, 0x16E6D],
	[0x16E4E, 0x16E6E],
	[0x16E4F, 0x16E6F],
	[0x16E50, 0x16E70],
	[0x16E51, 0x16E71],
	[0x16E52, 0x16E72],
	[0x16E53, 0x16E73],
	[0x16E54, 0x16E74],
	[0x16E55, 0x16E75],
	[0x16E56, 0x16E76],
	[0x16E57, 0x16E77],
	[0x16E58, 0x16E78],
	[0x16E59, 0x16E79],
	[0x16E5A, 0x16E7A],
	[0x16E5B, 0x16E7B],
	[0x16E5C, 0x16E7C],
	[0x16E5D, 0x16E7D],
	[0x16E5E, 0x16E7E],
	[0x16E5F, 0x16E7F],
	[0x16E60, 0x16E40],
	[0x16E61, 0x16E41],
	[0x16E62, 0x16E42],
	[0x16E63, 0x16E43],
	[0x16E64, 0x16E44],
	[0x16E65, 0x16E45],
	[0x16E66, 0x16E46],
	[0x16E67, 0x16E47],
	[0x16E68, 0x16E48],
	[0x16E69, 0x16E49],
	[0x16E6A, 0x16E4A],
	[0x16E6B, 0x16E4B],
	[0x16E6C, 0x16E4C],
	[0x16E6D, 0x16E4D],
	[0x16E6E, 0x16E4E],
	[0x16E6F, 0x16E4F],
	[0x16E70, 0x16E50],
	[0x16E71, 0x16E51],
	[0x16E72, 0x16E52],
	[0x16E73, 0x16E53],
	[0x16E74, 0x16E54],
	[0x16E75, 0x16E55],
	[0x16E76, 0x16E56],
	[0x16E77, 0x16E57],
	[0x16E78, 0x16E58],
	[0x16E79, 0x16E59],
	[0x16E7A, 0x16E5A],
	[0x16E7B, 0x16E5B],
	[0x16E7C, 0x16E5C],
	[0x16E7D, 0x16E5D],
	[0x16E7E, 0x16E5E],
	[0x16E7F, 0x16E5F],
	[0x1E900, 0x1E922],
	[0x1E901, 0x1E923],
	[0x1E902, 0x1E924],
	[0x1E903, 0x1E925],
	[0x1E904, 0x1E926],
	[0x1E905, 0x1E927],
	[0x1E906, 0x1E928],
	[0x1E907, 0x1E929],
	[0x1E908, 0x1E92A],
	[0x1E909, 0x1E92B],
	[0x1E90A, 0x1E92C],
	[0x1E90B, 0x1E92D],
	[0x1E90C, 0x1E92E],
	[0x1E90D, 0x1E92F],
	[0x1E90E, 0x1E930],
	[0x1E90F, 0x1E931],
	[0x1E910, 0x1E932],
	[0x1E911, 0x1E933],
	[0x1E912, 0x1E934],
	[0x1E913, 0x1E935],
	[0x1E914, 0x1E936],
	[0x1E915, 0x1E937],
	[0x1E916, 0x1E938],
	[0x1E917, 0x1E939],
	[0x1E918, 0x1E93A],
	[0x1E919, 0x1E93B],
	[0x1E91A, 0x1E93C],
	[0x1E91B, 0x1E93D],
	[0x1E91C, 0x1E93E],
	[0x1E91D, 0x1E93F],
	[0x1E91E, 0x1E940],
	[0x1E91F, 0x1E941],
	[0x1E920, 0x1E942],
	[0x1E921, 0x1E943],
	[0x1E922, 0x1E900],
	[0x1E923, 0x1E901],
	[0x1E924, 0x1E902],
	[0x1E925, 0x1E903],
	[0x1E926, 0x1E904],
	[0x1E927, 0x1E905],
	[0x1E928, 0x1E906],
	[0x1E929, 0x1E907],
	[0x1E92A, 0x1E908],
	[0x1E92B, 0x1E909],
	[0x1E92C, 0x1E90A],
	[0x1E92D, 0x1E90B],
	[0x1E92E, 0x1E90C],
	[0x1E92F, 0x1E90D],
	[0x1E930, 0x1E90E],
	[0x1E931, 0x1E90F],
	[0x1E932, 0x1E910],
	[0x1E933, 0x1E911],
	[0x1E934, 0x1E912],
	[0x1E935, 0x1E913],
	[0x1E936, 0x1E914],
	[0x1E937, 0x1E915],
	[0x1E938, 0x1E916],
	[0x1E939, 0x1E917],
	[0x1E93A, 0x1E918],
	[0x1E93B, 0x1E919],
	[0x1E93C, 0x1E91A],
	[0x1E93D, 0x1E91B],
	[0x1E93E, 0x1E91C],
	[0x1E93F, 0x1E91D],
	[0x1E940, 0x1E91E],
	[0x1E941, 0x1E91F],
	[0x1E942, 0x1E920],
	[0x1E943, 0x1E921]
]);


---

File name: node_modules\regexpu-core\LICENSE-MIT.txt

Code:
Copyright Mathias Bynens <https://mathiasbynens.be/>

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


---

File name: node_modules\regexpu-core\package.json

Code:
{
	"name": "regexpu-core",
	"version": "6.2.0",
	"description": "regexpu’s core functionality (i.e. `rewritePattern(pattern, flag)`), capable of translating ES6 Unicode regular expressions to ES5.",
	"homepage": "https://mths.be/regexpu",
	"main": "rewrite-pattern.js",
	"engines": {
		"node": ">=4"
	},
	"keywords": [
		"codegen",
		"desugaring",
		"ecmascript",
		"es5",
		"es6",
		"harmony",
		"javascript",
		"refactoring",
		"regex",
		"regexp",
		"regular expressions",
		"rewriting",
		"syntax",
		"transformation",
		"transpile",
		"transpiler",
		"unicode"
	],
	"license": "MIT",
	"author": {
		"name": "Mathias Bynens",
		"url": "https://mathiasbynens.be/"
	},
	"repository": {
		"type": "git",
		"url": "https://github.com/mathiasbynens/regexpu-core.git"
	},
	"bugs": "https://github.com/mathiasbynens/regexpu-core/issues",
	"files": [
		"LICENSE-MIT.txt",
		"rewrite-pattern.js",
		"data/all-characters.js",
		"data/character-class-escape-sets.js",
		"data/i-bmp-mappings.js",
		"data/iu-foldings.js",
		"data/iu-mappings.js"
	],
	"scripts": {
		"build": "node scripts/index.js",
		"test": "node --test tests/tests.js",
		"test-node6": "mocha tests",
		"cover": "NODE_V8_COVERAGE=coverage node --test  --experimental-test-coverage tests/tests.js"
	},
	"dependencies": {
		"regenerate": "^1.4.2",
		"regenerate-unicode-properties": "^10.2.0",
		"regjsgen": "^0.8.0",
		"regjsparser": "^0.12.0",
		"unicode-match-property-ecmascript": "^2.0.0",
		"unicode-match-property-value-ecmascript": "^2.1.0"
	},
	"devDependencies": {
		"jsesc": "^3.0.2",
		"@unicode/unicode-16.0.0": "^1.6.2"
	}
}


---

File name: node_modules\regexpu-core\README.md

Code:
# regexpu-core [![Build status](https://github.com/mathiasbynens/regexpu-core/workflows/run-checks/badge.svg)](https://github.com/mathiasbynens/regexpu-core/actions?query=workflow%3Arun-checks) [![regexpu-core on npm](https://img.shields.io/npm/v/regexpu-core)](https://www.npmjs.com/package/regexpu-core)

_regexpu_ is a source code transpiler that enables the use of ES2015 Unicode regular expressions in JavaScript-of-today (ES5).

_regexpu-core_ contains _regexpu_’s core functionality, i.e. `rewritePattern(pattern, flag)`, which enables rewriting regular expressions that make use of [the ES2015 `u` flag](https://mathiasbynens.be/notes/es6-unicode-regex) into equivalent ES5-compatible regular expression patterns.

## Installation

To use _regexpu-core_ programmatically, install it as a dependency via [npm](https://www.npmjs.com/):

```bash
npm install regexpu-core --save
```

Then, `require` it:

```js
const rewritePattern = require('regexpu-core');
```

## API

This module exports a single function named `rewritePattern`.

### `rewritePattern(pattern, flags, options)`

This function takes a string that represents a regular expression pattern as well as a string representing its flags, and returns an ES5-compatible version of the pattern.

```js
rewritePattern('foo.bar', 'u', { unicodeFlag: "transform" });
// → 'foo(?:[\\0-\\t\\x0B\\f\\x0E-\\u2027\\u202A-\\uD7FF\\uDC00-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF])bar'

rewritePattern('[\\u{1D306}-\\u{1D308}a-z]', 'u', { unicodeFlag: "transform" });
// → '(?:[a-z]|\\uD834[\\uDF06-\\uDF08])'

rewritePattern('[\\u{1D306}-\\u{1D308}a-z]', 'ui', { unicodeFlag: "transform" });
// → '(?:[a-z\\u017F\\u212A]|\\uD834[\\uDF06-\\uDF08])'
```

_regexpu-core_ can rewrite non-ES6 regular expressions too, which is useful to demonstrate how their behavior changes once the `u` and `i` flags are added:

```js
// In ES5, the dot operator only matches BMP symbols:
rewritePattern('foo.bar', '', { unicodeFlag: "transform" });
// → 'foo(?:[\\0-\\t\\x0B\\f\\x0E-\\u2027\\u202A-\\uFFFF])bar'

// But with the ES2015 `u` flag, it matches astral symbols too:
rewritePattern('foo.bar', 'u', { unicodeFlag: "transform" });
// → 'foo(?:[\\0-\\t\\x0B\\f\\x0E-\\u2027\\u202A-\\uD7FF\\uDC00-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF])bar'
```

The optional `options` argument recognizes the following properties:

#### Stable regular expression features

These options can be set to `false` or `'transform'`. When using `'transform'`, the corresponding features are compiled to older syntax that can run in older browsers. When using `false` (the default), they are not compiled and they can be relied upon to compile more modern features.

- `unicodeFlag` - The `u` flag, enabling support for Unicode code point escapes in the form `\u{...}`.

  ```js
  rewritePattern('\\u{ab}', '', {
    unicodeFlag: 'transform'
  });
  // → '\\u{ab}'

  rewritePattern('\\u{ab}', 'u', {
    unicodeFlag: 'transform'
  });
  // → '\\xAB'
  ```

- `dotAllFlag` - The [`s` (`dotAll`) flag](https://github.com/mathiasbynens/es-regexp-dotall-flag).

  ```js
  rewritePattern('.', '', {
    dotAllFlag: 'transform'
  });
  // → '[\\0-\\t\\x0B\\f\\x0E-\\u2027\\u202A-\\uFFFF]'

  rewritePattern('.', 's', {
    dotAllFlag: 'transform'
  });
  // → '[\\0-\\uFFFF]'

  rewritePattern('.', 'su', {
    dotAllFlag: 'transform'
  });
  // → '(?:[\\0-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])'
  ```

- `unicodePropertyEscapes` - [Unicode property escapes](property-escapes.md).

  By default they are compiled to Unicode code point escapes of the form `\u{...}`. If the `unicodeFlag` option is set to `'transform'` they often result in larger output, although there are cases (such as `\p{Lu}`) where it actually _decreases_ the output size.

  ```js
  rewritePattern('\\p{Script_Extensions=Anatolian_Hieroglyphs}', 'u', {
    unicodePropertyEscapes: 'transform'
  });
  // → '[\\u{14400}-\\u{14646}]'

  rewritePattern('\\p{Script_Extensions=Anatolian_Hieroglyphs}', 'u', {
    unicodeFlag: 'transform',
    unicodePropertyEscapes: 'transform'
  });
  // → '(?:\\uD811[\\uDC00-\\uDE46])'
  ```

- `namedGroups` - [Named capture groups](https://github.com/tc39/proposal-regexp-named-groups).

  ```js
  rewritePattern('(?<name>.)\\k<name>', '', {
    namedGroups: 'transform'
  });
  // → '(.)\1'
  ```

- `unicodeSetsFlag` - [The `v` (`unicodeSets`) flag](https://github.com/tc39/proposal-regexp-set-notation)

  ```js
  rewritePattern('[\\p{Emoji}&&\\p{ASCII}]', 'v', {
    unicodeSetsFlag: 'transform'
  });
  // → '[#\\*0-9]'
  ```

  By default, patterns with the `v` flag are transformed to patterns with the `u` flag. If you want to downlevel them more you can set the `unicodeFlag: 'transform'` option.

  ```js
  rewritePattern('[^[a-h]&&[f-z]]', 'v', {
    unicodeSetsFlag: 'transform'
  });
  // → '[^f-h]' (to be used with /u)
  ```

  ```js
  rewritePattern('[^[a-h]&&[f-z]]', 'v', {
    unicodeSetsFlag: 'transform',
    unicodeFlag: 'transform'
  });
  // → '(?:(?![f-h])[\s\S])' (to be used without /u)
  ```

- `modifiers` - [Inline `i`/`m`/`s` modifiers](https://github.com/tc39/proposal-regexp-modifiers)

  ```js
  rewritePattern('(?i:[a-z])[a-z]', '', {
    modifiers: 'transform'
  });
  // → '(?:[a-zA-Z])([a-z])'
  ```

#### Experimental regular expression features

These options can be set to `false`, `'parse'` and `'transform'`. When using `'transform'`, the corresponding features are compiled to older syntax that can run in older browsers. When using `'parse'`, they are parsed and left as-is in the output pattern. When using `false` (the default), they result in a syntax error if used.

Once these features become stable (when the proposals are accepted as part of ECMAScript), they will be parsed by default and thus `'parse'` will behave like `false`.

#### Miscellaneous options

- `onNamedGroup`

  This option is a function that gets called when a named capture group is found. It receives two parameters:
  the name of the group, and its index.

  ```js
  rewritePattern('(?<name>.)\\k<name>', '', {
    onNamedGroup(name, index) {
      console.log(name, index);
      // → 'name', 1
    }
  });
  ```

- `onNewFlags`

  This option is a function that gets called to pass the flags that the resulting pattern must be interpreted with.

  ```js
  rewritePattern('abc', 'um', '', {
    unicodeFlag: 'transform',
    onNewFlags(flags) {
      console.log(flags);
      // → 'm'
    }
  })
  ```

### Caveats

- [Lookbehind assertions](https://github.com/tc39/proposal-regexp-lookbehind) cannot be transformed to older syntax.
- When using `namedGroups: 'transform'`, _regexpu-core_ only takes care of the _syntax_: you will still need a runtime wrapper around the regular expression to populate the `.groups` property of `RegExp.prototype.match()`'s result. If you are using _regexpu-core_ via Babel, it's handled automatically.

## For maintainers

### How to publish a new release

1. On the `main` branch, bump the version number in `package.json`:

    ```sh
    npm version patch -m 'Release v%s'
    ```

    Instead of `patch`, use `minor` or `major` [as needed](https://semver.org/).

    Note that this produces a Git commit + tag.

1. Push the release commit and tag:

    ```sh
    git push --follow-tags
    ```

    Our CI then automatically publishes the new release to npm.

1. Once the release has been published to npm, update [`regexpu`](https://github.com/mathiasbynens/regexpu) to make use of it, and [cut a new release of `regexpu` as well](https://github.com/mathiasbynens/regexpu#how-to-publish-a-new-release).


## Author

| [![twitter/mathias](https://gravatar.com/avatar/24e08a9ea84deb17ae121074d0f17125?s=70)](https://twitter.com/mathias "Follow @mathias on Twitter") |
|---|
| [Mathias Bynens](https://mathiasbynens.be/) |

## License

_regexpu-core_ is available under the [MIT](https://mths.be/mit) license.


---

File name: node_modules\regexpu-core\rewrite-pattern.js

Code:
'use strict';

const generate = require('regjsgen').generate;
const parse = require('regjsparser').parse;
const regenerate = require('regenerate');
const unicodeMatchProperty = require('unicode-match-property-ecmascript');
const unicodeMatchPropertyValue = require('unicode-match-property-value-ecmascript');
const iuMappings = require('./data/iu-mappings.js');
const iBMPMappings = require('./data/i-bmp-mappings.js');
const iuFoldings = require('./data/iu-foldings.js');
const ESCAPE_SETS = require('./data/character-class-escape-sets.js');
const { UNICODE_SET, UNICODE_IV_SET } = require('./data/all-characters.js');

function flatMap(array, callback) {
	const result = [];
	array.forEach(item => {
		const res = callback(item);
		if (Array.isArray(res)) {
			result.push.apply(result, res);
		} else {
			result.push(res);
		}
	});
	return result;
}

function regenerateContainsAstral(regenerateData) {
	const data = regenerateData.data;
	return data.length >= 1 && data[data.length - 1] >= 0x10000;
}

// https://tc39.es/ecma262/#prod-SyntaxCharacter
const SYNTAX_CHARS = /[\\^$.*+?()[\]{}|]/g;

const ASTRAL_SET = regenerate().addRange(0x10000, 0x10FFFF);

const NEWLINE_SET = regenerate().add(
	// `LineTerminator`s (https://mths.be/es6#sec-line-terminators):
	0x000A, // Line Feed <LF>
	0x000D, // Carriage Return <CR>
	0x2028, // Line Separator <LS>
	0x2029  // Paragraph Separator <PS>
);

// Prepare a Regenerate set containing all code points that are supposed to be
// matched by `/./u`. https://mths.be/es6#sec-atom
const DOT_SET_UNICODE = UNICODE_SET.clone() // all Unicode code points
	.remove(NEWLINE_SET);

const getCharacterClassEscapeSet = (character, unicode, ignoreCase, shouldApplySCF) => {
	if (unicode) {
		if (ignoreCase) {
			const result = ESCAPE_SETS.UNICODE_IGNORE_CASE.get(character);
			if (shouldApplySCF) {
				return ESCAPE_SETS.UNICODESET_IGNORE_CASE.get(character);
			} else {
				return result;
			}
		}
		return ESCAPE_SETS.UNICODE.get(character);
	}
	return ESCAPE_SETS.REGULAR.get(character);
};

const getUnicodeDotSet = (dotAll) => {
	return dotAll ? UNICODE_SET : DOT_SET_UNICODE;
};

const getUnicodePropertyValueSet = (property, value) => {
	const path = value ?
		`${ property }/${ value }` :
		`Binary_Property/${ property }`;
	try {
		return require(`regenerate-unicode-properties/${ path }.js`);
	} catch (exception) {
		throw new Error(
			`Failed to recognize value \`${ value }\` for property ` +
			`\`${ property }\`.`
		);
	}
};

const handleLoneUnicodePropertyNameOrValue = (value) => {
	// It could be a `General_Category` value or a binary property.
	// Note: `unicodeMatchPropertyValue` throws on invalid values.
	try {
		const property = 'General_Category';
		const category = unicodeMatchPropertyValue(property, value);
		return getUnicodePropertyValueSet(property, category);
	} catch (exception) {}
	// It’s not a `General_Category` value, so check if it’s a property
	// of strings.
	try {
		return getUnicodePropertyValueSet('Property_of_Strings', value);
	} catch (exception) {}
	// Lastly, check if it’s a binary property of single code points.
	// Note: `unicodeMatchProperty` throws on invalid properties.
	const property = unicodeMatchProperty(value);
	return getUnicodePropertyValueSet(property);
};

const getUnicodePropertyEscapeSet = (value, isNegative, isUnicodeSetIgnoreCase) => {
	const parts = value.split('=');
	const firstPart = parts[0];
	let set;
	if (parts.length == 1) {
		set = handleLoneUnicodePropertyNameOrValue(firstPart);
	} else {
		// The pattern consists of two parts, i.e. `Property=Value`.
		const property = unicodeMatchProperty(firstPart);
		const value = unicodeMatchPropertyValue(property, parts[1]);
		set = getUnicodePropertyValueSet(property, value);
	}
	if (isNegative) {
		if (set.strings) {
			throw new Error('Cannot negate Unicode property of strings');
		}
		return {
			characters: (isUnicodeSetIgnoreCase ? UNICODE_IV_SET : UNICODE_SET).clone().remove(set.characters),
			strings: new Set()
		};
	}
	return {
		characters: set.characters.clone(),
		strings: set.strings
			// We need to escape strings like *️⃣ to make sure that they can be safely used in unions.
			? new Set(set.strings.map(str => str.replace(SYNTAX_CHARS, '\\$&')))
			: new Set()
	};
};

const getUnicodePropertyEscapeCharacterClassData = (property, isNegative, isUnicodeSetIgnoreCase, shouldApplySCF) => {
	const set = getUnicodePropertyEscapeSet(property, isNegative, isUnicodeSetIgnoreCase);
	const data = getCharacterClassEmptyData();
	const singleChars = shouldApplySCF ? regenerate(set.characters.toArray().map(ch => simpleCaseFolding(ch))) : set.characters;
	const caseEqFlags = configGetCaseEqFlags();
	if (caseEqFlags) {
		for (const codepoint of singleChars.toArray()) {
			const list = getCaseEquivalents(codepoint, caseEqFlags);
			if (list) {
				singleChars.add(list);
			}
		}
	}
	data.singleChars = singleChars;
	if (set.strings.size > 0) {
		data.longStrings = set.strings;
		data.maybeIncludesStrings = true;
	}
	return data;
};

const CASE_EQ_FLAG_NONE = 0b00;
const CASE_EQ_FLAG_BMP = 0b01;
const CASE_EQ_FLAG_UNICODE = 0b10;

function configGetCaseEqFlags() {
	let flags = CASE_EQ_FLAG_NONE;
	if (config.modifiersData.i === true) {
		if (config.transform.modifiers) {
			flags |= CASE_EQ_FLAG_BMP;
			if (config.flags.unicode || config.flags.unicodeSets) {
				flags |= CASE_EQ_FLAG_UNICODE;
			}
		}
	} else if (config.modifiersData.i === undefined) {
		if (config.transform.unicodeFlag && config.flags.ignoreCase) {
			flags |= CASE_EQ_FLAG_UNICODE;
		}
	}
	return flags;
}

// Given a range of code points, add any case-equivalent code points in that range
// to a set.
regenerate.prototype.iuAddRange = function(min, max, caseEqFlags) {
	const $this = this;
	do {
		const list = getCaseEquivalents(min, caseEqFlags);
		if (list) {
			$this.add(list);
		}
	} while (++min <= max);
	return $this;
};
regenerate.prototype.iuRemoveRange = function(min, max, caseEqFlags) {
	const $this = this;
	do {
		const list = getCaseEquivalents(min, caseEqFlags);
		if (list) {
			$this.remove(list);
		}
	} while (++min <= max);
	return $this;
};

const update = (item, pattern) => {
	let tree = parse(pattern, config.useUnicodeFlag ? 'u' : '', {
		lookbehind: true,
		namedGroups: true,
		unicodePropertyEscape: true,
		unicodeSet: true,
		modifiers: true,
	});
	switch (tree.type) {
		case 'characterClass':
		case 'group':
		case 'value':
			// No wrapping needed.
			break;
		default:
			// Wrap the pattern in a non-capturing group.
			tree = wrap(tree, pattern);
	}
	Object.assign(item, tree);
};

const wrap = (tree, pattern) => {
	// Wrap the pattern in a non-capturing group.
	return {
		'type': 'group',
		'behavior': 'ignore',
		'body': [tree],
		'raw': `(?:${ pattern })`
	};
};

/**
 * Given any codepoint ch, returns false or an array of characters,
 * such that for every c in the array,
 *   c != ch and Canonicalize(~, c) == Canonicalize(~, ch)
 * 
 * where Canonicalize is defined in
 * https://tc39.es/ecma262/#sec-runtime-semantics-canonicalize-ch
 * @param {number} codePoint input code point
 * @param {number} flags bitwise flags composed of CASE_EQ_FLAG_*
 * @returns false | number[]
 */
const getCaseEquivalents = (codePoint, flags) => {
	if (flags === CASE_EQ_FLAG_NONE) {
		return false;
	}
	let result = ((flags & CASE_EQ_FLAG_UNICODE) ? iuMappings.get(codePoint) : undefined) || [];
	if (typeof result === "number") result = [result];
	if (flags & CASE_EQ_FLAG_BMP) {
		for (const cp of [codePoint].concat(result)) {
			// Fast path for ASCII characters
			if (cp >= 0x41 && cp <= 0x5a) {
				result.push(cp + 0x20);
			} else if (cp >= 0x61 && cp <= 0x7a) {
				result.push(cp - 0x20);
			} else {
				result = result.concat(iBMPMappings.get(cp) || []);
			}
		}
	}
	return result.length == 0 ? false : result;
};

// https://tc39.es/ecma262/#sec-maybesimplecasefolding
const simpleCaseFolding = (codePoint) => {
	// Fast path for ASCII characters
	if (codePoint <= 0x7F) {
		if (codePoint >= 0x41 && codePoint <= 0x5A) {
			return codePoint + 0x20;
		}
		return codePoint;
	}
	return iuFoldings.get(codePoint) || codePoint;
}

const buildHandler = (action) => {
	switch (action) {
		case 'union':
			return {
				single: (data, cp) => {
					data.singleChars.add(cp);
				},
				regSet: (data, set2) => {
					data.singleChars.add(set2);
				},
				range: (data, start, end) => {
					data.singleChars.addRange(start, end);
				},
				iuRange: (data, start, end, caseEqFlags) => {
					data.singleChars.iuAddRange(start, end, caseEqFlags);
				},
				nested: (data, nestedData) => {
					data.singleChars.add(nestedData.singleChars);
					for (const str of nestedData.longStrings) data.longStrings.add(str);
					if (nestedData.maybeIncludesStrings) data.maybeIncludesStrings = true;
				}
			};
		case 'union-negative': {
			const regSet = (data, set2) => {
				data.singleChars = UNICODE_SET.clone().remove(set2).add(data.singleChars);
			};
			return {
				single: (data, cp) => {
					const unicode = UNICODE_SET.clone();
					data.singleChars = data.singleChars.contains(cp) ? unicode : unicode.remove(cp);
				},
				regSet: regSet,
				range: (data, start, end) => {
					data.singleChars = UNICODE_SET.clone().removeRange(start, end).add(data.singleChars);
				},
				iuRange: (data, start, end, caseEqFlags) => {
					data.singleChars = UNICODE_SET.clone().iuRemoveRange(start, end, caseEqFlags).add(data.singleChars);
				},
				nested: (data, nestedData) => {
					regSet(data, nestedData.singleChars);
					if (nestedData.maybeIncludesStrings) throw new Error('ASSERTION ERROR');
				}
			};
		}
		case 'intersection': {
			const regSet = (data, set2) => {
				if (data.first) data.singleChars = set2;
				else data.singleChars.intersection(set2);
			};
			return {
				single: (data, cp) => {
					data.singleChars = data.first || data.singleChars.contains(cp) ? regenerate(cp) : regenerate();
					data.longStrings.clear();
					data.maybeIncludesStrings = false;
				},
				regSet: (data, set) => {
					regSet(data, set);
					data.longStrings.clear();
					data.maybeIncludesStrings = false;
				},
				range: (data, start, end) => {
					if (data.first) data.singleChars.addRange(start, end);
					else data.singleChars.intersection(regenerate().addRange(start, end));
					data.longStrings.clear();
					data.maybeIncludesStrings = false;
				},
				iuRange: (data, start, end, caseEqFlags) => {
					if (data.first) data.singleChars.iuAddRange(start, end, caseEqFlags);
					else data.singleChars.intersection(regenerate().iuAddRange(start, end, caseEqFlags));
					data.longStrings.clear();
					data.maybeIncludesStrings = false;
				},
				nested: (data, nestedData) => {
					regSet(data, nestedData.singleChars);

					if (data.first) {
						data.longStrings = nestedData.longStrings;
						data.maybeIncludesStrings = nestedData.maybeIncludesStrings;
					} else {
						for (const str of data.longStrings) {
							if (!nestedData.longStrings.has(str)) data.longStrings.delete(str);
						}
						if (!nestedData.maybeIncludesStrings) data.maybeIncludesStrings = false;
					}
				}
			};
		}
		case 'subtraction': {
			const regSet = (data, set2) => {
				if (data.first) data.singleChars.add(set2);
				else data.singleChars.remove(set2);
			};
			return {
				single: (data, cp) => {
					if (data.first) data.singleChars.add(cp);
					else data.singleChars.remove(cp);
				},
				regSet: regSet,
				range: (data, start, end) => {
					if (data.first) data.singleChars.addRange(start, end);
					else data.singleChars.removeRange(start, end);
				},
				iuRange: (data, start, end, caseEqFlags) => {
					if (data.first) data.singleChars.iuAddRange(start, end, caseEqFlags);
					else data.singleChars.iuRemoveRange(start, end, caseEqFlags);
				},
				nested: (data, nestedData) => {
					regSet(data, nestedData.singleChars);

					if (data.first) {
						data.longStrings = nestedData.longStrings;
						data.maybeIncludesStrings = nestedData.maybeIncludesStrings;
					} else {
						for (const str of data.longStrings) {
							if (nestedData.longStrings.has(str)) data.longStrings.delete(str);
						}
					}
				}
			};
		}
		// The `default` clause is only here as a safeguard; it should never be
		// reached. Code coverage tools should ignore it.
		/* node:coverage ignore next */
		default:
			throw new Error(`Unknown set action: ${ characterClassItem.kind }`);
	}
};

const getCharacterClassEmptyData = () => ({
	transformed: config.transform.unicodeFlag,
	singleChars: regenerate(),
	longStrings: new Set(),
	hasEmptyString: false,
	first: true,
	maybeIncludesStrings: false
});

const concatCaseEquivalents = (codePoint, caseEqFlags) => {
	const caseEquivalents = getCaseEquivalents(codePoint, caseEqFlags);
	if (caseEquivalents) {
		return [codePoint, ...caseEquivalents];
	}
	return [codePoint];
};

const computeClassStrings = (classStrings, regenerateOptions, caseEqFlags, shouldApplySCF) => {
	let data = getCharacterClassEmptyData();

	for (const string of classStrings.strings) {
		if (string.characters.length === 1) {
			const codePoint = shouldApplySCF ? simpleCaseFolding(string.characters[0].codePoint) : string.characters[0].codePoint
			concatCaseEquivalents(codePoint, caseEqFlags).forEach((cp) => {
				data.singleChars.add(cp);
			});
		} else {
			let stringifiedString = '';
			if (caseEqFlags) {
				for (const ch of string.characters) {
					const codePoint = shouldApplySCF ? simpleCaseFolding(ch.codePoint) : ch.codePoint;
					const set = regenerate(concatCaseEquivalents(codePoint, caseEqFlags));
					stringifiedString += set.toString(regenerateOptions);
				}
			} else {
				for (const ch of string.characters) {
					const codePoint = shouldApplySCF ? simpleCaseFolding(ch.codePoint) : ch.codePoint;
					if (codePoint !== ch.codePoint) {
						stringifiedString += regenerate(codePoint).toString(regenerateOptions);
					} else {
						stringifiedString += generate(ch);
					}
				}
			}

			data.longStrings.add(stringifiedString);
			data.maybeIncludesStrings = true;
		}
	}

	return data;
}

const computeCharacterClass = (characterClassItem, regenerateOptions, shouldApplySCF) => {
	let data = getCharacterClassEmptyData();

	let handlePositive;
	let handleNegative;

	let caseEqFlags = configGetCaseEqFlags();

	switch (characterClassItem.kind) {
		case 'union':
			handlePositive = buildHandler('union');
			handleNegative = buildHandler('union-negative');
			break;
		case 'intersection':
			handlePositive = buildHandler('intersection');
			handleNegative = buildHandler('subtraction');
			if (config.transform.unicodeSetsFlag) data.transformed = true;
			if (config.isIgnoreCaseMode) {
				shouldApplySCF = true;
			}
			break;
		case 'subtraction':
			handlePositive = buildHandler('subtraction');
			handleNegative = buildHandler('intersection');
			if (config.transform.unicodeSetsFlag) data.transformed = true;
			if (config.isIgnoreCaseMode) {
				shouldApplySCF = true;
			}
			break;
		// The `default` clause is only here as a safeguard; it should never be
		// reached. Code coverage tools should ignore it.
		/* node:coverage ignore next */
		default:
			throw new Error(`Unknown character class kind: ${ characterClassItem.kind }`);
	}

	for (const item of characterClassItem.body) {
		switch (item.type) {
			case 'value':
				const codePoint = shouldApplySCF ? simpleCaseFolding(item.codePoint) : item.codePoint;
				const list = concatCaseEquivalents(codePoint, caseEqFlags);
				handlePositive.regSet(data, regenerate(list));
				if (list.length > 1) {
					data.transformed = true;
				}
				break;
			case 'characterClassRange':
				const min = item.min.codePoint;
				const max = item.max.codePoint;
				if (shouldApplySCF) {
					let list = [];
					for (let cp = min; cp <= max; cp++) {
						list.push(simpleCaseFolding(cp));
					}
					handlePositive.regSet(data, regenerate(list));
				} else {
					handlePositive.range(data, min, max);
				}
				if (caseEqFlags) {
					// If shouldApplySCF is true, it is still ok to call iuRange because 
					// the set [min, max] shares the same case equivalents with scf([min, max])
					handlePositive.iuRange(data, min, max, caseEqFlags);
					data.transformed = true;
				}
				break;
			case 'characterClassEscape':
				handlePositive.regSet(data, getCharacterClassEscapeSet(
					item.value,
					config.flags.unicode || config.flags.unicodeSets,
					config.flags.ignoreCase,
					shouldApplySCF
				));
				break;
			case 'unicodePropertyEscape':
				const nestedData = getUnicodePropertyEscapeCharacterClassData(
					item.value,
					item.negative,
					config.flags.unicodeSets && config.isIgnoreCaseMode,
					shouldApplySCF
				);
				handlePositive.nested(data, nestedData);
				data.transformed =
					data.transformed ||
					config.transform.unicodePropertyEscapes ||
					(config.transform.unicodeSetsFlag && (nestedData.maybeIncludesStrings || characterClassItem.kind !== "union" || item.negative));
				break;
			case 'characterClass':
				const handler = item.negative ? handleNegative : handlePositive;
				const res = computeCharacterClass(item, regenerateOptions, shouldApplySCF);
				handler.nested(data, res);
				data.transformed = true;
				break;
			case 'classStrings':
				handlePositive.nested(data, computeClassStrings(item, regenerateOptions, caseEqFlags, shouldApplySCF));
				data.transformed = true;
				break;
			// The `default` clause is only here as a safeguard; it should never be
			// reached. Code coverage tools should ignore it.
			/* node:coverage ignore next */
			default:
				throw new Error(`Unknown term type: ${ item.type }`);
		}

		data.first = false;
	}

	if (characterClassItem.negative && data.maybeIncludesStrings) {
		throw new SyntaxError('Cannot negate set containing strings');
	}

	return data;
}

const processCharacterClass = (
	characterClassItem,
	regenerateOptions,
	computed = computeCharacterClass(characterClassItem, regenerateOptions)
) => {
	const negative = characterClassItem.negative;
	const { singleChars, transformed, longStrings } = computed;
	if (transformed) {
		// If single chars already contains some astral character, regenerate (bmpOnly: true) will create valid regex strings
		const bmpOnly = regenerateContainsAstral(singleChars);
		const setStr = singleChars.toString(Object.assign({}, regenerateOptions, { bmpOnly: bmpOnly }));

		if (negative) {
			if (config.useUnicodeFlag) {
				update(characterClassItem, `[^${setStr[0] === '[' ? setStr.slice(1, -1) : setStr}]`)
			} else {
				if (config.flags.unicode || config.flags.unicodeSets) {
					if (config.flags.ignoreCase) {
						const astralCharsSet = singleChars.clone().intersection(ASTRAL_SET);
						// Assumption: singleChars do not contain lone surrogates.
						// Regex like /[^\ud800]/u is not supported
						const surrogateOrBMPSetStr = singleChars
							.clone()
							.remove(astralCharsSet)
							.addRange(0xd800, 0xdfff)
							.toString({ bmpOnly: true });
						// Don't generate negative lookahead for astral characters
						// because the case folding is not working anyway as we break
						// code points into surrogate pairs.
						const astralNegativeSetStr = ASTRAL_SET
							.clone()
							.remove(astralCharsSet)
							.toString(regenerateOptions);
						// The transform here does not support lone surrogates.
						update(
							characterClassItem,
							`(?!${surrogateOrBMPSetStr})[^]|${astralNegativeSetStr}`
						);
					} else {
						// Generate negative set directly when case folding is not involved.
						const negativeSet = UNICODE_SET.clone().remove(singleChars);
						update(characterClassItem, negativeSet.toString(regenerateOptions));
					}
				} else {
					update(characterClassItem, `(?!${setStr})[^]`);
				}
			}
		} else {
			const hasEmptyString = longStrings.has('');
			const pieces = Array.from(longStrings).sort((a, b) => b.length - a.length);

			if (setStr !== '[]' || longStrings.size === 0) {
				pieces.splice(pieces.length - (hasEmptyString ? 1 : 0), 0, setStr);
			}

			update(characterClassItem, pieces.join('|'));
		}
	}
	return characterClassItem;
};

const assertNoUnmatchedReferences = (groups) => {
	const unmatchedReferencesNames = Object.keys(groups.unmatchedReferences);
	if (unmatchedReferencesNames.length > 0) {
		throw new Error(`Unknown group names: ${unmatchedReferencesNames}`);
	}
};

const processModifiers = (item, regenerateOptions, groups) => {
	const enabling = item.modifierFlags.enabling;
	const disabling = item.modifierFlags.disabling;

	const oldData = Object.assign({}, config.modifiersData);

	for (const flag of enabling) {
		config.modifiersData[flag] = true;
	}
	for (const flag of disabling) {
		config.modifiersData[flag] = false;
	}

	if (config.transform.modifiers) {
		delete item.modifierFlags;
		item.behavior = 'ignore';
	}

	item.body = item.body.map(term => {
		return processTerm(term, regenerateOptions, groups);
	});

	config.modifiersData = oldData;

	return item;
}

const processTerm = (item, regenerateOptions, groups) => {
	switch (item.type) {
		case 'dot':
			if (config.transform.unicodeFlag) {
				update(
					item,
					getUnicodeDotSet(config.isDotAllMode).toString(regenerateOptions)
				);
			} else if ((config.modifiersData.s != null ? config.modifiersData.s && config.transform.modifiers : config.transform.dotAllFlag)) {
				// TODO: consider changing this at the regenerate level.
				update(item, '[^]');
			}
			break;
		case 'characterClass':
			item = processCharacterClass(item, regenerateOptions);
			break;
		case 'unicodePropertyEscape':
			const data = getUnicodePropertyEscapeCharacterClassData(item.value, item.negative, config.flags.unicodeSets && config.isIgnoreCaseMode);
			if (data.maybeIncludesStrings) {
				if (!config.flags.unicodeSets) {
					throw new Error(
						'Properties of strings are only supported when using the unicodeSets (v) flag.'
					);
				}
				if (config.transform.unicodeSetsFlag) {
					data.transformed = true;
					item = processCharacterClass(item, regenerateOptions, data);
				}
			} else if (config.transform.unicodePropertyEscapes || configGetCaseEqFlags()) {
				update(
					item,
					data.singleChars.toString(regenerateOptions)
				);
			}
			break;
		case 'characterClassEscape':
			if (config.transform.unicodeFlag) {
				update(
					item,
					getCharacterClassEscapeSet(
						item.value,
						/* config.transform.unicodeFlag implies config.flags.unicode */ true,
						config.flags.ignoreCase
					).toString(regenerateOptions)
				);
			}
			break;
		case 'group':
			if (item.behavior == 'normal') {
				groups.lastIndex++;
			}
			if (item.name) {
				const name = item.name.value;

				if (groups.namesConflicts[name]) {
					throw new Error(
						`Group '${ name }' has already been defined in this context.`
					);
				}
				groups.namesConflicts[name] = true;

				if (config.transform.namedGroups) {
					delete item.name;
				}

				const index = groups.lastIndex;
				if (!groups.names[name]) {
					groups.names[name] = [];
				}
				groups.names[name].push(index);

				if (groups.onNamedGroup) {
					groups.onNamedGroup.call(null, name, index);
				}

				if (groups.unmatchedReferences[name]) {
					delete groups.unmatchedReferences[name];
				}
			}
			if (item.modifierFlags) {
				return processModifiers(item, regenerateOptions, groups);
			}
			/* falls through */
		case 'quantifier':
			item.body = item.body.map(term => {
				return processTerm(term, regenerateOptions, groups);
			});
			break;
		case 'disjunction':
			const outerNamesConflicts = groups.namesConflicts;
			item.body = item.body.map(term => {
				groups.namesConflicts = Object.create(outerNamesConflicts);
				return processTerm(term, regenerateOptions, groups);
			});
			break;
		case 'alternative':
			item.body = flatMap(item.body, term => {
				const res = processTerm(term, regenerateOptions, groups);
				// Alternatives cannot contain alternatives; flatten them.
				return res.type === 'alternative' ? res.body : res;
			});
			break;
		case 'value':
			const codePoint = item.codePoint;
			const caseEqFlags = configGetCaseEqFlags();
			const list = concatCaseEquivalents(codePoint, caseEqFlags);
			if (list.length === 1 && item.kind === "symbol" && codePoint >= 0x20 && codePoint <= 0x7E) {
				// skip regenerate when it is a printable ASCII symbol
				break;
			}
			const set = regenerate(list);
			update(item, set.toString(regenerateOptions));
			break;
		case 'reference':
			if (item.name) {
				const name = item.name.value;
				const indexes = groups.names[name];
				if (!indexes) {
					groups.unmatchedReferences[name] = true;
				}

				if (config.transform.namedGroups) {
					if (indexes) {
						const body = indexes.map(index => ({
							'type': 'reference',
							'matchIndex': index,
							'raw': '\\' + index,
						}));
						if (body.length === 1) {
							return body[0];
						}
						return {
							'type': 'alternative',
							'body': body,
							'raw': body.map(term => term.raw).join(''),
						};
					}

					// This named reference comes before the group where it’s defined,
					// so it’s always an empty match.
					return {
						'type': 'group',
						'behavior': 'ignore',
						'body': [],
						'raw': '(?:)',
					};
				}
			}
			break;
		case 'anchor':
			if (config.modifiersData.m && config.transform.modifiers) {
				if (item.kind == 'start') {
					update(item, `(?:^|(?<=${NEWLINE_SET.toString()}))`);
				} else if (item.kind == 'end') {
					update(item, `(?:$|(?=${NEWLINE_SET.toString()}))`);
				}
			}
		case 'empty':
			// Nothing to do here.
			break;
		// The `default` clause is only here as a safeguard; it should never be
		// reached. Code coverage tools should ignore it.
		/* node:coverage ignore next */
		default:
			throw new Error(`Unknown term type: ${ item.type }`);
	}
	return item;
};

const config = {
	'flags': {
		'ignoreCase': false,
		'unicode': false,
		'unicodeSets': false,
		'dotAll': false,
		'multiline': false,
	},
	'transform': {
		'dotAllFlag': false,
		'unicodeFlag': false,
		'unicodeSetsFlag': false,
		'unicodePropertyEscapes': false,
		'namedGroups': false,
		'modifiers': false,
	},
	'modifiersData': {
		'i': undefined,
		's': undefined,
		'm': undefined,
	},
	get useUnicodeFlag() {
		return (this.flags.unicode || this.flags.unicodeSets) && !this.transform.unicodeFlag;
	},
	get isDotAllMode() {
		return (this.modifiersData.s !== undefined ? this.modifiersData.s : this.flags.dotAll);
	},
	get isIgnoreCaseMode() {
		return (this.modifiersData.i !== undefined ? this.modifiersData.i : this.flags.ignoreCase);
	}
};

const validateOptions = (options) => {
	if (!options) return;

	for (const key of Object.keys(options)) {
		const value = options[key];
		switch (key) {
			case 'dotAllFlag':
			case 'unicodeFlag':
			case 'unicodePropertyEscapes':
			case 'unicodeSetsFlag':
			case 'namedGroups':
				if (value != null && value !== false && value !== 'transform') {
					throw new Error(`.${key} must be false (default) or 'transform'.`);
				}
				break;
			// todo: remove modifiers: 'parse' in regexpu-core v7
			case 'modifiers':
				if (value != null && value !== false && value !== 'parse' && value !== 'transform') {
					throw new Error(`.${key} must be false (default), 'parse' or 'transform'.`);
				}
				break;
			case 'onNamedGroup':
			case 'onNewFlags':
				if (value != null && typeof value !== 'function') {
					throw new Error(`.${key} must be a function.`);
				}
				break;
			default:
				throw new Error(`.${key} is not a valid regexpu-core option.`);
		}
	}
};

const hasFlag = (flags, flag) => flags ? flags.includes(flag) : false;
const transform = (options, name) => options ? options[name] === 'transform' : false;

const rewritePattern = (pattern, flags, options) => {
	validateOptions(options);

	config.flags.unicode = hasFlag(flags, 'u');
	config.flags.unicodeSets = hasFlag(flags, 'v');
	config.flags.ignoreCase = hasFlag(flags, 'i');
	config.flags.dotAll = hasFlag(flags, 's');
	config.flags.multiline = hasFlag(flags, 'm');

	config.transform.dotAllFlag = config.flags.dotAll && transform(options, 'dotAllFlag');
	config.transform.unicodeFlag = (config.flags.unicode || config.flags.unicodeSets) && transform(options, 'unicodeFlag');
	config.transform.unicodeSetsFlag = config.flags.unicodeSets && transform(options, 'unicodeSetsFlag');

	// unicodeFlag: 'transform' implies unicodePropertyEscapes: 'transform'
	config.transform.unicodePropertyEscapes = (config.flags.unicode || config.flags.unicodeSets) && (
		transform(options, 'unicodeFlag') || transform(options, 'unicodePropertyEscapes')
	);
	config.transform.namedGroups = transform(options, 'namedGroups');
	config.transform.modifiers = transform(options, 'modifiers');

	config.modifiersData.i = undefined;
	config.modifiersData.s = undefined;
	config.modifiersData.m = undefined;

	const regjsparserFeatures = {
		// Enable every stable RegExp feature by default
		'modifiers': true,
		'unicodePropertyEscape': true,
		'unicodeSet': true,
		'namedGroups': true,
		'lookbehind': true,
	};

	const regenerateOptions = {
		'hasUnicodeFlag': config.useUnicodeFlag,
		'bmpOnly': !config.flags.unicode && !config.flags.unicodeSets
	};

	const groups = {
		'onNamedGroup': options && options.onNamedGroup,
		'lastIndex': 0,
		'names': Object.create(null), // { [name]: Array<index> }
		'namesConflicts': Object.create(null), // { [name]: true }
		'unmatchedReferences': Object.create(null) // { [name]: true }
	};

	const tree = parse(pattern, flags, regjsparserFeatures);

	if (config.transform.modifiers) {
		if (/\(\?[a-z]*-[a-z]+:/.test(pattern)) {
			// the pattern _likely_ contain inline disabled modifiers
			// we need to traverse to make sure that they are actually modifiers and to collect them
			const allDisabledModifiers = Object.create(null)
			const itemStack = [tree];
			let node;
			while (node = itemStack.pop(), node != undefined) {
				if (Array.isArray(node)) {
					Array.prototype.push.apply(itemStack, node);
				} else if (typeof node == 'object' && node != null) {
					for (const key of Object.keys(node)) {
						const value = node[key];
						if (key == 'modifierFlags') {
							for (const flag of value.disabling) {
								allDisabledModifiers[flag] = true;
							}
						} else if (typeof value == 'object' && value != null) {
							itemStack.push(value);
						}
					}
				}
			}
			if (allDisabledModifiers.i) {
				config.modifiersData.i = config.flags.ignoreCase;
			}
			if (allDisabledModifiers.m) {
				config.modifiersData.m = config.flags.multiline;
			}
			if (allDisabledModifiers.s) {
				config.modifiersData.s = config.flags.dotAll;
			}
		}
	}

	// Note: `processTerm` mutates `tree` and `groups`.
	processTerm(tree, regenerateOptions, groups);
	assertNoUnmatchedReferences(groups);

	const onNewFlags = options && options.onNewFlags;
	if (onNewFlags) {
		let newFlags = flags.split('').filter((flag) => !config.modifiersData[flag]).join('');
		if (config.transform.unicodeSetsFlag) {
			newFlags = newFlags.replace('v', 'u');
		}
		if (config.transform.unicodeFlag) {
			newFlags = newFlags.replace('u', '');
		}
		if (config.transform.dotAllFlag) {
			newFlags = newFlags.replace('s', '');
		}
		onNewFlags(newFlags);
	}

	return generate(tree);
};

module.exports = rewritePattern;


---

File name: node_modules\regjsgen\LICENSE-MIT.txt

Code:
The MIT License (MIT)

Copyright 2014-2020 Benjamin Tan <https://ofcr.se/>

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


---

File name: node_modules\regjsgen\package.json

Code:
{
  "name": "regjsgen",
  "version": "0.8.0",
  "description": "Generate regular expressions from regjsparser’s AST.",
  "homepage": "https://github.com/bnjmnt4n/regjsgen",
  "main": "regjsgen.js",
  "keywords": [
    "ast",
    "generate",
    "regex",
    "regexp",
    "regular expressions"
  ],
  "license": "MIT",
  "author": {
    "name": "Benjamin Tan",
    "url": "https://ofcr.se/"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/bnjmnt4n/regjsgen.git"
  },
  "bugs": "https://github.com/bnjmnt4n/regjsgen/issues",
  "files": [
    "LICENSE-MIT.txt",
    "regjsgen.js"
  ],
  "scripts": {
    "test": "node tests/tests.js",
    "coverage": "nyc --reporter=html npm test",
    "report-coverage": "nyc --reporter=lcov npm test && codecov",
    "update-fixtures": "node tests/update-fixtures.js"
  },
  "devDependencies": {
    "codecov": "^3.8.3",
    "nyc": "^15.1.0",
    "regjsparser": "^0.10.0",
    "request": "^2.88.2"
  }
}


---

File name: node_modules\regjsgen\README.md

Code:
# regjsgen [![Build status][ci-img]][ci] [![Code coverage status][codecov-img]][codecov]

Generate regular expressions from [regjsparser][regjsparser]’s AST.

## Installation

```sh
npm i regjsgen
```

## API

### `regjsgen.generate(ast)`

This function accepts an abstract syntax tree representing a regular expression (see [regjsparser][regjsparser]), and returns the generated regular expression string.

```js
const regjsparser = require('regjsparser');
const regjsgen = require('regjsgen');

// Generate an AST with `regjsparser`.
let ast = regjsparser.parse(regex);

// Modify AST
// …

// Generate `RegExp` string with `regjsgen`.
let regex = regjsgen.generate(ast);
```

## Support

Tested on Node.js 16 and 18.<br>
Compatible with regjsparser v0.10.0’s AST.


[ci]: https://github.com/bnjmnt4n/regjsgen/actions
[ci-img]: https://github.com/bnjmnt4n/regjsgen/workflows/Node.js%20CI/badge.svg
[codecov]: https://codecov.io/gh/bnjmnt4n/regjsgen
[codecov-img]: https://codecov.io/gh/bnjmnt4n/regjsgen/branch/main/graph/badge.svg
[regjsparser]: https://github.com/jviereck/regjsparser


---

File name: node_modules\regjsgen\regjsgen.js

Code:
/*!
 * regjsgen 0.8.0
 * Copyright 2014-2023 Benjamin Tan <https://ofcr.se/>
 * Available under the MIT license <https://github.com/bnjmnt4n/regjsgen/blob/main/LICENSE-MIT.txt>
 */
;(function() {
  'use strict';

  // Used to determine if values are of the language type `Object`.
  var objectTypes = {
    'function': true,
    'object': true
  };

  // Used as a reference to the global object.
  var root = (objectTypes[typeof window] && window) || this;

  // Detect free variable `exports`.
  var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;

  // Detect free variable `module`.
  var hasFreeModule = objectTypes[typeof module] && module && !module.nodeType;

  // Detect free variable `global` from Node.js or Browserified code and use it as `root`.
  var freeGlobal = freeExports && hasFreeModule && typeof global == 'object' && global;
  if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal)) {
    root = freeGlobal;
  }

  // Used to check objects for own properties.
  var hasOwnProperty = Object.prototype.hasOwnProperty;

  /*--------------------------------------------------------------------------*/

  // Generates a string based on the given code point.
  // Based on https://mths.be/fromcodepoint by @mathias.
  function fromCodePoint() {
    var codePoint = Number(arguments[0]);

    if (
      !isFinite(codePoint) || // `NaN`, `+Infinity`, or `-Infinity`
      codePoint < 0 || // not a valid Unicode code point
      codePoint > 0x10FFFF || // not a valid Unicode code point
      Math.floor(codePoint) != codePoint // not an integer
    ) {
      throw RangeError('Invalid code point: ' + codePoint);
    }

    if (codePoint <= 0xFFFF) {
      // BMP code point
      return String.fromCharCode(codePoint);
    } else {
      // Astral code point; split in surrogate halves
      // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
      codePoint -= 0x10000;
      var highSurrogate = (codePoint >> 10) + 0xD800;
      var lowSurrogate = (codePoint % 0x400) + 0xDC00;
      return String.fromCharCode(highSurrogate, lowSurrogate);
    }
  }

  /*--------------------------------------------------------------------------*/

  // Ensures that nodes have the correct types.
  var assertTypeRegexMap = {};
  function assertType(type, expected) {
    if (expected.indexOf('|') == -1) {
      if (type == expected) {
        return;
      }

      throw Error('Invalid node type: ' + type + '; expected type: ' + expected);
    }

    expected = hasOwnProperty.call(assertTypeRegexMap, expected)
      ? assertTypeRegexMap[expected]
      : (assertTypeRegexMap[expected] = RegExp('^(?:' + expected + ')$'));

    if (expected.test(type)) {
      return;
    }

    throw Error('Invalid node type: ' + type + '; expected types: ' + expected);
  }

  /*--------------------------------------------------------------------------*/

  // Generates a regular expression string based on an AST.
  function generate(node) {
    var type = node.type;

    if (hasOwnProperty.call(generators, type)) {
      return generators[type](node);
    }

    throw Error('Invalid node type: ' + type);
  }

  // Constructs a string by concatentating the output of each term.
  function generateSequence(generator, terms, /* optional */  separator) {
    var i = -1,
        length = terms.length,
        result = '',
        term;

    while (++i < length) {
      term = terms[i];

      if (separator && i > 0) result += separator;

      // Ensure that `\0` null escapes followed by number symbols are not
      // treated as backreferences.
      if (
        i + 1 < length &&
        terms[i].type == 'value' &&
        terms[i].kind == 'null' &&
        terms[i + 1].type == 'value' &&
        terms[i + 1].kind == 'symbol' &&
        terms[i + 1].codePoint >= 48 &&
        terms[i + 1].codePoint <= 57
      ) {
        result += '\\000';
        continue;
      }

      result += generator(term);
    }

    return result;
  }

  /*--------------------------------------------------------------------------*/

  function generateAlternative(node) {
    assertType(node.type, 'alternative');

    return generateSequence(generateTerm, node.body);
  }

  function generateAnchor(node) {
    assertType(node.type, 'anchor');

    switch (node.kind) {
      case 'start':
        return '^';
      case 'end':
        return '$';
      case 'boundary':
        return '\\b';
      case 'not-boundary':
        return '\\B';
      default:
        throw Error('Invalid assertion');
    }
  }

  var atomType = 'anchor|characterClass|characterClassEscape|dot|group|reference|unicodePropertyEscape|value';

  function generateAtom(node) {
    assertType(node.type, atomType);

    return generate(node);
  }

  function generateCharacterClass(node) {
    assertType(node.type, 'characterClass');

    var kind = node.kind;
    var separator = kind === 'intersection' ? '&&' : kind === 'subtraction' ? '--' : '';

    return '[' +
      (node.negative ? '^' : '') +
      generateSequence(generateClassAtom, node.body, separator) +
    ']';
  }

  function generateCharacterClassEscape(node) {
    assertType(node.type, 'characterClassEscape');

    return '\\' + node.value;
  }

  function generateCharacterClassRange(node) {
    assertType(node.type, 'characterClassRange');

    var min = node.min,
        max = node.max;

    if (min.type == 'characterClassRange' || max.type == 'characterClassRange') {
      throw Error('Invalid character class range');
    }

    return generateClassAtom(min) + '-' + generateClassAtom(max);
  }

  function generateClassAtom(node) {
    assertType(node.type, 'anchor|characterClass|characterClassEscape|characterClassRange|dot|value|unicodePropertyEscape|classStrings');

    return generate(node);
  }

  function generateClassStrings(node) {
    assertType(node.type, 'classStrings');

    return '\\q{' + generateSequence(generateClassString, node.strings, '|') + '}';
  }

  function generateClassString(node) {
    assertType(node.type, 'classString');

    return generateSequence(generate, node.characters);
  }

  function generateDisjunction(node) {
    assertType(node.type, 'disjunction');

    return generateSequence(generate, node.body, '|');
  }


  function generateDot(node) {
    assertType(node.type, 'dot');

    return '.';
  }

  function generateGroup(node) {
    assertType(node.type, 'group');

    var result = '';

    switch (node.behavior) {
      case 'normal':
        if (node.name) {
          result += '?<' + generateIdentifier(node.name) + '>';
        }
        break;
      case 'ignore':
        if (node.modifierFlags) {
          result += '?';
          if (node.modifierFlags.enabling) result += node.modifierFlags.enabling;
          if (node.modifierFlags.disabling) result += "-" + node.modifierFlags.disabling;
          result += ':';
        } else {
          result += '?:';
        }
        break;
      case 'lookahead':
        result += '?=';
        break;
      case 'negativeLookahead':
        result += '?!';
        break;
      case 'lookbehind':
        result += '?<=';
        break;
      case 'negativeLookbehind':
        result += '?<!';
        break;
      default:
        throw Error('Invalid behaviour: ' + node.behaviour);
    }

    result += generateSequence(generate, node.body);

    return '(' + result + ')';
  }

  function generateIdentifier(node) {
    assertType(node.type, 'identifier');

    return node.value;
  }

  function generateQuantifier(node) {
    assertType(node.type, 'quantifier');

    var quantifier = '',
        min = node.min,
        max = node.max;

    if (max == null) {
      if (min == 0) {
        quantifier = '*';
      } else if (min == 1) {
        quantifier = '+';
      } else {
        quantifier = '{' + min + ',}';
      }
    } else if (min == max) {
      quantifier = '{' + min + '}';
    } else if (min == 0 && max == 1) {
      quantifier = '?';
    } else {
      quantifier = '{' + min + ',' + max + '}';
    }

    if (!node.greedy) {
      quantifier += '?';
    }

    return generateAtom(node.body[0]) + quantifier;
  }

  function generateReference(node) {
    assertType(node.type, 'reference');

    if (node.matchIndex) {
      return '\\' + node.matchIndex;
    }
    if (node.name) {
      return '\\k<' + generateIdentifier(node.name) + '>';
    }

    throw new Error('Unknown reference type');
  }

  function generateTerm(node) {
    assertType(node.type, atomType + '|empty|quantifier');

    return generate(node);
  }

  function generateUnicodePropertyEscape(node) {
    assertType(node.type, 'unicodePropertyEscape');

    return '\\' + (node.negative ? 'P' : 'p') + '{' + node.value + '}';
  }

  function generateValue(node) {
    assertType(node.type, 'value');

    var kind = node.kind,
        codePoint = node.codePoint;

    if (typeof codePoint != 'number') {
      throw new Error('Invalid code point: ' + codePoint);
    }

    switch (kind) {
      case 'controlLetter':
        return '\\c' + fromCodePoint(codePoint + 64);
      case 'hexadecimalEscape':
        return '\\x' + ('00' + codePoint.toString(16).toUpperCase()).slice(-2);
      case 'identifier':
        return '\\' + fromCodePoint(codePoint);
      case 'null':
        return '\\' + codePoint;
      case 'octal':
        return '\\' + ('000' + codePoint.toString(8)).slice(-3);
      case 'singleEscape':
        switch (codePoint) {
          case 0x0008:
            return '\\b';
          case 0x0009:
            return '\\t';
          case 0x000A:
            return '\\n';
          case 0x000B:
            return '\\v';
          case 0x000C:
            return '\\f';
          case 0x000D:
            return '\\r';
          case 0x002D:
            return '\\-';
          default:
            throw Error('Invalid code point: ' + codePoint);
        }
      case 'symbol':
        return fromCodePoint(codePoint);
      case 'unicodeEscape':
        return '\\u' + ('0000' + codePoint.toString(16).toUpperCase()).slice(-4);
      case 'unicodeCodePointEscape':
        return '\\u{' + codePoint.toString(16).toUpperCase() + '}';
      default:
        throw Error('Unsupported node kind: ' + kind);
    }
  }

  /*--------------------------------------------------------------------------*/

  // Used to generate strings for each node type.
  var generators = {
    'alternative': generateAlternative,
    'anchor': generateAnchor,
    'characterClass': generateCharacterClass,
    'characterClassEscape': generateCharacterClassEscape,
    'characterClassRange': generateCharacterClassRange,
    'classStrings': generateClassStrings,
    'disjunction': generateDisjunction,
    'dot': generateDot,
    'group': generateGroup,
    'quantifier': generateQuantifier,
    'reference': generateReference,
    'unicodePropertyEscape': generateUnicodePropertyEscape,
    'value': generateValue
  };

  /*--------------------------------------------------------------------------*/

  // Export regjsgen.
  var regjsgen = {
    'generate': generate
  };

  // Some AMD build optimizers, like r.js, check for condition patterns like the following:
  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
    // Define as an anonymous module so it can be aliased through path mapping.
    define(function() {
      return regjsgen;
    });

    root.regjsgen = regjsgen;
  }
  // Check for `exports` after `define` in case a build optimizer adds an `exports` object.
  else if (freeExports && hasFreeModule) {
    // Export for CommonJS support.
    freeExports.generate = generate;
  }
  else {
    // Export to the global object.
    root.regjsgen = regjsgen;
  }
}.call(this));


---

File name: node_modules\regjsparser\node_modules\jsesc\jsesc.js

Code:
'use strict';

const object = {};
const hasOwnProperty = object.hasOwnProperty;
const forOwn = (object, callback) => {
	for (const key in object) {
		if (hasOwnProperty.call(object, key)) {
			callback(key, object[key]);
		}
	}
};

const extend = (destination, source) => {
	if (!source) {
		return destination;
	}
	forOwn(source, (key, value) => {
		destination[key] = value;
	});
	return destination;
};

const forEach = (array, callback) => {
	const length = array.length;
	let index = -1;
	while (++index < length) {
		callback(array[index]);
	}
};

const fourHexEscape = (hex) => {
	return '\\u' + ('0000' + hex).slice(-4);
}

const hexadecimal = (code, lowercase) => {
	let hexadecimal = code.toString(16);
	if (lowercase) return hexadecimal;
	return hexadecimal.toUpperCase();
};

const toString = object.toString;
const isArray = Array.isArray;
const isBuffer = (value) => {
	return typeof Buffer === 'function' && Buffer.isBuffer(value);
};
const isObject = (value) => {
	// This is a very simple check, but it’s good enough for what we need.
	return toString.call(value) == '[object Object]';
};
const isString = (value) => {
	return typeof value == 'string' ||
		toString.call(value) == '[object String]';
};
const isNumber = (value) => {
	return typeof value == 'number' ||
		toString.call(value) == '[object Number]';
};
const isFunction = (value) => {
	return typeof value == 'function';
};
const isMap = (value) => {
	return toString.call(value) == '[object Map]';
};
const isSet = (value) => {
	return toString.call(value) == '[object Set]';
};

/*--------------------------------------------------------------------------*/

// https://mathiasbynens.be/notes/javascript-escapes#single
const singleEscapes = {
	'\\': '\\\\',
	'\b': '\\b',
	'\f': '\\f',
	'\n': '\\n',
	'\r': '\\r',
	'\t': '\\t'
	// `\v` is omitted intentionally, because in IE < 9, '\v' == 'v'.
	// '\v': '\\x0B'
};
const regexSingleEscape = /[\\\b\f\n\r\t]/;

const regexDigit = /[0-9]/;
const regexWhitespace = /[\xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000]/;

const escapeEverythingRegex = /([\uD800-\uDBFF][\uDC00-\uDFFF])|([\uD800-\uDFFF])|(['"`])|[^]/g;
const escapeNonAsciiRegex = /([\uD800-\uDBFF][\uDC00-\uDFFF])|([\uD800-\uDFFF])|(['"`])|[^ !#-&\(-\[\]-_a-~]/g;

const jsesc = (argument, options) => {
	const increaseIndentation = () => {
		oldIndent = indent;
		++options.indentLevel;
		indent = options.indent.repeat(options.indentLevel)
	};
	// Handle options
	const defaults = {
		'escapeEverything': false,
		'minimal': false,
		'isScriptContext': false,
		'quotes': 'single',
		'wrap': false,
		'es6': false,
		'json': false,
		'compact': true,
		'lowercaseHex': false,
		'numbers': 'decimal',
		'indent': '\t',
		'indentLevel': 0,
		'__inline1__': false,
		'__inline2__': false
	};
	const json = options && options.json;
	if (json) {
		defaults.quotes = 'double';
		defaults.wrap = true;
	}
	options = extend(defaults, options);
	if (
		options.quotes != 'single' &&
		options.quotes != 'double' &&
		options.quotes != 'backtick'
	) {
		options.quotes = 'single';
	}
	const quote = options.quotes == 'double' ?
		'"' :
		(options.quotes == 'backtick' ?
			'`' :
			'\''
		);
	const compact = options.compact;
	const lowercaseHex = options.lowercaseHex;
	let indent = options.indent.repeat(options.indentLevel);
	let oldIndent = '';
	const inline1 = options.__inline1__;
	const inline2 = options.__inline2__;
	const newLine = compact ? '' : '\n';
	let result;
	let isEmpty = true;
	const useBinNumbers = options.numbers == 'binary';
	const useOctNumbers = options.numbers == 'octal';
	const useDecNumbers = options.numbers == 'decimal';
	const useHexNumbers = options.numbers == 'hexadecimal';

	if (json && argument && isFunction(argument.toJSON)) {
		argument = argument.toJSON();
	}

	if (!isString(argument)) {
		if (isMap(argument)) {
			if (argument.size == 0) {
				return 'new Map()';
			}
			if (!compact) {
				options.__inline1__ = true;
				options.__inline2__ = false;
			}
			return 'new Map(' + jsesc(Array.from(argument), options) + ')';
		}
		if (isSet(argument)) {
			if (argument.size == 0) {
				return 'new Set()';
			}
			return 'new Set(' + jsesc(Array.from(argument), options) + ')';
		}
		if (isBuffer(argument)) {
			if (argument.length == 0) {
				return 'Buffer.from([])';
			}
			return 'Buffer.from(' + jsesc(Array.from(argument), options) + ')';
		}
		if (isArray(argument)) {
			result = [];
			options.wrap = true;
			if (inline1) {
				options.__inline1__ = false;
				options.__inline2__ = true;
			}
			if (!inline2) {
				increaseIndentation();
			}
			forEach(argument, (value) => {
				isEmpty = false;
				if (inline2) {
					options.__inline2__ = false;
				}
				result.push(
					(compact || inline2 ? '' : indent) +
					jsesc(value, options)
				);
			});
			if (isEmpty) {
				return '[]';
			}
			if (inline2) {
				return '[' + result.join(', ') + ']';
			}
			return '[' + newLine + result.join(',' + newLine) + newLine +
				(compact ? '' : oldIndent) + ']';
		} else if (isNumber(argument)) {
			if (json) {
				// Some number values (e.g. `Infinity`) cannot be represented in JSON.
				return JSON.stringify(argument);
			}
			if (useDecNumbers) {
				return String(argument);
			}
			if (useHexNumbers) {
				let hexadecimal = argument.toString(16);
				if (!lowercaseHex) {
					hexadecimal = hexadecimal.toUpperCase();
				}
				return '0x' + hexadecimal;
			}
			if (useBinNumbers) {
				return '0b' + argument.toString(2);
			}
			if (useOctNumbers) {
				return '0o' + argument.toString(8);
			}
		} else if (!isObject(argument)) {
			if (json) {
				// For some values (e.g. `undefined`, `function` objects),
				// `JSON.stringify(value)` returns `undefined` (which isn’t valid
				// JSON) instead of `'null'`.
				return JSON.stringify(argument) || 'null';
			}
			return String(argument);
		} else { // it’s an object
			result = [];
			options.wrap = true;
			increaseIndentation();
			forOwn(argument, (key, value) => {
				isEmpty = false;
				result.push(
					(compact ? '' : indent) +
					jsesc(key, options) + ':' +
					(compact ? '' : ' ') +
					jsesc(value, options)
				);
			});
			if (isEmpty) {
				return '{}';
			}
			return '{' + newLine + result.join(',' + newLine) + newLine +
				(compact ? '' : oldIndent) + '}';
		}
	}

	const regex = options.escapeEverything ? escapeEverythingRegex : escapeNonAsciiRegex;
	result = argument.replace(regex, (char, pair, lone, quoteChar, index, string) => {
		if (pair) {
			if (options.minimal) return pair;
			const first = pair.charCodeAt(0);
			const second = pair.charCodeAt(1);
			if (options.es6) {
				// https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
				const codePoint = (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;
				const hex = hexadecimal(codePoint, lowercaseHex);
				return '\\u{' + hex + '}';
			}
			return fourHexEscape(hexadecimal(first, lowercaseHex)) + fourHexEscape(hexadecimal(second, lowercaseHex));
		}

		if (lone) {
			return fourHexEscape(hexadecimal(lone.charCodeAt(0), lowercaseHex));
		}

		if (
			char == '\0' &&
			!json &&
			!regexDigit.test(string.charAt(index + 1))
		) {
			return '\\0';
		}

		if (quoteChar) {
			if (quoteChar == quote || options.escapeEverything) {
				return '\\' + quoteChar;
			}
			return quoteChar;
		}

		if (regexSingleEscape.test(char)) {
			// no need for a `hasOwnProperty` check here
			return singleEscapes[char];
		}

		if (options.minimal && !regexWhitespace.test(char)) {
			return char;
		}

		const hex = hexadecimal(char.charCodeAt(0), lowercaseHex);
		if (json || hex.length > 2) {
			return fourHexEscape(hex);
		}

		return '\\x' + ('00' + hex).slice(-2);
	});

	if (quote == '`') {
		result = result.replace(/\$\{/g, '\\${');
	}
	if (options.isScriptContext) {
		// https://mathiasbynens.be/notes/etago
		result = result
			.replace(/<\/(script|style)/gi, '<\\/$1')
			.replace(/<!--/g, json ? '\\u003C!--' : '\\x3C!--');
	}
	if (options.wrap) {
		result = quote + result + quote;
	}
	return result;
};

jsesc.version = '3.0.2';

module.exports = jsesc;


---

File name: node_modules\regjsparser\node_modules\jsesc\LICENSE-MIT.txt

Code:
Copyright Mathias Bynens <https://mathiasbynens.be/>

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


---

File name: node_modules\regjsparser\node_modules\jsesc\package.json

Code:
{
  "name": "jsesc",
  "version": "3.0.2",
  "description": "Given some data, jsesc returns the shortest possible stringified & ASCII-safe representation of that data.",
  "homepage": "https://mths.be/jsesc",
  "engines": {
    "node": ">=6"
  },
  "main": "jsesc.js",
  "bin": "bin/jsesc",
  "man": "man/jsesc.1",
  "keywords": [
    "buffer",
    "escape",
    "javascript",
    "json",
    "map",
    "set",
    "string",
    "stringify",
    "tool"
  ],
  "license": "MIT",
  "author": {
    "name": "Mathias Bynens",
    "url": "https://mathiasbynens.be/"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/mathiasbynens/jsesc.git"
  },
  "bugs": "https://github.com/mathiasbynens/jsesc/issues",
  "files": [
    "LICENSE-MIT.txt",
    "jsesc.js",
    "bin/",
    "man/"
  ],
  "scripts": {
    "build": "grunt template",
    "coveralls": "istanbul cover --verbose --dir 'coverage' 'tests/tests.js' && coveralls < coverage/lcov.info'",
    "cover": "istanbul cover --report 'html' --verbose --dir 'coverage' 'tests/tests.js'",
    "test": "mocha tests"
  },
  "devDependencies": {
    "coveralls": "^2.11.6",
    "grunt": "^0.4.5",
    "grunt-cli": "^1.3.2",
    "grunt-template": "^0.2.3",
    "istanbul": "^0.4.2",
    "mocha": "^5.2.0",
    "regenerate": "^1.3.0",
    "requirejs": "^2.1.22",
    "unicode-13.0.0": "0.8.0"
  }
}


---

File name: node_modules\regjsparser\node_modules\jsesc\README.md

Code:
# jsesc [![Build status](https://travis-ci.org/mathiasbynens/jsesc.svg?branch=master)](https://travis-ci.org/mathiasbynens/jsesc) [![Code coverage status](https://coveralls.io/repos/mathiasbynens/jsesc/badge.svg)](https://coveralls.io/r/mathiasbynens/jsesc)

Given some data, _jsesc_ returns a stringified representation of that data. jsesc is similar to `JSON.stringify()` except:

1. it outputs JavaScript instead of JSON [by default](#json), enabling support for data structures like ES6 maps and sets;
2. it offers [many options](#api) to customize the output;
3. its output is ASCII-safe [by default](#minimal), thanks to its use of [escape sequences](https://mathiasbynens.be/notes/javascript-escapes) where needed.

For any input, jsesc generates the shortest possible valid printable-ASCII-only output. [Here’s an online demo.](https://mothereff.in/js-escapes)

jsesc’s output can be used instead of `JSON.stringify`’s to avoid [mojibake](https://en.wikipedia.org/wiki/Mojibake) and other encoding issues, or even to [avoid errors](https://twitter.com/annevk/status/380000829643571200) when passing JSON-formatted data (which may contain U+2028 LINE SEPARATOR, U+2029 PARAGRAPH SEPARATOR, or [lone surrogates](https://esdiscuss.org/topic/code-points-vs-unicode-scalar-values#content-14)) to a JavaScript parser or an UTF-8 encoder.

## Installation

Via [npm](https://www.npmjs.com/):

```bash
npm install jsesc
```

In [Node.js](https://nodejs.org/):

```js
const jsesc = require('jsesc');
```

## API

### `jsesc(value, options)`

This function takes a value and returns an escaped version of the value where any characters that are not printable ASCII symbols are escaped using the shortest possible (but valid) [escape sequences for use in JavaScript strings](https://mathiasbynens.be/notes/javascript-escapes). The first supported value type is strings:

```js
jsesc('Ich ♥ Bücher');
// → 'Ich \\u2665 B\\xFCcher'

jsesc('foo 𝌆 bar');
// → 'foo \\uD834\\uDF06 bar'
```

Instead of a string, the `value` can also be an array, an object, a map, a set, or a buffer. In such cases, `jsesc` returns a stringified version of the value where any characters that are not printable ASCII symbols are escaped in the same way.

```js
// Escaping an array
jsesc([
  'Ich ♥ Bücher', 'foo 𝌆 bar'
]);
// → '[\'Ich \\u2665 B\\xFCcher\',\'foo \\uD834\\uDF06 bar\']'

// Escaping an object
jsesc({
  'Ich ♥ Bücher': 'foo 𝌆 bar'
});
// → '{\'Ich \\u2665 B\\xFCcher\':\'foo \\uD834\\uDF06 bar\'}'
```

The optional `options` argument accepts an object with the following options:

#### `quotes`

The default value for the `quotes` option is `'single'`. This means that any occurrences of `'` in the input string are escaped as `\'`, so that the output can be used in a string literal wrapped in single quotes.

```js
jsesc('`Lorem` ipsum "dolor" sit \'amet\' etc.');
// → 'Lorem ipsum "dolor" sit \\\'amet\\\' etc.'

jsesc('`Lorem` ipsum "dolor" sit \'amet\' etc.', {
  'quotes': 'single'
});
// → '`Lorem` ipsum "dolor" sit \\\'amet\\\' etc.'
// → "`Lorem` ipsum \"dolor\" sit \\'amet\\' etc."
```

If you want to use the output as part of a string literal wrapped in double quotes, set the `quotes` option to `'double'`.

```js
jsesc('`Lorem` ipsum "dolor" sit \'amet\' etc.', {
  'quotes': 'double'
});
// → '`Lorem` ipsum \\"dolor\\" sit \'amet\' etc.'
// → "`Lorem` ipsum \\\"dolor\\\" sit 'amet' etc."
```

If you want to use the output as part of a template literal (i.e. wrapped in backticks), set the `quotes` option to `'backtick'`.

```js
jsesc('`Lorem` ipsum "dolor" sit \'amet\' etc.', {
  'quotes': 'backtick'
});
// → '\\`Lorem\\` ipsum "dolor" sit \'amet\' etc.'
// → "\\`Lorem\\` ipsum \"dolor\" sit 'amet' etc."
// → `\\\`Lorem\\\` ipsum "dolor" sit 'amet' etc.`
```

This setting also affects the output for arrays and objects:

```js
jsesc({ 'Ich ♥ Bücher': 'foo 𝌆 bar' }, {
  'quotes': 'double'
});
// → '{"Ich \\u2665 B\\xFCcher":"foo \\uD834\\uDF06 bar"}'

jsesc([ 'Ich ♥ Bücher', 'foo 𝌆 bar' ], {
  'quotes': 'double'
});
// → '["Ich \\u2665 B\\xFCcher","foo \\uD834\\uDF06 bar"]'
```

#### `numbers`

The default value for the `numbers` option is `'decimal'`. This means that any numeric values are represented using decimal integer literals. Other valid options are `binary`, `octal`, and `hexadecimal`, which result in binary integer literals, octal integer literals, and hexadecimal integer literals, respectively.

```js
jsesc(42, {
  'numbers': 'binary'
});
// → '0b101010'

jsesc(42, {
  'numbers': 'octal'
});
// → '0o52'

jsesc(42, {
  'numbers': 'decimal'
});
// → '42'

jsesc(42, {
  'numbers': 'hexadecimal'
});
// → '0x2A'
```

#### `wrap`

The `wrap` option takes a boolean value (`true` or `false`), and defaults to `false` (disabled). When enabled, the output is a valid JavaScript string literal wrapped in quotes. The type of quotes can be specified through the `quotes` setting.

```js
jsesc('Lorem ipsum "dolor" sit \'amet\' etc.', {
  'quotes': 'single',
  'wrap': true
});
// → '\'Lorem ipsum "dolor" sit \\\'amet\\\' etc.\''
// → "\'Lorem ipsum \"dolor\" sit \\\'amet\\\' etc.\'"

jsesc('Lorem ipsum "dolor" sit \'amet\' etc.', {
  'quotes': 'double',
  'wrap': true
});
// → '"Lorem ipsum \\"dolor\\" sit \'amet\' etc."'
// → "\"Lorem ipsum \\\"dolor\\\" sit \'amet\' etc.\""
```

#### `es6`

The `es6` option takes a boolean value (`true` or `false`), and defaults to `false` (disabled). When enabled, any astral Unicode symbols in the input are escaped using [ECMAScript 6 Unicode code point escape sequences](https://mathiasbynens.be/notes/javascript-escapes#unicode-code-point) instead of using separate escape sequences for each surrogate half. If backwards compatibility with ES5 environments is a concern, don’t enable this setting. If the `json` setting is enabled, the value for the `es6` setting is ignored (as if it was `false`).

```js
// By default, the `es6` option is disabled:
jsesc('foo 𝌆 bar 💩 baz');
// → 'foo \\uD834\\uDF06 bar \\uD83D\\uDCA9 baz'

// To explicitly disable it:
jsesc('foo 𝌆 bar 💩 baz', {
  'es6': false
});
// → 'foo \\uD834\\uDF06 bar \\uD83D\\uDCA9 baz'

// To enable it:
jsesc('foo 𝌆 bar 💩 baz', {
  'es6': true
});
// → 'foo \\u{1D306} bar \\u{1F4A9} baz'
```

#### `escapeEverything`

The `escapeEverything` option takes a boolean value (`true` or `false`), and defaults to `false` (disabled). When enabled, all the symbols in the output are escaped — even printable ASCII symbols.

```js
jsesc('lolwat"foo\'bar', {
  'escapeEverything': true
});
// → '\\x6C\\x6F\\x6C\\x77\\x61\\x74\\"\\x66\\x6F\\x6F\\\'\\x62\\x61\\x72'
// → "\\x6C\\x6F\\x6C\\x77\\x61\\x74\\\"\\x66\\x6F\\x6F\\'\\x62\\x61\\x72"
```

This setting also affects the output for string literals within arrays and objects.

#### `minimal`

The `minimal` option takes a boolean value (`true` or `false`), and defaults to `false` (disabled). When enabled, only a limited set of symbols in the output are escaped:

* U+0000 `\0`
* U+0008 `\b`
* U+0009 `\t`
* U+000A `\n`
* U+000C `\f`
* U+000D `\r`
* U+005C `\\`
* U+2028 `\u2028`
* U+2029 `\u2029`
* whatever symbol is being used for wrapping string literals (based on [the `quotes` option](#quotes))
* [lone surrogates](https://esdiscuss.org/topic/code-points-vs-unicode-scalar-values#content-14)

Note: with this option enabled, jsesc output is no longer guaranteed to be ASCII-safe.

```js
jsesc('foo\u2029bar\nbaz©qux𝌆flops', {
  'minimal': false
});
// → 'foo\\u2029bar\\nbaz©qux𝌆flops'
```

#### `isScriptContext`

The `isScriptContext` option takes a boolean value (`true` or `false`), and defaults to `false` (disabled). When enabled, occurrences of [`</script` and `</style`](https://mathiasbynens.be/notes/etago) in the output are escaped as `<\/script` and `<\/style`, and [`<!--`](https://mathiasbynens.be/notes/etago#comment-8) is escaped as `\x3C!--` (or `\u003C!--` when the `json` option is enabled). This setting is useful when jsesc’s output ends up as part of a `<script>` or `<style>` element in an HTML document.

```js
jsesc('foo</script>bar', {
  'isScriptContext': true
});
// → 'foo<\\/script>bar'
```

#### `compact`

The `compact` option takes a boolean value (`true` or `false`), and defaults to `true` (enabled). When enabled, the output for arrays and objects is as compact as possible; it’s not formatted nicely.

```js
jsesc({ 'Ich ♥ Bücher': 'foo 𝌆 bar' }, {
  'compact': true // this is the default
});
// → '{\'Ich \u2665 B\xFCcher\':\'foo \uD834\uDF06 bar\'}'

jsesc({ 'Ich ♥ Bücher': 'foo 𝌆 bar' }, {
  'compact': false
});
// → '{\n\t\'Ich \u2665 B\xFCcher\': \'foo \uD834\uDF06 bar\'\n}'

jsesc([ 'Ich ♥ Bücher', 'foo 𝌆 bar' ], {
  'compact': false
});
// → '[\n\t\'Ich \u2665 B\xFCcher\',\n\t\'foo \uD834\uDF06 bar\'\n]'
```

This setting has no effect on the output for strings.

#### `indent`

The `indent` option takes a string value, and defaults to `'\t'`. When the `compact` setting is disabled (`false`), the value of the `indent` option is used to format the output for arrays and objects.

```js
jsesc({ 'Ich ♥ Bücher': 'foo 𝌆 bar' }, {
  'compact': false,
  'indent': '\t' // this is the default
});
// → '{\n\t\'Ich \u2665 B\xFCcher\': \'foo \uD834\uDF06 bar\'\n}'

jsesc({ 'Ich ♥ Bücher': 'foo 𝌆 bar' }, {
  'compact': false,
  'indent': '  '
});
// → '{\n  \'Ich \u2665 B\xFCcher\': \'foo \uD834\uDF06 bar\'\n}'

jsesc([ 'Ich ♥ Bücher', 'foo 𝌆 bar' ], {
  'compact': false,
  'indent': '  '
});
// → '[\n  \'Ich \u2665 B\xFCcher\',\n\  t\'foo \uD834\uDF06 bar\'\n]'
```

This setting has no effect on the output for strings.

#### `indentLevel`

The `indentLevel` option takes a numeric value, and defaults to `0`. It represents the current indentation level, i.e. the number of times the value of [the `indent` option](#indent) is repeated.

```js
jsesc(['a', 'b', 'c'], {
  'compact': false,
  'indentLevel': 1
});
// → '[\n\t\t\'a\',\n\t\t\'b\',\n\t\t\'c\'\n\t]'

jsesc(['a', 'b', 'c'], {
  'compact': false,
  'indentLevel': 2
});
// → '[\n\t\t\t\'a\',\n\t\t\t\'b\',\n\t\t\t\'c\'\n\t\t]'
```

#### `json`

The `json` option takes a boolean value (`true` or `false`), and defaults to `false` (disabled). When enabled, the output is valid JSON. [Hexadecimal character escape sequences](https://mathiasbynens.be/notes/javascript-escapes#hexadecimal) and [the `\v` or `\0` escape sequences](https://mathiasbynens.be/notes/javascript-escapes#single) are not used. Setting `json: true` implies `quotes: 'double', wrap: true, es6: false`, although these values can still be overridden if needed — but in such cases, the output won’t be valid JSON anymore.

```js
jsesc('foo\x00bar\xFF\uFFFDbaz', {
  'json': true
});
// → '"foo\\u0000bar\\u00FF\\uFFFDbaz"'

jsesc({ 'foo\x00bar\xFF\uFFFDbaz': 'foo\x00bar\xFF\uFFFDbaz' }, {
  'json': true
});
// → '{"foo\\u0000bar\\u00FF\\uFFFDbaz":"foo\\u0000bar\\u00FF\\uFFFDbaz"}'

jsesc([ 'foo\x00bar\xFF\uFFFDbaz', 'foo\x00bar\xFF\uFFFDbaz' ], {
  'json': true
});
// → '["foo\\u0000bar\\u00FF\\uFFFDbaz","foo\\u0000bar\\u00FF\\uFFFDbaz"]'

// Values that are acceptable in JSON but aren’t strings, arrays, or object
// literals can’t be escaped, so they’ll just be preserved:
jsesc([ 'foo\x00bar', [1, '©', { 'foo': true, 'qux': null }], 42 ], {
  'json': true
});
// → '["foo\\u0000bar",[1,"\\u00A9",{"foo":true,"qux":null}],42]'
// Values that aren’t allowed in JSON are run through `JSON.stringify()`:
jsesc([ undefined, -Infinity ], {
  'json': true
});
// → '[null,null]'
```

**Note:** Using this option on objects or arrays that contain non-string values relies on `JSON.stringify()`. For legacy environments like IE ≤ 7, use [a `JSON` polyfill](http://bestiejs.github.io/json3/).

#### `lowercaseHex`

The `lowercaseHex` option takes a boolean value (`true` or `false`), and defaults to `false` (disabled). When enabled, any alphabetical hexadecimal digits in escape sequences as well as any hexadecimal integer literals (see [the `numbers` option](#numbers)) in the output are in lowercase.

```js
jsesc('Ich ♥ Bücher', {
  'lowercaseHex': true
});
// → 'Ich \\u2665 B\\xfccher'
//                    ^^

jsesc(42, {
  'numbers': 'hexadecimal',
  'lowercaseHex': true
});
// → '0x2a'
//      ^^
```

### `jsesc.version`

A string representing the semantic version number.

### Using the `jsesc` binary

To use the `jsesc` binary in your shell, simply install jsesc globally using npm:

```bash
npm install -g jsesc
```

After that you’re able to escape strings from the command line:

```bash
$ jsesc 'föo ♥ bår 𝌆 baz'
f\xF6o \u2665 b\xE5r \uD834\uDF06 baz
```

To escape arrays or objects containing string values, use the `-o`/`--object` option:

```bash
$ jsesc --object '{ "föo": "♥", "bår": "𝌆 baz" }'
{'f\xF6o':'\u2665','b\xE5r':'\uD834\uDF06 baz'}
```

To prettify the output in such cases, use the `-p`/`--pretty` option:

```bash
$ jsesc --pretty '{ "föo": "♥", "bår": "𝌆 baz" }'
{
  'f\xF6o': '\u2665',
  'b\xE5r': '\uD834\uDF06 baz'
}
```

For valid JSON output, use the `-j`/`--json` option:

```bash
$ jsesc --json --pretty '{ "föo": "♥", "bår": "𝌆 baz" }'
{
  "f\u00F6o": "\u2665",
  "b\u00E5r": "\uD834\uDF06 baz"
}
```

Read a local JSON file, escape any non-ASCII symbols, and save the result to a new file:

```bash
$ jsesc --json --object < data-raw.json > data-escaped.json
```

Or do the same with an online JSON file:

```bash
$ curl -sL "http://git.io/aorKgQ" | jsesc --json --object > data-escaped.json
```

See `jsesc --help` for the full list of options.

## Support

As of v3.0.0, jsesc supports Node.js v6+ only.

Older versions (up to jsesc v1.3.0) support Chrome 27, Firefox 3, Safari 4, Opera 10, IE 6, Node.js v6.0.0, Narwhal 0.3.2, RingoJS 0.8-0.11, PhantomJS 1.9.0, and Rhino 1.7RC4. **Note:** Using the `json` option on objects or arrays that contain non-string values relies on `JSON.parse()`. For legacy environments like IE ≤ 7, use [a `JSON` polyfill](https://bestiejs.github.io/json3/).

## Author

| [![twitter/mathias](https://gravatar.com/avatar/24e08a9ea84deb17ae121074d0f17125?s=70)](https://twitter.com/mathias "Follow @mathias on Twitter") |
|---|
| [Mathias Bynens](https://mathiasbynens.be/) |

## License

This library is available under the [MIT](https://mths.be/mit) license.


---

File name: node_modules\regjsparser\package.json

Code:
{
  "name": "regjsparser",
  "version": "0.12.0",
  "author": "'Julian Viereck' <julian.viereck@gmail.com>",
  "license": "BSD-2-Clause",
  "main": "./parser",
  "types": "./parser.d.ts",
  "bin": {
    "regjsparser": "bin/parser"
  },
  "homepage": "https://github.com/jviereck/regjsparser",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/jviereck/regjsparser.git"
  },
  "scripts": {
    "lint": "eslint --max-warnings 0 .",
    "test": "run-p test:* lint",
    "test:src": "node test/index.js",
    "test:types": "tsc test/types.ts --noEmit",
    "bench:baseline": "node ./tools/bench/index.mjs baseline",
    "bench:current": "node ./tools/bench/index.mjs current",
    "bench": "run-s bench:*"
  },
  "files": [
    "bin/",
    "LICENSE.BSD",
    "parser.js",
    "parser.d.ts",
    "README.md"
  ],
  "dependencies": {
    "jsesc": "~3.0.2"
  },
  "devDependencies": {
    "@unicode/unicode-16.0.0": "^1.6.0",
    "eslint": "^9.10.0",
    "eslint-plugin-regexp": "^2.6.0",
    "globals": "^15.9.0",
    "npm-run-all": "^4.1.5",
    "regenerate": "~1.0.1",
    "regjsparser": "^0.11.2",
    "tinybench": "^2.9.0",
    "typescript": "^4.5.2"
  }
}


---

File name: node_modules\regjsparser\parser.d.ts

Code:
type _If<Test, Then, Else> = Test extends true ? Then : Else;

export type Features = {
  lookbehind?: boolean;
  namedGroups?: boolean;
  unicodePropertyEscape?: boolean;
  unicodeSet?: boolean;
  modifiers?: boolean;
};

export type AstNodeType =
  | "alternative"
  | "anchor"
  | "characterClass"
  | "characterClassEscape"
  | "characterClassRange"
  | "disjunction"
  | "dot"
  | "group"
  | "quantifier"
  | "reference"
  | "unicodePropertyEscape"
  | "value";

export type Base<T extends AstNodeType> = {
  range: [number, number];
  raw: string;
  type: T;
};

export type AstNode<F extends Features = {}> =
  | Alternative<F>
  | Anchor
  | CharacterClass<F>
  | CharacterClassEscape
  | CharacterClassRange
  | Disjunction<F>
  | Dot
  | Group<F>
  | Quantifier<F>
  | Reference<F>
  | _If<F["unicodePropertyEscape"], UnicodePropertyEscape, never>
  | Value;

export type RootNode<F extends Features = {}> = Exclude<
  AstNode<F>,
  CharacterClassRange
>;

export type Anchor = Base<"anchor"> & {
  kind: "boundary" | "end" | "not-boundary" | "start";
};

export type CharacterClassEscape = Base<"characterClassEscape"> & {
  value: 'd' | 'D' | 'w' | 'W' | 's' | 'S';
};

export type Value = Base<"value"> & {
  codePoint: number;
  kind:
    | "controlLetter"
    | "hexadecimalEscape"
    | "identifier"
    | "null"
    | "octal"
    | "singleEscape"
    | "symbol"
    | "unicodeCodePointEscape"
    | "unicodeEscape";
};

export type Identifier = Base<"value"> & {
  value: string;
};

export type Alternative<F extends Features = {}> = Base<"alternative"> & {
  body: RootNode<F>[];
};

export type CharacterClassRange = Base<"characterClassRange"> & {
  max: Value;
  min: Value;
};

export type UnicodePropertyEscape = Base<"unicodePropertyEscape"> & {
  negative: boolean;
  value: string;
};

export type CharacterClassBody =
  | CharacterClassEscape
  | CharacterClassRange
  | UnicodePropertyEscape
  | Value;

export type CharacterClass<F extends Features = {}> = Base<"characterClass"> & {
  body: CharacterClassBody[];
  negative: boolean;
  kind: "union" | _If<F["unicodeSet"], "intersection" | "subtraction", never>;
};

export type ModifierFlags = {
  enabling: string;
  disabling: string;
};

export type NonCapturingGroup<F extends Features = {}> = Base<"group"> &
  (
    | {
        behavior:
          | "lookahead"
          | "lookbehind"
          | "negativeLookahead"
          | "negativeLookbehind";
        body: RootNode<F>[];
      }
    | ({
        behavior: "ignore";
        body: RootNode<F>[];
      } & _If<
        F["modifiers"],
        {
          modifierFlags?: ModifierFlags;
        },
        {
          modifierFlags: undefined;
        }
      >)
  );

export type CapturingGroup<F extends Features = {}> = Base<"group"> & {
  behavior: "normal";
  body: RootNode<F>[];
} & _If<
    F["namedGroups"],
    {
      name?: Identifier;
    },
    {
      name: undefined;
    }
  >;

export type Group<F extends Features = {}> =
  | CapturingGroup<F>
  | NonCapturingGroup<F>;

export type Quantifier<F extends Features = {}> = Base<"quantifier"> & {
  body: [RootNode<F>];
  greedy: boolean;
  max?: number;
  min: number;
  symbol?: "?" | "*" | "+";
};

export type Disjunction<F extends Features = {}> = Base<"disjunction"> & {
  body: [RootNode<F>, RootNode<F>, ...RootNode<F>[]];
};

export type Dot = Base<"dot">;

export type NamedReference = Base<"reference"> & {
  matchIndex: undefined;
  name: Identifier;
};

export type IndexReference = Base<"reference"> & {
  matchIndex: number;
  name: undefined;
};

export type Reference<F extends Features = {}> = _If<
  F["namedGroups"],
  IndexReference | NamedReference,
  IndexReference
>;

export function parse<F extends Features = {}>(
  str: string,
  flags: string,
  features?: F
): RootNode<F>;


---

File name: node_modules\regjsparser\parser.js

Code:
// regjsparser
//
// ==================================================================
//
// See ECMA-262 Standard: 15.10.1
//
// NOTE: The ECMA-262 standard uses the term "Assertion" for /^/. Here the
//   term "Anchor" is used.
//
// Pattern ::
//      Disjunction
//
// Disjunction ::
//      Alternative
//      Alternative | Disjunction
//
// Alternative ::
//      [empty]
//      Alternative Term
//
// Term ::
//      Anchor
//      Anchor Quantifier (see https://github.com/jviereck/regjsparser/issues/130)
//      Atom
//      Atom Quantifier
//
// Anchor ::
//      ^
//      $
//      \ b
//      \ B
//      ( ? = Disjunction )
//      ( ? ! Disjunction )
//      ( ? < = Disjunction )
//      ( ? < ! Disjunction )
//
// Quantifier ::
//      QuantifierPrefix
//      QuantifierPrefix ?
//
// QuantifierPrefix ::
//      *
//      +
//      ?
//      { DecimalDigits }
//      { DecimalDigits , }
//      { DecimalDigits , DecimalDigits }
//
// Atom ::
//      PatternCharacter
//      .
//      \ AtomEscape
//      CharacterClass
//      ( GroupSpecifier Disjunction )
//      ( ? : Disjunction )
//
// PatternCharacter ::
//      SourceCharacter but not any of: ^ $ \ . * + ? ( ) [ ] { } |
//
// AtomEscape ::
//      DecimalEscape
//      CharacterClassEscape
//      CharacterEscape
//      k GroupName
//
// CharacterEscape[U] ::
//      ControlEscape
//      c ControlLetter
//      HexEscapeSequence
//      RegExpUnicodeEscapeSequence[?U] (ES6)
//      IdentityEscape[?U]
//
// ControlEscape ::
//      one of f n r t v
// ControlLetter ::
//      one of
//          a b c d e f g h i j k l m n o p q r s t u v w x y z
//          A B C D E F G H I J K L M N O P Q R S T U V W X Y Z
//
// IdentityEscape ::
//      SourceCharacter but not c
//
// DecimalEscape ::
//      DecimalIntegerLiteral [lookahead ∉ DecimalDigit]
//
// CharacterClassEscape ::
//      one of d D s S w W
//
// CharacterClass ::
//      [ [lookahead ∉ {^}] ClassContents ]
//      [ ^ ClassContents ]
//
// ClassContents ::
//      [empty]
//      [~V] NonemptyClassRanges
//      [+V] ClassSetExpression
//
// NonemptyClassRanges ::
//      ClassAtom
//      ClassAtom NonemptyClassRangesNoDash
//      ClassAtom - ClassAtom ClassContents
//
// NonemptyClassRangesNoDash ::
//      ClassAtom
//      ClassAtomNoDash NonemptyClassRangesNoDash
//      ClassAtomNoDash - ClassAtom ClassContents
//
// ClassAtom ::
//      -
//      ClassAtomNoDash
//
// ClassAtomNoDash ::
//      SourceCharacter but not one of \ or ] or -
//      \ ClassEscape
//
// ClassEscape ::
//      DecimalEscape
//      b
//      CharacterEscape
//      CharacterClassEscape
//
// GroupSpecifier ::
//      [empty]
//      ? GroupName
//
// GroupName ::
//      < RegExpIdentifierName >
//
// RegExpIdentifierName ::
//      RegExpIdentifierStart
//      RegExpIdentifierName RegExpIdentifierContinue
//
// RegExpIdentifierStart ::
//      UnicodeIDStart
//      $
//      _
//      \ RegExpUnicodeEscapeSequence
//
// RegExpIdentifierContinue ::
//      UnicodeIDContinue
//      $
//      _
//      \ RegExpUnicodeEscapeSequence
//      <ZWNJ>
//      <ZWJ>
//
// --------------------------------------------------------------
// NOTE: The following productions refer to the "set notation and
//       properties of strings" proposal.
//       https://github.com/tc39/proposal-regexp-set-notation
// --------------------------------------------------------------
//
// ClassSetExpression ::
//      ClassUnion
//      ClassIntersection
//      ClassSubtraction
//
// ClassUnion ::
//      ClassSetRange ClassUnion?
//      ClassSetOperand ClassUnion?
//
// ClassIntersection ::
//      ClassSetOperand && [lookahead ≠ &] ClassSetOperand
//      ClassIntersection && [lookahead ≠ &] ClassSetOperand
//
// ClassSubtraction ::
//      ClassSetOperand -- ClassSetOperand
//      ClassSubtraction -- ClassSetOperand
//
// ClassSetRange ::
//      ClassSetCharacter - ClassSetCharacter
//
// ClassSetOperand ::
//      ClassSetCharacter
//      ClassStringDisjunction
//      NestedClass
//
// NestedClass ::
//      [ [lookahead ≠ ^] ClassContents[+U,+V] ]
//      [ ^ ClassContents[+U,+V] ]
//      \ CharacterClassEscape[+U, +V]
//
// ClassStringDisjunction ::
//      \q{ ClassStringDisjunctionContents }
// 
// ClassStringDisjunctionContents ::
//      ClassString
//      ClassString | ClassStringDisjunctionContents
//
// ClassString ::
//      [empty]
//      NonEmptyClassString
//
// NonEmptyClassString ::
//      ClassSetCharacter NonEmptyClassString?
//
// ClassSetCharacter ::
//      [lookahead ∉ ClassSetReservedDoublePunctuator] SourceCharacter but not ClassSetSyntaxCharacter
//      \ CharacterEscape[+U]
//      \ ClassSetReservedPunctuator
//      \b
//
// ClassSetReservedDoublePunctuator ::
//      one of && !! ## $$ %% ** ++ ,, .. :: ;; << == >> ?? @@ ^^ `` ~~
//
// ClassSetSyntaxCharacter ::
//      one of ( ) [ ] { } / - \ |
//
// ClassSetReservedPunctuator ::
//      one of & - ! # % , : ; < = > @ ` ~
//
// --------------------------------------------------------------
// NOTE: The following productions refer to the
//       "Regular Expression Pattern Modifiers for ECMAScript" proposal.
//       https://github.com/tc39/proposal-regexp-modifiers
// --------------------------------------------------------------
//
// Atom ::
//      ( ? RegularExpressionModifiers : Disjunction )
//      ( ? RegularExpressionModifiers - RegularExpressionModifiers : Disjunction )
//
// RegularExpressionModifiers:
//      [empty]
//      RegularExpressionModifiers RegularExpressionModifier
//
// RegularExpressionModifier:
//      one of i m s

"use strict";
(function() {

  var fromCodePoint = String.fromCodePoint || (function() {
    // Implementation taken from
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint

    var stringFromCharCode = String.fromCharCode;
    var floor = Math.floor;

    return function fromCodePoint() {
      var MAX_SIZE = 0x4000;
      var codeUnits = [];
      var highSurrogate;
      var lowSurrogate;
      var index = -1;
      var length = arguments.length;
      if (!length) {
        return '';
      }
      var result = '';
      while (++index < length) {
        var codePoint = Number(arguments[index]);
        if (
          !isFinite(codePoint) ||       // `NaN`, `+Infinity`, or `-Infinity`
          codePoint < 0 ||              // not a valid Unicode code point
          codePoint > 0x10FFFF ||       // not a valid Unicode code point
          floor(codePoint) != codePoint // not an integer
        ) {
          throw RangeError('Invalid code point: ' + codePoint);
        }
        if (codePoint <= 0xFFFF) { // BMP code point
          codeUnits.push(codePoint);
        } else { // Astral code point; split in surrogate halves
          // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
          codePoint -= 0x10000;
          highSurrogate = (codePoint >> 10) + 0xD800;
          lowSurrogate = (codePoint % 0x400) + 0xDC00;
          codeUnits.push(highSurrogate, lowSurrogate);
        }
        if (index + 1 == length || codeUnits.length > MAX_SIZE) {
          result += stringFromCharCode.apply(null, codeUnits);
          codeUnits.length = 0;
        }
      }
      return result;
    };
  }());

  function parse(str, flags, features) {
    if (!features) {
      features = {};
    }

    function updateRawStart(node, start) {
      node.range[0] = start;
      node.raw = str.substring(start, node.range[1]);
      return node;
    }

    function createAnchor(kind, rawLength) {
      return {
        type: 'anchor',
        kind: kind,
        range: [
          pos - rawLength,
          pos
        ],
        raw: str.substring(pos - rawLength, pos)
      };
    }

    function createValue(kind, codePoint, from, to) {
      return {
        type: 'value',
        kind: kind,
        codePoint: codePoint,
        range: [from, to],
        raw: str.substring(from, to)
      };
    }

    function createEscaped(kind, codePoint, value, fromOffset) {
      fromOffset = fromOffset || 0;
      return createValue(kind, codePoint, pos - (value.length + fromOffset), pos);
    }

    function createCharacter(matches) {
      var _char = matches[0];
      var first = _char.charCodeAt(0);
      if (isUnicodeMode) {
        var second;
        if (_char.length === 1 && first >= 0xD800 && first <= 0xDBFF) {
          second = lookahead().charCodeAt(0);
          if (second >= 0xDC00 && second <= 0xDFFF) {
            // Unicode surrogate pair
            pos++;
            return createValue(
              'symbol',
              (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000,
              pos - 2, pos);
          }
        }
      }
      return createValue('symbol', first, pos - 1, pos);
    }

    function createDisjunction(alternatives, from, to) {
      return {
        type: 'disjunction',
        body: alternatives,
        range: [
          from,
          to
        ],
        raw: str.substring(from, to)
      };
    }

    function createDot() {
      return {
        type: 'dot',
        range: [
          pos - 1,
          pos
        ],
        raw: '.'
      };
    }

    function createCharacterClassEscape(value) {
      return {
        type: 'characterClassEscape',
        value: value,
        range: [
          pos - 2,
          pos
        ],
        raw: str.substring(pos - 2, pos)
      };
    }

    function createReference(matchIndex) {
      var start = pos - 1 - matchIndex.length;
      return {
        type: 'reference',
        matchIndex: parseInt(matchIndex, 10),
        range: [
          start,
          pos
        ],
        raw: str.substring(start, pos)
      };
    }

    function createNamedReference(name) {
      var start = name.range[0] - 3;
      return {
        type: 'reference',
        name: name,
        range: [
          start,
          pos
        ],
        raw: str.substring(start, pos)
      };
    }

    function createGroup(behavior, disjunction, from, to) {
      return {
        type: 'group',
        behavior: behavior,
        body: disjunction,
        range: [
          from,
          to
        ],
        raw: str.substring(from, to)
      };
    }

    function createQuantifier(min, max, from, to, symbol) {
      if (to == null) {
        from = pos - 1;
        to = pos;
      }

      return {
        type: 'quantifier',
        min: min,
        max: max,
        greedy: true,
        body: null, // set later on
        symbol: symbol,
        range: [
          from,
          to
        ],
        raw: str.substring(from, to)
      };
    }

    function createAlternative(terms, from, to) {
      return {
        type: 'alternative',
        body: terms,
        range: [
          from,
          to
        ],
        raw: str.substring(from, to)
      };
    }

    function createCharacterClass(contents, negative, from, to) {
      return {
        type: 'characterClass',
        kind: contents.kind,
        body: contents.body,
        negative: negative,
        range: [
          from,
          to
        ],
        raw: str.substring(from, to)
      };
    }

    function createClassRange(min, max, from, to) {
      // See 15.10.2.15:
      if (min.codePoint > max.codePoint) {
        bail('invalid range in character class', min.raw + '-' + max.raw, from, to);
      }

      return {
        type: 'characterClassRange',
        min: min,
        max: max,
        range: [
          from,
          to
        ],
        raw: str.substring(from, to)
      };
    }

    function createClassStrings(strings, from, to) {
      return {
        type: 'classStrings',
        strings: strings,
        range: [from, to],
        raw: str.substring(from, to)
      };
    }

    function createClassString(characters, from, to) {
      return {
        type: 'classString',
        characters: characters,
        range: [from, to],
        raw: str.substring(from, to)
      };
    }

    function flattenBody(body) {
      if (body.type === 'alternative') {
        return body.body;
      } else {
        return [body];
      }
    }

    function incr(amount) {
      amount = (amount || 1);
      pos += amount;
    }

    function consume(amount) {
      var res = str.substring(pos, pos += amount);
      return res;
    }

    function skip(value) {
      if (!match(value)) {
        bail('character', value);
      }
    }

    function match(value) {
      var len = value.length;
      if (str.substring(pos, pos + len) === value) {
        incr(len);
        return value;
      }
    }

    function matchOne(value) {
      if (str[pos] === value) {
        pos++;
        return value;
      }
    }

    function lookahead() {
      return str[pos];
    }

    function currentOne(value) {
      return str[pos] === value;
    }

    function current(value) {
      var len = value.length;
      return str.substring(pos, pos + len) === value;
    }

    function next(value) {
      return str[pos + 1] === value;
    }

    function matchReg(regExp) {
      var subStr = str.substring(pos);
      var res = subStr.match(regExp);
      if (res) {
        pos += res[0].length;
      }
      return res;
    }

    function parseDisjunction() {
      // Disjunction ::
      //      Alternative
      //      Alternative | Disjunction
      var res = [], from = pos;
      res.push(parseAlternative());

      while (matchOne('|')) {
        res.push(parseAlternative());
      }

      if (res.length === 1) {
        return res[0];
      }

      return createDisjunction(res, from, pos);
    }

    function parseAlternative() {
      var res = [], from = pos;
      var term;

      // Alternative ::
      //      [empty]
      //      Alternative Term
      while (term = parseTerm()) {
        res.push(term);
      }

      if (res.length === 1) {
        return res[0];
      }

      return createAlternative(res, from, pos);
    }

    function parseTerm() {
      // Term ::
      //      Anchor
      //      Atom
      //      Atom Quantifier

      // Term (Annex B)::
      //      [~UnicodeMode] QuantifiableAssertion Quantifier (see https://github.com/jviereck/regjsparser/issues/130)
      //      [~UnicodeMode] ExtendedAtom Quantifier

      // QuantifiableAssertion::
      //      (?= Disjunction[~UnicodeMode, ~UnicodeSetsMode, ?NamedCaptureGroups] )
      //      (?! Disjunction[~UnicodeMode, ~UnicodeSetsMode, ?NamedCaptureGroups] ) 

      if (pos >= str.length || currentOne('|') || currentOne(')')) {
        return null; /* Means: The term is empty */
      }

      var anchor = parseAnchor();
      var quantifier;
      if (anchor) {
        var pos_backup = pos;
        quantifier = parseQuantifier() || false;
        if (quantifier) {
          // Annex B
          if (!isUnicodeMode && anchor.type === "group") {
            quantifier.body = flattenBody(anchor);
            // The quantifier contains the anchor. Therefore, the beginning of the
            // quantifier range is given by the beginning of the anchor.
            updateRawStart(quantifier, anchor.range[0]);
            return quantifier;
          }
          pos = pos_backup;
          bail("Expected atom");
        }
        return anchor;
      }

      // If there is no Anchor, try to parse an atom.
      var atom = parseAtomAndExtendedAtom();
      if (!atom) {
        // Check if a quantifier is following. A quantifier without an atom
        // is an error.
        pos_backup = pos;
        quantifier = parseQuantifier() || false;
        if (quantifier) {
          pos = pos_backup;
          bail("Expected atom");
        }

        // If no unicode flag, then try to parse ExtendedAtom -> ExtendedPatternCharacter.
        //      ExtendedPatternCharacter
        if (!isUnicodeMode && matchOne("{")) {
          atom = createCharacter("{");
        } else {
          bail("Expected atom");
        }
      }

      quantifier = parseQuantifier() || false;
      if (quantifier) {
        var type = atom.type, behavior = atom.behavior;
        if (
          type === "group" &&
          (behavior === "negativeLookbehind" ||
            behavior === "lookbehind")
        ) {
          bail(
            "Invalid quantifier",
            "",
            quantifier.range[0],
            quantifier.range[1]
          );
        }
        quantifier.body = flattenBody(atom);
        // The quantifier contains the atom. Therefore, the beginning of the
        // quantifier range is given by the beginning of the atom.
        updateRawStart(quantifier, atom.range[0]);
        return quantifier;
      }
      return atom;
    }

    function parseGroup(matchA, typeA, matchB, typeB) {
      var type = null, from = pos;

      if (match(matchA)) {
        type = typeA;
      } else if (match(matchB)) {
        type = typeB;
      } else {
        return false;
      }

      return finishGroup(type, from);
    }

    function finishGroup(type, from) {
      var body = parseDisjunction();
      if (!body) {
        bail('Expected disjunction');
      }
      skip(')');
      var group = createGroup(type, flattenBody(body), from, pos);

      if (type == 'normal') {
        // Keep track of the number of closed groups. This is required for
        // parseDecimalEscape(). In case the string is parsed a second time the
        // value already holds the total count and no incrementation is required.
        if (firstIteration) {
          closedCaptureCounter++;
        }
      }
      return group;
    }

    function parseAnchor() {
      // Anchor ::
      //      ^
      //      $
      //      \ b
      //      \ B
      //      ( ? = Disjunction )
      //      ( ? ! Disjunction )

      switch(lookahead()) {
        case '^':
          incr();
          return createAnchor('start', 1 /* rawLength */);
        case '$':
          incr();
          return createAnchor('end', 1 /* rawLength */);
        case '\\': {
          if (next('b')) {
            incr(2);
            return createAnchor('boundary', 2 /* rawLength */);
          } else if (next('B')) {
            incr(2);
            return createAnchor('not-boundary', 2 /* rawLength */);
          }
          break;
        }
        case '(':
          return parseGroup('(?=', 'lookahead', '(?!', 'negativeLookahead');
        default:
          return;
      }
    }

    function parseQuantifier() {
      // Quantifier ::
      //      QuantifierPrefix
      //      QuantifierPrefix ?
      //
      // QuantifierPrefix ::
      //      *
      //      +
      //      ?
      //      { DecimalDigits }
      //      { DecimalDigits , }
      //      { DecimalDigits , DecimalDigits }

      var res, from = pos;
      var quantifier;
      var min, max;

      switch(lookahead()) {
        case '*':
          incr();
          quantifier = createQuantifier(0, undefined, undefined, undefined, '*');
          break;
        case '+':
          incr();
          quantifier = createQuantifier(1, undefined, undefined, undefined, "+");
          break;
        case '?':
          incr();
          quantifier = createQuantifier(0, 1, undefined, undefined, "?");
          break;
        case '{': {
          if (res = matchReg(/^\{(\d+)\}/)) {
            min = parseInt(res[1], 10);
            quantifier = createQuantifier(min, min, from, pos);
          }
          else if (res = matchReg(/^\{(\d+),\}/)) {
            min = parseInt(res[1], 10);
            quantifier = createQuantifier(min, undefined, from, pos);
          }
          else if (res = matchReg(/^\{(\d+),(\d+)\}/)) {
            min = parseInt(res[1], 10);
            max = parseInt(res[2], 10);
            if (min > max) {
              bail('numbers out of order in {} quantifier', '', from, pos);
            }
            quantifier = createQuantifier(min, max, from, pos);
          }
    
          if (min && (!Number.isSafeInteger(min)) || (max && !Number.isSafeInteger(max))) {
            bail("iterations outside JS safe integer range in quantifier", "", from, pos);
          }
        }
      } 

      if (quantifier) {
        if (matchOne('?')) {
          quantifier.greedy = false;
          quantifier.range[1] += 1;
        }
      }

      return quantifier;
    }

    function parseAtomAndExtendedAtom() {
      // Parsing Atom and ExtendedAtom together due to redundancy.
      // ExtendedAtom is defined in Apendix B of the ECMA-262 standard.
      //
      // SEE: https://www.ecma-international.org/ecma-262/10.0/index.html#prod-annexB-ExtendedPatternCharacter
      //
      // Atom ::
      //      PatternCharacter
      //      .
      //      \ AtomEscape
      //      CharacterClass
      //      ( GroupSpecifier Disjunction )
      //      ( ? RegularExpressionModifiers : Disjunction )
      //      ( ? RegularExpressionModifiers - RegularExpressionModifiers : Disjunction )
      // ExtendedAtom ::
      //      ExtendedPatternCharacter
      // ExtendedPatternCharacter ::
      //      SourceCharacter but not one of ^$\.*+?()[|

      var res;

      switch (res = lookahead()) {
        case '.':
          //      .
          incr();
          return createDot();
        case '\\': {
          //      \ AtomEscape
          incr();
          res = parseAtomEscape();
          if (!res) {
            if (!isUnicodeMode && lookahead() == 'c') {
              // B.1.4 ExtendedAtom
              // \[lookahead = c]
              return createValue('symbol', 92, pos - 1, pos);
            }
            bail('atomEscape');
          }
          return res;
        }
        case '[':
          return parseCharacterClass();
        case '(': {
          if (features.lookbehind && (res = parseGroup('(?<=', 'lookbehind', '(?<!', 'negativeLookbehind'))) {
            return res;
          }
          else if (features.namedGroups && match("(?<")) {
            var name = parseIdentifier();
            skip(">");
            var group = finishGroup("normal", name.range[0] - 3);
            group.name = name;
            return group;
          }
          else if (features.modifiers && current("(?") && str[pos + 2] != ":") {
            return parseModifiersGroup();
          }
          else {
            //      ( Disjunction )
            //      ( ? : Disjunction )
            return parseGroup('(?:', 'ignore', '(', 'normal');
          }
        }
        case ']':
        case '}':
          //      ExtendedPatternCharacter, first part. See parseTerm.
          if (!isUnicodeMode) {
            incr();
            return createCharacter(res);
          }
          break;
        case '^':
        case '$':
        case '*':
        case '+':
        case '?':
        case '{':
        case ')':
        case '|':
          break;
        default:
          //      PatternCharacter
          incr();
          return createCharacter(res);
      }
    }

    function parseModifiersGroup() {
      function hasDupChar(str) {
        var i = 0;
        while (i < str.length) {
          if (str.indexOf(str[i], i + 1) != -1) {
            return true;
          }
          i++;
        }
        return false;
      }

      var from = pos;
      incr(2);

      var enablingFlags = matchReg(/^[sim]+/);
      var disablingFlags;
      if(matchOne("-") && lookahead() !== ":"){
        disablingFlags = matchReg(/^[sim]+/);
        if (!disablingFlags) {
          bail('Invalid flags for modifiers group');
        }
      } else if(!enablingFlags){
        bail('Invalid flags for modifiers group');
      }

      enablingFlags = enablingFlags ? enablingFlags[0] : "";
      disablingFlags = disablingFlags ? disablingFlags[0] : "";

      var flags = enablingFlags + disablingFlags;
      if(flags.length > 3 || hasDupChar(flags)) {
        bail('flags cannot be duplicated for modifiers group');
      }

      if(!matchOne(":")) {
        bail('Invalid flags for modifiers group');
      }

      var modifiersGroup = finishGroup("ignore", from);

      modifiersGroup.modifierFlags = {
        enabling: enablingFlags,
        disabling: disablingFlags
      };

      return modifiersGroup;
    }

    function parseUnicodeSurrogatePairEscape(firstEscape, isUnicodeMode) {
      if (isUnicodeMode) {
        var first, second;
        if (firstEscape.kind == 'unicodeEscape' &&
          (first = firstEscape.codePoint) >= 0xD800 && first <= 0xDBFF &&
          currentOne('\\') && next('u') ) {
          var prevPos = pos;
          pos++;
          var secondEscape = parseClassEscape();
          if (secondEscape.kind == 'unicodeEscape' &&
            (second = secondEscape.codePoint) >= 0xDC00 && second <= 0xDFFF) {
            // Unicode surrogate pair
            firstEscape.kind = 'unicodeCodePointEscape';
            firstEscape.codePoint = (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;
            firstEscape.range[1] = pos;
            firstEscape.raw = str.substring(firstEscape.range[0], pos)
          }
          else {
            pos = prevPos;
          }
        }
      }
      return firstEscape;
    }

    function parseClassEscape() {
      return parseAtomEscape(true);
    }

    function parseAtomEscape(insideCharacterClass) {
      // AtomEscape ::
      //      DecimalEscape
      //      CharacterEscape
      //      CharacterClassEscape
      //      k GroupName

      var res, from = pos, ch;

      switch (ch = lookahead()) {
        case '0':
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
          return parseDecimalEscape(insideCharacterClass);
        case 'B': {
          if (insideCharacterClass) {
            bail('\\B not possible inside of CharacterClass', '', from);
            break;
          } else {
            return parseIdentityEscape();
          }
        }
        case 'b': {
          if (insideCharacterClass) {
            // 15.10.2.19
            // The production ClassEscape :: b evaluates by returning the
            // CharSet containing the one character <BS> (Unicode value 0008).
            incr();
            return createEscaped('singleEscape', 0x0008, '\\b');
          } else {
            return parseIdentityEscape();
          }
        }
        case 'c': {
          if (insideCharacterClass) {
            if (!isUnicodeMode && (res = matchReg(/^c(\d)/))) {
              // B.1.4
              // c ClassControlLetter, ClassControlLetter = DecimalDigit
              return createEscaped('controlLetter', res[1] + 16, res[1], 2);
            } else if (!isUnicodeMode && match("c_")) {
              // B.1.4
              // c ClassControlLetter, ClassControlLetter = _
              return createEscaped('controlLetter', 31, '_', 2);
            }
          }
          return parseCharacterEscape();
        }
        // CharacterClassEscape :: one of d D s S w W
        case 'd':
        case 'D':
        case 'w':
        case 'W':
        case 's':
        case 'S':
          incr();
          return createCharacterClassEscape(ch);
        case 'k':
          return parseNamedReference() || parseIdentityEscape();
        case 'p':
        case 'P':
          return parseUnicodePropertyEscape() || parseIdentityEscape();
        case '-': {
          //     [+U] -
          if (insideCharacterClass && isUnicodeMode) {
            incr();
            return createEscaped('singleEscape', 0x002d, '\\-');
          }
          return parseIdentityEscape();
        }
        default:
          return parseCharacterEscape();
      }
    }


    function parseDecimalEscape(insideCharacterClass) {
      // DecimalEscape ::
      //      DecimalIntegerLiteral [lookahead ∉ DecimalDigit]

      var res, match, from = pos;

      if (res = matchReg(/^(?!0)\d+/)) {
        match = res[0];
        var refIdx = parseInt(res[0], 10);
        if (refIdx <= closedCaptureCounter && !insideCharacterClass) {
          // If the number is smaller than the normal-groups found so
          // far, then it is a reference...
          return createReference(res[0]);
        } else {
          // ... otherwise it needs to be interpreted as a octal (if the
          // number is in an octal format). If it is NOT octal format,
          // then the slash is ignored and the number is matched later
          // as normal characters.

          // Recall the negative decision to decide if the input must be parsed
          // a second time with the total normal-groups.
          backrefDenied.push(refIdx);

          // \1 octal escapes are disallowed in unicode mode, but they might
          // be references to groups which haven't been parsed yet.
          // We must parse a second time to determine if \1 is a reference
          // or an octal scape, and then we can report the error.
          if (firstIteration) {
            shouldReparse = true;
          } else {
            bailOctalEscapeIfUnicode(from, pos);
          }

          // Reset the position again, as maybe only parts of the previous
          // matched numbers are actual octal numbers. E.g. in '019' only
          // the '01' should be matched.
          incr(-res[0].length);
          if (res = matchReg(/^[0-7]{1,3}/)) {
            return createEscaped('octal', parseInt(res[0], 8), res[0], 1);
          } else {
            // If we end up here, we have a case like /\91/. Then the
            // first slash is to be ignored and the 9 & 1 to be treated
            // like ordinary characters. Create a character for the
            // first number only here - other number-characters
            // (if available) will be matched later.
            var start = pos;
            res = createCharacter(matchReg(/^[89]/));
            return updateRawStart(res, start - 1);
          }
        }
      }
      // Only allow octal numbers in the following. All matched numbers start
      // with a zero (if the do not, the previous if-branch is executed).
      // If the number is not octal format and starts with zero (e.g. `091`)
      // then only the zeros `0` is treated here and the `91` are ordinary
      // characters.
      // Example:
      //   /\091/.exec('\091')[0].length === 3
      else if (res = matchReg(/^[0-7]{1,3}/)) {
        match = res[0];
        if (match !== '0') {
          bailOctalEscapeIfUnicode(from, pos);
        }
        if (/^0{1,3}$/.test(match)) {
          // If they are all zeros, then only take the first one.
          return createEscaped('null', 0x0000, '0', match.length);
        } else {
          return createEscaped('octal', parseInt(match, 8), match, 1);
        }
      }
      return false;
    }

    function bailOctalEscapeIfUnicode(from, pos) {
      if (isUnicodeMode) {
        bail("Invalid decimal escape in unicode mode", null, from, pos);
      }
    }

    function parseUnicodePropertyEscape() {
      var res, from = pos;
      if (features.unicodePropertyEscape && isUnicodeMode && (res = matchReg(/^([pP])\{([^}]+)\}/))) {
        // https://github.com/jviereck/regjsparser/issues/77
        return {
          type: 'unicodePropertyEscape',
          negative: res[1] === 'P',
          value: res[2],
          range: [from - 1, pos],
          raw: str.substring(from - 1, pos)
        };
      }
      return false;
    }

    function parseNamedReference() {
      if (features.namedGroups && matchReg(/^k<(?=.*?>)/)) {
        var name = parseIdentifier();
        skip('>');
        return createNamedReference(name);
      }
    }

    function parseRegExpUnicodeEscapeSequence(isUnicodeMode) {
      var res;
      if (res = matchReg(/^u([0-9a-fA-F]{4})/)) {
        // UnicodeEscapeSequence
        return parseUnicodeSurrogatePairEscape(
          createEscaped('unicodeEscape', parseInt(res[1], 16), res[1], 2),
          isUnicodeMode
        );
      } else if (isUnicodeMode && (res = matchReg(/^u\{([0-9a-fA-F]+)\}/))) {
        // RegExpUnicodeEscapeSequence (ES6 Unicode code point escape)
        return createEscaped('unicodeCodePointEscape', parseInt(res[1], 16), res[1], 4);
      }
    }

    function parseCharacterEscape() {
      // CharacterEscape ::
      //      ControlEscape
      //      c ControlLetter
      //      HexEscapeSequence
      //      UnicodeEscapeSequence[?UnicodeMode]
      //      IdentityEscape[?UnicodeMode]

      var res;
      var from = pos;
      switch (lookahead()) {
        case 't':
          incr();
          return createEscaped('singleEscape', 0x009, '\\t');
        case 'n':
          incr();
          return createEscaped('singleEscape', 0x00A, '\\n');
        case 'v':
          incr();
          return createEscaped('singleEscape', 0x00B, '\\v');
        case 'f':
          incr();
          return createEscaped('singleEscape', 0x00C, '\\f');
        case 'r':
          incr();
          return createEscaped('singleEscape', 0x00D, '\\r');
        case 'c':
          if (res = matchReg(/^c([a-zA-Z])/)) {
            // c ControlLetter
            return createEscaped('controlLetter', res[1].charCodeAt(0) % 32, res[1], 2);
          }
          break;
        case 'x':
          if (res = matchReg(/^x([0-9a-fA-F]{2})/)) {
            // HexEscapeSequence
            return createEscaped('hexadecimalEscape', parseInt(res[1], 16), res[1], 2);
          }
          break;
        case 'u':
          if (res = parseRegExpUnicodeEscapeSequence(isUnicodeMode)) {
            if (!res || res.codePoint > 0x10FFFF) {
              bail('Invalid escape sequence', null, from, pos);
            }
            return res;
          }
          break;
      }
      // IdentityEscape
      return parseIdentityEscape();
    }

    function parseIdentifierAtom(check) {
      // RegExpIdentifierStart[UnicodeMode] ::
      //      IdentifierStartChar
      //      \ RegExpUnicodeEscapeSequence[+UnicodeMode]
      //      [~UnicodeMode] UnicodeLeadSurrogate UnicodeTrailSurrogate
      //
      // RegExpIdentifierPart[UnicodeMode] ::
      //      IdentifierPartChar
      //      \ RegExpUnicodeEscapeSequence[+UnicodeMode]
      //      [~UnicodeMode] UnicodeLeadSurrogate UnicodeTrailSurrogate
      
      
      var ch = lookahead();
      var from = pos;
      if (ch === '\\') {
        incr();
        var esc = parseRegExpUnicodeEscapeSequence(true);
        if (!esc || !check(esc.codePoint)) {
          bail('Invalid escape sequence', null, from, pos);
        }
        return fromCodePoint(esc.codePoint);
      }
      var code = ch.charCodeAt(0);
      if (code >= 0xD800 && code <= 0xDBFF) {
        ch += str[pos + 1];
        var second = ch.charCodeAt(1);
        if (second >= 0xDC00 && second <= 0xDFFF) {
          // Unicode surrogate pair
          code = (code - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;
        }
      }
      if (!check(code)) return;
      incr();
      if (code > 0xFFFF) incr();
      return ch;
    }

    function parseIdentifier() {
      // RegExpIdentifierName ::
      //      RegExpIdentifierStart
      //      RegExpIdentifierName RegExpIdentifierContinue
      //
      // RegExpIdentifierStart ::
      //      UnicodeIDStart
      //      $
      //      _
      //      \ RegExpUnicodeEscapeSequence
      //
      // RegExpIdentifierContinue ::
      //      UnicodeIDContinue
      //      $
      //      _
      //      \ RegExpUnicodeEscapeSequence
      //      <ZWNJ>
      //      <ZWJ>

      var start = pos;
      var res = parseIdentifierAtom(isIdentifierStart);
      if (!res) {
        bail('Invalid identifier');
      }

      var ch;
      while (ch = parseIdentifierAtom(isIdentifierPart)) {
        res += ch;
      }

      return {
        type: 'identifier',
        value: res,
        range: [start, pos],
        raw: str.substring(start, pos)
      };
    }

    function isIdentifierStart(ch) {
      // ECMAScript (Unicode v16.0.0) NonAsciiIdentifierStart:
      // Generated by `tools/generate-identifier-regex.js`.

      var NonAsciiIdentifierStart = /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u0870-\u0887\u0889-\u088E\u08A0-\u08C9\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C5D\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u1711\u171F-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4C\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C8A\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7CD\uA7D0\uA7D1\uA7D3\uA7D5-\uA7DC\uA7F2-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF2D-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDD70-\uDD7A\uDD7C-\uDD8A\uDD8C-\uDD92\uDD94\uDD95\uDD97-\uDDA1\uDDA3-\uDDB1\uDDB3-\uDDB9\uDDBB\uDDBC\uDDC0-\uDDF3\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67\uDF80-\uDF85\uDF87-\uDFB0\uDFB2-\uDFBA]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE35\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2\uDD00-\uDD23\uDD4A-\uDD65\uDD6F-\uDD85\uDE80-\uDEA9\uDEB0\uDEB1\uDEC2-\uDEC4\uDF00-\uDF1C\uDF27\uDF30-\uDF45\uDF70-\uDF81\uDFB0-\uDFC4\uDFE0-\uDFF6]|\uD804[\uDC03-\uDC37\uDC71\uDC72\uDC75\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD44\uDD47\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE3F\uDE40\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61\uDF80-\uDF89\uDF8B\uDF8E\uDF90-\uDFB5\uDFB7\uDFD1\uDFD3]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC5F-\uDC61\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDEB8\uDF00-\uDF1A\uDF40-\uDF46]|\uD806[\uDC00-\uDC2B\uDCA0-\uDCDF\uDCFF-\uDD06\uDD09\uDD0C-\uDD13\uDD15\uDD16\uDD18-\uDD2F\uDD3F\uDD41\uDDA0-\uDDA7\uDDAA-\uDDD0\uDDE1\uDDE3\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE89\uDE9D\uDEB0-\uDEF8\uDFC0-\uDFE0]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46\uDD60-\uDD65\uDD67\uDD68\uDD6A-\uDD89\uDD98\uDEE0-\uDEF2\uDF02\uDF04-\uDF10\uDF12-\uDF33\uDFB0]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|\uD80B[\uDF90-\uDFF0]|[\uD80C\uD80E\uD80F\uD81C-\uD820\uD822\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879\uD880-\uD883\uD885-\uD887][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2F\uDC41-\uDC46\uDC60-\uDFFF]|\uD810[\uDC00-\uDFFA]|\uD811[\uDC00-\uDE46]|\uD818[\uDD00-\uDD1D]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE70-\uDEBE\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDD40-\uDD6C\uDE40-\uDE7F\uDF00-\uDF4A\uDF50\uDF93-\uDF9F\uDFE0\uDFE1\uDFE3]|\uD821[\uDC00-\uDFF7]|\uD823[\uDC00-\uDCD5\uDCFF-\uDD08]|\uD82B[\uDFF0-\uDFF3\uDFF5-\uDFFB\uDFFD\uDFFE]|\uD82C[\uDC00-\uDD22\uDD32\uDD50-\uDD52\uDD55\uDD64-\uDD67\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD837[\uDF00-\uDF1E\uDF25-\uDF2A]|\uD838[\uDC30-\uDC6D\uDD00-\uDD2C\uDD37-\uDD3D\uDD4E\uDE90-\uDEAD\uDEC0-\uDEEB]|\uD839[\uDCD0-\uDCEB\uDDD0-\uDDED\uDDF0\uDFE0-\uDFE6\uDFE8-\uDFEB\uDFED\uDFEE\uDFF0-\uDFFE]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43\uDD4B]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDEDF\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF39\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0\uDFF0-\uDFFF]|\uD87B[\uDC00-\uDE5D]|\uD87E[\uDC00-\uDE1D]|\uD884[\uDC00-\uDF4A\uDF50-\uDFFF]|\uD888[\uDC00-\uDFAF]/;

      return (ch === 36) || (ch === 95) ||  // $ (dollar) and _ (underscore)
        (ch >= 65 && ch <= 90) ||         // A..Z
        (ch >= 97 && ch <= 122) ||        // a..z
        ((ch >= 0x80) && NonAsciiIdentifierStart.test(fromCodePoint(ch)));
    }

    // Taken from the Esprima parser.
    function isIdentifierPart(ch) {
      // ECMAScript (Unicode v16.0.0) NonAsciiIdentifierPartOnly:
      // Generated by `tools/generate-identifier-regex.js`.
      // eslint-disable-next-line no-misleading-character-class
      var NonAsciiIdentifierPartOnly = /[\xB7\u0300-\u036F\u0387\u0483-\u0487\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u0669\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u06F0-\u06F9\u0711\u0730-\u074A\u07A6-\u07B0\u07C0-\u07C9\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u0897-\u089F\u08CA-\u08E1\u08E3-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0966-\u096F\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u09E6-\u09EF\u09FE\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A66-\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0AE6-\u0AEF\u0AFA-\u0AFF\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B55-\u0B57\u0B62\u0B63\u0B66-\u0B6F\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0BE6-\u0BEF\u0C00-\u0C04\u0C3C\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0CE6-\u0CEF\u0CF3\u0D00-\u0D03\u0D3B\u0D3C\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D66-\u0D6F\u0D81-\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0E50-\u0E59\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECE\u0ED0-\u0ED9\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1040-\u1049\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F-\u109D\u135D-\u135F\u1369-\u1371\u1712-\u1715\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u17E0-\u17E9\u180B-\u180D\u180F-\u1819\u18A9\u1920-\u192B\u1930-\u193B\u1946-\u194F\u19D0-\u19DA\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AB0-\u1ABD\u1ABF-\u1ACE\u1B00-\u1B04\u1B34-\u1B44\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BB0-\u1BB9\u1BE6-\u1BF3\u1C24-\u1C37\u1C40-\u1C49\u1C50-\u1C59\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF4\u1CF7-\u1CF9\u1DC0-\u1DFF\u200C\u200D\u203F\u2040\u2054\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\u30FB\uA620-\uA629\uA66F\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA82C\uA880\uA881\uA8B4-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F1\uA8FF-\uA909\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9D0-\uA9D9\uA9E5\uA9F0-\uA9F9\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA50-\uAA59\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uABF0-\uABF9\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFF10-\uFF19\uFF3F\uFF65]|\uD800[\uDDFD\uDEE0\uDF76-\uDF7A]|\uD801[\uDCA0-\uDCA9]|\uD802[\uDE01-\uDE03\uDE05\uDE06\uDE0C-\uDE0F\uDE38-\uDE3A\uDE3F\uDEE5\uDEE6]|\uD803[\uDD24-\uDD27\uDD30-\uDD39\uDD40-\uDD49\uDD69-\uDD6D\uDEAB\uDEAC\uDEFC-\uDEFF\uDF46-\uDF50\uDF82-\uDF85]|\uD804[\uDC00-\uDC02\uDC38-\uDC46\uDC66-\uDC70\uDC73\uDC74\uDC7F-\uDC82\uDCB0-\uDCBA\uDCC2\uDCF0-\uDCF9\uDD00-\uDD02\uDD27-\uDD34\uDD36-\uDD3F\uDD45\uDD46\uDD73\uDD80-\uDD82\uDDB3-\uDDC0\uDDC9-\uDDCC\uDDCE-\uDDD9\uDE2C-\uDE37\uDE3E\uDE41\uDEDF-\uDEEA\uDEF0-\uDEF9\uDF00-\uDF03\uDF3B\uDF3C\uDF3E-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF57\uDF62\uDF63\uDF66-\uDF6C\uDF70-\uDF74\uDFB8-\uDFC0\uDFC2\uDFC5\uDFC7-\uDFCA\uDFCC-\uDFD0\uDFD2\uDFE1\uDFE2]|\uD805[\uDC35-\uDC46\uDC50-\uDC59\uDC5E\uDCB0-\uDCC3\uDCD0-\uDCD9\uDDAF-\uDDB5\uDDB8-\uDDC0\uDDDC\uDDDD\uDE30-\uDE40\uDE50-\uDE59\uDEAB-\uDEB7\uDEC0-\uDEC9\uDED0-\uDEE3\uDF1D-\uDF2B\uDF30-\uDF39]|\uD806[\uDC2C-\uDC3A\uDCE0-\uDCE9\uDD30-\uDD35\uDD37\uDD38\uDD3B-\uDD3E\uDD40\uDD42\uDD43\uDD50-\uDD59\uDDD1-\uDDD7\uDDDA-\uDDE0\uDDE4\uDE01-\uDE0A\uDE33-\uDE39\uDE3B-\uDE3E\uDE47\uDE51-\uDE5B\uDE8A-\uDE99\uDFF0-\uDFF9]|\uD807[\uDC2F-\uDC36\uDC38-\uDC3F\uDC50-\uDC59\uDC92-\uDCA7\uDCA9-\uDCB6\uDD31-\uDD36\uDD3A\uDD3C\uDD3D\uDD3F-\uDD45\uDD47\uDD50-\uDD59\uDD8A-\uDD8E\uDD90\uDD91\uDD93-\uDD97\uDDA0-\uDDA9\uDEF3-\uDEF6\uDF00\uDF01\uDF03\uDF34-\uDF3A\uDF3E-\uDF42\uDF50-\uDF5A]|\uD80D[\uDC40\uDC47-\uDC55]|\uD818[\uDD1E-\uDD39]|\uD81A[\uDE60-\uDE69\uDEC0-\uDEC9\uDEF0-\uDEF4\uDF30-\uDF36\uDF50-\uDF59]|\uD81B[\uDD70-\uDD79\uDF4F\uDF51-\uDF87\uDF8F-\uDF92\uDFE4\uDFF0\uDFF1]|\uD82F[\uDC9D\uDC9E]|\uD833[\uDCF0-\uDCF9\uDF00-\uDF2D\uDF30-\uDF46]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD835[\uDFCE-\uDFFF]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A\uDC8F\uDD30-\uDD36\uDD40-\uDD49\uDEAE\uDEEC-\uDEF9]|\uD839[\uDCEC-\uDCF9\uDDEE\uDDEF\uDDF1-\uDDFA]|\uD83A[\uDCD0-\uDCD6\uDD44-\uDD4A\uDD50-\uDD59]|\uD83E[\uDFF0-\uDFF9]|\uDB40[\uDD00-\uDDEF]/

      return isIdentifierStart(ch) ||
        (ch >= 48 && ch <= 57) ||         // 0..9
        ((ch >= 0x80) && NonAsciiIdentifierPartOnly.test(fromCodePoint(ch)));
    }

    function parseIdentityEscape() {
      // IdentityEscape ::
      //      [+U] SyntaxCharacter
      //      [+U] /
      //      [~U] SourceCharacterIdentityEscape[?N]
      // SourceCharacterIdentityEscape[?N] ::
      //      [~N] SourceCharacter but not c
      //      [+N] SourceCharacter but not one of c or k


      var tmp;
      var l = lookahead();
      if (
        (isUnicodeMode && /[\^$.*+?()\\[\]{}|/]/.test(l)) ||
        (!isUnicodeMode && l !== "c")
      ) {
        if (l === "k" && features.lookbehind) {
          return null;
        }
        tmp = consume(1);
        return createEscaped('identifier', tmp.charCodeAt(0), tmp, 1);
      }

      return null;
    }

    function parseCharacterClass() {
      // CharacterClass ::
      //      [ [lookahead ∉ {^}] ClassContents ]
      //      [ ^ ClassContents ]

      var res, from = pos;
      if (res = match("[^")) {
        res = parseClassContents();
        skip(']');
        return createCharacterClass(res, true, from, pos);
      } else if (matchOne('[')) {
        res = parseClassContents();
        skip(']');
        return createCharacterClass(res, false, from, pos);
      }

      return null;
    }

    function parseClassContents() {
      // ClassContents ::
      //      [empty]
      //      [~V] NonemptyClassRanges
      //      [+V] ClassSetExpression

      var res;
      if (currentOne(']')) {
        // Empty array means nothing inside of the ClassRange.
        return { kind: 'union', body: [] };
      } else if (hasUnicodeSetFlag) {
        return parseClassSetExpression();
      } else {
        res = parseNonemptyClassRanges();
        if (!res) {
          bail('nonEmptyClassRanges');
        }
        return { kind: 'union', body: res };
      }
    }

    function parseHelperClassContents(atom) {
      var from, to, res, atomTo, dash;
      if (currentOne('-') && !next(']')) {
        // ClassAtom - ClassAtom ClassContents
        from = atom.range[0];
        incr();
        dash = createCharacter('-');

        atomTo = parseClassAtom();
        if (!atomTo) {
          bail('classAtom');
        }
        to = pos;

        // Parse the next class range if exists.
        var classContents = parseClassContents();
        if (!classContents) {
          bail('classContents');
        }

        // Check if both the from and atomTo have codePoints.
        if (!('codePoint' in atom) || !('codePoint' in atomTo)) {
          if (!isUnicodeMode) {
            // If not, don't create a range but treat them as
            // `atom` `-` `atom` instead.
            //
            // SEE: https://tc39.es/ecma262/#sec-regular-expression-patterns-semantics
            //   NonemptyClassRanges::ClassAtom - ClassAtom ClassContents
            //   CharacterRangeOrUnion
            res = [atom, dash, atomTo];
          } else {
            // With unicode flag, both sides must have codePoints if
            // one side has a codePoint.
            //
            // SEE: https://tc39.es/ecma262/#sec-patterns-static-semantics-early-errors
            //   NonemptyClassRanges :: ClassAtom - ClassAtom ClassContents
            bail('invalid character class');
          }
        } else {
          res = [createClassRange(atom, atomTo, from, to)];
        }

        if (classContents.type === 'empty') {
          return res;
        }
        return res.concat(classContents.body);
      }

      res = parseNonemptyClassRangesNoDash();
      if (!res) {
        bail('nonEmptyClassRangesNoDash');
      }

      return [atom].concat(res);
    }

    function parseNonemptyClassRanges() {
      // NonemptyClassRanges ::
      //      ClassAtom
      //      ClassAtom NonemptyClassRangesNoDash
      //      ClassAtom - ClassAtom ClassContents

      var atom = parseClassAtom();
      if (!atom) {
        bail('classAtom');
      }

      if (currentOne(']')) {
        // ClassAtom
        return [atom];
      }

      // ClassAtom NonemptyClassRangesNoDash
      // ClassAtom - ClassAtom ClassContents
      return parseHelperClassContents(atom);
    }

    function parseNonemptyClassRangesNoDash() {
      // NonemptyClassRangesNoDash ::
      //      ClassAtom
      //      ClassAtomNoDash NonemptyClassRangesNoDash
      //      ClassAtomNoDash - ClassAtom ClassContents

      var res = parseClassAtom();
      if (!res) {
        bail('classAtom');
      }
      if (currentOne(']')) {
        //      ClassAtom
        return res;
      }

      // ClassAtomNoDash NonemptyClassRangesNoDash
      // ClassAtomNoDash - ClassAtom ClassContents
      return parseHelperClassContents(res);
    }

    function parseClassAtom() {
      // ClassAtom ::
      //      -
      //      ClassAtomNoDash
      if (matchOne('-')) {
        return createCharacter('-');
      } else {
        return parseClassAtomNoDash();
      }
    }

    function parseClassAtomNoDash() {
      // ClassAtomNoDash ::
      //      SourceCharacter but not one of \ or ] or -
      //      \ ClassEscape
      //
      // ClassAtomNoDash (Annex B)::
      //      \ [lookahead = c] 

      var res;
      switch ((res = lookahead())) {
        case "\\": {
          incr();
          res = parseClassEscape();
          if (!res) {
            if (!isUnicodeMode && lookahead() == "c") {
              return createCharacter("\\");
            }
            bail("classEscape");
          }

          return parseUnicodeSurrogatePairEscape(res, isUnicodeMode);
        }
        case "]":
        case "-":
          break;
        default:
          incr();
          return createCharacter(res);
      }
    }

    function parseClassSetExpression() {
      // ClassSetExpression ::
      //      ClassUnion
      //      ClassIntersection
      //      ClassSubtraction
      //
      // ClassUnion ::
      //      ClassSetRange ClassUnion?
      //      ClassSetOperand ClassUnion?
      //
      // ClassIntersection ::
      //      ClassSetOperand && [lookahead ≠ &] ClassSetOperand
      //      ClassIntersection && [lookahead ≠ &] ClassSetOperand
      //
      // ClassSubtraction ::
      //      ClassSetOperand -- ClassSetOperand
      //      ClassSubtraction -- ClassSetOperand
      //

      var body = [];
      var kind;

      var operand = parseClassSetOperand(/* allowRanges*/ true);
      body.push(operand);

      if (operand.type === 'classRange') {
        kind = 'union';
      } else if (currentOne('&')) {
        kind = 'intersection';
      } else if (currentOne('-')) {
        kind = 'subtraction';
      } else {
        kind = 'union';
      }

      while (!currentOne(']')) {
        if (kind === 'intersection') {
          skip('&');
          skip('&');
          if (currentOne('&')) {
            bail('&& cannot be followed by &. Wrap it in brackets: &&[&].');
          }
        } else if (kind === 'subtraction') {
          skip('-');
          skip('-');
        }

        operand = parseClassSetOperand(/* allowRanges*/ kind === 'union');
        body.push(operand);
      }

      return { kind: kind, body: body };
    }

    function parseClassSetOperand(allowRanges) {
      // ClassSetOperand ::
      //      ClassSetCharacter
      //      ClassStringDisjunction
      //      NestedClass
      //
      // NestedClass ::
      //      [ [lookahead ≠ ^] ClassContents[+U,+V] ]
      //      [ ^ ClassContents[+U,+V] ]
      //      \ CharacterClassEscape[+U, +V]
      //
      // ClassSetRange ::
      //      ClassSetCharacter - ClassSetCharacter
      //
      // ClassSetCharacter ::
      //      [lookahead ∉ ClassReservedDouble] SourceCharacter but not ClassSetSyntaxCharacter
      //      \ CharacterEscape[+U]
      //      \ ClassHalfOfDouble
      //      \ b
      //
      // ClassSyntaxCharacter ::
      //      one of ( ) [ ] { } / - \ |

      var from = pos;
      var start, res;

      if (matchOne('\\')) {
        // ClassSetOperand ::
        //      ...
        //      ClassStringDisjunction
        //      NestedClass
        //
        // NestedClass ::
        //      ...
        //      \ CharacterClassEscape[+U, +V]
        if (match('q{')) {
          return parseClassStringDisjunction();
        } else if (res = parseClassEscape()) {
          start = res;
        } else if (res = parseClassSetCharacterEscapedHelper()) {
          return res;
        } else {
          bail('Invalid escape', '\\' + lookahead(), from);
        }
      } else if (res = parseClassSetCharacterUnescapedHelper()) {
        start = res;
      } else if (res = parseCharacterClass()) {
        // ClassSetOperand ::
        //      ...
        //      NestedClass
        //
        // NestedClass ::
        //      [ [lookahead ≠ ^] ClassContents[+U,+V] ]
        //      [ ^ ClassContents[+U,+V] ]
        //      ...
        return res;
      } else {
        bail('Invalid character', lookahead());
      }

      if (allowRanges && currentOne('-') && !next('-')) {
        incr();

        if (res = parseClassSetCharacter()) {
          // ClassSetRange ::
          //      ClassSetCharacter - ClassSetCharacter
          return createClassRange(start, res, from, pos);
        }

        bail('Invalid range end', lookahead());
      }

      // ClassSetOperand ::
      //      ClassSetCharacter
      //      ...
      return start;
    }

    function parseClassSetCharacter() {
      // ClassSetCharacter ::
      //      [lookahead ∉ ClassReservedDouble] SourceCharacter but not ClassSetSyntaxCharacter
      //      \ CharacterEscape[+U]
      //      \ ClassHalfOfDouble
      //      \ b

      if (matchOne('\\')) {
        var res, from = pos;
        if (res = parseClassSetCharacterEscapedHelper()) {
          return res;
        } else {
          bail('Invalid escape', '\\' + lookahead(), from);
        }
      }

      return parseClassSetCharacterUnescapedHelper();
    }

    function parseClassSetCharacterUnescapedHelper() {
      // ClassSetCharacter ::
      //      [lookahead ∉ ClassSetReservedDoublePunctuator] SourceCharacter but not ClassSetSyntaxCharacter
      //      ...

      var res;
      if (matchReg(/^(?:&&|!!|##|\$\$|%%|\*\*|\+\+|,,|\.\.|::|;;|<<|==|>>|\?\?|@@|\^\^|``|~~)/)) {
        bail('Invalid set operation in character class');
      }
      if (res = matchReg(/^[^()[\]{}/\-\\|]/)) {
        return createCharacter(res);
      }
    }

    function parseClassSetCharacterEscapedHelper() {
      // ClassSetCharacter ::
      //      ...
      //      \ CharacterEscape[+U]
      //      \ ClassSetReservedPunctuator
      //      \ b

      var res;
      if (matchOne('b')) {
        return createEscaped('singleEscape', 0x0008, '\\b');
      } else if (matchOne('B')) {
        bail('\\B not possible inside of ClassContents', '', pos - 2);
      } else if (res = matchReg(/^[&\-!#%,:;<=>@`~]/)) {
        return createEscaped('identifier', res[0].codePointAt(0), res[0]);
      } else if (res = parseCharacterEscape()) {
        return res;
      } else {
        return null;
      }
    }

    function parseClassStringDisjunction() {
      // ClassStringDisjunction ::
      //      \q{ ClassStringDisjunctionContents }
      //
      // ClassStringDisjunctionContents ::
      //      ClassString
      //      ClassString | ClassStringDisjunctionContents
      

      // When calling this function, \q{ has already been consumed.
      var from = pos - 3;

      var res = [];
      do {
        res.push(parseClassString());
      } while (matchOne('|'));

      skip('}');

      return createClassStrings(res, from, pos);
    }

    function parseClassString() {
      // ClassString ::
      //      [empty]
      //      NonEmptyClassString
      //
      // NonEmptyClassString ::
      //      ClassSetCharacter NonEmptyClassString?

      var res = [], from = pos;
      var char;

      while (char = parseClassSetCharacter()) {
        res.push(char);
      }

      return createClassString(res, from, pos);
    }

    function bail(message, details, from, to) {
      from = from == null ? pos : from;
      to = to == null ? from : to;

      var contextStart = Math.max(0, from - 10);
      var contextEnd = Math.min(to + 10, str.length);

      // Output a bit of context and a line pointing to where our error is.
      //
      // We are assuming that there are no actual newlines in the content as this is a regular expression.
      var context = '    ' + str.substring(contextStart, contextEnd);
      var pointer = '    ' + new Array(from - contextStart + 1).join(' ') + '^';

      throw SyntaxError(message + ' at position ' + from + (details ? ': ' + details : '') + '\n' + context + '\n' + pointer);
    }

    var backrefDenied = [];
    var closedCaptureCounter = 0;
    var firstIteration = true;
    var shouldReparse = false;
    var hasUnicodeFlag = (flags || "").indexOf("u") !== -1;
    var hasUnicodeSetFlag = (flags || "").indexOf("v") !== -1;
    var isUnicodeMode = hasUnicodeFlag || hasUnicodeSetFlag;
    var pos = 0;

    if (hasUnicodeSetFlag && !features.unicodeSet) {
      throw new Error('The "v" flag is only supported when the .unicodeSet option is enabled.');
    }

    if (hasUnicodeFlag && hasUnicodeSetFlag) {
      throw new Error('The "u" and "v" flags are mutually exclusive.');
    }

    // Convert the input to a string and treat the empty string special.
    str = String(str);
    if (str === '') {
      str = '(?:)';
    }

    var result = parseDisjunction();

    if (result.range[1] !== str.length) {
      bail('Could not parse entire input - got stuck', '', result.range[1]);
    }

    // The spec requires to interpret the `\2` in `/\2()()/` as backreference.
    // As the parser collects the number of capture groups as the string is
    // parsed it is impossible to make these decisions at the point when the
    // `\2` is handled. In case the local decision turns out to be wrong after
    // the parsing has finished, the input string is parsed a second time with
    // the total number of capture groups set.
    //
    // SEE: https://github.com/jviereck/regjsparser/issues/70
    shouldReparse = shouldReparse || backrefDenied.some(function (ref) {
      return ref <= closedCaptureCounter;
    });
    if (shouldReparse) {
      // Parse the input a second time.
      pos = 0;
      firstIteration = false;
      return parseDisjunction();
    }

    return result;
  }

  var regjsparser = {
    parse: parse
  };

  if (typeof module !== 'undefined' && module.exports) {
    module.exports = regjsparser;
  } else {
    window.regjsparser = regjsparser;
  }

}());


---

File name: node_modules\regjsparser\README.md

Code:
# RegJSParser

Parsing the JavaScript's RegExp in JavaScript.

## Installation

```bash
npm install regjsparser
```

## Usage

```js
var parse = require('regjsparser').parse;

var parseTree = parse('^a'); // /^a/
console.log(parseTree);

// Toggle on/off additional features:
var parseTree = parse('^a', '', {
  // SEE: https://github.com/jviereck/regjsparser/pull/78
  unicodePropertyEscape: true,

  // SEE: https://github.com/jviereck/regjsparser/pull/83
  namedGroups: true,

  // SEE: https://github.com/jviereck/regjsparser/pull/89
  lookbehind: true
});
console.log(parseTree);
```

## Testing

To run the tests, run the following command:

```bash
npm test
```

To create a new reference file, execute…

```bash
node test/update-fixtures.js
```

…from the repo top directory.


---

File name: node_modules\require-directory\index.js

Code:
'use strict';

var fs = require('fs'),
  join = require('path').join,
  resolve = require('path').resolve,
  dirname = require('path').dirname,
  defaultOptions = {
    extensions: ['js', 'json', 'coffee'],
    recurse: true,
    rename: function (name) {
      return name;
    },
    visit: function (obj) {
      return obj;
    }
  };

function checkFileInclusion(path, filename, options) {
  return (
    // verify file has valid extension
    (new RegExp('\\.(' + options.extensions.join('|') + ')$', 'i').test(filename)) &&

    // if options.include is a RegExp, evaluate it and make sure the path passes
    !(options.include && options.include instanceof RegExp && !options.include.test(path)) &&

    // if options.include is a function, evaluate it and make sure the path passes
    !(options.include && typeof options.include === 'function' && !options.include(path, filename)) &&

    // if options.exclude is a RegExp, evaluate it and make sure the path doesn't pass
    !(options.exclude && options.exclude instanceof RegExp && options.exclude.test(path)) &&

    // if options.exclude is a function, evaluate it and make sure the path doesn't pass
    !(options.exclude && typeof options.exclude === 'function' && options.exclude(path, filename))
  );
}

function requireDirectory(m, path, options) {
  var retval = {};

  // path is optional
  if (path && !options && typeof path !== 'string') {
    options = path;
    path = null;
  }

  // default options
  options = options || {};
  for (var prop in defaultOptions) {
    if (typeof options[prop] === 'undefined') {
      options[prop] = defaultOptions[prop];
    }
  }

  // if no path was passed in, assume the equivelant of __dirname from caller
  // otherwise, resolve path relative to the equivalent of __dirname
  path = !path ? dirname(m.filename) : resolve(dirname(m.filename), path);

  // get the path of each file in specified directory, append to current tree node, recurse
  fs.readdirSync(path).forEach(function (filename) {
    var joined = join(path, filename),
      files,
      key,
      obj;

    if (fs.statSync(joined).isDirectory() && options.recurse) {
      // this node is a directory; recurse
      files = requireDirectory(m, joined, options);
      // exclude empty directories
      if (Object.keys(files).length) {
        retval[options.rename(filename, joined, filename)] = files;
      }
    } else {
      if (joined !== m.filename && checkFileInclusion(joined, filename, options)) {
        // hash node key shouldn't include file extension
        key = filename.substring(0, filename.lastIndexOf('.'));
        obj = m.require(joined);
        retval[options.rename(key, joined, filename)] = options.visit(obj, joined, filename) || obj;
      }
    }
  });

  return retval;
}

module.exports = requireDirectory;
module.exports.defaults = defaultOptions;


---

File name: node_modules\require-directory\package.json

Code:
{
  "author": "Troy Goode <troygoode@gmail.com> (http://github.com/troygoode/)",
  "name": "require-directory",
  "version": "2.1.1",
  "description": "Recursively iterates over specified directory, require()'ing each file, and returning a nested hash structure containing those modules.",
  "keywords": [
    "require",
    "directory",
    "library",
    "recursive"
  ],
  "homepage": "https://github.com/troygoode/node-require-directory/",
  "main": "index.js",
  "repository": {
    "type": "git",
    "url": "git://github.com/troygoode/node-require-directory.git"
  },
  "contributors": [
    {
      "name": "Troy Goode",
      "email": "troygoode@gmail.com",
      "web": "http://github.com/troygoode/"
    }
  ],
  "license": "MIT",
  "bugs": {
    "url": "http://github.com/troygoode/node-require-directory/issues/"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "devDependencies": {
    "jshint": "^2.6.0",
    "mocha": "^2.1.0"
  },
  "scripts": {
    "test": "mocha",
    "lint": "jshint index.js test/test.js"
  }
}


---

File name: node_modules\resolve\async.js

Code:
'use strict';

module.exports = require('./lib/async');


---

File name: node_modules\resolve\example\async.js

Code:
var resolve = require('../');
resolve('tap', { basedir: __dirname }, function (err, res) {
    if (err) console.error(err);
    else console.log(res);
});


---

File name: node_modules\resolve\example\sync.js

Code:
var resolve = require('../');
var res = resolve.sync('tap', { basedir: __dirname });
console.log(res);


---

File name: node_modules\resolve\index.js

Code:
var async = require('./lib/async');
async.core = require('./lib/core');
async.isCore = require('./lib/is-core');
async.sync = require('./lib/sync');

module.exports = async;


---

File name: node_modules\resolve\lib\async.js

Code:
var fs = require('fs');
var getHomedir = require('./homedir');
var path = require('path');
var caller = require('./caller');
var nodeModulesPaths = require('./node-modules-paths');
var normalizeOptions = require('./normalize-options');
var isCore = require('is-core-module');

var realpathFS = process.platform !== 'win32' && fs.realpath && typeof fs.realpath.native === 'function' ? fs.realpath.native : fs.realpath;

var homedir = getHomedir();
var defaultPaths = function () {
    return [
        path.join(homedir, '.node_modules'),
        path.join(homedir, '.node_libraries')
    ];
};

var defaultIsFile = function isFile(file, cb) {
    fs.stat(file, function (err, stat) {
        if (!err) {
            return cb(null, stat.isFile() || stat.isFIFO());
        }
        if (err.code === 'ENOENT' || err.code === 'ENOTDIR') return cb(null, false);
        return cb(err);
    });
};

var defaultIsDir = function isDirectory(dir, cb) {
    fs.stat(dir, function (err, stat) {
        if (!err) {
            return cb(null, stat.isDirectory());
        }
        if (err.code === 'ENOENT' || err.code === 'ENOTDIR') return cb(null, false);
        return cb(err);
    });
};

var defaultRealpath = function realpath(x, cb) {
    realpathFS(x, function (realpathErr, realPath) {
        if (realpathErr && realpathErr.code !== 'ENOENT') cb(realpathErr);
        else cb(null, realpathErr ? x : realPath);
    });
};

var maybeRealpath = function maybeRealpath(realpath, x, opts, cb) {
    if (opts && opts.preserveSymlinks === false) {
        realpath(x, cb);
    } else {
        cb(null, x);
    }
};

var defaultReadPackage = function defaultReadPackage(readFile, pkgfile, cb) {
    readFile(pkgfile, function (readFileErr, body) {
        if (readFileErr) cb(readFileErr);
        else {
            try {
                var pkg = JSON.parse(body);
                cb(null, pkg);
            } catch (jsonErr) {
                cb(null);
            }
        }
    });
};

var getPackageCandidates = function getPackageCandidates(x, start, opts) {
    var dirs = nodeModulesPaths(start, opts, x);
    for (var i = 0; i < dirs.length; i++) {
        dirs[i] = path.join(dirs[i], x);
    }
    return dirs;
};

module.exports = function resolve(x, options, callback) {
    var cb = callback;
    var opts = options;
    if (typeof options === 'function') {
        cb = opts;
        opts = {};
    }
    if (typeof x !== 'string') {
        var err = new TypeError('Path must be a string.');
        return process.nextTick(function () {
            cb(err);
        });
    }

    opts = normalizeOptions(x, opts);

    var isFile = opts.isFile || defaultIsFile;
    var isDirectory = opts.isDirectory || defaultIsDir;
    var readFile = opts.readFile || fs.readFile;
    var realpath = opts.realpath || defaultRealpath;
    var readPackage = opts.readPackage || defaultReadPackage;
    if (opts.readFile && opts.readPackage) {
        var conflictErr = new TypeError('`readFile` and `readPackage` are mutually exclusive.');
        return process.nextTick(function () {
            cb(conflictErr);
        });
    }
    var packageIterator = opts.packageIterator;

    var extensions = opts.extensions || ['.js'];
    var includeCoreModules = opts.includeCoreModules !== false;
    var basedir = opts.basedir || path.dirname(caller());
    var parent = opts.filename || basedir;

    opts.paths = opts.paths || defaultPaths();

    // ensure that `basedir` is an absolute path at this point, resolving against the process' current working directory
    var absoluteStart = path.resolve(basedir);

    maybeRealpath(
        realpath,
        absoluteStart,
        opts,
        function (err, realStart) {
            if (err) cb(err);
            else init(realStart);
        }
    );

    var res;
    function init(basedir) {
        if ((/^(?:\.\.?(?:\/|$)|\/|([A-Za-z]:)?[/\\])/).test(x)) {
            res = path.resolve(basedir, x);
            if (x === '.' || x === '..' || x.slice(-1) === '/') res += '/';
            if ((/\/$/).test(x) && res === basedir) {
                loadAsDirectory(res, opts.package, onfile);
            } else loadAsFile(res, opts.package, onfile);
        } else if (includeCoreModules && isCore(x)) {
            return cb(null, x);
        } else loadNodeModules(x, basedir, function (err, n, pkg) {
            if (err) cb(err);
            else if (n) {
                return maybeRealpath(realpath, n, opts, function (err, realN) {
                    if (err) {
                        cb(err);
                    } else {
                        cb(null, realN, pkg);
                    }
                });
            } else {
                var moduleError = new Error("Cannot find module '" + x + "' from '" + parent + "'");
                moduleError.code = 'MODULE_NOT_FOUND';
                cb(moduleError);
            }
        });
    }

    function onfile(err, m, pkg) {
        if (err) cb(err);
        else if (m) cb(null, m, pkg);
        else loadAsDirectory(res, function (err, d, pkg) {
            if (err) cb(err);
            else if (d) {
                maybeRealpath(realpath, d, opts, function (err, realD) {
                    if (err) {
                        cb(err);
                    } else {
                        cb(null, realD, pkg);
                    }
                });
            } else {
                var moduleError = new Error("Cannot find module '" + x + "' from '" + parent + "'");
                moduleError.code = 'MODULE_NOT_FOUND';
                cb(moduleError);
            }
        });
    }

    function loadAsFile(x, thePackage, callback) {
        var loadAsFilePackage = thePackage;
        var cb = callback;
        if (typeof loadAsFilePackage === 'function') {
            cb = loadAsFilePackage;
            loadAsFilePackage = undefined;
        }

        var exts = [''].concat(extensions);
        load(exts, x, loadAsFilePackage);

        function load(exts, x, loadPackage) {
            if (exts.length === 0) return cb(null, undefined, loadPackage);
            var file = x + exts[0];

            var pkg = loadPackage;
            if (pkg) onpkg(null, pkg);
            else loadpkg(path.dirname(file), onpkg);

            function onpkg(err, pkg_, dir) {
                pkg = pkg_;
                if (err) return cb(err);
                if (dir && pkg && opts.pathFilter) {
                    var rfile = path.relative(dir, file);
                    var rel = rfile.slice(0, rfile.length - exts[0].length);
                    var r = opts.pathFilter(pkg, x, rel);
                    if (r) return load(
                        [''].concat(extensions.slice()),
                        path.resolve(dir, r),
                        pkg
                    );
                }
                isFile(file, onex);
            }
            function onex(err, ex) {
                if (err) return cb(err);
                if (ex) return cb(null, file, pkg);
                load(exts.slice(1), x, pkg);
            }
        }
    }

    function loadpkg(dir, cb) {
        if (dir === '' || dir === '/') return cb(null);
        if (process.platform === 'win32' && (/^\w:[/\\]*$/).test(dir)) {
            return cb(null);
        }
        if ((/[/\\]node_modules[/\\]*$/).test(dir)) return cb(null);

        maybeRealpath(realpath, dir, opts, function (unwrapErr, pkgdir) {
            if (unwrapErr) return loadpkg(path.dirname(dir), cb);
            var pkgfile = path.join(pkgdir, 'package.json');
            isFile(pkgfile, function (err, ex) {
                // on err, ex is false
                if (!ex) return loadpkg(path.dirname(dir), cb);

                readPackage(readFile, pkgfile, function (err, pkgParam) {
                    if (err) cb(err);

                    var pkg = pkgParam;

                    if (pkg && opts.packageFilter) {
                        pkg = opts.packageFilter(pkg, pkgfile);
                    }
                    cb(null, pkg, dir);
                });
            });
        });
    }

    function loadAsDirectory(x, loadAsDirectoryPackage, callback) {
        var cb = callback;
        var fpkg = loadAsDirectoryPackage;
        if (typeof fpkg === 'function') {
            cb = fpkg;
            fpkg = opts.package;
        }

        maybeRealpath(realpath, x, opts, function (unwrapErr, pkgdir) {
            if (unwrapErr) return cb(unwrapErr);
            var pkgfile = path.join(pkgdir, 'package.json');
            isFile(pkgfile, function (err, ex) {
                if (err) return cb(err);
                if (!ex) return loadAsFile(path.join(x, 'index'), fpkg, cb);

                readPackage(readFile, pkgfile, function (err, pkgParam) {
                    if (err) return cb(err);

                    var pkg = pkgParam;

                    if (pkg && opts.packageFilter) {
                        pkg = opts.packageFilter(pkg, pkgfile);
                    }

                    if (pkg && pkg.main) {
                        if (typeof pkg.main !== 'string') {
                            var mainError = new TypeError('package “' + pkg.name + '” `main` must be a string');
                            mainError.code = 'INVALID_PACKAGE_MAIN';
                            return cb(mainError);
                        }
                        if (pkg.main === '.' || pkg.main === './') {
                            pkg.main = 'index';
                        }
                        loadAsFile(path.resolve(x, pkg.main), pkg, function (err, m, pkg) {
                            if (err) return cb(err);
                            if (m) return cb(null, m, pkg);
                            if (!pkg) return loadAsFile(path.join(x, 'index'), pkg, cb);

                            var dir = path.resolve(x, pkg.main);
                            loadAsDirectory(dir, pkg, function (err, n, pkg) {
                                if (err) return cb(err);
                                if (n) return cb(null, n, pkg);
                                loadAsFile(path.join(x, 'index'), pkg, cb);
                            });
                        });
                        return;
                    }

                    loadAsFile(path.join(x, '/index'), pkg, cb);
                });
            });
        });
    }

    function processDirs(cb, dirs) {
        if (dirs.length === 0) return cb(null, undefined);
        var dir = dirs[0];

        isDirectory(path.dirname(dir), isdir);

        function isdir(err, isdir) {
            if (err) return cb(err);
            if (!isdir) return processDirs(cb, dirs.slice(1));
            loadAsFile(dir, opts.package, onfile);
        }

        function onfile(err, m, pkg) {
            if (err) return cb(err);
            if (m) return cb(null, m, pkg);
            loadAsDirectory(dir, opts.package, ondir);
        }

        function ondir(err, n, pkg) {
            if (err) return cb(err);
            if (n) return cb(null, n, pkg);
            processDirs(cb, dirs.slice(1));
        }
    }
    function loadNodeModules(x, start, cb) {
        var thunk = function () { return getPackageCandidates(x, start, opts); };
        processDirs(
            cb,
            packageIterator ? packageIterator(x, start, thunk, opts) : thunk()
        );
    }
};


---

File name: node_modules\resolve\lib\caller.js

Code:
module.exports = function () {
    // see https://code.google.com/p/v8/wiki/JavaScriptStackTraceApi
    var origPrepareStackTrace = Error.prepareStackTrace;
    Error.prepareStackTrace = function (_, stack) { return stack; };
    var stack = (new Error()).stack;
    Error.prepareStackTrace = origPrepareStackTrace;
    return stack[2].getFileName();
};


---

File name: node_modules\resolve\lib\core.js

Code:
'use strict';

var isCoreModule = require('is-core-module');
var data = require('./core.json');

var core = {};
for (var mod in data) { // eslint-disable-line no-restricted-syntax
    if (Object.prototype.hasOwnProperty.call(data, mod)) {
        core[mod] = isCoreModule(mod);
    }
}
module.exports = core;


---

File name: node_modules\resolve\lib\core.json

Code:
{
	"assert": true,
	"node:assert": [">= 14.18 && < 15", ">= 16"],
	"assert/strict": ">= 15",
	"node:assert/strict": ">= 16",
	"async_hooks": ">= 8",
	"node:async_hooks": [">= 14.18 && < 15", ">= 16"],
	"buffer_ieee754": ">= 0.5 && < 0.9.7",
	"buffer": true,
	"node:buffer": [">= 14.18 && < 15", ">= 16"],
	"child_process": true,
	"node:child_process": [">= 14.18 && < 15", ">= 16"],
	"cluster": ">= 0.5",
	"node:cluster": [">= 14.18 && < 15", ">= 16"],
	"console": true,
	"node:console": [">= 14.18 && < 15", ">= 16"],
	"constants": true,
	"node:constants": [">= 14.18 && < 15", ">= 16"],
	"crypto": true,
	"node:crypto": [">= 14.18 && < 15", ">= 16"],
	"_debug_agent": ">= 1 && < 8",
	"_debugger": "< 8",
	"dgram": true,
	"node:dgram": [">= 14.18 && < 15", ">= 16"],
	"diagnostics_channel": [">= 14.17 && < 15", ">= 15.1"],
	"node:diagnostics_channel": [">= 14.18 && < 15", ">= 16"],
	"dns": true,
	"node:dns": [">= 14.18 && < 15", ">= 16"],
	"dns/promises": ">= 15",
	"node:dns/promises": ">= 16",
	"domain": ">= 0.7.12",
	"node:domain": [">= 14.18 && < 15", ">= 16"],
	"events": true,
	"node:events": [">= 14.18 && < 15", ">= 16"],
	"freelist": "< 6",
	"fs": true,
	"node:fs": [">= 14.18 && < 15", ">= 16"],
	"fs/promises": [">= 10 && < 10.1", ">= 14"],
	"node:fs/promises": [">= 14.18 && < 15", ">= 16"],
	"_http_agent": ">= 0.11.1",
	"node:_http_agent": [">= 14.18 && < 15", ">= 16"],
	"_http_client": ">= 0.11.1",
	"node:_http_client": [">= 14.18 && < 15", ">= 16"],
	"_http_common": ">= 0.11.1",
	"node:_http_common": [">= 14.18 && < 15", ">= 16"],
	"_http_incoming": ">= 0.11.1",
	"node:_http_incoming": [">= 14.18 && < 15", ">= 16"],
	"_http_outgoing": ">= 0.11.1",
	"node:_http_outgoing": [">= 14.18 && < 15", ">= 16"],
	"_http_server": ">= 0.11.1",
	"node:_http_server": [">= 14.18 && < 15", ">= 16"],
	"http": true,
	"node:http": [">= 14.18 && < 15", ">= 16"],
	"http2": ">= 8.8",
	"node:http2": [">= 14.18 && < 15", ">= 16"],
	"https": true,
	"node:https": [">= 14.18 && < 15", ">= 16"],
	"inspector": ">= 8",
	"node:inspector": [">= 14.18 && < 15", ">= 16"],
	"inspector/promises": [">= 19"],
	"node:inspector/promises": [">= 19"],
	"_linklist": "< 8",
	"module": true,
	"node:module": [">= 14.18 && < 15", ">= 16"],
	"net": true,
	"node:net": [">= 14.18 && < 15", ">= 16"],
	"node-inspect/lib/_inspect": ">= 7.6 && < 12",
	"node-inspect/lib/internal/inspect_client": ">= 7.6 && < 12",
	"node-inspect/lib/internal/inspect_repl": ">= 7.6 && < 12",
	"os": true,
	"node:os": [">= 14.18 && < 15", ">= 16"],
	"path": true,
	"node:path": [">= 14.18 && < 15", ">= 16"],
	"path/posix": ">= 15.3",
	"node:path/posix": ">= 16",
	"path/win32": ">= 15.3",
	"node:path/win32": ">= 16",
	"perf_hooks": ">= 8.5",
	"node:perf_hooks": [">= 14.18 && < 15", ">= 16"],
	"process": ">= 1",
	"node:process": [">= 14.18 && < 15", ">= 16"],
	"punycode": ">= 0.5",
	"node:punycode": [">= 14.18 && < 15", ">= 16"],
	"querystring": true,
	"node:querystring": [">= 14.18 && < 15", ">= 16"],
	"readline": true,
	"node:readline": [">= 14.18 && < 15", ">= 16"],
	"readline/promises": ">= 17",
	"node:readline/promises": ">= 17",
	"repl": true,
	"node:repl": [">= 14.18 && < 15", ">= 16"],
	"node:sea": [">= 20.12 && < 21", ">= 21.7"],
	"smalloc": ">= 0.11.5 && < 3",
	"node:sqlite": ">= 23.4",
	"_stream_duplex": ">= 0.9.4",
	"node:_stream_duplex": [">= 14.18 && < 15", ">= 16"],
	"_stream_transform": ">= 0.9.4",
	"node:_stream_transform": [">= 14.18 && < 15", ">= 16"],
	"_stream_wrap": ">= 1.4.1",
	"node:_stream_wrap": [">= 14.18 && < 15", ">= 16"],
	"_stream_passthrough": ">= 0.9.4",
	"node:_stream_passthrough": [">= 14.18 && < 15", ">= 16"],
	"_stream_readable": ">= 0.9.4",
	"node:_stream_readable": [">= 14.18 && < 15", ">= 16"],
	"_stream_writable": ">= 0.9.4",
	"node:_stream_writable": [">= 14.18 && < 15", ">= 16"],
	"stream": true,
	"node:stream": [">= 14.18 && < 15", ">= 16"],
	"stream/consumers": ">= 16.7",
	"node:stream/consumers": ">= 16.7",
	"stream/promises": ">= 15",
	"node:stream/promises": ">= 16",
	"stream/web": ">= 16.5",
	"node:stream/web": ">= 16.5",
	"string_decoder": true,
	"node:string_decoder": [">= 14.18 && < 15", ">= 16"],
	"sys": [">= 0.4 && < 0.7", ">= 0.8"],
	"node:sys": [">= 14.18 && < 15", ">= 16"],
	"test/reporters": ">= 19.9 && < 20.2",
	"node:test/reporters": [">= 18.17 && < 19", ">= 19.9", ">= 20"],
	"test/mock_loader": ">= 22.3 && < 22.7",
	"node:test/mock_loader": ">= 22.3 && < 22.7",
	"node:test": [">= 16.17 && < 17", ">= 18"],
	"timers": true,
	"node:timers": [">= 14.18 && < 15", ">= 16"],
	"timers/promises": ">= 15",
	"node:timers/promises": ">= 16",
	"_tls_common": ">= 0.11.13",
	"node:_tls_common": [">= 14.18 && < 15", ">= 16"],
	"_tls_legacy": ">= 0.11.3 && < 10",
	"_tls_wrap": ">= 0.11.3",
	"node:_tls_wrap": [">= 14.18 && < 15", ">= 16"],
	"tls": true,
	"node:tls": [">= 14.18 && < 15", ">= 16"],
	"trace_events": ">= 10",
	"node:trace_events": [">= 14.18 && < 15", ">= 16"],
	"tty": true,
	"node:tty": [">= 14.18 && < 15", ">= 16"],
	"url": true,
	"node:url": [">= 14.18 && < 15", ">= 16"],
	"util": true,
	"node:util": [">= 14.18 && < 15", ">= 16"],
	"util/types": ">= 15.3",
	"node:util/types": ">= 16",
	"v8/tools/arguments": ">= 10 && < 12",
	"v8/tools/codemap": [">= 4.4 && < 5", ">= 5.2 && < 12"],
	"v8/tools/consarray": [">= 4.4 && < 5", ">= 5.2 && < 12"],
	"v8/tools/csvparser": [">= 4.4 && < 5", ">= 5.2 && < 12"],
	"v8/tools/logreader": [">= 4.4 && < 5", ">= 5.2 && < 12"],
	"v8/tools/profile_view": [">= 4.4 && < 5", ">= 5.2 && < 12"],
	"v8/tools/splaytree": [">= 4.4 && < 5", ">= 5.2 && < 12"],
	"v8": ">= 1",
	"node:v8": [">= 14.18 && < 15", ">= 16"],
	"vm": true,
	"node:vm": [">= 14.18 && < 15", ">= 16"],
	"wasi": [">= 13.4 && < 13.5", ">= 18.17 && < 19", ">= 20"],
	"node:wasi": [">= 18.17 && < 19", ">= 20"],
	"worker_threads": ">= 11.7",
	"node:worker_threads": [">= 14.18 && < 15", ">= 16"],
	"zlib": ">= 0.5",
	"node:zlib": [">= 14.18 && < 15", ">= 16"]
}


---

File name: node_modules\resolve\lib\homedir.js

Code:
'use strict';

var os = require('os');

// adapted from https://github.com/sindresorhus/os-homedir/blob/11e089f4754db38bb535e5a8416320c4446e8cfd/index.js

module.exports = os.homedir || function homedir() {
    var home = process.env.HOME;
    var user = process.env.LOGNAME || process.env.USER || process.env.LNAME || process.env.USERNAME;

    if (process.platform === 'win32') {
        return process.env.USERPROFILE || process.env.HOMEDRIVE + process.env.HOMEPATH || home || null;
    }

    if (process.platform === 'darwin') {
        return home || (user ? '/Users/' + user : null);
    }

    if (process.platform === 'linux') {
        return home || (process.getuid() === 0 ? '/root' : (user ? '/home/' + user : null)); // eslint-disable-line no-extra-parens
    }

    return home || null;
};


---

File name: node_modules\resolve\lib\is-core.js

Code:
var isCoreModule = require('is-core-module');

module.exports = function isCore(x) {
    return isCoreModule(x);
};


---

File name: node_modules\resolve\lib\node-modules-paths.js

Code:
var path = require('path');
var parse = path.parse || require('path-parse'); // eslint-disable-line global-require

var getNodeModulesDirs = function getNodeModulesDirs(absoluteStart, modules) {
    var prefix = '/';
    if ((/^([A-Za-z]:)/).test(absoluteStart)) {
        prefix = '';
    } else if ((/^\\\\/).test(absoluteStart)) {
        prefix = '\\\\';
    }

    var paths = [absoluteStart];
    var parsed = parse(absoluteStart);
    while (parsed.dir !== paths[paths.length - 1]) {
        paths.push(parsed.dir);
        parsed = parse(parsed.dir);
    }

    return paths.reduce(function (dirs, aPath) {
        return dirs.concat(modules.map(function (moduleDir) {
            return path.resolve(prefix, aPath, moduleDir);
        }));
    }, []);
};

module.exports = function nodeModulesPaths(start, opts, request) {
    var modules = opts && opts.moduleDirectory
        ? [].concat(opts.moduleDirectory)
        : ['node_modules'];

    if (opts && typeof opts.paths === 'function') {
        return opts.paths(
            request,
            start,
            function () { return getNodeModulesDirs(start, modules); },
            opts
        );
    }

    var dirs = getNodeModulesDirs(start, modules);
    return opts && opts.paths ? dirs.concat(opts.paths) : dirs;
};


---

File name: node_modules\resolve\lib\normalize-options.js

Code:
module.exports = function (x, opts) {
    /**
     * This file is purposefully a passthrough. It's expected that third-party
     * environments will override it at runtime in order to inject special logic
     * into `resolve` (by manipulating the options). One such example is the PnP
     * code path in Yarn.
     */

    return opts || {};
};


---

File name: node_modules\resolve\lib\sync.js

Code:
var isCore = require('is-core-module');
var fs = require('fs');
var path = require('path');
var getHomedir = require('./homedir');
var caller = require('./caller');
var nodeModulesPaths = require('./node-modules-paths');
var normalizeOptions = require('./normalize-options');

var realpathFS = process.platform !== 'win32' && fs.realpathSync && typeof fs.realpathSync.native === 'function' ? fs.realpathSync.native : fs.realpathSync;

var homedir = getHomedir();
var defaultPaths = function () {
    return [
        path.join(homedir, '.node_modules'),
        path.join(homedir, '.node_libraries')
    ];
};

var defaultIsFile = function isFile(file) {
    try {
        var stat = fs.statSync(file, { throwIfNoEntry: false });
    } catch (e) {
        if (e && (e.code === 'ENOENT' || e.code === 'ENOTDIR')) return false;
        throw e;
    }
    return !!stat && (stat.isFile() || stat.isFIFO());
};

var defaultIsDir = function isDirectory(dir) {
    try {
        var stat = fs.statSync(dir, { throwIfNoEntry: false });
    } catch (e) {
        if (e && (e.code === 'ENOENT' || e.code === 'ENOTDIR')) return false;
        throw e;
    }
    return !!stat && stat.isDirectory();
};

var defaultRealpathSync = function realpathSync(x) {
    try {
        return realpathFS(x);
    } catch (realpathErr) {
        if (realpathErr.code !== 'ENOENT') {
            throw realpathErr;
        }
    }
    return x;
};

var maybeRealpathSync = function maybeRealpathSync(realpathSync, x, opts) {
    if (opts && opts.preserveSymlinks === false) {
        return realpathSync(x);
    }
    return x;
};

var defaultReadPackageSync = function defaultReadPackageSync(readFileSync, pkgfile) {
    var body = readFileSync(pkgfile);
    try {
        var pkg = JSON.parse(body);
        return pkg;
    } catch (jsonErr) {}
};

var getPackageCandidates = function getPackageCandidates(x, start, opts) {
    var dirs = nodeModulesPaths(start, opts, x);
    for (var i = 0; i < dirs.length; i++) {
        dirs[i] = path.join(dirs[i], x);
    }
    return dirs;
};

module.exports = function resolveSync(x, options) {
    if (typeof x !== 'string') {
        throw new TypeError('Path must be a string.');
    }
    var opts = normalizeOptions(x, options);

    var isFile = opts.isFile || defaultIsFile;
    var readFileSync = opts.readFileSync || fs.readFileSync;
    var isDirectory = opts.isDirectory || defaultIsDir;
    var realpathSync = opts.realpathSync || defaultRealpathSync;
    var readPackageSync = opts.readPackageSync || defaultReadPackageSync;
    if (opts.readFileSync && opts.readPackageSync) {
        throw new TypeError('`readFileSync` and `readPackageSync` are mutually exclusive.');
    }
    var packageIterator = opts.packageIterator;

    var extensions = opts.extensions || ['.js'];
    var includeCoreModules = opts.includeCoreModules !== false;
    var basedir = opts.basedir || path.dirname(caller());
    var parent = opts.filename || basedir;

    opts.paths = opts.paths || defaultPaths();

    // ensure that `basedir` is an absolute path at this point, resolving against the process' current working directory
    var absoluteStart = maybeRealpathSync(realpathSync, path.resolve(basedir), opts);

    if ((/^(?:\.\.?(?:\/|$)|\/|([A-Za-z]:)?[/\\])/).test(x)) {
        var res = path.resolve(absoluteStart, x);
        if (x === '.' || x === '..' || x.slice(-1) === '/') res += '/';
        var m = loadAsFileSync(res) || loadAsDirectorySync(res);
        if (m) return maybeRealpathSync(realpathSync, m, opts);
    } else if (includeCoreModules && isCore(x)) {
        return x;
    } else {
        var n = loadNodeModulesSync(x, absoluteStart);
        if (n) return maybeRealpathSync(realpathSync, n, opts);
    }

    var err = new Error("Cannot find module '" + x + "' from '" + parent + "'");
    err.code = 'MODULE_NOT_FOUND';
    throw err;

    function loadAsFileSync(x) {
        var pkg = loadpkg(path.dirname(x));

        if (pkg && pkg.dir && pkg.pkg && opts.pathFilter) {
            var rfile = path.relative(pkg.dir, x);
            var r = opts.pathFilter(pkg.pkg, x, rfile);
            if (r) {
                x = path.resolve(pkg.dir, r); // eslint-disable-line no-param-reassign
            }
        }

        if (isFile(x)) {
            return x;
        }

        for (var i = 0; i < extensions.length; i++) {
            var file = x + extensions[i];
            if (isFile(file)) {
                return file;
            }
        }
    }

    function loadpkg(dir) {
        if (dir === '' || dir === '/') return;
        if (process.platform === 'win32' && (/^\w:[/\\]*$/).test(dir)) {
            return;
        }
        if ((/[/\\]node_modules[/\\]*$/).test(dir)) return;

        var pkgfile = path.join(maybeRealpathSync(realpathSync, dir, opts), 'package.json');

        if (!isFile(pkgfile)) {
            return loadpkg(path.dirname(dir));
        }

        var pkg = readPackageSync(readFileSync, pkgfile);

        if (pkg && opts.packageFilter) {
            // v2 will pass pkgfile
            pkg = opts.packageFilter(pkg, /*pkgfile,*/ dir); // eslint-disable-line spaced-comment
        }

        return { pkg: pkg, dir: dir };
    }

    function loadAsDirectorySync(x) {
        var pkgfile = path.join(maybeRealpathSync(realpathSync, x, opts), '/package.json');
        if (isFile(pkgfile)) {
            try {
                var pkg = readPackageSync(readFileSync, pkgfile);
            } catch (e) {}

            if (pkg && opts.packageFilter) {
                // v2 will pass pkgfile
                pkg = opts.packageFilter(pkg, /*pkgfile,*/ x); // eslint-disable-line spaced-comment
            }

            if (pkg && pkg.main) {
                if (typeof pkg.main !== 'string') {
                    var mainError = new TypeError('package “' + pkg.name + '” `main` must be a string');
                    mainError.code = 'INVALID_PACKAGE_MAIN';
                    throw mainError;
                }
                if (pkg.main === '.' || pkg.main === './') {
                    pkg.main = 'index';
                }
                try {
                    var m = loadAsFileSync(path.resolve(x, pkg.main));
                    if (m) return m;
                    var n = loadAsDirectorySync(path.resolve(x, pkg.main));
                    if (n) return n;
                } catch (e) {}
            }
        }

        return loadAsFileSync(path.join(x, '/index'));
    }

    function loadNodeModulesSync(x, start) {
        var thunk = function () { return getPackageCandidates(x, start, opts); };
        var dirs = packageIterator ? packageIterator(x, start, thunk, opts) : thunk();

        for (var i = 0; i < dirs.length; i++) {
            var dir = dirs[i];
            if (isDirectory(path.dirname(dir))) {
                var m = loadAsFileSync(dir);
                if (m) return m;
                var n = loadAsDirectorySync(dir);
                if (n) return n;
            }
        }
    }
};


---

File name: node_modules\resolve\package.json

Code:
{
	"name": "resolve",
	"description": "resolve like require.resolve() on behalf of files asynchronously and synchronously",
	"version": "1.22.10",
	"repository": {
		"type": "git",
		"url": "git://github.com/browserify/resolve.git"
	},
	"bin": {
		"resolve": "./bin/resolve"
	},
	"main": "index.js",
	"keywords": [
		"resolve",
		"require",
		"node",
		"module"
	],
	"scripts": {
		"prepack": "npmignore --auto --commentLines=autogenerated && cp node_modules/is-core-module/core.json ./lib/ ||:",
		"prepublishOnly": "safe-publish-latest",
		"prepublish": "not-in-publish || npm run prepublishOnly",
		"prelint": "eclint check $(git ls-files | xargs find 2> /dev/null | grep -vE 'node_modules|\\.git')",
		"lint": "eslint --ext=js,mjs --no-eslintrc -c .eslintrc . 'bin/**'",
		"pretests-only": "cd ./test/resolver/nested_symlinks && node mylib/sync && node mylib/async",
		"tests-only": "tape test/*.js",
		"pretest": "npm run lint",
		"test": "npm run --silent tests-only",
		"posttest": "npm run test:multirepo && npx npm@'>= 10.2' audit --production",
		"test:multirepo": "cd ./test/resolver/multirepo && npm install && npm test"
	},
	"devDependencies": {
		"@ljharb/eslint-config": "^21.1.1",
		"array.prototype.map": "^1.0.7",
		"copy-dir": "^1.3.0",
		"eclint": "^2.8.1",
		"eslint": "=8.8.0",
		"in-publish": "^2.0.1",
		"mkdirp": "^0.5.5",
		"mv": "^2.1.1",
		"npmignore": "^0.3.1",
		"object-keys": "^1.1.1",
		"rimraf": "^2.7.1",
		"safe-publish-latest": "^2.0.0",
		"semver": "^6.3.1",
		"tap": "0.4.13",
		"tape": "^5.9.0",
		"tmp": "^0.0.31"
	},
	"license": "MIT",
	"author": {
		"name": "James Halliday",
		"email": "mail@substack.net",
		"url": "http://substack.net"
	},
	"funding": {
		"url": "https://github.com/sponsors/ljharb"
	},
	"dependencies": {
		"is-core-module": "^2.16.0",
		"path-parse": "^1.0.7",
		"supports-preserve-symlinks-flag": "^1.0.0"
	},
	"publishConfig": {
		"ignore": [
			".github/workflows",
			"appveyor.yml",
			"test/resolver/malformed_package_json",
			"test/list-exports"
		]
	},
	"engines": {
		"node": ">= 0.4"
	}
}


---

File name: node_modules\resolve\SECURITY.md

Code:
# Security

Please email [@ljharb](https://github.com/ljharb) or see https://tidelift.com/security if you have a potential security vulnerability to report.


---

File name: node_modules\resolve\sync.js

Code:
'use strict';

module.exports = require('./lib/sync');


---

File name: node_modules\resolve\test\core.js

Code:
var test = require('tape');
var keys = require('object-keys');
var semver = require('semver');

var resolve = require('../');

var brokenNode = semver.satisfies(process.version, '11.11 - 11.13');

test('core modules', function (t) {
    t.test('isCore()', function (st) {
        st.ok(resolve.isCore('fs'));
        st.ok(resolve.isCore('net'));
        st.ok(resolve.isCore('http'));

        st.ok(!resolve.isCore('seq'));
        st.ok(!resolve.isCore('../'));

        st.ok(!resolve.isCore('toString'));

        st.end();
    });

    t.test('core list', function (st) {
        var cores = keys(resolve.core);
        st.plan(cores.length);

        for (var i = 0; i < cores.length; ++i) {
            var mod = cores[i];
            // note: this must be require, not require.resolve, due to https://github.com/nodejs/node/issues/43274
            var requireFunc = function () { require(mod); }; // eslint-disable-line no-loop-func
            t.comment(mod + ': ' + resolve.core[mod]);
            if (resolve.core[mod]) {
                st.doesNotThrow(requireFunc, mod + ' supported; requiring does not throw');
            } else if (brokenNode) {
                st.ok(true, 'this version of node is broken: attempting to require things that fail to resolve breaks "home_paths" tests');
            } else {
                st.throws(requireFunc, mod + ' not supported; requiring throws');
            }
        }

        st.end();
    });

    t.test('core via repl module', { skip: !resolve.core.repl }, function (st) {
        var libs = require('repl')._builtinLibs; // eslint-disable-line no-underscore-dangle
        if (!libs) {
            st.skip('module.builtinModules does not exist');
            return st.end();
        }
        for (var i = 0; i < libs.length; ++i) {
            var mod = libs[i];
            st.ok(resolve.core[mod], mod + ' is a core module');
            st.doesNotThrow(
                function () { require(mod); }, // eslint-disable-line no-loop-func
                'requiring ' + mod + ' does not throw'
            );
        }
        st.end();
    });

    t.test('core via builtinModules list', { skip: !resolve.core.module }, function (st) {
        var libs = require('module').builtinModules;
        if (!libs) {
            st.skip('module.builtinModules does not exist');
            return st.end();
        }
        var blacklist = [
            '_debug_agent',
            'v8/tools/tickprocessor-driver',
            'v8/tools/SourceMap',
            'v8/tools/tickprocessor',
            'v8/tools/profile'
        ];
        for (var i = 0; i < libs.length; ++i) {
            var mod = libs[i];
            if (blacklist.indexOf(mod) === -1) {
                st.ok(resolve.core[mod], mod + ' is a core module');
                st.doesNotThrow(
                    function () { require(mod); }, // eslint-disable-line no-loop-func
                    'requiring ' + mod + ' does not throw'
                );
            }
        }
        st.end();
    });

    t.end();
});


---

File name: node_modules\resolve\test\dotdot\abc\index.js

Code:
var x = require('..');
console.log(x);


---

File name: node_modules\resolve\test\dotdot\index.js

Code:
module.exports = 'whatever';


---

File name: node_modules\resolve\test\dotdot.js

Code:
var path = require('path');
var test = require('tape');
var resolve = require('../');

test('dotdot', function (t) {
    t.plan(4);
    var dir = path.join(__dirname, '/dotdot/abc');

    resolve('..', { basedir: dir }, function (err, res, pkg) {
        t.ifError(err);
        t.equal(res, path.join(__dirname, 'dotdot/index.js'));
    });

    resolve('.', { basedir: dir }, function (err, res, pkg) {
        t.ifError(err);
        t.equal(res, path.join(dir, 'index.js'));
    });
});

test('dotdot sync', function (t) {
    t.plan(2);
    var dir = path.join(__dirname, '/dotdot/abc');

    var a = resolve.sync('..', { basedir: dir });
    t.equal(a, path.join(__dirname, 'dotdot/index.js'));

    var b = resolve.sync('.', { basedir: dir });
    t.equal(b, path.join(dir, 'index.js'));
});


---

File name: node_modules\resolve\test\faulty_basedir.js

Code:
var test = require('tape');
var path = require('path');
var resolve = require('../');

test('faulty basedir must produce error in windows', { skip: process.platform !== 'win32' }, function (t) {
    t.plan(1);

    var resolverDir = 'C:\\a\\b\\c\\d';

    resolve('tape/lib/test.js', { basedir: resolverDir }, function (err, res, pkg) {
        t.equal(!!err, true);
    });
});

test('non-existent basedir should not throw when preserveSymlinks is false', function (t) {
    t.plan(2);

    var opts = {
        basedir: path.join(path.sep, 'unreal', 'path', 'that', 'does', 'not', 'exist'),
        preserveSymlinks: false
    };

    var module = './dotdot/abc';

    resolve(module, opts, function (err, res) {
        t.equal(err.code, 'MODULE_NOT_FOUND');
        t.equal(res, undefined);
    });
});


---

File name: node_modules\resolve\test\filter.js

Code:
var path = require('path');
var test = require('tape');
var resolve = require('../');

test('filter', function (t) {
    t.plan(4);
    var dir = path.join(__dirname, 'resolver');
    var packageFilterArgs;
    resolve('./baz', {
        basedir: dir,
        packageFilter: function (pkg, pkgfile) {
            pkg.main = 'doom'; // eslint-disable-line no-param-reassign
            packageFilterArgs = [pkg, pkgfile];
            return pkg;
        }
    }, function (err, res, pkg) {
        if (err) t.fail(err);

        t.equal(res, path.join(dir, 'baz/doom.js'), 'changing the package "main" works');

        var packageData = packageFilterArgs[0];
        t.equal(pkg, packageData, 'first packageFilter argument is "pkg"');
        t.equal(packageData.main, 'doom', 'package "main" was altered');

        var packageFile = packageFilterArgs[1];
        t.equal(
            packageFile,
            path.join(dir, 'baz/package.json'),
            'second packageFilter argument is "pkgfile"'
        );

        t.end();
    });
});


---

File name: node_modules\resolve\test\filter_sync.js

Code:
var path = require('path');
var test = require('tape');
var resolve = require('../');

test('filter', function (t) {
    var dir = path.join(__dirname, 'resolver');
    var packageFilterArgs;
    var res = resolve.sync('./baz', {
        basedir: dir,
        // NOTE: in v2.x, this will be `pkg, pkgfile, dir`, but must remain "broken" here in v1.x for compatibility
        packageFilter: function (pkg, /*pkgfile,*/ dir) { // eslint-disable-line spaced-comment
            pkg.main = 'doom'; // eslint-disable-line no-param-reassign
            packageFilterArgs = 'is 1.x' ? [pkg, dir] : [pkg, pkgfile, dir]; // eslint-disable-line no-constant-condition, no-undef
            return pkg;
        }
    });

    t.equal(res, path.join(dir, 'baz/doom.js'), 'changing the package "main" works');

    var packageData = packageFilterArgs[0];
    t.equal(packageData.main, 'doom', 'package "main" was altered');

    if (!'is 1.x') { // eslint-disable-line no-constant-condition
        var packageFile = packageFilterArgs[1];
        t.equal(packageFile, path.join(dir, 'baz', 'package.json'), 'package.json path is correct');
    }

    var packageDir = packageFilterArgs['is 1.x' ? 1 : 2]; // eslint-disable-line no-constant-condition
    // eslint-disable-next-line no-constant-condition
    t.equal(packageDir, path.join(dir, 'baz'), ('is 1.x' ? 'second' : 'third') + ' packageFilter argument is "dir"');

    t.end();
});


---

File name: node_modules\resolve\test\home_paths.js

Code:
'use strict';

var fs = require('fs');
var homedir = require('../lib/homedir');
var path = require('path');

var test = require('tape');
var mkdirp = require('mkdirp');
var rimraf = require('rimraf');
var mv = require('mv');
var copyDir = require('copy-dir');
var tmp = require('tmp');

var HOME = homedir();

var hnm = path.join(HOME, '.node_modules');
var hnl = path.join(HOME, '.node_libraries');

var resolve = require('../async');

function makeDir(t, dir, cb) {
    mkdirp(dir, function (err) {
        if (err) {
            cb(err);
        } else {
            t.teardown(function cleanup() {
                rimraf.sync(dir);
            });
            cb();
        }
    });
}

function makeTempDir(t, dir, cb) {
    if (fs.existsSync(dir)) {
        var tmpResult = tmp.dirSync();
        t.teardown(tmpResult.removeCallback);
        var backup = path.join(tmpResult.name, path.basename(dir));
        mv(dir, backup, function (err) {
            if (err) {
                cb(err);
            } else {
                t.teardown(function () {
                    mv(backup, dir, cb);
                });
                makeDir(t, dir, cb);
            }
        });
    } else {
        makeDir(t, dir, cb);
    }
}

test('homedir module paths', function (t) {
    t.plan(7);

    makeTempDir(t, hnm, function (err) {
        t.error(err, 'no error with HNM temp dir');
        if (err) {
            return t.end();
        }

        var bazHNMDir = path.join(hnm, 'baz');
        var dotMainDir = path.join(hnm, 'dot_main');
        copyDir.sync(path.join(__dirname, 'resolver/baz'), bazHNMDir);
        copyDir.sync(path.join(__dirname, 'resolver/dot_main'), dotMainDir);

        var bazPkg = { name: 'baz', main: 'quux.js' };
        var dotMainPkg = { main: 'index' };

        var bazHNMmain = path.join(bazHNMDir, 'quux.js');
        t.equal(require.resolve('baz'), bazHNMmain, 'sanity check: require.resolve finds HNM `baz`');
        var dotMainMain = path.join(dotMainDir, 'index.js');
        t.equal(require.resolve('dot_main'), dotMainMain, 'sanity check: require.resolve finds `dot_main`');

        makeTempDir(t, hnl, function (err) {
            t.error(err, 'no error with HNL temp dir');
            if (err) {
                return t.end();
            }
            var bazHNLDir = path.join(hnl, 'baz');
            copyDir.sync(path.join(__dirname, 'resolver/baz'), bazHNLDir);

            var dotSlashMainDir = path.join(hnl, 'dot_slash_main');
            var dotSlashMainMain = path.join(dotSlashMainDir, 'index.js');
            var dotSlashMainPkg = { main: 'index' };
            copyDir.sync(path.join(__dirname, 'resolver/dot_slash_main'), dotSlashMainDir);

            t.equal(require.resolve('baz'), bazHNMmain, 'sanity check: require.resolve finds HNM `baz`');
            t.equal(require.resolve('dot_slash_main'), dotSlashMainMain, 'sanity check: require.resolve finds HNL `dot_slash_main`');

            t.test('with temp dirs', function (st) {
                st.plan(3);

                st.test('just in `$HOME/.node_modules`', function (s2t) {
                    s2t.plan(3);

                    resolve('dot_main', function (err, res, pkg) {
                        s2t.error(err, 'no error resolving `dot_main`');
                        s2t.equal(res, dotMainMain, '`dot_main` resolves in `$HOME/.node_modules`');
                        s2t.deepEqual(pkg, dotMainPkg);
                    });
                });

                st.test('just in `$HOME/.node_libraries`', function (s2t) {
                    s2t.plan(3);

                    resolve('dot_slash_main', function (err, res, pkg) {
                        s2t.error(err, 'no error resolving `dot_slash_main`');
                        s2t.equal(res, dotSlashMainMain, '`dot_slash_main` resolves in `$HOME/.node_libraries`');
                        s2t.deepEqual(pkg, dotSlashMainPkg);
                    });
                });

                st.test('in `$HOME/.node_libraries` and `$HOME/.node_modules`', function (s2t) {
                    s2t.plan(3);

                    resolve('baz', function (err, res, pkg) {
                        s2t.error(err, 'no error resolving `baz`');
                        s2t.equal(res, bazHNMmain, '`baz` resolves in `$HOME/.node_modules` when in both');
                        s2t.deepEqual(pkg, bazPkg);
                    });
                });
            });
        });
    });
});


---

File name: node_modules\resolve\test\home_paths_sync.js

Code:
'use strict';

var fs = require('fs');
var homedir = require('../lib/homedir');
var path = require('path');

var test = require('tape');
var mkdirp = require('mkdirp');
var rimraf = require('rimraf');
var mv = require('mv');
var copyDir = require('copy-dir');
var tmp = require('tmp');

var HOME = homedir();

var hnm = path.join(HOME, '.node_modules');
var hnl = path.join(HOME, '.node_libraries');

var resolve = require('../sync');

function makeDir(t, dir, cb) {
    mkdirp(dir, function (err) {
        if (err) {
            cb(err);
        } else {
            t.teardown(function cleanup() {
                rimraf.sync(dir);
            });
            cb();
        }
    });
}

function makeTempDir(t, dir, cb) {
    if (fs.existsSync(dir)) {
        var tmpResult = tmp.dirSync();
        t.teardown(tmpResult.removeCallback);
        var backup = path.join(tmpResult.name, path.basename(dir));
        mv(dir, backup, function (err) {
            if (err) {
                cb(err);
            } else {
                t.teardown(function () {
                    mv(backup, dir, cb);
                });
                makeDir(t, dir, cb);
            }
        });
    } else {
        makeDir(t, dir, cb);
    }
}

test('homedir module paths', function (t) {
    t.plan(7);

    makeTempDir(t, hnm, function (err) {
        t.error(err, 'no error with HNM temp dir');
        if (err) {
            return t.end();
        }

        var bazHNMDir = path.join(hnm, 'baz');
        var dotMainDir = path.join(hnm, 'dot_main');
        copyDir.sync(path.join(__dirname, 'resolver/baz'), bazHNMDir);
        copyDir.sync(path.join(__dirname, 'resolver/dot_main'), dotMainDir);

        var bazHNMmain = path.join(bazHNMDir, 'quux.js');
        t.equal(require.resolve('baz'), bazHNMmain, 'sanity check: require.resolve finds HNM `baz`');
        var dotMainMain = path.join(dotMainDir, 'index.js');
        t.equal(require.resolve('dot_main'), dotMainMain, 'sanity check: require.resolve finds `dot_main`');

        makeTempDir(t, hnl, function (err) {
            t.error(err, 'no error with HNL temp dir');
            if (err) {
                return t.end();
            }
            var bazHNLDir = path.join(hnl, 'baz');
            copyDir.sync(path.join(__dirname, 'resolver/baz'), bazHNLDir);

            var dotSlashMainDir = path.join(hnl, 'dot_slash_main');
            var dotSlashMainMain = path.join(dotSlashMainDir, 'index.js');
            copyDir.sync(path.join(__dirname, 'resolver/dot_slash_main'), dotSlashMainDir);

            t.equal(require.resolve('baz'), bazHNMmain, 'sanity check: require.resolve finds HNM `baz`');
            t.equal(require.resolve('dot_slash_main'), dotSlashMainMain, 'sanity check: require.resolve finds HNL `dot_slash_main`');

            t.test('with temp dirs', function (st) {
                st.plan(3);

                st.test('just in `$HOME/.node_modules`', function (s2t) {
                    s2t.plan(1);

                    var res = resolve('dot_main');
                    s2t.equal(res, dotMainMain, '`dot_main` resolves in `$HOME/.node_modules`');
                });

                st.test('just in `$HOME/.node_libraries`', function (s2t) {
                    s2t.plan(1);

                    var res = resolve('dot_slash_main');
                    s2t.equal(res, dotSlashMainMain, '`dot_slash_main` resolves in `$HOME/.node_libraries`');
                });

                st.test('in `$HOME/.node_libraries` and `$HOME/.node_modules`', function (s2t) {
                    s2t.plan(1);

                    var res = resolve('baz');
                    s2t.equal(res, bazHNMmain, '`baz` resolves in `$HOME/.node_modules` when in both');
                });
            });
        });
    });
});


---

File name: node_modules\resolve\test\mock.js

Code:
var path = require('path');
var test = require('tape');
var resolve = require('../');

test('mock', function (t) {
    t.plan(8);

    var files = {};
    files[path.resolve('/foo/bar/baz.js')] = 'beep';

    var dirs = {};
    dirs[path.resolve('/foo/bar')] = true;

    function opts(basedir) {
        return {
            basedir: path.resolve(basedir),
            isFile: function (file, cb) {
                cb(null, Object.prototype.hasOwnProperty.call(files, path.resolve(file)));
            },
            isDirectory: function (dir, cb) {
                cb(null, !!dirs[path.resolve(dir)]);
            },
            readFile: function (file, cb) {
                cb(null, files[path.resolve(file)]);
            },
            realpath: function (file, cb) {
                cb(null, file);
            }
        };
    }

    resolve('./baz', opts('/foo/bar'), function (err, res, pkg) {
        if (err) return t.fail(err);
        t.equal(res, path.resolve('/foo/bar/baz.js'));
        t.equal(pkg, undefined);
    });

    resolve('./baz.js', opts('/foo/bar'), function (err, res, pkg) {
        if (err) return t.fail(err);
        t.equal(res, path.resolve('/foo/bar/baz.js'));
        t.equal(pkg, undefined);
    });

    resolve('baz', opts('/foo/bar'), function (err, res) {
        t.equal(err.message, "Cannot find module 'baz' from '" + path.resolve('/foo/bar') + "'");
        t.equal(err.code, 'MODULE_NOT_FOUND');
    });

    resolve('../baz', opts('/foo/bar'), function (err, res) {
        t.equal(err.message, "Cannot find module '../baz' from '" + path.resolve('/foo/bar') + "'");
        t.equal(err.code, 'MODULE_NOT_FOUND');
    });
});

test('mock from package', function (t) {
    t.plan(8);

    var files = {};
    files[path.resolve('/foo/bar/baz.js')] = 'beep';

    var dirs = {};
    dirs[path.resolve('/foo/bar')] = true;

    function opts(basedir) {
        return {
            basedir: path.resolve(basedir),
            isFile: function (file, cb) {
                cb(null, Object.prototype.hasOwnProperty.call(files, file));
            },
            isDirectory: function (dir, cb) {
                cb(null, !!dirs[path.resolve(dir)]);
            },
            'package': { main: 'bar' },
            readFile: function (file, cb) {
                cb(null, files[file]);
            },
            realpath: function (file, cb) {
                cb(null, file);
            }
        };
    }

    resolve('./baz', opts('/foo/bar'), function (err, res, pkg) {
        if (err) return t.fail(err);
        t.equal(res, path.resolve('/foo/bar/baz.js'));
        t.equal(pkg && pkg.main, 'bar');
    });

    resolve('./baz.js', opts('/foo/bar'), function (err, res, pkg) {
        if (err) return t.fail(err);
        t.equal(res, path.resolve('/foo/bar/baz.js'));
        t.equal(pkg && pkg.main, 'bar');
    });

    resolve('baz', opts('/foo/bar'), function (err, res) {
        t.equal(err.message, "Cannot find module 'baz' from '" + path.resolve('/foo/bar') + "'");
        t.equal(err.code, 'MODULE_NOT_FOUND');
    });

    resolve('../baz', opts('/foo/bar'), function (err, res) {
        t.equal(err.message, "Cannot find module '../baz' from '" + path.resolve('/foo/bar') + "'");
        t.equal(err.code, 'MODULE_NOT_FOUND');
    });
});

test('mock package', function (t) {
    t.plan(2);

    var files = {};
    files[path.resolve('/foo/node_modules/bar/baz.js')] = 'beep';
    files[path.resolve('/foo/node_modules/bar/package.json')] = JSON.stringify({
        main: './baz.js'
    });

    var dirs = {};
    dirs[path.resolve('/foo')] = true;
    dirs[path.resolve('/foo/node_modules')] = true;

    function opts(basedir) {
        return {
            basedir: path.resolve(basedir),
            isFile: function (file, cb) {
                cb(null, Object.prototype.hasOwnProperty.call(files, path.resolve(file)));
            },
            isDirectory: function (dir, cb) {
                cb(null, !!dirs[path.resolve(dir)]);
            },
            readFile: function (file, cb) {
                cb(null, files[path.resolve(file)]);
            },
            realpath: function (file, cb) {
                cb(null, file);
            }
        };
    }

    resolve('bar', opts('/foo'), function (err, res, pkg) {
        if (err) return t.fail(err);
        t.equal(res, path.resolve('/foo/node_modules/bar/baz.js'));
        t.equal(pkg && pkg.main, './baz.js');
    });
});

test('mock package from package', function (t) {
    t.plan(2);

    var files = {};
    files[path.resolve('/foo/node_modules/bar/baz.js')] = 'beep';
    files[path.resolve('/foo/node_modules/bar/package.json')] = JSON.stringify({
        main: './baz.js'
    });

    var dirs = {};
    dirs[path.resolve('/foo')] = true;
    dirs[path.resolve('/foo/node_modules')] = true;

    function opts(basedir) {
        return {
            basedir: path.resolve(basedir),
            isFile: function (file, cb) {
                cb(null, Object.prototype.hasOwnProperty.call(files, path.resolve(file)));
            },
            isDirectory: function (dir, cb) {
                cb(null, !!dirs[path.resolve(dir)]);
            },
            'package': { main: 'bar' },
            readFile: function (file, cb) {
                cb(null, files[path.resolve(file)]);
            },
            realpath: function (file, cb) {
                cb(null, file);
            }
        };
    }

    resolve('bar', opts('/foo'), function (err, res, pkg) {
        if (err) return t.fail(err);
        t.equal(res, path.resolve('/foo/node_modules/bar/baz.js'));
        t.equal(pkg && pkg.main, './baz.js');
    });
});

test('symlinked', function (t) {
    t.plan(4);

    var files = {};
    files[path.resolve('/foo/bar/baz.js')] = 'beep';
    files[path.resolve('/foo/bar/symlinked/baz.js')] = 'beep';

    var dirs = {};
    dirs[path.resolve('/foo/bar')] = true;
    dirs[path.resolve('/foo/bar/symlinked')] = true;

    function opts(basedir) {
        return {
            preserveSymlinks: false,
            basedir: path.resolve(basedir),
            isFile: function (file, cb) {
                cb(null, Object.prototype.hasOwnProperty.call(files, path.resolve(file)));
            },
            isDirectory: function (dir, cb) {
                cb(null, !!dirs[path.resolve(dir)]);
            },
            readFile: function (file, cb) {
                cb(null, files[path.resolve(file)]);
            },
            realpath: function (file, cb) {
                var resolved = path.resolve(file);

                if (resolved.indexOf('symlinked') >= 0) {
                    cb(null, resolved);
                    return;
                }

                var ext = path.extname(resolved);

                if (ext) {
                    var dir = path.dirname(resolved);
                    var base = path.basename(resolved);
                    cb(null, path.join(dir, 'symlinked', base));
                } else {
                    cb(null, path.join(resolved, 'symlinked'));
                }
            }
        };
    }

    resolve('./baz', opts('/foo/bar'), function (err, res, pkg) {
        if (err) return t.fail(err);
        t.equal(res, path.resolve('/foo/bar/symlinked/baz.js'));
        t.equal(pkg, undefined);
    });

    resolve('./baz.js', opts('/foo/bar'), function (err, res, pkg) {
        if (err) return t.fail(err);
        t.equal(res, path.resolve('/foo/bar/symlinked/baz.js'));
        t.equal(pkg, undefined);
    });
});

test('readPackage', function (t) {
    t.plan(3);

    var files = {};
    files[path.resolve('/foo/node_modules/bar/something-else.js')] = 'beep';
    files[path.resolve('/foo/node_modules/bar/package.json')] = JSON.stringify({
        main: './baz.js'
    });
    files[path.resolve('/foo/node_modules/bar/baz.js')] = 'boop';

    var dirs = {};
    dirs[path.resolve('/foo')] = true;
    dirs[path.resolve('/foo/node_modules')] = true;

    function opts(basedir) {
        return {
            basedir: path.resolve(basedir),
            isFile: function (file, cb) {
                cb(null, Object.prototype.hasOwnProperty.call(files, path.resolve(file)));
            },
            isDirectory: function (dir, cb) {
                cb(null, !!dirs[path.resolve(dir)]);
            },
            'package': { main: 'bar' },
            readFile: function (file, cb) {
                cb(null, files[path.resolve(file)]);
            },
            realpath: function (file, cb) {
                cb(null, file);
            }
        };
    }

    t.test('with readFile', function (st) {
        st.plan(3);

        resolve('bar', opts('/foo'), function (err, res, pkg) {
            st.error(err);
            st.equal(res, path.resolve('/foo/node_modules/bar/baz.js'));
            st.equal(pkg && pkg.main, './baz.js');
        });
    });

    var readPackage = function (readFile, file, cb) {
        var barPackage = path.join('bar', 'package.json');
        if (file.slice(-barPackage.length) === barPackage) {
            cb(null, { main: './something-else.js' });
        } else {
            cb(null, JSON.parse(files[path.resolve(file)]));
        }
    };

    t.test('with readPackage', function (st) {
        st.plan(3);

        var options = opts('/foo');
        delete options.readFile;
        options.readPackage = readPackage;
        resolve('bar', options, function (err, res, pkg) {
            st.error(err);
            st.equal(res, path.resolve('/foo/node_modules/bar/something-else.js'));
            st.equal(pkg && pkg.main, './something-else.js');
        });
    });

    t.test('with readFile and readPackage', function (st) {
        st.plan(1);

        var options = opts('/foo');
        options.readPackage = readPackage;
        resolve('bar', options, function (err) {
            st.throws(function () { throw err; }, TypeError, 'errors when both readFile and readPackage are provided');
        });
    });
});


---

File name: node_modules\resolve\test\mock_sync.js

Code:
var path = require('path');
var test = require('tape');
var resolve = require('../');

test('mock', function (t) {
    t.plan(4);

    var files = {};
    files[path.resolve('/foo/bar/baz.js')] = 'beep';

    var dirs = {};
    dirs[path.resolve('/foo/bar')] = true;

    function opts(basedir) {
        return {
            basedir: path.resolve(basedir),
            isFile: function (file) {
                return Object.prototype.hasOwnProperty.call(files, path.resolve(file));
            },
            isDirectory: function (dir) {
                return !!dirs[path.resolve(dir)];
            },
            readFileSync: function (file) {
                return files[path.resolve(file)];
            },
            realpathSync: function (file) {
                return file;
            }
        };
    }

    t.equal(
        resolve.sync('./baz', opts('/foo/bar')),
        path.resolve('/foo/bar/baz.js')
    );

    t.equal(
        resolve.sync('./baz.js', opts('/foo/bar')),
        path.resolve('/foo/bar/baz.js')
    );

    t.throws(function () {
        resolve.sync('baz', opts('/foo/bar'));
    });

    t.throws(function () {
        resolve.sync('../baz', opts('/foo/bar'));
    });
});

test('mock package', function (t) {
    t.plan(1);

    var files = {};
    files[path.resolve('/foo/node_modules/bar/baz.js')] = 'beep';
    files[path.resolve('/foo/node_modules/bar/package.json')] = JSON.stringify({
        main: './baz.js'
    });

    var dirs = {};
    dirs[path.resolve('/foo')] = true;
    dirs[path.resolve('/foo/node_modules')] = true;

    function opts(basedir) {
        return {
            basedir: path.resolve(basedir),
            isFile: function (file) {
                return Object.prototype.hasOwnProperty.call(files, path.resolve(file));
            },
            isDirectory: function (dir) {
                return !!dirs[path.resolve(dir)];
            },
            readFileSync: function (file) {
                return files[path.resolve(file)];
            },
            realpathSync: function (file) {
                return file;
            }
        };
    }

    t.equal(
        resolve.sync('bar', opts('/foo')),
        path.resolve('/foo/node_modules/bar/baz.js')
    );
});

test('symlinked', function (t) {
    t.plan(2);

    var files = {};
    files[path.resolve('/foo/bar/baz.js')] = 'beep';
    files[path.resolve('/foo/bar/symlinked/baz.js')] = 'beep';

    var dirs = {};
    dirs[path.resolve('/foo/bar')] = true;
    dirs[path.resolve('/foo/bar/symlinked')] = true;

    function opts(basedir) {
        return {
            preserveSymlinks: false,
            basedir: path.resolve(basedir),
            isFile: function (file) {
                return Object.prototype.hasOwnProperty.call(files, path.resolve(file));
            },
            isDirectory: function (dir) {
                return !!dirs[path.resolve(dir)];
            },
            readFileSync: function (file) {
                return files[path.resolve(file)];
            },
            realpathSync: function (file) {
                var resolved = path.resolve(file);

                if (resolved.indexOf('symlinked') >= 0) {
                    return resolved;
                }

                var ext = path.extname(resolved);

                if (ext) {
                    var dir = path.dirname(resolved);
                    var base = path.basename(resolved);
                    return path.join(dir, 'symlinked', base);
                }
                return path.join(resolved, 'symlinked');
            }
        };
    }

    t.equal(
        resolve.sync('./baz', opts('/foo/bar')),
        path.resolve('/foo/bar/symlinked/baz.js')
    );

    t.equal(
        resolve.sync('./baz.js', opts('/foo/bar')),
        path.resolve('/foo/bar/symlinked/baz.js')
    );
});

test('readPackageSync', function (t) {
    t.plan(3);

    var files = {};
    files[path.resolve('/foo/node_modules/bar/something-else.js')] = 'beep';
    files[path.resolve('/foo/node_modules/bar/package.json')] = JSON.stringify({
        main: './baz.js'
    });
    files[path.resolve('/foo/node_modules/bar/baz.js')] = 'boop';

    var dirs = {};
    dirs[path.resolve('/foo')] = true;
    dirs[path.resolve('/foo/node_modules')] = true;

    function opts(basedir, useReadPackage) {
        return {
            basedir: path.resolve(basedir),
            isFile: function (file) {
                return Object.prototype.hasOwnProperty.call(files, path.resolve(file));
            },
            isDirectory: function (dir) {
                return !!dirs[path.resolve(dir)];
            },
            readFileSync: useReadPackage ? null : function (file) {
                return files[path.resolve(file)];
            },
            realpathSync: function (file) {
                return file;
            }
        };
    }
    t.test('with readFile', function (st) {
        st.plan(1);

        st.equal(
            resolve.sync('bar', opts('/foo')),
            path.resolve('/foo/node_modules/bar/baz.js')
        );
    });

    var readPackageSync = function (readFileSync, file) {
        if (file.indexOf(path.join('bar', 'package.json')) >= 0) {
            return { main: './something-else.js' };
        }
        return JSON.parse(files[path.resolve(file)]);
    };

    t.test('with readPackage', function (st) {
        st.plan(1);

        var options = opts('/foo');
        delete options.readFileSync;
        options.readPackageSync = readPackageSync;

        st.equal(
            resolve.sync('bar', options),
            path.resolve('/foo/node_modules/bar/something-else.js')
        );
    });

    t.test('with readFile and readPackage', function (st) {
        st.plan(1);

        var options = opts('/foo');
        options.readPackageSync = readPackageSync;
        st.throws(
            function () { resolve.sync('bar', options); },
            TypeError,
            'errors when both readFile and readPackage are provided'
        );
    });
});



---

File name: node_modules\resolve\test\module_dir\xmodules\aaa\index.js

Code:
module.exports = function (x) { return x * 100; };


---

File name: node_modules\resolve\test\module_dir\ymodules\aaa\index.js

Code:
module.exports = function (x) { return x + 100; };


---

File name: node_modules\resolve\test\module_dir\zmodules\bbb\main.js

Code:
module.exports = function (n) { return n * 111; };


---

File name: node_modules\resolve\test\module_dir\zmodules\bbb\package.json

Code:
{
  "main": "main.js"
}


---

File name: node_modules\resolve\test\module_dir.js

Code:
var path = require('path');
var test = require('tape');
var resolve = require('../');

test('moduleDirectory strings', function (t) {
    t.plan(4);
    var dir = path.join(__dirname, 'module_dir');
    var xopts = {
        basedir: dir,
        moduleDirectory: 'xmodules'
    };
    resolve('aaa', xopts, function (err, res, pkg) {
        t.ifError(err);
        t.equal(res, path.join(dir, '/xmodules/aaa/index.js'));
    });

    var yopts = {
        basedir: dir,
        moduleDirectory: 'ymodules'
    };
    resolve('aaa', yopts, function (err, res, pkg) {
        t.ifError(err);
        t.equal(res, path.join(dir, '/ymodules/aaa/index.js'));
    });
});

test('moduleDirectory array', function (t) {
    t.plan(6);
    var dir = path.join(__dirname, 'module_dir');
    var aopts = {
        basedir: dir,
        moduleDirectory: ['xmodules', 'ymodules', 'zmodules']
    };
    resolve('aaa', aopts, function (err, res, pkg) {
        t.ifError(err);
        t.equal(res, path.join(dir, '/xmodules/aaa/index.js'));
    });

    var bopts = {
        basedir: dir,
        moduleDirectory: ['zmodules', 'ymodules', 'xmodules']
    };
    resolve('aaa', bopts, function (err, res, pkg) {
        t.ifError(err);
        t.equal(res, path.join(dir, '/ymodules/aaa/index.js'));
    });

    var copts = {
        basedir: dir,
        moduleDirectory: ['xmodules', 'ymodules', 'zmodules']
    };
    resolve('bbb', copts, function (err, res, pkg) {
        t.ifError(err);
        t.equal(res, path.join(dir, '/zmodules/bbb/main.js'));
    });
});


---

File name: node_modules\resolve\test\node-modules-paths.js

Code:
var test = require('tape');
var path = require('path');
var parse = path.parse || require('path-parse');
var keys = require('object-keys');

var nodeModulesPaths = require('../lib/node-modules-paths');

var verifyDirs = function verifyDirs(t, start, dirs, moduleDirectories, paths) {
    var moduleDirs = [].concat(moduleDirectories || 'node_modules');
    if (paths) {
        for (var k = 0; k < paths.length; ++k) {
            moduleDirs.push(path.basename(paths[k]));
        }
    }

    var foundModuleDirs = {};
    var uniqueDirs = {};
    var parsedDirs = {};
    for (var i = 0; i < dirs.length; ++i) {
        var parsed = parse(dirs[i]);
        if (!foundModuleDirs[parsed.base]) { foundModuleDirs[parsed.base] = 0; }
        foundModuleDirs[parsed.base] += 1;
        parsedDirs[parsed.dir] = true;
        uniqueDirs[dirs[i]] = true;
    }
    t.equal(keys(parsedDirs).length >= start.split(path.sep).length, true, 'there are >= dirs than "start" has');
    var foundModuleDirNames = keys(foundModuleDirs);
    t.deepEqual(foundModuleDirNames, moduleDirs, 'all desired module dirs were found');
    t.equal(keys(uniqueDirs).length, dirs.length, 'all dirs provided were unique');

    var counts = {};
    for (var j = 0; j < foundModuleDirNames.length; ++j) {
        counts[foundModuleDirs[j]] = true;
    }
    t.equal(keys(counts).length, 1, 'all found module directories had the same count');
};

test('node-modules-paths', function (t) {
    t.test('no options', function (t) {
        var start = path.join(__dirname, 'resolver');
        var dirs = nodeModulesPaths(start);

        verifyDirs(t, start, dirs);

        t.end();
    });

    t.test('empty options', function (t) {
        var start = path.join(__dirname, 'resolver');
        var dirs = nodeModulesPaths(start, {});

        verifyDirs(t, start, dirs);

        t.end();
    });

    t.test('with paths=array option', function (t) {
        var start = path.join(__dirname, 'resolver');
        var paths = ['a', 'b'];
        var dirs = nodeModulesPaths(start, { paths: paths });

        verifyDirs(t, start, dirs, null, paths);

        t.end();
    });

    t.test('with paths=function option', function (t) {
        var paths = function paths(request, absoluteStart, getNodeModulesDirs, opts) {
            return getNodeModulesDirs().concat(path.join(absoluteStart, 'not node modules', request));
        };

        var start = path.join(__dirname, 'resolver');
        var dirs = nodeModulesPaths(start, { paths: paths }, 'pkg');

        verifyDirs(t, start, dirs, null, [path.join(start, 'not node modules', 'pkg')]);

        t.end();
    });

    t.test('with paths=function skipping node modules resolution', function (t) {
        var paths = function paths(request, absoluteStart, getNodeModulesDirs, opts) {
            return [];
        };
        var start = path.join(__dirname, 'resolver');
        var dirs = nodeModulesPaths(start, { paths: paths });
        t.deepEqual(dirs, [], 'no node_modules was computed');
        t.end();
    });

    t.test('with moduleDirectory option', function (t) {
        var start = path.join(__dirname, 'resolver');
        var moduleDirectory = 'not node modules';
        var dirs = nodeModulesPaths(start, { moduleDirectory: moduleDirectory });

        verifyDirs(t, start, dirs, moduleDirectory);

        t.end();
    });

    t.test('with 1 moduleDirectory and paths options', function (t) {
        var start = path.join(__dirname, 'resolver');
        var paths = ['a', 'b'];
        var moduleDirectory = 'not node modules';
        var dirs = nodeModulesPaths(start, { paths: paths, moduleDirectory: moduleDirectory });

        verifyDirs(t, start, dirs, moduleDirectory, paths);

        t.end();
    });

    t.test('with 1+ moduleDirectory and paths options', function (t) {
        var start = path.join(__dirname, 'resolver');
        var paths = ['a', 'b'];
        var moduleDirectories = ['not node modules', 'other modules'];
        var dirs = nodeModulesPaths(start, { paths: paths, moduleDirectory: moduleDirectories });

        verifyDirs(t, start, dirs, moduleDirectories, paths);

        t.end();
    });

    t.test('combine paths correctly on Windows', function (t) {
        var start = 'C:\\Users\\username\\myProject\\src';
        var paths = [];
        var moduleDirectories = ['node_modules', start];
        var dirs = nodeModulesPaths(start, { paths: paths, moduleDirectory: moduleDirectories });

        t.equal(dirs.indexOf(path.resolve(start)) > -1, true, 'should contain start dir');

        t.end();
    });

    t.test('combine paths correctly on non-Windows', { skip: process.platform === 'win32' }, function (t) {
        var start = '/Users/username/git/myProject/src';
        var paths = [];
        var moduleDirectories = ['node_modules', '/Users/username/git/myProject/src'];
        var dirs = nodeModulesPaths(start, { paths: paths, moduleDirectory: moduleDirectories });

        t.equal(dirs.indexOf(path.resolve(start)) > -1, true, 'should contain start dir');

        t.end();
    });
});


---

File name: node_modules\resolve\test\node_path\x\aaa\index.js

Code:
module.exports = 'A';


---

File name: node_modules\resolve\test\node_path\x\ccc\index.js

Code:
module.exports = 'C';


---

File name: node_modules\resolve\test\node_path\y\bbb\index.js

Code:
module.exports = 'B';


---

File name: node_modules\resolve\test\node_path\y\ccc\index.js

Code:
module.exports = 'CY';


---

File name: node_modules\resolve\test\node_path.js

Code:
var fs = require('fs');
var path = require('path');
var test = require('tape');
var resolve = require('../');

test('$NODE_PATH', function (t) {
    t.plan(8);

    var isDir = function (dir, cb) {
        if (dir === '/node_path' || dir === 'node_path/x') {
            return cb(null, true);
        }
        fs.stat(dir, function (err, stat) {
            if (!err) {
                return cb(null, stat.isDirectory());
            }
            if (err.code === 'ENOENT' || err.code === 'ENOTDIR') return cb(null, false);
            return cb(err);
        });
    };

    resolve('aaa', {
        paths: [
            path.join(__dirname, '/node_path/x'),
            path.join(__dirname, '/node_path/y')
        ],
        basedir: __dirname,
        isDirectory: isDir
    }, function (err, res) {
        t.error(err);
        t.equal(res, path.join(__dirname, '/node_path/x/aaa/index.js'), 'aaa resolves');
    });

    resolve('bbb', {
        paths: [
            path.join(__dirname, '/node_path/x'),
            path.join(__dirname, '/node_path/y')
        ],
        basedir: __dirname,
        isDirectory: isDir
    }, function (err, res) {
        t.error(err);
        t.equal(res, path.join(__dirname, '/node_path/y/bbb/index.js'), 'bbb resolves');
    });

    resolve('ccc', {
        paths: [
            path.join(__dirname, '/node_path/x'),
            path.join(__dirname, '/node_path/y')
        ],
        basedir: __dirname,
        isDirectory: isDir
    }, function (err, res) {
        t.error(err);
        t.equal(res, path.join(__dirname, '/node_path/x/ccc/index.js'), 'ccc resolves');
    });

    // ensure that relative paths still resolve against the regular `node_modules` correctly
    resolve('tap', {
        paths: [
            'node_path'
        ],
        basedir: path.join(__dirname, 'node_path/x'),
        isDirectory: isDir
    }, function (err, res) {
        var root = require('tap/package.json').main; // eslint-disable-line global-require
        t.error(err);
        t.equal(res, path.resolve(__dirname, '..', 'node_modules/tap', root), 'tap resolves');
    });
});


---

File name: node_modules\resolve\test\nonstring.js

Code:
var test = require('tape');
var resolve = require('../');

test('nonstring', function (t) {
    t.plan(1);
    resolve(555, function (err, res, pkg) {
        t.ok(err);
    });
});


---

File name: node_modules\resolve\test\pathfilter\deep_ref\main.js

Code:


---

File name: node_modules\resolve\test\pathfilter.js

Code:
var path = require('path');
var test = require('tape');
var resolve = require('../');

var resolverDir = path.join(__dirname, '/pathfilter/deep_ref');

var pathFilterFactory = function (t) {
    return function (pkg, x, remainder) {
        t.equal(pkg.version, '1.2.3');
        t.equal(x, path.join(resolverDir, 'node_modules/deep/ref'));
        t.equal(remainder, 'ref');
        return 'alt';
    };
};

test('#62: deep module references and the pathFilter', function (t) {
    t.test('deep/ref.js', function (st) {
        st.plan(3);

        resolve('deep/ref', { basedir: resolverDir }, function (err, res, pkg) {
            if (err) st.fail(err);

            st.equal(pkg.version, '1.2.3');
            st.equal(res, path.join(resolverDir, 'node_modules/deep/ref.js'));
        });

        var res = resolve.sync('deep/ref', { basedir: resolverDir });
        st.equal(res, path.join(resolverDir, 'node_modules/deep/ref.js'));
    });

    t.test('deep/deeper/ref', function (st) {
        st.plan(4);

        resolve(
            'deep/deeper/ref',
            { basedir: resolverDir },
            function (err, res, pkg) {
                if (err) t.fail(err);
                st.notEqual(pkg, undefined);
                st.equal(pkg.version, '1.2.3');
                st.equal(res, path.join(resolverDir, 'node_modules/deep/deeper/ref.js'));
            }
        );

        var res = resolve.sync(
            'deep/deeper/ref',
            { basedir: resolverDir }
        );
        st.equal(res, path.join(resolverDir, 'node_modules/deep/deeper/ref.js'));
    });

    t.test('deep/ref alt', function (st) {
        st.plan(8);

        var pathFilter = pathFilterFactory(st);

        var res = resolve.sync(
            'deep/ref',
            { basedir: resolverDir, pathFilter: pathFilter }
        );
        st.equal(res, path.join(resolverDir, 'node_modules/deep/alt.js'));

        resolve(
            'deep/ref',
            { basedir: resolverDir, pathFilter: pathFilter },
            function (err, res, pkg) {
                if (err) st.fail(err);
                st.equal(res, path.join(resolverDir, 'node_modules/deep/alt.js'));
                st.end();
            }
        );
    });

    t.end();
});


---

File name: node_modules\resolve\test\precedence\aaa\index.js

Code:
module.exports = 'okok';


---

File name: node_modules\resolve\test\precedence\aaa\main.js

Code:
console.log(require('./'));


---

File name: node_modules\resolve\test\precedence\aaa.js

Code:
module.exports = 'wtf';


---

File name: node_modules\resolve\test\precedence\bbb\main.js

Code:
console.log(require('./')); // should throw


---

File name: node_modules\resolve\test\precedence\bbb.js

Code:
module.exports = '>_<';


---

File name: node_modules\resolve\test\precedence.js

Code:
var path = require('path');
var test = require('tape');
var resolve = require('../');

test('precedence', function (t) {
    t.plan(3);
    var dir = path.join(__dirname, 'precedence/aaa');

    resolve('./', { basedir: dir }, function (err, res, pkg) {
        t.ifError(err);
        t.equal(res, path.join(dir, 'index.js'));
        t.equal(pkg.name, 'resolve');
    });
});

test('./ should not load ${dir}.js', function (t) { // eslint-disable-line no-template-curly-in-string
    t.plan(1);
    var dir = path.join(__dirname, 'precedence/bbb');

    resolve('./', { basedir: dir }, function (err, res, pkg) {
        t.ok(err);
    });
});


---

File name: node_modules\resolve\test\resolver\baz\doom.js

Code:


---

File name: node_modules\resolve\test\resolver\baz\package.json

Code:
{
    "name": "baz",
    "main": "quux.js"
}


---

File name: node_modules\resolve\test\resolver\baz\quux.js

Code:
module.exports = 1;


---

File name: node_modules\resolve\test\resolver\browser_field\a.js

Code:


---

File name: node_modules\resolve\test\resolver\browser_field\b.js

Code:


---

File name: node_modules\resolve\test\resolver\browser_field\package.json

Code:
{
  "name": "browser_field",
  "main": "a",
  "browser": "b"
}


---

File name: node_modules\resolve\test\resolver\dot_main\index.js

Code:
module.exports = 1;


---

File name: node_modules\resolve\test\resolver\dot_main\package.json

Code:
{
    "main": "."
}


---

File name: node_modules\resolve\test\resolver\dot_slash_main\index.js

Code:
module.exports = 1;


---

File name: node_modules\resolve\test\resolver\dot_slash_main\package.json

Code:
{
    "main": "./"
}


---

File name: node_modules\resolve\test\resolver\false_main\index.js

Code:


---

File name: node_modules\resolve\test\resolver\false_main\package.json

Code:
{
	"name": "false_main",
	"main": false
}


---

File name: node_modules\resolve\test\resolver\foo.js

Code:
module.exports = 1;


---

File name: node_modules\resolve\test\resolver\incorrect_main\index.js

Code:
// this is the actual main file 'index.js', not 'wrong.js' like the package.json would indicate
module.exports = 1;


---

File name: node_modules\resolve\test\resolver\incorrect_main\package.json

Code:
{
    "main": "wrong.js"
}


---

File name: node_modules\resolve\test\resolver\invalid_main\package.json

Code:
{
  "name": "invalid_main",
  "main": [
    "why is this a thing",
    "srsly omg wtf"
  ]
}


---

File name: node_modules\resolve\test\resolver\mug.js

Code:


---

File name: node_modules\resolve\test\resolver\multirepo\lerna.json

Code:
{
  "packages": [
    "packages/*"
  ],
  "version": "0.0.0"
}


---

File name: node_modules\resolve\test\resolver\multirepo\package.json

Code:
{
  "name": "ljharb-monorepo-symlink-test",
  "private": true,
  "version": "0.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "postinstall": "lerna bootstrap",
    "test": "node packages/package-a"
  },
  "author": "",
  "license": "MIT",
  "dependencies": {
    "jquery": "^3.3.1",
    "resolve": "../../../"
  },
  "devDependencies": {
    "lerna": "^3.4.3"
  }
}


---

File name: node_modules\resolve\test\resolver\multirepo\packages\package-a\index.js

Code:
'use strict';

var assert = require('assert');
var path = require('path');
var resolve = require('resolve');

var basedir = __dirname + '/node_modules/@my-scope/package-b';

var expected = path.join(__dirname, '../../node_modules/jquery/dist/jquery.js');

/*
 * preserveSymlinks === false
 * will search NPM package from
 * - packages/package-b/node_modules
 * - packages/node_modules
 * - node_modules
 */
assert.equal(resolve.sync('jquery', { basedir: basedir, preserveSymlinks: false }), expected);
assert.equal(resolve.sync('../../node_modules/jquery', { basedir: basedir, preserveSymlinks: false }), expected);

/*
 * preserveSymlinks === true
 * will search NPM package from
 * - packages/package-a/node_modules/@my-scope/packages/package-b/node_modules
 * - packages/package-a/node_modules/@my-scope/packages/node_modules
 * - packages/package-a/node_modules/@my-scope/node_modules
 * - packages/package-a/node_modules/node_modules
 * - packages/package-a/node_modules
 * - packages/node_modules
 * - node_modules
 */
assert.equal(resolve.sync('jquery', { basedir: basedir, preserveSymlinks: true }), expected);
assert.equal(resolve.sync('../../../../../node_modules/jquery', { basedir: basedir, preserveSymlinks: true }), expected);

console.log(' * all monorepo paths successfully resolved through symlinks');


---

File name: node_modules\resolve\test\resolver\multirepo\packages\package-a\package.json

Code:
{
  "name": "@my-scope/package-a",
  "version": "0.0.0",
  "private": true,
  "description": "",
  "license": "MIT",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: run tests from root\" && exit 1"
  },
  "dependencies": {
    "@my-scope/package-b": "^0.0.0"
  }
}


---

File name: node_modules\resolve\test\resolver\multirepo\packages\package-b\index.js

Code:


---

File name: node_modules\resolve\test\resolver\multirepo\packages\package-b\package.json

Code:
{
  "name": "@my-scope/package-b",
  "private": true,
  "version": "0.0.0",
  "description": "",
  "license": "MIT",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: run tests from root\" && exit 1"
  },
  "dependencies": {
    "@my-scope/package-a": "^0.0.0"
  }
}


---

File name: node_modules\resolve\test\resolver\nested_symlinks\mylib\async.js

Code:
var a = require.resolve('buffer/').replace(process.cwd(), '$CWD');
var b;
var c;

var test = function test() {
    console.log(a, ': require.resolve, preserveSymlinks ' + (process.execArgv.indexOf('preserve-symlinks') > -1 ? 'true' : 'false'));
    console.log(b, ': preserveSymlinks true');
    console.log(c, ': preserveSymlinks false');

    if (a !== b && a !== c) {
        throw 'async: no match';
    }
    console.log('async: success! a matched either b or c\n');
};

require('resolve')('buffer/', { preserveSymlinks: true }, function (err, result) {
    if (err) { throw err; }
    b = result.replace(process.cwd(), '$CWD');
    if (b && c) { test(); }
});
require('resolve')('buffer/', { preserveSymlinks: false }, function (err, result) {
    if (err) { throw err; }
    c = result.replace(process.cwd(), '$CWD');
    if (b && c) { test(); }
});



---

File name: node_modules\resolve\test\resolver\nested_symlinks\mylib\package.json

Code:
{
  "name": "mylib",
  "version": "0.0.0",
  "description": "",
  "private": true,
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "dependencies": {
    "buffer": "*"
  }
}


---

File name: node_modules\resolve\test\resolver\nested_symlinks\mylib\sync.js

Code:
var a = require.resolve('buffer/').replace(process.cwd(), '$CWD');
var b = require('resolve').sync('buffer/', { preserveSymlinks: true }).replace(process.cwd(), '$CWD');
var c = require('resolve').sync('buffer/', { preserveSymlinks: false }).replace(process.cwd(), '$CWD');

console.log(a, ': require.resolve, preserveSymlinks ' + (process.execArgv.indexOf('preserve-symlinks') > -1 ? 'true' : 'false'));
console.log(b, ': preserveSymlinks true');
console.log(c, ': preserveSymlinks false');

if (a !== b && a !== c) {
    throw 'sync: no match';
}
console.log('sync: success! a matched either b or c\n');


---

File name: node_modules\resolve\test\resolver\other_path\lib\other-lib.js

Code:


---

File name: node_modules\resolve\test\resolver\other_path\root.js

Code:


---

File name: node_modules\resolve\test\resolver\quux\foo\index.js

Code:
module.exports = 1;


---

File name: node_modules\resolve\test\resolver\same_names\foo\index.js

Code:
module.exports = 1;


---

File name: node_modules\resolve\test\resolver\same_names\foo.js

Code:
module.exports = 42;


---

File name: node_modules\resolve\test\resolver\symlinked\package\bar.js

Code:
module.exports = 'bar';


---

File name: node_modules\resolve\test\resolver\symlinked\package\package.json

Code:
{
    "main": "bar.js"
}

---

File name: node_modules\resolve\test\resolver\symlinked\_\node_modules\foo.js

Code:


---

File name: node_modules\resolve\test\resolver\without_basedir\main.js

Code:
var resolve = require('../../../');

module.exports = function (t, cb) {
    resolve('mymodule', null, cb);
};


---

File name: node_modules\resolve\test\resolver.js

Code:
var path = require('path');
var fs = require('fs');
var test = require('tape');
var resolve = require('../');
var async = require('../async');

test('`./async` entry point', function (t) {
    t.equal(resolve, async, '`./async` entry point is the same as `main`');
    t.end();
});

test('async foo', function (t) {
    t.plan(12);
    var dir = path.join(__dirname, 'resolver');

    resolve('./foo', { basedir: dir }, function (err, res, pkg) {
        if (err) t.fail(err);
        t.equal(res, path.join(dir, 'foo.js'));
        t.equal(pkg && pkg.name, 'resolve');
    });

    resolve('./foo.js', { basedir: dir }, function (err, res, pkg) {
        if (err) t.fail(err);
        t.equal(res, path.join(dir, 'foo.js'));
        t.equal(pkg && pkg.name, 'resolve');
    });

    resolve('./foo', { basedir: dir, 'package': { main: 'resolver' } }, function (err, res, pkg) {
        if (err) t.fail(err);
        t.equal(res, path.join(dir, 'foo.js'));
        t.equal(pkg && pkg.main, 'resolver');
    });

    resolve('./foo.js', { basedir: dir, 'package': { main: 'resolver' } }, function (err, res, pkg) {
        if (err) t.fail(err);
        t.equal(res, path.join(dir, 'foo.js'));
        t.equal(pkg.main, 'resolver');
    });

    resolve('./foo', { basedir: dir, filename: path.join(dir, 'baz.js') }, function (err, res) {
        if (err) t.fail(err);
        t.equal(res, path.join(dir, 'foo.js'));
    });

    resolve('foo', { basedir: dir }, function (err) {
        t.equal(err.message, "Cannot find module 'foo' from '" + path.resolve(dir) + "'");
        t.equal(err.code, 'MODULE_NOT_FOUND');
    });

    // Test that filename is reported as the "from" value when passed.
    resolve('foo', { basedir: dir, filename: path.join(dir, 'baz.js') }, function (err) {
        t.equal(err.message, "Cannot find module 'foo' from '" + path.join(dir, 'baz.js') + "'");
    });
});

test('bar', function (t) {
    t.plan(6);
    var dir = path.join(__dirname, 'resolver');

    resolve('foo', { basedir: dir + '/bar' }, function (err, res, pkg) {
        if (err) t.fail(err);
        t.equal(res, path.join(dir, 'bar/node_modules/foo/index.js'));
        t.equal(pkg, undefined);
    });

    resolve('foo', { basedir: dir + '/bar' }, function (err, res, pkg) {
        if (err) t.fail(err);
        t.equal(res, path.join(dir, 'bar/node_modules/foo/index.js'));
        t.equal(pkg, undefined);
    });

    resolve('foo', { basedir: dir + '/bar', 'package': { main: 'bar' } }, function (err, res, pkg) {
        if (err) t.fail(err);
        t.equal(res, path.join(dir, 'bar/node_modules/foo/index.js'));
        t.equal(pkg.main, 'bar');
    });
});

test('baz', function (t) {
    t.plan(4);
    var dir = path.join(__dirname, 'resolver');

    resolve('./baz', { basedir: dir }, function (err, res, pkg) {
        if (err) t.fail(err);
        t.equal(res, path.join(dir, 'baz/quux.js'));
        t.equal(pkg.main, 'quux.js');
    });

    resolve('./baz', { basedir: dir, 'package': { main: 'resolver' } }, function (err, res, pkg) {
        if (err) t.fail(err);
        t.equal(res, path.join(dir, 'baz/quux.js'));
        t.equal(pkg.main, 'quux.js');
    });
});

test('biz', function (t) {
    t.plan(24);
    var dir = path.join(__dirname, 'resolver/biz/node_modules');

    resolve('./grux', { basedir: dir }, function (err, res, pkg) {
        if (err) t.fail(err);
        t.equal(res, path.join(dir, 'grux/index.js'));
        t.equal(pkg, undefined);
    });

    resolve('./grux', { basedir: dir, 'package': { main: 'biz' } }, function (err, res, pkg) {
        if (err) t.fail(err);
        t.equal(res, path.join(dir, 'grux/index.js'));
        t.equal(pkg.main, 'biz');
    });

    resolve('./garply', { basedir: dir }, function (err, res, pkg) {
        if (err) t.fail(err);
        t.equal(res, path.join(dir, 'garply/lib/index.js'));
        t.equal(pkg.main, './lib');
    });

    resolve('./garply', { basedir: dir, 'package': { main: 'biz' } }, function (err, res, pkg) {
        if (err) t.fail(err);
        t.equal(res, path.join(dir, 'garply/lib/index.js'));
        t.equal(pkg.main, './lib');
    });

    resolve('tiv', { basedir: dir + '/grux' }, function (err, res, pkg) {
        if (err) t.fail(err);
        t.equal(res, path.join(dir, 'tiv/index.js'));
        t.equal(pkg, undefined);
    });

    resolve('tiv', { basedir: dir + '/grux', 'package': { main: 'grux' } }, function (err, res, pkg) {
        if (err) t.fail(err);
        t.equal(res, path.join(dir, 'tiv/index.js'));
        t.equal(pkg.main, 'grux');
    });

    resolve('tiv', { basedir: dir + '/garply' }, function (err, res, pkg) {
        if (err) t.fail(err);
        t.equal(res, path.join(dir, 'tiv/index.js'));
        t.equal(pkg, undefined);
    });

    resolve('tiv', { basedir: dir + '/garply', 'package': { main: './lib' } }, function (err, res, pkg) {
        if (err) t.fail(err);
        t.equal(res, path.join(dir, 'tiv/index.js'));
        t.equal(pkg.main, './lib');
    });

    resolve('grux', { basedir: dir + '/tiv' }, function (err, res, pkg) {
        if (err) t.fail(err);
        t.equal(res, path.join(dir, 'grux/index.js'));
        t.equal(pkg, undefined);
    });

    resolve('grux', { basedir: dir + '/tiv', 'package': { main: 'tiv' } }, function (err, res, pkg) {
        if (err) t.fail(err);
        t.equal(res, path.join(dir, 'grux/index.js'));
        t.equal(pkg.main, 'tiv');
    });

    resolve('garply', { basedir: dir + '/tiv' }, function (err, res, pkg) {
        if (err) t.fail(err);
        t.equal(res, path.join(dir, 'garply/lib/index.js'));
        t.equal(pkg.main, './lib');
    });

    resolve('garply', { basedir: dir + '/tiv', 'package': { main: 'tiv' } }, function (err, res, pkg) {
        if (err) t.fail(err);
        t.equal(res, path.join(dir, 'garply/lib/index.js'));
        t.equal(pkg.main, './lib');
    });
});

test('quux', function (t) {
    t.plan(2);
    var dir = path.join(__dirname, 'resolver/quux');

    resolve('./foo', { basedir: dir, 'package': { main: 'quux' } }, function (err, res, pkg) {
        if (err) t.fail(err);
        t.equal(res, path.join(dir, 'foo/index.js'));
        t.equal(pkg.main, 'quux');
    });
});

test('normalize', function (t) {
    t.plan(2);
    var dir = path.join(__dirname, 'resolver/biz/node_modules/grux');

    resolve('../grux', { basedir: dir }, function (err, res, pkg) {
        if (err) t.fail(err);
        t.equal(res, path.join(dir, 'index.js'));
        t.equal(pkg, undefined);
    });
});

test('cup', function (t) {
    t.plan(5);
    var dir = path.join(__dirname, 'resolver');

    resolve('./cup', { basedir: dir, extensions: ['.js', '.coffee'] }, function (err, res) {
        if (err) t.fail(err);
        t.equal(res, path.join(dir, 'cup.coffee'));
    });

    resolve('./cup.coffee', { basedir: dir }, function (err, res) {
        if (err) t.fail(err);
        t.equal(res, path.join(dir, 'cup.coffee'));
    });

    resolve('./cup', { basedir: dir, extensions: ['.js'] }, function (err, res) {
        t.equal(err.message, "Cannot find module './cup' from '" + path.resolve(dir) + "'");
        t.equal(err.code, 'MODULE_NOT_FOUND');
    });

    // Test that filename is reported as the "from" value when passed.
    resolve('./cup', { basedir: dir, extensions: ['.js'], filename: path.join(dir, 'cupboard.js') }, function (err, res) {
        t.equal(err.message, "Cannot find module './cup' from '" + path.join(dir, 'cupboard.js') + "'");
    });
});

test('mug', function (t) {
    t.plan(3);
    var dir = path.join(__dirname, 'resolver');

    resolve('./mug', { basedir: dir }, function (err, res) {
        if (err) t.fail(err);
        t.equal(res, path.join(dir, 'mug.js'));
    });

    resolve('./mug', { basedir: dir, extensions: ['.coffee', '.js'] }, function (err, res) {
        if (err) t.fail(err);
        t.equal(res, path.join(dir, '/mug.coffee'));
    });

    resolve('./mug', { basedir: dir, extensions: ['.js', '.coffee'] }, function (err, res) {
        t.equal(res, path.join(dir, '/mug.js'));
    });
});

test('other path', function (t) {
    t.plan(6);
    var resolverDir = path.join(__dirname, 'resolver');
    var dir = path.join(resolverDir, 'bar');
    var otherDir = path.join(resolverDir, 'other_path');

    resolve('root', { basedir: dir, paths: [otherDir] }, function (err, res) {
        if (err) t.fail(err);
        t.equal(res, path.join(resolverDir, 'other_path/root.js'));
    });

    resolve('lib/other-lib', { basedir: dir, paths: [otherDir] }, function (err, res) {
        if (err) t.fail(err);
        t.equal(res, path.join(resolverDir, 'other_path/lib/other-lib.js'));
    });

    resolve('root', { basedir: dir }, function (err, res) {
        t.equal(err.message, "Cannot find module 'root' from '" + path.resolve(dir) + "'");
        t.equal(err.code, 'MODULE_NOT_FOUND');
    });

    resolve('zzz', { basedir: dir, paths: [otherDir] }, function (err, res) {
        t.equal(err.message, "Cannot find module 'zzz' from '" + path.resolve(dir) + "'");
        t.equal(err.code, 'MODULE_NOT_FOUND');
    });
});

test('path iterator', function (t) {
    t.plan(2);

    var resolverDir = path.join(__dirname, 'resolver');

    var exactIterator = function (x, start, getPackageCandidates, opts) {
        return [path.join(resolverDir, x)];
    };

    resolve('baz', { packageIterator: exactIterator }, function (err, res, pkg) {
        if (err) t.fail(err);
        t.equal(res, path.join(resolverDir, 'baz/quux.js'));
        t.equal(pkg && pkg.name, 'baz');
    });
});

test('incorrect main', function (t) {
    t.plan(1);

    var resolverDir = path.join(__dirname, 'resolver');
    var dir = path.join(resolverDir, 'incorrect_main');

    resolve('./incorrect_main', { basedir: resolverDir }, function (err, res, pkg) {
        if (err) t.fail(err);
        t.equal(res, path.join(dir, 'index.js'));
    });
});

test('missing index', function (t) {
    t.plan(2);

    var resolverDir = path.join(__dirname, 'resolver');
    resolve('./missing_index', { basedir: resolverDir }, function (err, res, pkg) {
        t.ok(err instanceof Error);
        t.equal(err && err.code, 'MODULE_NOT_FOUND', 'error has correct error code');
    });
});

test('missing main', function (t) {
    t.plan(1);

    var resolverDir = path.join(__dirname, 'resolver');

    resolve('./missing_main', { basedir: resolverDir }, function (err, res, pkg) {
        t.equal(err && err.code, 'MODULE_NOT_FOUND', 'error has correct error code');
    });
});

test('null main', function (t) {
    t.plan(1);

    var resolverDir = path.join(__dirname, 'resolver');

    resolve('./null_main', { basedir: resolverDir }, function (err, res, pkg) {
        t.equal(err && err.code, 'MODULE_NOT_FOUND', 'error has correct error code');
    });
});

test('main: false', function (t) {
    t.plan(2);

    var basedir = path.join(__dirname, 'resolver');
    var dir = path.join(basedir, 'false_main');
    resolve('./false_main', { basedir: basedir }, function (err, res, pkg) {
        if (err) t.fail(err);
        t.equal(
            res,
            path.join(dir, 'index.js'),
            '`"main": false`: resolves to `index.js`'
        );
        t.deepEqual(pkg, {
            name: 'false_main',
            main: false
        });
    });
});

test('without basedir', function (t) {
    t.plan(1);

    var dir = path.join(__dirname, 'resolver/without_basedir');
    var tester = require(path.join(dir, 'main.js')); // eslint-disable-line global-require

    tester(t, function (err, res, pkg) {
        if (err) {
            t.fail(err);
        } else {
            t.equal(res, path.join(dir, 'node_modules/mymodule.js'));
        }
    });
});

test('#52 - incorrectly resolves module-paths like "./someFolder/" when there is a file of the same name', function (t) {
    t.plan(2);

    var dir = path.join(__dirname, 'resolver');

    resolve('./foo', { basedir: path.join(dir, 'same_names') }, function (err, res, pkg) {
        if (err) t.fail(err);
        t.equal(res, path.join(dir, 'same_names/foo.js'));
    });

    resolve('./foo/', { basedir: path.join(dir, 'same_names') }, function (err, res, pkg) {
        if (err) t.fail(err);
        t.equal(res, path.join(dir, 'same_names/foo/index.js'));
    });
});

test('#211 - incorrectly resolves module-paths like "." when from inside a folder with a sibling file of the same name', function (t) {
    t.plan(2);

    var dir = path.join(__dirname, 'resolver');

    resolve('./', { basedir: path.join(dir, 'same_names/foo') }, function (err, res, pkg) {
        if (err) t.fail(err);
        t.equal(res, path.join(dir, 'same_names/foo/index.js'));
    });

    resolve('.', { basedir: path.join(dir, 'same_names/foo') }, function (err, res, pkg) {
        if (err) t.fail(err);
        t.equal(res, path.join(dir, 'same_names/foo/index.js'));
    });
});

test('async: #121 - treating an existing file as a dir when no basedir', function (t) {
    var testFile = path.basename(__filename);

    t.test('sanity check', function (st) {
        st.plan(1);
        resolve('./' + testFile, function (err, res, pkg) {
            if (err) t.fail(err);
            st.equal(res, __filename, 'sanity check');
        });
    });

    t.test('with a fake directory', function (st) {
        st.plan(4);

        resolve('./' + testFile + '/blah', function (err, res, pkg) {
            st.ok(err, 'there is an error');
            st.notOk(res, 'no result');

            st.equal(err && err.code, 'MODULE_NOT_FOUND', 'error code matches require.resolve');
            st.equal(
                err && err.message,
                'Cannot find module \'./' + testFile + '/blah\' from \'' + __dirname + '\'',
                'can not find nonexistent module'
            );
            st.end();
        });
    });

    t.end();
});

test('async dot main', function (t) {
    var start = new Date();
    t.plan(3);
    resolve('./resolver/dot_main', function (err, ret) {
        t.notOk(err);
        t.equal(ret, path.join(__dirname, 'resolver/dot_main/index.js'));
        t.ok(new Date() - start < 50, 'resolve.sync timedout');
        t.end();
    });
});

test('async dot slash main', function (t) {
    var start = new Date();
    t.plan(3);
    resolve('./resolver/dot_slash_main', function (err, ret) {
        t.notOk(err);
        t.equal(ret, path.join(__dirname, 'resolver/dot_slash_main/index.js'));
        t.ok(new Date() - start < 50, 'resolve.sync timedout');
        t.end();
    });
});

test('not a directory', function (t) {
    t.plan(6);
    var path = './foo';
    resolve(path, { basedir: __filename }, function (err, res, pkg) {
        t.ok(err, 'a non-directory errors');
        t.equal(arguments.length, 1);
        t.equal(res, undefined);
        t.equal(pkg, undefined);

        t.equal(err && err.message, 'Cannot find module \'' + path + '\' from \'' + __filename + '\'');
        t.equal(err && err.code, 'MODULE_NOT_FOUND');
    });
});

test('non-string "main" field in package.json', function (t) {
    t.plan(5);

    var dir = path.join(__dirname, 'resolver');
    resolve('./invalid_main', { basedir: dir }, function (err, res, pkg) {
        t.ok(err, 'errors on non-string main');
        t.equal(err.message, 'package “invalid_main” `main` must be a string');
        t.equal(err.code, 'INVALID_PACKAGE_MAIN');
        t.equal(res, undefined, 'res is undefined');
        t.equal(pkg, undefined, 'pkg is undefined');
    });
});

test('non-string "main" field in package.json', function (t) {
    t.plan(5);

    var dir = path.join(__dirname, 'resolver');
    resolve('./invalid_main', { basedir: dir }, function (err, res, pkg) {
        t.ok(err, 'errors on non-string main');
        t.equal(err.message, 'package “invalid_main” `main` must be a string');
        t.equal(err.code, 'INVALID_PACKAGE_MAIN');
        t.equal(res, undefined, 'res is undefined');
        t.equal(pkg, undefined, 'pkg is undefined');
    });
});

test('browser field in package.json', function (t) {
    t.plan(3);

    var dir = path.join(__dirname, 'resolver');
    resolve(
        './browser_field',
        {
            basedir: dir,
            packageFilter: function packageFilter(pkg) {
                if (pkg.browser) {
                    pkg.main = pkg.browser; // eslint-disable-line no-param-reassign
                    delete pkg.browser; // eslint-disable-line no-param-reassign
                }
                return pkg;
            }
        },
        function (err, res, pkg) {
            if (err) t.fail(err);
            t.equal(res, path.join(dir, 'browser_field', 'b.js'));
            t.equal(pkg && pkg.main, 'b');
            t.equal(pkg && pkg.browser, undefined);
        }
    );
});

test('absolute paths', function (t) {
    t.plan(4);

    var extensionless = __filename.slice(0, -path.extname(__filename).length);

    resolve(__filename, function (err, res) {
        t.equal(
            res,
            __filename,
            'absolute path to this file resolves'
        );
    });
    resolve(extensionless, function (err, res) {
        t.equal(
            res,
            __filename,
            'extensionless absolute path to this file resolves'
        );
    });
    resolve(__filename, { basedir: process.cwd() }, function (err, res) {
        t.equal(
            res,
            __filename,
            'absolute path to this file with a basedir resolves'
        );
    });
    resolve(extensionless, { basedir: process.cwd() }, function (err, res) {
        t.equal(
            res,
            __filename,
            'extensionless absolute path to this file with a basedir resolves'
        );
    });
});

var malformedDir = path.join(__dirname, 'resolver/malformed_package_json');
test('malformed package.json', { skip: !fs.existsSync(malformedDir) }, function (t) {
    /* eslint operator-linebreak: ["error", "before"], function-paren-newline: "off" */
    t.plan(
        (3 * 3) // 3 sets of 3 assertions in the final callback
        + 2 // 1 readPackage call with malformed package.json
    );

    var basedir = malformedDir;
    var expected = path.join(basedir, 'index.js');

    resolve('./index.js', { basedir: basedir }, function (err, res, pkg) {
        t.error(err, 'no error');
        t.equal(res, expected, 'malformed package.json is silently ignored');
        t.equal(pkg, undefined, 'malformed package.json gives an undefined `pkg` argument');
    });

    resolve(
        './index.js',
        {
            basedir: basedir,
            packageFilter: function (pkg, pkgfile, dir) {
                t.fail('should not reach here');
            }
        },
        function (err, res, pkg) {
            t.error(err, 'with packageFilter: no error');
            t.equal(res, expected, 'with packageFilter: malformed package.json is silently ignored');
            t.equal(pkg, undefined, 'with packageFilter: malformed package.json gives an undefined `pkg` argument');
        }
    );

    resolve(
        './index.js',
        {
            basedir: basedir,
            readPackage: function (readFile, pkgfile, cb) {
                t.equal(pkgfile, path.join(basedir, 'package.json'), 'readPackageSync: `pkgfile` is package.json path');
                readFile(pkgfile, function (err, result) {
                    try {
                        cb(null, JSON.parse(result));
                    } catch (e) {
                        t.ok(e instanceof SyntaxError, 'readPackage: malformed package.json parses as a syntax error');
                        cb(null);
                    }
                });
            }
        },
        function (err, res, pkg) {
            t.error(err, 'with readPackage: no error');
            t.equal(res, expected, 'with readPackage: malformed package.json is silently ignored');
            t.equal(pkg, undefined, 'with readPackage: malformed package.json gives an undefined `pkg` argument');
        }
    );
});


---

File name: node_modules\resolve\test\resolver_sync.js

Code:
var path = require('path');
var fs = require('fs');
var test = require('tape');

var resolve = require('../');
var sync = require('../sync');

var requireResolveSupportsPaths = require.resolve.length > 1
    && !(/^v12\.[012]\./).test(process.version); // broken in v12.0-12.2, see https://github.com/nodejs/node/issues/27794

var requireResolveDefaultPathsBroken = (/^v8\.9\.|^v9\.[01]\.0|^v9\.2\./).test(process.version);
// broken in node v8.9.x, v9.0, v9.1, v9.2.x. see https://github.com/nodejs/node/pull/17113

test('`./sync` entry point', function (t) {
    t.equal(resolve.sync, sync, '`./sync` entry point is the same as `.sync` on `main`');
    t.end();
});

test('foo', function (t) {
    var dir = path.join(__dirname, 'resolver');

    t.equal(
        resolve.sync('./foo', { basedir: dir }),
        path.join(dir, 'foo.js'),
        './foo'
    );
    if (requireResolveSupportsPaths) {
        t.equal(
            resolve.sync('./foo', { basedir: dir }),
            require.resolve('./foo', { paths: [dir] }),
            './foo: resolve.sync === require.resolve'
        );
    }

    t.equal(
        resolve.sync('./foo.js', { basedir: dir }),
        path.join(dir, 'foo.js'),
        './foo.js'
    );
    if (requireResolveSupportsPaths) {
        t.equal(
            resolve.sync('./foo.js', { basedir: dir }),
            require.resolve('./foo.js', { paths: [dir] }),
            './foo.js: resolve.sync === require.resolve'
        );
    }

    t.equal(
        resolve.sync('./foo.js', { basedir: dir, filename: path.join(dir, 'bar.js') }),
        path.join(dir, 'foo.js')
    );

    t.throws(function () {
        resolve.sync('foo', { basedir: dir });
    });

    // Test that filename is reported as the "from" value when passed.
    t.throws(
        function () {
            resolve.sync('foo', { basedir: dir, filename: path.join(dir, 'bar.js') });
        },
        {
            name: 'Error',
            message: "Cannot find module 'foo' from '" + path.join(dir, 'bar.js') + "'"
        }
    );

    t.end();
});

test('bar', function (t) {
    var dir = path.join(__dirname, 'resolver');

    var basedir = path.join(dir, 'bar');

    t.equal(
        resolve.sync('foo', { basedir: basedir }),
        path.join(dir, 'bar/node_modules/foo/index.js'),
        'foo in bar'
    );
    if (!requireResolveDefaultPathsBroken && requireResolveSupportsPaths) {
        t.equal(
            resolve.sync('foo', { basedir: basedir }),
            require.resolve('foo', { paths: [basedir] }),
            'foo in bar: resolve.sync === require.resolve'
        );
    }

    t.end();
});

test('baz', function (t) {
    var dir = path.join(__dirname, 'resolver');

    t.equal(
        resolve.sync('./baz', { basedir: dir }),
        path.join(dir, 'baz/quux.js'),
        './baz'
    );
    if (requireResolveSupportsPaths) {
        t.equal(
            resolve.sync('./baz', { basedir: dir }),
            require.resolve('./baz', { paths: [dir] }),
            './baz: resolve.sync === require.resolve'
        );
    }

    t.end();
});

test('biz', function (t) {
    var dir = path.join(__dirname, 'resolver/biz/node_modules');

    t.equal(
        resolve.sync('./grux', { basedir: dir }),
        path.join(dir, 'grux/index.js')
    );
    if (requireResolveSupportsPaths) {
        t.equal(
            resolve.sync('./grux', { basedir: dir }),
            require.resolve('./grux', { paths: [dir] }),
            './grux: resolve.sync === require.resolve'
        );
    }

    var tivDir = path.join(dir, 'grux');
    t.equal(
        resolve.sync('tiv', { basedir: tivDir }),
        path.join(dir, 'tiv/index.js')
    );
    if (!requireResolveDefaultPathsBroken && requireResolveSupportsPaths) {
        t.equal(
            resolve.sync('tiv', { basedir: tivDir }),
            require.resolve('tiv', { paths: [tivDir] }),
            'tiv: resolve.sync === require.resolve'
        );
    }

    var gruxDir = path.join(dir, 'tiv');
    t.equal(
        resolve.sync('grux', { basedir: gruxDir }),
        path.join(dir, 'grux/index.js')
    );
    if (!requireResolveDefaultPathsBroken && requireResolveSupportsPaths) {
        t.equal(
            resolve.sync('grux', { basedir: gruxDir }),
            require.resolve('grux', { paths: [gruxDir] }),
            'grux: resolve.sync === require.resolve'
        );
    }

    t.end();
});

test('normalize', function (t) {
    var dir = path.join(__dirname, 'resolver/biz/node_modules/grux');

    t.equal(
        resolve.sync('../grux', { basedir: dir }),
        path.join(dir, 'index.js')
    );
    if (requireResolveSupportsPaths) {
        t.equal(
            resolve.sync('../grux', { basedir: dir }),
            require.resolve('../grux', { paths: [dir] }),
            '../grux: resolve.sync === require.resolve'
        );
    }

    t.end();
});

test('cup', function (t) {
    var dir = path.join(__dirname, 'resolver');

    t.equal(
        resolve.sync('./cup', {
            basedir: dir,
            extensions: ['.js', '.coffee']
        }),
        path.join(dir, 'cup.coffee'),
        './cup -> ./cup.coffee'
    );

    t.equal(
        resolve.sync('./cup.coffee', { basedir: dir }),
        path.join(dir, 'cup.coffee'),
        './cup.coffee'
    );

    t.throws(function () {
        resolve.sync('./cup', {
            basedir: dir,
            extensions: ['.js']
        });
    });

    if (requireResolveSupportsPaths) {
        t.equal(
            resolve.sync('./cup.coffee', { basedir: dir, extensions: ['.js', '.coffee'] }),
            require.resolve('./cup.coffee', { paths: [dir] }),
            './cup.coffee: resolve.sync === require.resolve'
        );
    }

    t.end();
});

test('mug', function (t) {
    var dir = path.join(__dirname, 'resolver');

    t.equal(
        resolve.sync('./mug', { basedir: dir }),
        path.join(dir, 'mug.js'),
        './mug -> ./mug.js'
    );
    if (requireResolveSupportsPaths) {
        t.equal(
            resolve.sync('./mug', { basedir: dir }),
            require.resolve('./mug', { paths: [dir] }),
            './mug: resolve.sync === require.resolve'
        );
    }

    t.equal(
        resolve.sync('./mug', {
            basedir: dir,
            extensions: ['.coffee', '.js']
        }),
        path.join(dir, 'mug.coffee'),
        './mug -> ./mug.coffee'
    );

    t.equal(
        resolve.sync('./mug', {
            basedir: dir,
            extensions: ['.js', '.coffee']
        }),
        path.join(dir, 'mug.js'),
        './mug -> ./mug.js'
    );

    t.end();
});

test('other path', function (t) {
    var resolverDir = path.join(__dirname, 'resolver');
    var dir = path.join(resolverDir, 'bar');
    var otherDir = path.join(resolverDir, 'other_path');

    t.equal(
        resolve.sync('root', {
            basedir: dir,
            paths: [otherDir]
        }),
        path.join(resolverDir, 'other_path/root.js')
    );

    t.equal(
        resolve.sync('lib/other-lib', {
            basedir: dir,
            paths: [otherDir]
        }),
        path.join(resolverDir, 'other_path/lib/other-lib.js')
    );

    t.throws(function () {
        resolve.sync('root', { basedir: dir });
    });

    t.throws(function () {
        resolve.sync('zzz', {
            basedir: dir,
            paths: [otherDir]
        });
    });

    t.end();
});

test('path iterator', function (t) {
    var resolverDir = path.join(__dirname, 'resolver');

    var exactIterator = function (x, start, getPackageCandidates, opts) {
        return [path.join(resolverDir, x)];
    };

    t.equal(
        resolve.sync('baz', { packageIterator: exactIterator }),
        path.join(resolverDir, 'baz/quux.js')
    );

    t.end();
});

test('incorrect main', function (t) {
    var resolverDir = path.join(__dirname, 'resolver');
    var dir = path.join(resolverDir, 'incorrect_main');

    t.equal(
        resolve.sync('./incorrect_main', { basedir: resolverDir }),
        path.join(dir, 'index.js')
    );
    if (requireResolveSupportsPaths) {
        t.equal(
            resolve.sync('./incorrect_main', { basedir: resolverDir }),
            require.resolve('./incorrect_main', { paths: [resolverDir] }),
            './incorrect_main: resolve.sync === require.resolve'
        );
    }

    t.end();
});

test('missing index', function (t) {
    t.plan(requireResolveSupportsPaths ? 2 : 1);

    var resolverDir = path.join(__dirname, 'resolver');
    try {
        resolve.sync('./missing_index', { basedir: resolverDir });
        t.fail('did not fail');
    } catch (err) {
        t.equal(err && err.code, 'MODULE_NOT_FOUND', 'error has correct error code');
    }
    if (requireResolveSupportsPaths) {
        try {
            require.resolve('./missing_index', { basedir: resolverDir });
            t.fail('require.resolve did not fail');
        } catch (err) {
            t.equal(err && err.code, 'MODULE_NOT_FOUND', 'error has correct error code');
        }
    }
});

test('missing main', function (t) {
    var resolverDir = path.join(__dirname, 'resolver');

    try {
        resolve.sync('./missing_main', { basedir: resolverDir });
        t.fail('require.resolve did not fail');
    } catch (err) {
        t.equal(err && err.code, 'MODULE_NOT_FOUND', 'error has correct error code');
    }
    if (requireResolveSupportsPaths) {
        try {
            resolve.sync('./missing_main', { basedir: resolverDir });
            t.fail('require.resolve did not fail');
        } catch (err) {
            t.equal(err && err.code, 'MODULE_NOT_FOUND', 'error has correct error code');
        }
    }

    t.end();
});

test('null main', function (t) {
    var resolverDir = path.join(__dirname, 'resolver');

    try {
        resolve.sync('./null_main', { basedir: resolverDir });
        t.fail('require.resolve did not fail');
    } catch (err) {
        t.equal(err && err.code, 'MODULE_NOT_FOUND', 'error has correct error code');
    }
    if (requireResolveSupportsPaths) {
        try {
            resolve.sync('./null_main', { basedir: resolverDir });
            t.fail('require.resolve did not fail');
        } catch (err) {
            t.equal(err && err.code, 'MODULE_NOT_FOUND', 'error has correct error code');
        }
    }

    t.end();
});

test('main: false', function (t) {
    var basedir = path.join(__dirname, 'resolver');
    var dir = path.join(basedir, 'false_main');
    t.equal(
        resolve.sync('./false_main', { basedir: basedir }),
        path.join(dir, 'index.js'),
        '`"main": false`: resolves to `index.js`'
    );
    if (requireResolveSupportsPaths) {
        t.equal(
            resolve.sync('./false_main', { basedir: basedir }),
            require.resolve('./false_main', { paths: [basedir] }),
            '`"main": false`: resolve.sync === require.resolve'
        );
    }

    t.end();
});

var stubStatSync = function stubStatSync(fn) {
    var statSync = fs.statSync;
    try {
        fs.statSync = function () {
            throw new EvalError('Unknown Error');
        };
        return fn();
    } finally {
        fs.statSync = statSync;
    }
};

test('#79 - re-throw non ENOENT errors from stat', function (t) {
    var dir = path.join(__dirname, 'resolver');

    stubStatSync(function () {
        t.throws(function () {
            resolve.sync('foo', { basedir: dir });
        }, /Unknown Error/);
    });

    t.end();
});

test('#52 - incorrectly resolves module-paths like "./someFolder/" when there is a file of the same name', function (t) {
    var dir = path.join(__dirname, 'resolver');
    var basedir = path.join(dir, 'same_names');

    t.equal(
        resolve.sync('./foo', { basedir: basedir }),
        path.join(dir, 'same_names/foo.js')
    );
    if (requireResolveSupportsPaths) {
        t.equal(
            resolve.sync('./foo', { basedir: basedir }),
            require.resolve('./foo', { paths: [basedir] }),
            './foo: resolve.sync === require.resolve'
        );
    }

    t.equal(
        resolve.sync('./foo/', { basedir: basedir }),
        path.join(dir, 'same_names/foo/index.js')
    );
    if (requireResolveSupportsPaths) {
        t.equal(
            resolve.sync('./foo/', { basedir: basedir }),
            require.resolve('./foo/', { paths: [basedir] }),
            './foo/: resolve.sync === require.resolve'
        );
    }

    t.end();
});

test('#211 - incorrectly resolves module-paths like "." when from inside a folder with a sibling file of the same name', function (t) {
    var dir = path.join(__dirname, 'resolver');
    var basedir = path.join(dir, 'same_names/foo');

    t.equal(
        resolve.sync('./', { basedir: basedir }),
        path.join(dir, 'same_names/foo/index.js'),
        './'
    );
    if (requireResolveSupportsPaths) {
        t.equal(
            resolve.sync('./', { basedir: basedir }),
            require.resolve('./', { paths: [basedir] }),
            './: resolve.sync === require.resolve'
        );
    }

    t.equal(
        resolve.sync('.', { basedir: basedir }),
        path.join(dir, 'same_names/foo/index.js'),
        '.'
    );
    if (requireResolveSupportsPaths) {
        t.equal(
            resolve.sync('.', { basedir: basedir }),
            require.resolve('.', { paths: [basedir] }),
            '.: resolve.sync === require.resolve',
            { todo: true }
        );
    }

    t.end();
});

test('sync: #121 - treating an existing file as a dir when no basedir', function (t) {
    var testFile = path.basename(__filename);

    t.test('sanity check', function (st) {
        st.equal(
            resolve.sync('./' + testFile),
            __filename,
            'sanity check'
        );
        st.equal(
            resolve.sync('./' + testFile),
            require.resolve('./' + testFile),
            'sanity check: resolve.sync === require.resolve'
        );

        st.end();
    });

    t.test('with a fake directory', function (st) {
        function run() { return resolve.sync('./' + testFile + '/blah'); }

        st.throws(run, 'throws an error');

        try {
            run();
        } catch (e) {
            st.equal(e.code, 'MODULE_NOT_FOUND', 'error code matches require.resolve');
            st.equal(
                e.message,
                'Cannot find module \'./' + testFile + '/blah\' from \'' + __dirname + '\'',
                'can not find nonexistent module'
            );
        }

        st.end();
    });

    t.end();
});

test('sync dot main', function (t) {
    var start = new Date();

    t.equal(
        resolve.sync('./resolver/dot_main'),
        path.join(__dirname, 'resolver/dot_main/index.js'),
        './resolver/dot_main'
    );
    t.equal(
        resolve.sync('./resolver/dot_main'),
        require.resolve('./resolver/dot_main'),
        './resolver/dot_main: resolve.sync === require.resolve'
    );

    t.ok(new Date() - start < 50, 'resolve.sync timedout');

    t.end();
});

test('sync dot slash main', function (t) {
    var start = new Date();

    t.equal(
        resolve.sync('./resolver/dot_slash_main'),
        path.join(__dirname, 'resolver/dot_slash_main/index.js')
    );
    t.equal(
        resolve.sync('./resolver/dot_slash_main'),
        require.resolve('./resolver/dot_slash_main'),
        './resolver/dot_slash_main: resolve.sync === require.resolve'
    );

    t.ok(new Date() - start < 50, 'resolve.sync timedout');

    t.end();
});

test('not a directory', function (t) {
    var path = './foo';
    try {
        resolve.sync(path, { basedir: __filename });
        t.fail();
    } catch (err) {
        t.ok(err, 'a non-directory errors');
        t.equal(err && err.message, 'Cannot find module \'' + path + "' from '" + __filename + "'");
        t.equal(err && err.code, 'MODULE_NOT_FOUND');
    }
    t.end();
});

test('non-string "main" field in package.json', function (t) {
    var dir = path.join(__dirname, 'resolver');
    try {
        var result = resolve.sync('./invalid_main', { basedir: dir });
        t.equal(result, undefined, 'result should not exist');
        t.fail('should not get here');
    } catch (err) {
        t.ok(err, 'errors on non-string main');
        t.equal(err.message, 'package “invalid_main” `main` must be a string');
        t.equal(err.code, 'INVALID_PACKAGE_MAIN');
    }
    t.end();
});

test('non-string "main" field in package.json', function (t) {
    var dir = path.join(__dirname, 'resolver');
    try {
        var result = resolve.sync('./invalid_main', { basedir: dir });
        t.equal(result, undefined, 'result should not exist');
        t.fail('should not get here');
    } catch (err) {
        t.ok(err, 'errors on non-string main');
        t.equal(err.message, 'package “invalid_main” `main` must be a string');
        t.equal(err.code, 'INVALID_PACKAGE_MAIN');
    }
    t.end();
});

test('browser field in package.json', function (t) {
    var dir = path.join(__dirname, 'resolver');
    var res = resolve.sync('./browser_field', {
        basedir: dir,
        packageFilter: function packageFilter(pkg) {
            if (pkg.browser) {
                pkg.main = pkg.browser; // eslint-disable-line no-param-reassign
                delete pkg.browser; // eslint-disable-line no-param-reassign
            }
            return pkg;
        }
    });
    t.equal(res, path.join(dir, 'browser_field', 'b.js'));
    t.end();
});

test('absolute paths', function (t) {
    var extensionless = __filename.slice(0, -path.extname(__filename).length);

    t.equal(
        resolve.sync(__filename),
        __filename,
        'absolute path to this file resolves'
    );
    t.equal(
        resolve.sync(__filename),
        require.resolve(__filename),
        'absolute path to this file: resolve.sync === require.resolve'
    );

    t.equal(
        resolve.sync(extensionless),
        __filename,
        'extensionless absolute path to this file resolves'
    );
    t.equal(
        resolve.sync(__filename),
        require.resolve(__filename),
        'absolute path to this file: resolve.sync === require.resolve'
    );

    t.equal(
        resolve.sync(__filename, { basedir: process.cwd() }),
        __filename,
        'absolute path to this file with a basedir resolves'
    );
    if (requireResolveSupportsPaths) {
        t.equal(
            resolve.sync(__filename, { basedir: process.cwd() }),
            require.resolve(__filename, { paths: [process.cwd()] }),
            'absolute path to this file + basedir: resolve.sync === require.resolve'
        );
    }

    t.equal(
        resolve.sync(extensionless, { basedir: process.cwd() }),
        __filename,
        'extensionless absolute path to this file with a basedir resolves'
    );
    if (requireResolveSupportsPaths) {
        t.equal(
            resolve.sync(extensionless, { basedir: process.cwd() }),
            require.resolve(extensionless, { paths: [process.cwd()] }),
            'extensionless absolute path to this file + basedir: resolve.sync === require.resolve'
        );
    }

    t.end();
});

var malformedDir = path.join(__dirname, 'resolver/malformed_package_json');
test('malformed package.json', { skip: !fs.existsSync(malformedDir) }, function (t) {
    t.plan(5 + (requireResolveSupportsPaths ? 1 : 0));

    var basedir = malformedDir;
    var expected = path.join(basedir, 'index.js');

    t.equal(
        resolve.sync('./index.js', { basedir: basedir }),
        expected,
        'malformed package.json is silently ignored'
    );
    if (requireResolveSupportsPaths) {
        t.equal(
            resolve.sync('./index.js', { basedir: basedir }),
            require.resolve('./index.js', { paths: [basedir] }),
            'malformed package.json: resolve.sync === require.resolve'
        );
    }

    var res1 = resolve.sync(
        './index.js',
        {
            basedir: basedir,
            packageFilter: function (pkg, pkgfile, dir) {
                t.fail('should not reach here');
            }
        }
    );

    t.equal(
        res1,
        expected,
        'with packageFilter: malformed package.json is silently ignored'
    );

    var res2 = resolve.sync(
        './index.js',
        {
            basedir: basedir,
            readPackageSync: function (readFileSync, pkgfile) {
                t.equal(pkgfile, path.join(basedir, 'package.json'), 'readPackageSync: `pkgfile` is package.json path');
                var result = String(readFileSync(pkgfile));
                try {
                    return JSON.parse(result);
                } catch (e) {
                    t.ok(e instanceof SyntaxError, 'readPackageSync: malformed package.json parses as a syntax error');
                }
            }
        }
    );

    t.equal(
        res2,
        expected,
        'with readPackageSync: malformed package.json is silently ignored'
    );
});


---

File name: node_modules\resolve\test\shadowed_core\node_modules\util\index.js

Code:


---

File name: node_modules\resolve\test\shadowed_core.js

Code:
var test = require('tape');
var resolve = require('../');
var path = require('path');

test('shadowed core modules still return core module', function (t) {
    t.plan(2);

    resolve('util', { basedir: path.join(__dirname, 'shadowed_core') }, function (err, res) {
        t.ifError(err);
        t.equal(res, 'util');
    });
});

test('shadowed core modules still return core module [sync]', function (t) {
    t.plan(1);

    var res = resolve.sync('util', { basedir: path.join(__dirname, 'shadowed_core') });

    t.equal(res, 'util');
});

test('shadowed core modules return shadow when appending `/`', function (t) {
    t.plan(2);

    resolve('util/', { basedir: path.join(__dirname, 'shadowed_core') }, function (err, res) {
        t.ifError(err);
        t.equal(res, path.join(__dirname, 'shadowed_core/node_modules/util/index.js'));
    });
});

test('shadowed core modules return shadow when appending `/` [sync]', function (t) {
    t.plan(1);

    var res = resolve.sync('util/', { basedir: path.join(__dirname, 'shadowed_core') });

    t.equal(res, path.join(__dirname, 'shadowed_core/node_modules/util/index.js'));
});

test('shadowed core modules return shadow with `includeCoreModules: false`', function (t) {
    t.plan(2);

    resolve('util', { basedir: path.join(__dirname, 'shadowed_core'), includeCoreModules: false }, function (err, res) {
        t.ifError(err);
        t.equal(res, path.join(__dirname, 'shadowed_core/node_modules/util/index.js'));
    });
});

test('shadowed core modules return shadow with `includeCoreModules: false` [sync]', function (t) {
    t.plan(1);

    var res = resolve.sync('util', { basedir: path.join(__dirname, 'shadowed_core'), includeCoreModules: false });

    t.equal(res, path.join(__dirname, 'shadowed_core/node_modules/util/index.js'));
});


---

File name: node_modules\resolve\test\subdirs.js

Code:
var test = require('tape');
var resolve = require('../');
var path = require('path');

test('subdirs', function (t) {
    t.plan(2);

    var dir = path.join(__dirname, '/subdirs');
    resolve('a/b/c/x.json', { basedir: dir }, function (err, res) {
        t.ifError(err);
        t.equal(res, path.join(dir, 'node_modules/a/b/c/x.json'));
    });
});


---

File name: node_modules\resolve\test\symlinks.js

Code:
var path = require('path');
var fs = require('fs');
var test = require('tape');
var map = require('array.prototype.map');
var resolve = require('../');

var symlinkDir = path.join(__dirname, 'resolver', 'symlinked', 'symlink');
var packageDir = path.join(__dirname, 'resolver', 'symlinked', '_', 'node_modules', 'package');
var modADir = path.join(__dirname, 'symlinks', 'source', 'node_modules', 'mod-a');
var symlinkModADir = path.join(__dirname, 'symlinks', 'dest', 'node_modules', 'mod-a');
try {
    fs.unlinkSync(symlinkDir);
} catch (err) {}
try {
    fs.unlinkSync(packageDir);
} catch (err) {}
try {
    fs.unlinkSync(modADir);
} catch (err) {}
try {
    fs.unlinkSync(symlinkModADir);
} catch (err) {}

try {
    fs.symlinkSync('./_/symlink_target', symlinkDir, 'dir');
} catch (err) {
    // if fails then it is probably on Windows and lets try to create a junction
    fs.symlinkSync(path.join(__dirname, 'resolver', 'symlinked', '_', 'symlink_target') + '\\', symlinkDir, 'junction');
}
try {
    fs.symlinkSync('../../package', packageDir, 'dir');
} catch (err) {
    // if fails then it is probably on Windows and lets try to create a junction
    fs.symlinkSync(path.join(__dirname, '..', '..', 'package') + '\\', packageDir, 'junction');
}
try {
    fs.symlinkSync('../../source/node_modules/mod-a', symlinkModADir, 'dir');
} catch (err) {
    // if fails then it is probably on Windows and lets try to create a junction
    fs.symlinkSync(path.join(__dirname, '..', '..', 'source', 'node_modules', 'mod-a') + '\\', symlinkModADir, 'junction');
}

test('symlink', function (t) {
    t.plan(2);

    resolve('foo', { basedir: symlinkDir, preserveSymlinks: false }, function (err, res, pkg) {
        t.error(err);
        t.equal(res, path.join(__dirname, 'resolver', 'symlinked', '_', 'node_modules', 'foo.js'));
    });
});

test('sync symlink when preserveSymlinks = true', function (t) {
    t.plan(4);

    resolve('foo', { basedir: symlinkDir }, function (err, res, pkg) {
        t.ok(err, 'there is an error');
        t.notOk(res, 'no result');

        t.equal(err && err.code, 'MODULE_NOT_FOUND', 'error code matches require.resolve');
        t.equal(
            err && err.message,
            'Cannot find module \'foo\' from \'' + symlinkDir + '\'',
            'can not find nonexistent module'
        );
    });
});

test('sync symlink', function (t) {
    var start = new Date();
    t.doesNotThrow(function () {
        t.equal(
            resolve.sync('foo', { basedir: symlinkDir, preserveSymlinks: false }),
            path.join(__dirname, 'resolver', 'symlinked', '_', 'node_modules', 'foo.js')
        );
    });
    t.ok(new Date() - start < 50, 'resolve.sync timedout');
    t.end();
});

test('sync symlink when preserveSymlinks = true', function (t) {
    t.throws(function () {
        resolve.sync('foo', { basedir: symlinkDir });
    }, /Cannot find module 'foo'/);
    t.end();
});

test('sync symlink from node_modules to other dir when preserveSymlinks = false', function (t) {
    var basedir = path.join(__dirname, 'resolver', 'symlinked', '_');
    var fn = resolve.sync('package', { basedir: basedir, preserveSymlinks: false });

    t.equal(fn, path.resolve(__dirname, 'resolver/symlinked/package/bar.js'));
    t.end();
});

test('async symlink from node_modules to other dir when preserveSymlinks = false', function (t) {
    t.plan(2);
    var basedir = path.join(__dirname, 'resolver', 'symlinked', '_');
    resolve('package', { basedir: basedir, preserveSymlinks: false }, function (err, result) {
        t.notOk(err, 'no error');
        t.equal(result, path.resolve(__dirname, 'resolver/symlinked/package/bar.js'));
    });
});

test('packageFilter', function (t) {
    function relative(x) {
        return path.relative(__dirname, x);
    }

    function testPackageFilter(preserveSymlinks) {
        return function (st) {
            st.plan('is 1.x' ? 3 : 5); // eslint-disable-line no-constant-condition

            var destMain = 'symlinks/dest/node_modules/mod-a/index.js';
            var destPkg = 'symlinks/dest/node_modules/mod-a/package.json';
            var sourceMain = 'symlinks/source/node_modules/mod-a/index.js';
            var sourcePkg = 'symlinks/source/node_modules/mod-a/package.json';
            var destDir = path.join(__dirname, 'symlinks', 'dest');

            /* eslint multiline-comment-style: 0 */
            /* v2.x will restore these tests
            var packageFilterPath = [];
            var actualPath = resolve.sync('mod-a', {
                basedir: destDir,
                preserveSymlinks: preserveSymlinks,
                packageFilter: function (pkg, pkgfile, dir) {
                    packageFilterPath.push(pkgfile);
                }
            });
            st.equal(
                relative(actualPath),
                path.normalize(preserveSymlinks ? destMain : sourceMain),
                'sync: actual path is correct'
            );
            st.deepEqual(
                map(packageFilterPath, relative),
                map(preserveSymlinks ? [destPkg, destPkg] : [sourcePkg, sourcePkg], path.normalize),
                'sync: packageFilter pkgfile arg is correct'
            );
            */

            var asyncPackageFilterPath = [];
            resolve(
                'mod-a',
                {
                    basedir: destDir,
                    preserveSymlinks: preserveSymlinks,
                    packageFilter: function (pkg, pkgfile) {
                        asyncPackageFilterPath.push(pkgfile);
                    }
                },
                function (err, actualPath) {
                    st.error(err, 'no error');
                    st.equal(
                        relative(actualPath),
                        path.normalize(preserveSymlinks ? destMain : sourceMain),
                        'async: actual path is correct'
                    );
                    st.deepEqual(
                        map(asyncPackageFilterPath, relative),
                        map(
                            preserveSymlinks ? [destPkg, destPkg, destPkg] : [sourcePkg, sourcePkg, sourcePkg],
                            path.normalize
                        ),
                        'async: packageFilter pkgfile arg is correct'
                    );
                }
            );
        };
    }

    t.test('preserveSymlinks: false', testPackageFilter(false));

    t.test('preserveSymlinks: true', testPackageFilter(true));

    t.end();
});


---

File name: node_modules\resolve-cwd\index.d.ts

Code:
declare const resolveCwd: {
	/**
	Resolve the path of a module like [`require.resolve()`](https://nodejs.org/api/globals.html#globals_require_resolve) but from the current working directory.

	@param moduleId - What you would use in `require()`.
	@returns The resolved module path.
	@throws When the module can't be found.

	@example
	```
	import resolveCwd = require('resolve-cwd');

	console.log(__dirname);
	//=> '/Users/sindresorhus/rainbow'

	console.log(process.cwd());
	//=> '/Users/sindresorhus/unicorn'

	console.log(resolveCwd('./foo'));
	//=> '/Users/sindresorhus/unicorn/foo.js'
	```
	*/
	(moduleId: string): string;

	/**
	Resolve the path of a module like [`require.resolve()`](https://nodejs.org/api/globals.html#globals_require_resolve) but from the current working directory.

	@param moduleId - What you would use in `require()`.
	@returns The resolved module path. Returns `undefined` instead of throwing when the module can't be found.

	@example
	```
	import resolveCwd = require('resolve-cwd');

	console.log(__dirname);
	//=> '/Users/sindresorhus/rainbow'

	console.log(process.cwd());
	//=> '/Users/sindresorhus/unicorn'

	console.log(resolveCwd.silent('./foo'));
	//=> '/Users/sindresorhus/unicorn/foo.js'
	```
	*/
	silent(moduleId: string): string | undefined;
};

export = resolveCwd;


---

File name: node_modules\resolve-cwd\index.js

Code:
'use strict';
const resolveFrom = require('resolve-from');

module.exports = moduleId => resolveFrom(process.cwd(), moduleId);
module.exports.silent = moduleId => resolveFrom.silent(process.cwd(), moduleId);


---

File name: node_modules\resolve-cwd\package.json

Code:
{
	"name": "resolve-cwd",
	"version": "3.0.0",
	"description": "Resolve the path of a module like `require.resolve()` but from the current working directory",
	"license": "MIT",
	"repository": "sindresorhus/resolve-cwd",
	"author": {
		"name": "Sindre Sorhus",
		"email": "sindresorhus@gmail.com",
		"url": "sindresorhus.com"
	},
	"engines": {
		"node": ">=8"
	},
	"scripts": {
		"test": "xo && ava && tsd"
	},
	"files": [
		"index.js",
		"index.d.ts"
	],
	"keywords": [
		"require",
		"resolve",
		"path",
		"module",
		"from",
		"like",
		"cwd",
		"current",
		"working",
		"directory",
		"import"
	],
	"dependencies": {
		"resolve-from": "^5.0.0"
	},
	"devDependencies": {
		"ava": "^1.4.1",
		"tsd": "^0.7.2",
		"xo": "^0.24.0"
	}
}


---

File name: node_modules\resolve-cwd\readme.md

Code:
# resolve-cwd [![Build Status](https://travis-ci.org/sindresorhus/resolve-cwd.svg?branch=master)](https://travis-ci.org/sindresorhus/resolve-cwd)

> Resolve the path of a module like [`require.resolve()`](https://nodejs.org/api/globals.html#globals_require_resolve) but from the current working directory


## Install

```
$ npm install resolve-cwd
```


## Usage

```js
const resolveCwd = require('resolve-cwd');

console.log(__dirname);
//=> '/Users/sindresorhus/rainbow'

console.log(process.cwd());
//=> '/Users/sindresorhus/unicorn'

console.log(resolveCwd('./foo'));
//=> '/Users/sindresorhus/unicorn/foo.js'
```


## API

### resolveCwd(moduleId)

Like `require()`, throws when the module can't be found.

### resolveCwd.silent(moduleId)

Returns `undefined` instead of throwing when the module can't be found.

#### moduleId

Type: `string`

What you would use in `require()`.


## Related

- [resolve-from](https://github.com/sindresorhus/resolve-from) - Resolve the path of a module from a given path
- [import-from](https://github.com/sindresorhus/import-from) - Import a module from a given path
- [import-cwd](https://github.com/sindresorhus/import-cwd) - Import a module from the current working directory
- [resolve-pkg](https://github.com/sindresorhus/resolve-pkg) - Resolve the path of a package regardless of it having an entry point
- [import-lazy](https://github.com/sindresorhus/import-lazy) - Import a module lazily
- [resolve-global](https://github.com/sindresorhus/resolve-global) - Resolve the path of a globally installed module


## License

MIT © [Sindre Sorhus](https://sindresorhus.com)


---

File name: node_modules\resolve-from\index.d.ts

Code:
declare const resolveFrom: {
	/**
	Resolve the path of a module like [`require.resolve()`](https://nodejs.org/api/globals.html#globals_require_resolve) but from a given path.

	@param fromDirectory - Directory to resolve from.
	@param moduleId - What you would use in `require()`.
	@returns Resolved module path. Throws when the module can't be found.

	@example
	```
	import resolveFrom = require('resolve-from');

	// There is a file at `./foo/bar.js`

	resolveFrom('foo', './bar');
	//=> '/Users/sindresorhus/dev/test/foo/bar.js'
	```
	*/
	(fromDirectory: string, moduleId: string): string;

	/**
	Resolve the path of a module like [`require.resolve()`](https://nodejs.org/api/globals.html#globals_require_resolve) but from a given path.

	@param fromDirectory - Directory to resolve from.
	@param moduleId - What you would use in `require()`.
	@returns Resolved module path or `undefined` when the module can't be found.
	*/
	silent(fromDirectory: string, moduleId: string): string | undefined;
};

export = resolveFrom;


---

File name: node_modules\resolve-from\index.js

Code:
'use strict';
const path = require('path');
const Module = require('module');
const fs = require('fs');

const resolveFrom = (fromDirectory, moduleId, silent) => {
	if (typeof fromDirectory !== 'string') {
		throw new TypeError(`Expected \`fromDir\` to be of type \`string\`, got \`${typeof fromDirectory}\``);
	}

	if (typeof moduleId !== 'string') {
		throw new TypeError(`Expected \`moduleId\` to be of type \`string\`, got \`${typeof moduleId}\``);
	}

	try {
		fromDirectory = fs.realpathSync(fromDirectory);
	} catch (error) {
		if (error.code === 'ENOENT') {
			fromDirectory = path.resolve(fromDirectory);
		} else if (silent) {
			return;
		} else {
			throw error;
		}
	}

	const fromFile = path.join(fromDirectory, 'noop.js');

	const resolveFileName = () => Module._resolveFilename(moduleId, {
		id: fromFile,
		filename: fromFile,
		paths: Module._nodeModulePaths(fromDirectory)
	});

	if (silent) {
		try {
			return resolveFileName();
		} catch (error) {
			return;
		}
	}

	return resolveFileName();
};

module.exports = (fromDirectory, moduleId) => resolveFrom(fromDirectory, moduleId);
module.exports.silent = (fromDirectory, moduleId) => resolveFrom(fromDirectory, moduleId, true);


---

File name: node_modules\resolve-from\package.json

Code:
{
	"name": "resolve-from",
	"version": "5.0.0",
	"description": "Resolve the path of a module like `require.resolve()` but from a given path",
	"license": "MIT",
	"repository": "sindresorhus/resolve-from",
	"author": {
		"name": "Sindre Sorhus",
		"email": "sindresorhus@gmail.com",
		"url": "sindresorhus.com"
	},
	"engines": {
		"node": ">=8"
	},
	"scripts": {
		"test": "xo && ava && tsd"
	},
	"files": [
		"index.js",
		"index.d.ts"
	],
	"keywords": [
		"require",
		"resolve",
		"path",
		"module",
		"from",
		"like",
		"import"
	],
	"devDependencies": {
		"ava": "^1.4.1",
		"tsd": "^0.7.2",
		"xo": "^0.24.0"
	}
}


---

File name: node_modules\resolve-from\readme.md

Code:
# resolve-from [![Build Status](https://travis-ci.org/sindresorhus/resolve-from.svg?branch=master)](https://travis-ci.org/sindresorhus/resolve-from)

> Resolve the path of a module like [`require.resolve()`](https://nodejs.org/api/globals.html#globals_require_resolve) but from a given path


## Install

```
$ npm install resolve-from
```


## Usage

```js
const resolveFrom = require('resolve-from');

// There is a file at `./foo/bar.js`

resolveFrom('foo', './bar');
//=> '/Users/sindresorhus/dev/test/foo/bar.js'
```


## API

### resolveFrom(fromDirectory, moduleId)

Like `require()`, throws when the module can't be found.

### resolveFrom.silent(fromDirectory, moduleId)

Returns `undefined` instead of throwing when the module can't be found.

#### fromDirectory

Type: `string`

Directory to resolve from.

#### moduleId

Type: `string`

What you would use in `require()`.


## Tip

Create a partial using a bound function if you want to resolve from the same `fromDirectory` multiple times:

```js
const resolveFromFoo = resolveFrom.bind(null, 'foo');

resolveFromFoo('./bar');
resolveFromFoo('./baz');
```


## Related

- [resolve-cwd](https://github.com/sindresorhus/resolve-cwd) - Resolve the path of a module from the current working directory
- [import-from](https://github.com/sindresorhus/import-from) - Import a module from a given path
- [import-cwd](https://github.com/sindresorhus/import-cwd) - Import a module from the current working directory
- [resolve-pkg](https://github.com/sindresorhus/resolve-pkg) - Resolve the path of a package regardless of it having an entry point
- [import-lazy](https://github.com/sindresorhus/import-lazy) - Import a module lazily
- [resolve-global](https://github.com/sindresorhus/resolve-global) - Resolve the path of a globally installed module


## License

MIT © [Sindre Sorhus](https://sindresorhus.com)


---

File name: node_modules\resolve.exports\dist\index.js

Code:
function e(e,n,r){throw new Error(r?`No known conditions for "${n}" specifier in "${e}" package`:`Missing "${n}" specifier in "${e}" package`)}function n(n,i,o,f){let s,u,l=r(n,o),c=function(e){let n=new Set(["default",...e.conditions||[]]);return e.unsafe||n.add(e.require?"require":"import"),e.unsafe||n.add(e.browser?"browser":"node"),n}(f||{}),a=i[l];if(void 0===a){let e,n,r,t;for(t in i)n&&t.length<n.length||("/"===t[t.length-1]&&l.startsWith(t)?(u=l.substring(t.length),n=t):t.length>1&&(r=t.indexOf("*",1),~r&&(e=RegExp("^"+t.substring(0,r)+"(.*)"+t.substring(1+r)+"$").exec(l),e&&e[1]&&(u=e[1],n=t))));a=i[n]}return a||e(n,l),s=t(a,c),s||e(n,l,1),u&&function(e,n){let r,t=0,i=e.length,o=/[*]/g,f=/[/]$/;for(;t<i;t++)e[t]=o.test(r=e[t])?r.replace(o,n):f.test(r)?r+n:r}(s,u),s}function r(e,n,r){if(e===n||"."===n)return".";let t=e+"/",i=t.length,o=n.slice(0,i)===t,f=o?n.slice(i):n;return"#"===f[0]?f:o||!r?"./"===f.slice(0,2)?f:"./"+f:f}function t(e,n,r){if(e){if("string"==typeof e)return r&&r.add(e),[e];let i,o;if(Array.isArray(e)){for(o=r||new Set,i=0;i<e.length;i++)t(e[i],n,o);if(!r&&o.size)return[...o]}else for(i in e)if(n.has(i))return t(e[i],n,r)}}function i(e,n={}){let t,i=0,o=n.browser,f=n.fields||["module","main"],s="string"==typeof o;for(o&&!f.includes("browser")&&(f.unshift("browser"),s&&(o=r(e.name,o,!0)));i<f.length;i++)if(t=e[f[i]]){if("string"==typeof t);else{if("object"!=typeof t||"browser"!=f[i])continue;if(s&&(t=t[o],null==t))return o}return"string"==typeof t?"./"+t.replace(/^\.?\//,""):t}}function o(e,r,t){let i,o=e.exports;if(o){if("string"==typeof o)o={".":o};else for(i in o){"."!==i[0]&&(o={".":o});break}return n(e.name,o,r||".",t)}}function f(e,r,t){if(e.imports)return n(e.name,e.imports,r,t)}function s(e,n,t){return"#"===(n=r(e.name,n||"."))[0]?f(e,n,t):o(e,n,t)}exports.exports=o;exports.imports=f;exports.legacy=i;exports.resolve=s;

---

File name: node_modules\resolve.exports\index.d.ts

Code:
export type Options = {
	/**
	 * When true, adds the "browser" conditions.
	 * Otherwise the "node" condition is enabled.
	 * @default false
	 */
	browser?: boolean;
	/**
	 * Any custom conditions to match.
	 * @note Array order does not matter. Priority is determined by the key-order of conditions defined within a package's imports/exports mapping.
	 * @default []
	 */
	conditions?: readonly string[];
	/**
	 * When true, adds the "require" condition.
	 * Otherwise the "import" condition is enabled.
	 * @default false
	 */
	require?: boolean;
	/**
	 * Prevents "require", "import", "browser", and/or "node" conditions from being added automatically.
	 * When enabled, only `options.conditions` are added alongside the "default" condition.
	 * @important Enabling this deviates from Node.js default behavior.
	 * @default false
	 */
	unsafe?: boolean;
}

export function resolve<T=Package>(pkg: T, entry?: string, options?: Options): Imports.Output | Exports.Output | void;
export function imports<T=Package>(pkg: T, entry?: string, options?: Options): Imports.Output | void;
export function exports<T=Package>(pkg: T, target: string, options?: Options): Exports.Output | void;

export function legacy<T=Package>(pkg: T, options: { browser: true, fields?: readonly string[] }): Browser | void;
export function legacy<T=Package>(pkg: T, options: { browser: string, fields?: readonly string[] }): string | false | void;
export function legacy<T=Package>(pkg: T, options: { browser: false, fields?: readonly string[] }): string | void;
export function legacy<T=Package>(pkg: T, options?: {
	browser?: boolean | string;
	fields?: readonly string[];
}): Browser | string;

// ---

/**
 * A resolve condition
 * @example "node", "default", "production"
 */
export type Condition = string;

/** An internal file path */
export type Path = `./${string}`;

export type Imports = {
	[entry: Imports.Entry]: Imports.Value;
}

export namespace Imports {
	export type Entry = `#${string}`;

	type External = string;

	/** strings are dependency names OR internal paths */
	export type Value = External | Path | null | {
		[c: Condition]: Value;
	} | Value[];


	export type Output = Array<External|Path>;
}

export type Exports = Path | {
	[path: Exports.Entry]: Exports.Value;
	[cond: Condition]: Exports.Value;
}

export namespace Exports {
	/** Allows "." and "./{name}" */
	export type Entry = `.${string}`;

	/** strings must be internal paths */
	export type Value = Path | null | {
		[c: Condition]: Value;
	} | Value[];

	export type Output = Path[];
}

export type Package = {
	name: string;
	version?: string;
	module?: string;
	main?: string;
	imports?: Imports;
	exports?: Exports;
	browser?: Browser;
	[key: string]: any;
}

export type Browser = string[] | string | {
	[file: Path | string]: string | false;
}


---

File name: node_modules\resolve.exports\package.json

Code:
{
  "version": "2.0.3",
  "name": "resolve.exports",
  "repository": "lukeed/resolve.exports",
  "description": "A tiny (952b), correct, general-purpose, and configurable \"exports\" and \"imports\" resolver without file-system reliance",
  "module": "dist/index.mjs",
  "main": "dist/index.js",
  "types": "index.d.ts",
  "license": "MIT",
  "author": {
    "name": "Luke Edwards",
    "email": "luke.edwards05@gmail.com",
    "url": "https://lukeed.com"
  },
  "engines": {
    "node": ">=10"
  },
  "scripts": {
    "build": "bundt -m",
    "types": "tsc --noEmit",
    "test": "uvu -r tsm test"
  },
  "files": [
    "*.d.ts",
    "dist"
  ],
  "exports": {
    ".": {
      "types": "./index.d.ts",
      "import": "./dist/index.mjs",
      "require": "./dist/index.js"
    },
    "./package.json": "./package.json"
  },
  "keywords": [
    "esm",
    "exports",
    "esmodules",
    "fields",
    "modules",
    "resolution",
    "resolve"
  ],
  "devDependencies": {
    "bundt": "next",
    "tsm": "2.3.0",
    "typescript": "4.9.4",
    "uvu": "0.5.4"
  }
}


---

File name: node_modules\resolve.exports\readme.md

Code:
# resolve.exports [![CI](https://github.com/lukeed/resolve.exports/workflows/CI/badge.svg)](https://github.com/lukeed/resolve.exports/actions) [![licenses](https://licenses.dev/b/npm/resolve.exports)](https://licenses.dev/npm/resolve.exports) [![codecov](https://codecov.io/gh/lukeed/resolve.exports/branch/master/graph/badge.svg?token=4P7d4Omw2h)](https://codecov.io/gh/lukeed/resolve.exports)

> A tiny (952b), correct, general-purpose, and configurable `"exports"` and `"imports"` resolver without file-system reliance

***Why?***

Hopefully, this module may serve as a reference point (and/or be used directly) so that the varying tools and bundlers within the ecosystem can share a common approach with one another **as well as** with the native Node.js implementation.

With the push for ESM, we must be _very_ careful and avoid fragmentation. If we, as a community, begin propagating different _dialects_ of the resolution algorithm, then we're headed for deep trouble. It will make supporting (and using) `"exports"` nearly impossible, which may force its abandonment and along with it, its benefits.

Let's have nice things.

## Install

```sh
$ npm install resolve.exports
```

## Usage

> Please see [`/test/`](/test) for examples.

```js
import * as resolve from 'resolve.exports';

// package.json contents
const pkg = {
  "name": "foobar",
  "module": "dist/module.mjs",
  "main": "dist/require.js",
  "imports": {
    "#hash": {
      "import": {
        "browser": "./hash/web.mjs",
        "node": "./hash/node.mjs",
      },
      "default": "./hash/detect.js"
    }
  },
  "exports": {
    ".": {
      "import": "./dist/module.mjs",
      "require": "./dist/require.js"
    },
    "./lite": {
      "worker": {
        "browser": "./lite/worker.browser.js",
        "node": "./lite/worker.node.js"
      },
      "import": "./lite/module.mjs",
      "require": "./lite/require.js"
    }
  }
};

// ---
// Exports
// ---

// entry: "foobar" === "." === default
// conditions: ["default", "import", "node"]
resolve.exports(pkg);
resolve.exports(pkg, '.');
resolve.exports(pkg, 'foobar');
//=> ["./dist/module.mjs"]

// entry: "foobar/lite" === "./lite"
// conditions: ["default", "import", "node"]
resolve.exports(pkg, 'foobar/lite');
resolve.exports(pkg, './lite');
//=> ["./lite/module.mjs"]

// Enable `require` condition
// conditions: ["default", "require", "node"]
resolve.exports(pkg, 'foobar', { require: true }); //=> ["./dist/require.js"]
resolve.exports(pkg, './lite', { require: true }); //=> ["./lite/require.js"]

// Throws "Missing <entry> specifier in <name> package" Error
resolve.exports(pkg, 'foobar/hello');
resolve.exports(pkg, './hello/world');

// Add custom condition(s)
// conditions: ["default", "worker", "import", "node"]
resolve.exports(pkg, 'foobar/lite', {
  conditions: ['worker']
}); //=> ["./lite/worker.node.js"]

// Toggle "browser" condition
// conditions: ["default", "worker", "import", "browser"]
resolve.exports(pkg, 'foobar/lite', {
  conditions: ['worker'],
  browser: true
}); //=> ["./lite/worker.browser.js"]

// Disable non-"default" condition activate
// NOTE: breaks from Node.js default behavior
// conditions: ["default", "custom"]
resolve.exports(pkg, 'foobar/lite', {
  conditions: ['custom'],
  unsafe: true,
});
//=> Error: No known conditions for "./lite" specifier in "foobar" package

// ---
// Imports
// ---

// conditions: ["default", "import", "node"]
resolve.imports(pkg, '#hash');
resolve.imports(pkg, 'foobar/#hash');
//=> ["./hash/node.mjs"]

// conditions: ["default", "import", "browser"]
resolve.imports(pkg, '#hash', { browser: true });
resolve.imports(pkg, 'foobar/#hash');
//=> ["./hash/web.mjs"]

// conditions: ["default"]
resolve.imports(pkg, '#hash', { unsafe: true });
resolve.imports(pkg, 'foobar/#hash');
//=> ["./hash/detect.mjs"]

resolve.imports(pkg, '#hello/world');
resolve.imports(pkg, 'foobar/#hello/world');
//=> Error: Missing "#hello/world" specifier in "foobar" package

// ---
// Legacy
// ---

// prefer "module" > "main" (default)
resolve.legacy(pkg); //=> "dist/module.mjs"

// customize fields order
resolve.legacy(pkg, {
  fields: ['main', 'module']
}); //=> "dist/require.js"
```

## API

The [`resolve()`](#resolvepkg-entry-options), [`exports()`](#exportspkg-entry-options), and [`imports()`](#importspkg-target-options) functions share similar API signatures:

```ts
export function resolve(pkg: Package, entry?: string, options?: Options): string[] | undefined;
export function exports(pkg: Package, entry?: string, options?: Options): string[] | undefined;
export function imports(pkg: Package, target: string, options?: Options): string[] | undefined;
//                                         ^ not optional!
```

All three:
* accept a `package.json` file's contents as a JSON object
* accept a target/entry identifier
* may accept an [Options](#options) object
* return `string[]`, `string`, or `undefined`

The only difference is that `imports()` must accept a target identifier as there can be no inferred default.

See below for further API descriptions.

> **Note:** There is also a [Legacy Resolver API](#legacy-resolver)

---

### resolve(pkg, entry?, options?)
Returns: `string[]` or `undefined`

A convenience helper which automatically reroutes to [`exports()`](#exportspkg-entry-options) or [`imports()`](#importspkg-target-options) depending on the `entry` value.

When unspecified, `entry` defaults to the `"."` identifier, which means that `exports()` will be invoked.

```js
import * as r from 'resolve.exports';

let pkg = {
  name: 'foobar',
  // ...
};

r.resolve(pkg);
//~> r.exports(pkg, '.');

r.resolve(pkg, 'foobar');
//~> r.exports(pkg, '.');

r.resolve(pkg, 'foobar/subpath');
//~> r.exports(pkg, './subpath');

r.resolve(pkg, '#hash/md5');
//~> r.imports(pkg, '#hash/md5');

r.resolve(pkg, 'foobar/#hash/md5');
//~> r.imports(pkg, '#hash/md5');
```

### exports(pkg, entry?, options?)
Returns: `string[]` or `undefined`

Traverse the `"exports"` within the contents of a `package.json` file. <br>
If the contents _does not_ contain an `"exports"` map, then `undefined` will be returned.

Successful resolutions will always result in a `string` or `string[]` value. This will be the value of the resolved mapping itself – which means that the output is a relative file path.

This function may throw an Error if:

* the requested `entry` cannot be resolved (aka, not defined in the `"exports"` map)
* an `entry` _is_ defined but no known conditions were matched (see [`options.conditions`](#optionsconditions))

#### pkg
Type: `object` <br>
Required: `true`

The `package.json` contents.

#### entry
Type: `string` <br>
Required: `false` <br>
Default: `.` (aka, root)

The desired target entry, or the original `import` path.

When `entry` _is not_ a relative path (aka, does not start with `'.'`), then `entry` is given the `'./'` prefix.

When `entry` begins with the package name (determined via the `pkg.name` value), then `entry` is truncated and made relative.

When `entry` is already relative, it is accepted as is.

***Examples***

Assume we have a module named "foobar" and whose `pkg` contains `"name": "foobar"`.

| `entry` value | treated as | reason |
|-|-|-|
| `null` / `undefined` | `'.'` | default |
| `'.'` | `'.'` | value was relative |
| `'foobar'` | `'.'` | value was `pkg.name` |
| `'foobar/lite'` | `'./lite'` | value had `pkg.name` prefix |
| `'./lite'` | `'./lite'` | value was relative |
| `'lite'` | `'./lite'` | value was not relative & did not have `pkg.name` prefix |


### imports(pkg, target, options?)
Returns: `string[]` or `undefined`

Traverse the `"imports"` within the contents of a `package.json` file. <br>
If the contents _does not_ contain an `"imports"` map, then `undefined` will be returned.

Successful resolutions will always result in a `string` or `string[]` value. This will be the value of the resolved mapping itself – which means that the output is a relative file path.

This function may throw an Error if:

* the requested `target` cannot be resolved (aka, not defined in the `"imports"` map)
* an `target` _is_ defined but no known conditions were matched (see [`options.conditions`](#optionsconditions))

#### pkg
Type: `object` <br>
Required: `true`

The `package.json` contents.

#### target
Type: `string` <br>
Required: `true`

The target import identifier; for example, `#hash` or `#hash/md5`.

Import specifiers _must_ begin with the `#` character, as required by the resolution specification. However, if `target` begins with the package name (determined by the `pkg.name` value), then `resolve.exports` will trim it from the `target` identifier. For example, `"foobar/#hash/md5"` will be treated as `"#hash/md5"` for the `"foobar"` package.

## Options

The [`resolve()`](#resolvepkg-entry-options), [`imports()`](#importspkg-target-options), and [`exports()`](#exportspkg-entry-options) functions share these options. All properties are optional and you are not required to pass an `options` argument.

Collectively, the `options` are used to assemble a list of [conditions](https://nodejs.org/docs/latest-v18.x/api/packages.html#conditional-exports) that should be activated while resolving your target(s).

> **Note:** Although the Node.js documentation primarily showcases conditions alongside `"exports"` usage, they also apply to `"imports"` maps too. _([example](https://nodejs.org/docs/latest-v18.x/api/packages.html#subpath-imports))_

#### options.require
Type: `boolean` <br>
Default: `false`

When truthy, the `"require"` field is added to the list of allowed/known conditions. <br>
Otherwise the `"import"` field is added instead.

#### options.browser
Type: `boolean` <br>
Default: `false`

When truthy, the `"browser"` field is added to the list of allowed/known conditions. <br>
Otherwise the `"node"` field is added instead.

#### options.conditions
Type: `string[]` <br>
Default: `[]`

A list of additional/custom conditions that should be accepted when seen.

> **Important:** The order specified within `options.conditions` does not matter. <br>The matching order/priority is **always** determined by the `"exports"` map's key order.

For example, you may choose to accept a `"production"` condition in certain environments. Given the following `pkg` content:

```js
const pkg = {
  // package.json ...
  "exports": {
    "worker": "./$worker.js",
    "require": "./$require.js",
    "production": "./$production.js",
    "import": "./$import.mjs",
  }
};

resolve.exports(pkg, '.');
// Conditions: ["default", "import", "node"]
//=> ["./$import.mjs"]

resolve.exports(pkg, '.', {
  conditions: ['production']
});
// Conditions: ["default", "production", "import", "node"]
//=> ["./$production.js"]

resolve.exports(pkg, '.', {
  conditions: ['production'],
  require: true,
});
// Conditions: ["default", "production", "require", "node"]
//=> ["./$require.js"]

resolve.exports(pkg, '.', {
  conditions: ['production', 'worker'],
  require: true,
});
// Conditions: ["default", "production", "worker", "require", "node"]
//=> ["./$worker.js"]

resolve.exports(pkg, '.', {
  conditions: ['production', 'worker']
});
// Conditions: ["default", "production", "worker", "import", "node"]
//=> ["./$worker.js"]
```

#### options.unsafe
Type: `boolean` <br>
Default: `false`

> **Important:** You probably do not want this option! <br>It will break out of Node's default resolution conditions.

When enabled, this option will ignore **all other options** except [`options.conditions`](#optionsconditions). This is because, when enabled, `options.unsafe` **does not** assume or provide any default conditions except the `"default"` condition.

```js
resolve.exports(pkg, '.');
//=> Conditions: ["default", "import", "node"]

resolve.exports(pkg, '.', { unsafe: true });
//=> Conditions: ["default"]

resolve.exports(pkg, '.', { unsafe: true, require: true, browser: true });
//=> Conditions: ["default"]
```

In other words, this means that trying to use `options.require` or `options.browser` alongside `options.unsafe` will have no effect. In order to enable these conditions, you must provide them manually into the `options.conditions` list:

```js
resolve.exports(pkg, '.', {
  unsafe: true,
  conditions: ["require"]
});
//=> Conditions: ["default", "require"]

resolve.exports(pkg, '.', {
  unsafe: true,
  conditions: ["browser", "require", "custom123"]
});
//=> Conditions: ["default", "browser", "require", "custom123"]
```

## Legacy Resolver

Also included is a "legacy" method for resolving non-`"exports"` package fields. This may be used as a fallback method when for when no `"exports"` mapping is defined. In other words, it's completely optional (and tree-shakeable).

### legacy(pkg, options?)
Returns: `string` or `undefined`

You may customize the field priority via [`options.fields`](#optionsfields).

When a field is found, its value is returned _as written_. <br>
When no fields were found, `undefined` is returned. If you wish to mimic Node.js behavior, you can assume this means `'index.js'` – but this module does not make that assumption for you.

#### options.browser
Type: `boolean` or `string` <br>
Default: `false`

When truthy, ensures that the `'browser'` field is part of the acceptable `fields` list.

> **Important:** If your custom [`options.fields`](#optionsfields) value includes `'browser'`, then _your_ order is respected. <br>Otherwise, when truthy, `options.browser` will move `'browser'` to the front of the list, making it the top priority.

When `true` and `"browser"` is an object, then `legacy()` will return the the entire `"browser"` object.

You may also pass a string value, which will be treated as an import/file path. When this is the case and `"browser"` is an object, then `legacy()` may return:

* `false` – if the package author decided a file should be ignored; or
* your `options.browser` string value – but made relative, if not already

> See the [`"browser" field specification](https://github.com/defunctzombie/package-browser-field-spec) for more information.

#### options.fields
Type: `string[]` <br>
Default: `['module', 'main']`

A list of fields to accept. The order of the array determines the priority/importance of each field, with the most important fields at the beginning of the list.

By default, the `legacy()` method will accept any `"module"` and/or "main" fields if they are defined. However, if both fields are defined, then "module" will be returned.

```js
import { legacy } from 'resolve.exports';

// package.json
const pkg = {
  "name": "...",
  "worker": "worker.js",
  "module": "module.mjs",
  "browser": "browser.js",
  "main": "main.js",
};

legacy(pkg);
// fields = [module, main]
//=> "module.mjs"

legacy(pkg, { browser: true });
// fields = [browser, module, main]
//=> "browser.mjs"

legacy(pkg, {
  fields: ['missing', 'worker', 'module', 'main']
});
// fields = [missing, worker, module, main]
//=> "worker.js"

legacy(pkg, {
  fields: ['missing', 'worker', 'module', 'main'],
  browser: true,
});
// fields = [browser, missing, worker, module, main]
//=> "browser.js"

legacy(pkg, {
  fields: ['module', 'browser', 'main'],
  browser: true,
});
// fields = [module, browser, main]
//=> "module.mjs"
```

## License

MIT © [Luke Edwards](https://lukeed.com)


---

File name: node_modules\safe-regex-test\CHANGELOG.md

Code:
# Changelog

All notable changes to this project will be documented in this file.

The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/)
and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).

## [v1.1.0](https://github.com/ljharb/safe-regex-test/compare/v1.0.3...v1.1.0) - 2024-12-12

### Commits

- [actions] split out node 10-20, and 20+ [`b4a46bb`](https://github.com/ljharb/safe-regex-test/commit/b4a46bb30542251df8051aec52561ce2bb162f85)
- [New] add types [`5cb24eb`](https://github.com/ljharb/safe-regex-test/commit/5cb24eb6d074fdae200446e172f1ab485460c34e)
- [Dev Deps] update `@ljharb/eslint-config`, `auto-changelog`, `es-value-fixtures`, `object-inspect`, `tape` [`e225ca0`](https://github.com/ljharb/safe-regex-test/commit/e225ca081b77ea105b5e913a00473066efeb471d)
- [Refactor] use `call-bound` directly [`9be3cd2`](https://github.com/ljharb/safe-regex-test/commit/9be3cd2f390f23c0075ec93e5abdace0ee5d9d9d)
- [Deps] update `call-bind`, `is-regex` [`524b736`](https://github.com/ljharb/safe-regex-test/commit/524b73677e16de9dde27dfb8f30ac4760071bbda)
- [Tests] replace `aud` with `npm audit` [`f3cd537`](https://github.com/ljharb/safe-regex-test/commit/f3cd5379e48152daeb51fdd09e15d3ec74797761)
- [Dev Deps] add missing peer dep [`14da559`](https://github.com/ljharb/safe-regex-test/commit/14da559a0620b99a262ab9610dba13720915360f)

## [v1.0.3](https://github.com/ljharb/safe-regex-test/compare/v1.0.2...v1.0.3) - 2024-02-06

### Commits

- [Refactor] use `es-errors`, so things that only need those do not need `get-intrinsic` [`d6ba2f9`](https://github.com/ljharb/safe-regex-test/commit/d6ba2f948c679c3104ce6d6c897bedff0f1c5b74)
- [Deps] update `call-bind`, `get-intrinsic` [`5a3b1d7`](https://github.com/ljharb/safe-regex-test/commit/5a3b1d755e46f010e6930f15ec30eae023feffd3)
- [Dev Deps] update `tape` [`75fb719`](https://github.com/ljharb/safe-regex-test/commit/75fb71937c5daf1326052c59d6f251f439cd9332)

## [v1.0.2](https://github.com/ljharb/safe-regex-test/compare/v1.0.1...v1.0.2) - 2024-01-11

### Commits

- [meta] package.json `sideEffects` should be boolean [`094bb88`](https://github.com/ljharb/safe-regex-test/commit/094bb88d93ce25e26d20f5badee4e45acf0e3ac5)

## [v1.0.1](https://github.com/ljharb/safe-regex-test/compare/v1.0.0...v1.0.1) - 2024-01-09

### Commits

- [Tests] add nyc for coverage [`7e3f525`](https://github.com/ljharb/safe-regex-test/commit/7e3f5254efdf0979f72492f0e7f52a3a9814591f)
- [Dev Deps] update `@ljharb/eslint-config`, `aud`, `npmignore`, `object-inspect`, `tape` [`e7e0169`](https://github.com/ljharb/safe-regex-test/commit/e7e016949b78602f24debc1185c26f33cc4e9d1b)
- [actions] update rebase action [`2962694`](https://github.com/ljharb/safe-regex-test/commit/2962694bce7ffa278e873911072c11119bb3a608)
- [readme] add testing badges; remove david-dm badges [`e9dfd83`](https://github.com/ljharb/safe-regex-test/commit/e9dfd830655ac702ac7b7947f7076bb524994968)
- [Dev Deps] update `@ljharb/eslint-config`, `aud`, `object-inspect`, `tape` [`496fe99`](https://github.com/ljharb/safe-regex-test/commit/496fe99aa66f20cadb1cf79f6d479b87ae95b620)
- [Deps] update `call-bind`, `get-intrinsic` [`d94c5ba`](https://github.com/ljharb/safe-regex-test/commit/d94c5badd0362df8ff7ced38b50d20550fd629c1)
- [meta] add missing `engines.node` [`f3d4711`](https://github.com/ljharb/safe-regex-test/commit/f3d4711a51b21330e34f5f27e45452fbdb924715)
- [Deps] update `get-intrinsic` [`0eeedd7`](https://github.com/ljharb/safe-regex-test/commit/0eeedd74d0313fab9b0718895c02905f702ecb4d)
- [meta] add `sideEffects` flag [`fe1655f`](https://github.com/ljharb/safe-regex-test/commit/fe1655f16449208d987d9f4b7dafb15564ca80f7)

## v1.0.0 - 2022-09-22

### Commits

- Initial implementation, tests, readme [`0273e9f`](https://github.com/ljharb/safe-regex-test/commit/0273e9f96f4b09df413523f4faacc8ae9ac5e6cb)
- Initial commit [`b6c1edf`](https://github.com/ljharb/safe-regex-test/commit/b6c1edf740e6105fb71c34c1c69fadd837e8f7ab)
- npm init [`c7f5765`](https://github.com/ljharb/safe-regex-test/commit/c7f576580607b16458b5a16e6bfa3b639e49c6bd)
- Only apps should have lockfiles [`1162bf0`](https://github.com/ljharb/safe-regex-test/commit/1162bf011835040f7e2c9936734294b2d98536bf)


---

File name: node_modules\safe-regex-test\index.d.ts

Code:
declare function regexTester(regex: RegExp): (string: string) => boolean;

export = regexTester;

---

File name: node_modules\safe-regex-test\index.js

Code:
'use strict';

var callBound = require('call-bound');
var isRegex = require('is-regex');

var $exec = callBound('RegExp.prototype.exec');
var $TypeError = require('es-errors/type');

/** @type {import('.')} */
module.exports = function regexTester(regex) {
	if (!isRegex(regex)) {
		throw new $TypeError('`regex` must be a RegExp');
	}
	return function test(s) {
		return $exec(regex, s) !== null;
	};
};


---

File name: node_modules\safe-regex-test\package.json

Code:
{
	"name": "safe-regex-test",
	"version": "1.1.0",
	"description": "Give a regex, get a robust predicate function that tests it against a string.",
	"main": "index.js",
	"exports": {
		".": "./index.js",
		"./package.json": "./package.json"
	},
	"sideEffects": false,
	"scripts": {
		"prepack": "npmignore --auto --commentLines=autogenerated",
		"version": "auto-changelog && git add CHANGELOG.md",
		"postversion": "auto-changelog && git add CHANGELOG.md && git commit --no-edit --amend && git tag -f \"v$(node -e \"console.log(require('./package.json').version)\")\"",
		"lint": "eslint --ext=js,mjs .",
		"postlint": "tsc && attw -P",
		"prepublish": "not-in-publish || npm run prepublishOnly",
		"prepublishOnly": "safe-publish-latest",
		"pretest": "npm run lint",
		"tests-only": "nyc tape test",
		"test": "npm run tests-only",
		"posttest": "npx npm@'>= 10.2' audit --production"
	},
	"repository": {
		"type": "git",
		"url": "git+https://github.com/ljharb/safe-regex-test.git"
	},
	"keywords": [
		"regex",
		"regexp",
		"test",
		"tester",
		"safe",
		"robust",
		"exec"
	],
	"author": "Jordan Harband <ljharb@gmail.com>",
	"funding": {
		"url": "https://github.com/sponsors/ljharb"
	},
	"license": "MIT",
	"bugs": {
		"url": "https://github.com/ljharb/safe-regex-test/issues"
	},
	"homepage": "https://github.com/ljharb/safe-regex-test#readme",
	"dependencies": {
		"call-bound": "^1.0.2",
		"es-errors": "^1.3.0",
		"is-regex": "^1.2.1"
	},
	"devDependencies": {
		"@arethetypeswrong/cli": "^0.17.1",
		"@ljharb/eslint-config": "^21.1.1",
		"@ljharb/tsconfig": "^0.2.2",
		"@types/for-each": "^0.3.3",
		"@types/object-inspect": "^1.13.0",
		"@types/tape": "^5.6.5",
		"auto-changelog": "^2.5.0",
		"encoding": "^0.1.13",
		"es-value-fixtures": "^1.5.0",
		"eslint": "=8.8.0",
		"for-each": "^0.3.3",
		"in-publish": "^2.0.1",
		"npmignore": "^0.3.1",
		"nyc": "^10.3.2",
		"object-inspect": "^1.13.3",
		"safe-publish-latest": "^2.0.0",
		"tape": "^5.9.0",
		"typescript": "next"
	},
	"auto-changelog": {
		"output": "CHANGELOG.md",
		"template": "keepachangelog",
		"unreleased": false,
		"commitLimit": false,
		"backfillLimit": false,
		"hideCredit": true
	},
	"publishConfig": {
		"ignore": [
			".github/workflows"
		]
	},
	"engines": {
		"node": ">= 0.4"
	}
}


---

File name: node_modules\safe-regex-test\README.md

Code:
# safe-regex-test <sup>[![Version Badge][npm-version-svg]][package-url]</sup>

[![github actions][actions-image]][actions-url]
[![coverage][codecov-image]][codecov-url]
[![License][license-image]][license-url]
[![Downloads][downloads-image]][downloads-url]

[![npm badge][npm-badge-png]][package-url]

Give a regex, get a robust predicate function that tests it against a string. This will work even if `RegExp.prototype` is altered later.

## Getting started

```sh
npm install --save safe-regex-test
```

## Usage/Examples

```js
var regexTester = require('safe-regex-test');
var assert = require('assert');

var tester = regexTester('a');
assert.ok(tester('a'));
assert.notOk(tester('b'));
```

## Tests
Simply clone the repo, `npm install`, and run `npm test`

[package-url]: https://npmjs.org/package/safe-regex-test
[npm-version-svg]: https://versionbadg.es/ljharb/safe-regex-test.svg
[deps-svg]: https://david-dm.org/ljharb/safe-regex-test.svg
[deps-url]: https://david-dm.org/ljharb/safe-regex-test
[dev-deps-svg]: https://david-dm.org/ljharb/safe-regex-test/dev-status.svg
[dev-deps-url]: https://david-dm.org/ljharb/safe-regex-test#info=devDependencies
[npm-badge-png]: https://nodei.co/npm/safe-regex-test.png?downloads=true&stars=true
[license-image]: https://img.shields.io/npm/l/safe-regex-test.svg
[license-url]: LICENSE
[downloads-image]: https://img.shields.io/npm/dm/safe-regex-test.svg
[downloads-url]: https://npm-stat.com/charts.html?package=safe-regex-test
[codecov-image]: https://codecov.io/gh/ljharb/safe-regex-test/branch/main/graphs/badge.svg
[codecov-url]: https://app.codecov.io/gh/ljharb/safe-regex-test/
[actions-image]: https://img.shields.io/endpoint?url=https://github-actions-badge-u3jn4tfpocch.runkit.sh/ljharb/safe-regex-test
[actions-url]: https://github.com/ljharb/safe-regex-test/actions


---

File name: node_modules\safe-regex-test\test\index.js

Code:
'use strict';

var test = require('tape');
var v = require('es-value-fixtures');
var forEach = require('for-each');
var inspect = require('object-inspect');

var regexTester = require('../');

test('regex tester', function (t) {
	t.equal(typeof regexTester, 'function', 'is a function');

	t.test('non-regexes', function (st) {
		forEach([].concat(
			// @ts-expect-error TS sucks with concat
			v.primitives,
			v.objects
		), function (val) {
			st['throws'](
				function () { regexTester(val); },
				TypeError,
				inspect(val) + ' is not a regex'
			);
		});

		st.end();
	});

	t.test('regexes', function (st) {
		var tester = regexTester(/a/);

		st.equal(typeof tester, 'function', 'returns a function');
		st.equal(tester('a'), true, 'returns true for a match');
		st.equal(tester('b'), false, 'returns false for a non-match');
		st.equal(tester('a'), true, 'returns true for a match again');

		st.end();
	});

	t.end();
});


---

File name: node_modules\safe-regex-test\tsconfig.json

Code:
{
	"extends": "@ljharb/tsconfig",
	"compilerOptions": {
		// "target": "es2021",
	},
	"exclude": [
		"coverage",
	],
}

---

File name: node_modules\scheduler\cjs\scheduler-unstable_mock.development.js

Code:
/**
 * @license React
 * scheduler-unstable_mock.development.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

"use strict";
"production" !== process.env.NODE_ENV &&
  (function () {
    function push(heap, node) {
      var index = heap.length;
      heap.push(node);
      a: for (; 0 < index; ) {
        var parentIndex = (index - 1) >>> 1,
          parent = heap[parentIndex];
        if (0 < compare(parent, node))
          (heap[parentIndex] = node),
            (heap[index] = parent),
            (index = parentIndex);
        else break a;
      }
    }
    function peek(heap) {
      return 0 === heap.length ? null : heap[0];
    }
    function pop(heap) {
      if (0 === heap.length) return null;
      var first = heap[0],
        last = heap.pop();
      if (last !== first) {
        heap[0] = last;
        a: for (
          var index = 0, length = heap.length, halfLength = length >>> 1;
          index < halfLength;

        ) {
          var leftIndex = 2 * (index + 1) - 1,
            left = heap[leftIndex],
            rightIndex = leftIndex + 1,
            right = heap[rightIndex];
          if (0 > compare(left, last))
            rightIndex < length && 0 > compare(right, left)
              ? ((heap[index] = right),
                (heap[rightIndex] = last),
                (index = rightIndex))
              : ((heap[index] = left),
                (heap[leftIndex] = last),
                (index = leftIndex));
          else if (rightIndex < length && 0 > compare(right, last))
            (heap[index] = right),
              (heap[rightIndex] = last),
              (index = rightIndex);
          else break a;
        }
      }
      return first;
    }
    function compare(a, b) {
      var diff = a.sortIndex - b.sortIndex;
      return 0 !== diff ? diff : a.id - b.id;
    }
    function advanceTimers(currentTime) {
      for (var timer = peek(timerQueue); null !== timer; ) {
        if (null === timer.callback) pop(timerQueue);
        else if (timer.startTime <= currentTime)
          pop(timerQueue),
            (timer.sortIndex = timer.expirationTime),
            push(taskQueue, timer);
        else break;
        timer = peek(timerQueue);
      }
    }
    function handleTimeout(currentTime) {
      isHostTimeoutScheduled = !1;
      advanceTimers(currentTime);
      if (!isHostCallbackScheduled)
        if (null !== peek(taskQueue))
          (isHostCallbackScheduled = !0), (scheduledCallback = flushWork);
        else {
          var firstTimer = peek(timerQueue);
          null !== firstTimer &&
            ((currentTime = firstTimer.startTime - currentTime),
            (scheduledTimeout = handleTimeout),
            (timeoutTime = currentMockTime + currentTime));
        }
    }
    function flushWork(hasTimeRemaining, initialTime) {
      isHostCallbackScheduled = !1;
      isHostTimeoutScheduled &&
        ((isHostTimeoutScheduled = !1),
        (scheduledTimeout = null),
        (timeoutTime = -1));
      isPerformingWork = !0;
      var previousPriorityLevel = currentPriorityLevel;
      try {
        a: {
          advanceTimers(initialTime);
          for (
            currentTask = peek(taskQueue);
            null !== currentTask &&
            (!(currentTask.expirationTime > initialTime) ||
              (hasTimeRemaining && !shouldYieldToHost()));

          ) {
            var callback = currentTask.callback;
            if ("function" === typeof callback) {
              currentTask.callback = null;
              currentPriorityLevel = currentTask.priorityLevel;
              var continuationCallback = callback(
                currentTask.expirationTime <= initialTime
              );
              initialTime = currentMockTime;
              if ("function" === typeof continuationCallback) {
                if (
                  ((currentTask.callback = continuationCallback),
                  advanceTimers(initialTime),
                  shouldYieldForPaint)
                ) {
                  var JSCompiler_inline_result = (needsPaint = !0);
                  break a;
                }
              } else
                currentTask === peek(taskQueue) && pop(taskQueue),
                  advanceTimers(initialTime);
            } else pop(taskQueue);
            currentTask = peek(taskQueue);
          }
          if (null !== currentTask) JSCompiler_inline_result = !0;
          else {
            var firstTimer = peek(timerQueue);
            if (null !== firstTimer) {
              var ms = firstTimer.startTime - initialTime;
              scheduledTimeout = handleTimeout;
              timeoutTime = currentMockTime + ms;
            }
            JSCompiler_inline_result = !1;
          }
        }
        return JSCompiler_inline_result;
      } finally {
        (currentTask = null),
          (currentPriorityLevel = previousPriorityLevel),
          (isPerformingWork = !1);
      }
    }
    function shouldYieldToHost() {
      return (0 === expectedNumberOfYields && null === yieldedValues) ||
        (-1 !== expectedNumberOfYields &&
          null !== yieldedValues &&
          yieldedValues.length >= expectedNumberOfYields) ||
        (shouldYieldForPaint && needsPaint)
        ? (didStop = !0)
        : !1;
    }
    function unstable_flushAllWithoutAsserting() {
      if (isFlushing) throw Error("Already flushing work.");
      if (null !== scheduledCallback) {
        var cb = scheduledCallback;
        isFlushing = !0;
        try {
          var hasMoreWork = !0;
          do hasMoreWork = cb(!0, currentMockTime);
          while (hasMoreWork);
          hasMoreWork || (scheduledCallback = null);
          return !0;
        } finally {
          isFlushing = !1;
        }
      } else return !1;
    }
    var taskQueue = [],
      timerQueue = [],
      taskIdCounter = 1,
      currentTask = null,
      currentPriorityLevel = 3,
      isPerformingWork = !1,
      isHostCallbackScheduled = !1,
      isHostTimeoutScheduled = !1,
      currentMockTime = 0,
      scheduledCallback = null,
      scheduledTimeout = null,
      timeoutTime = -1,
      yieldedValues = null,
      expectedNumberOfYields = -1,
      didStop = !1,
      isFlushing = !1,
      needsPaint = !1,
      shouldYieldForPaint = !1,
      disableYieldValue = !1;
    exports.log = function (value) {
      "disabledLog" === console.log.name ||
        disableYieldValue ||
        (null === yieldedValues
          ? (yieldedValues = [value])
          : yieldedValues.push(value));
    };
    exports.reset = function () {
      if (isFlushing) throw Error("Cannot reset while already flushing work.");
      currentMockTime = 0;
      scheduledTimeout = scheduledCallback = null;
      timeoutTime = -1;
      yieldedValues = null;
      expectedNumberOfYields = -1;
      needsPaint = isFlushing = didStop = !1;
    };
    exports.unstable_IdlePriority = 5;
    exports.unstable_ImmediatePriority = 1;
    exports.unstable_LowPriority = 4;
    exports.unstable_NormalPriority = 3;
    exports.unstable_Profiling = null;
    exports.unstable_UserBlockingPriority = 2;
    exports.unstable_advanceTime = function (ms) {
      "disabledLog" === console.log.name ||
        disableYieldValue ||
        ((currentMockTime += ms),
        null !== scheduledTimeout &&
          timeoutTime <= currentMockTime &&
          (scheduledTimeout(currentMockTime),
          (timeoutTime = -1),
          (scheduledTimeout = null)));
    };
    exports.unstable_cancelCallback = function (task) {
      task.callback = null;
    };
    exports.unstable_clearLog = function () {
      if (null === yieldedValues) return [];
      var values = yieldedValues;
      yieldedValues = null;
      return values;
    };
    exports.unstable_flushAll = function () {
      if (null !== yieldedValues)
        throw Error(
          "Log is not empty. Assert on the log of yielded values before flushing additional work."
        );
      unstable_flushAllWithoutAsserting();
      if (null !== yieldedValues)
        throw Error(
          "While flushing work, something yielded a value. Use an assertion helper to assert on the log of yielded values, e.g. expect(Scheduler).toFlushAndYield([...])"
        );
    };
    exports.unstable_flushAllWithoutAsserting =
      unstable_flushAllWithoutAsserting;
    exports.unstable_flushExpired = function () {
      if (isFlushing) throw Error("Already flushing work.");
      if (null !== scheduledCallback) {
        isFlushing = !0;
        try {
          scheduledCallback(!1, currentMockTime) || (scheduledCallback = null);
        } finally {
          isFlushing = !1;
        }
      }
    };
    exports.unstable_flushNumberOfYields = function (count) {
      if (isFlushing) throw Error("Already flushing work.");
      if (null !== scheduledCallback) {
        var cb = scheduledCallback;
        expectedNumberOfYields = count;
        isFlushing = !0;
        try {
          count = !0;
          do count = cb(!0, currentMockTime);
          while (count && !didStop);
          count || (scheduledCallback = null);
        } finally {
          (expectedNumberOfYields = -1), (isFlushing = didStop = !1);
        }
      }
    };
    exports.unstable_flushUntilNextPaint = function () {
      if (isFlushing) throw Error("Already flushing work.");
      if (null !== scheduledCallback) {
        var cb = scheduledCallback;
        shouldYieldForPaint = !0;
        needsPaint = !1;
        isFlushing = !0;
        try {
          var hasMoreWork = !0;
          do hasMoreWork = cb(!0, currentMockTime);
          while (hasMoreWork && !didStop);
          hasMoreWork || (scheduledCallback = null);
        } finally {
          isFlushing = didStop = shouldYieldForPaint = !1;
        }
      }
      return !1;
    };
    exports.unstable_forceFrameRate = function () {};
    exports.unstable_getCurrentPriorityLevel = function () {
      return currentPriorityLevel;
    };
    exports.unstable_hasPendingWork = function () {
      return null !== scheduledCallback;
    };
    exports.unstable_next = function (eventHandler) {
      switch (currentPriorityLevel) {
        case 1:
        case 2:
        case 3:
          var priorityLevel = 3;
          break;
        default:
          priorityLevel = currentPriorityLevel;
      }
      var previousPriorityLevel = currentPriorityLevel;
      currentPriorityLevel = priorityLevel;
      try {
        return eventHandler();
      } finally {
        currentPriorityLevel = previousPriorityLevel;
      }
    };
    exports.unstable_now = function () {
      return currentMockTime;
    };
    exports.unstable_requestPaint = function () {
      needsPaint = !0;
    };
    exports.unstable_runWithPriority = function (priorityLevel, eventHandler) {
      switch (priorityLevel) {
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
          break;
        default:
          priorityLevel = 3;
      }
      var previousPriorityLevel = currentPriorityLevel;
      currentPriorityLevel = priorityLevel;
      try {
        return eventHandler();
      } finally {
        currentPriorityLevel = previousPriorityLevel;
      }
    };
    exports.unstable_scheduleCallback = function (
      priorityLevel,
      callback,
      options
    ) {
      var currentTime = currentMockTime;
      "object" === typeof options && null !== options
        ? ((options = options.delay),
          (options =
            "number" === typeof options && 0 < options
              ? currentTime + options
              : currentTime))
        : (options = currentTime);
      switch (priorityLevel) {
        case 1:
          var timeout = -1;
          break;
        case 2:
          timeout = 250;
          break;
        case 5:
          timeout = 1073741823;
          break;
        case 4:
          timeout = 1e4;
          break;
        default:
          timeout = 5e3;
      }
      timeout = options + timeout;
      priorityLevel = {
        id: taskIdCounter++,
        callback: callback,
        priorityLevel: priorityLevel,
        startTime: options,
        expirationTime: timeout,
        sortIndex: -1
      };
      options > currentTime
        ? ((priorityLevel.sortIndex = options),
          push(timerQueue, priorityLevel),
          null === peek(taskQueue) &&
            priorityLevel === peek(timerQueue) &&
            (isHostTimeoutScheduled
              ? ((scheduledTimeout = null), (timeoutTime = -1))
              : (isHostTimeoutScheduled = !0),
            (scheduledTimeout = handleTimeout),
            (timeoutTime = currentMockTime + (options - currentTime))))
        : ((priorityLevel.sortIndex = timeout),
          push(taskQueue, priorityLevel),
          isHostCallbackScheduled ||
            isPerformingWork ||
            ((isHostCallbackScheduled = !0), (scheduledCallback = flushWork)));
      return priorityLevel;
    };
    exports.unstable_setDisableYieldValue = function (newValue) {
      disableYieldValue = newValue;
    };
    exports.unstable_shouldYield = shouldYieldToHost;
    exports.unstable_wrapCallback = function (callback) {
      var parentPriorityLevel = currentPriorityLevel;
      return function () {
        var previousPriorityLevel = currentPriorityLevel;
        currentPriorityLevel = parentPriorityLevel;
        try {
          return callback.apply(this, arguments);
        } finally {
          currentPriorityLevel = previousPriorityLevel;
        }
      };
    };
  })();


---



---

