File name: node_modules\chalk\index.d.ts

Code:
/**
Basic foreground colors.

[More colors here.](https://github.com/chalk/chalk/blob/master/readme.md#256-and-truecolor-color-support)
*/
declare type ForegroundColor =
	| 'black'
	| 'red'
	| 'green'
	| 'yellow'
	| 'blue'
	| 'magenta'
	| 'cyan'
	| 'white'
	| 'gray'
	| 'grey'
	| 'blackBright'
	| 'redBright'
	| 'greenBright'
	| 'yellowBright'
	| 'blueBright'
	| 'magentaBright'
	| 'cyanBright'
	| 'whiteBright';

/**
Basic background colors.

[More colors here.](https://github.com/chalk/chalk/blob/master/readme.md#256-and-truecolor-color-support)
*/
declare type BackgroundColor =
	| 'bgBlack'
	| 'bgRed'
	| 'bgGreen'
	| 'bgYellow'
	| 'bgBlue'
	| 'bgMagenta'
	| 'bgCyan'
	| 'bgWhite'
	| 'bgGray'
	| 'bgGrey'
	| 'bgBlackBright'
	| 'bgRedBright'
	| 'bgGreenBright'
	| 'bgYellowBright'
	| 'bgBlueBright'
	| 'bgMagentaBright'
	| 'bgCyanBright'
	| 'bgWhiteBright';

/**
Basic colors.

[More colors here.](https://github.com/chalk/chalk/blob/master/readme.md#256-and-truecolor-color-support)
*/
declare type Color = ForegroundColor | BackgroundColor;

declare type Modifiers =
	| 'reset'
	| 'bold'
	| 'dim'
	| 'italic'
	| 'underline'
	| 'inverse'
	| 'hidden'
	| 'strikethrough'
	| 'visible';

declare namespace chalk {
	/**
	Levels:
	- `0` - All colors disabled.
	- `1` - Basic 16 colors support.
	- `2` - ANSI 256 colors support.
	- `3` - Truecolor 16 million colors support.
	*/
	type Level = 0 | 1 | 2 | 3;

	interface Options {
		/**
		Specify the color support for Chalk.

		By default, color support is automatically detected based on the environment.

		Levels:
		- `0` - All colors disabled.
		- `1` - Basic 16 colors support.
		- `2` - ANSI 256 colors support.
		- `3` - Truecolor 16 million colors support.
		*/
		level?: Level;
	}

	/**
	Return a new Chalk instance.
	*/
	type Instance = new (options?: Options) => Chalk;

	/**
	Detect whether the terminal supports color.
	*/
	interface ColorSupport {
		/**
		The color level used by Chalk.
		*/
		level: Level;

		/**
		Return whether Chalk supports basic 16 colors.
		*/
		hasBasic: boolean;

		/**
		Return whether Chalk supports ANSI 256 colors.
		*/
		has256: boolean;

		/**
		Return whether Chalk supports Truecolor 16 million colors.
		*/
		has16m: boolean;
	}

	interface ChalkFunction {
		/**
		Use a template string.

		@remarks Template literals are unsupported for nested calls (see [issue #341](https://github.com/chalk/chalk/issues/341))

		@example
		```
		import chalk = require('chalk');

		log(chalk`
		CPU: {red ${cpu.totalPercent}%}
		RAM: {green ${ram.used / ram.total * 100}%}
		DISK: {rgb(255,131,0) ${disk.used / disk.total * 100}%}
		`);
		```

		@example
		```
		import chalk = require('chalk');

		log(chalk.red.bgBlack`2 + 3 = {bold ${2 + 3}}`)
		```
		*/
		(text: TemplateStringsArray, ...placeholders: unknown[]): string;

		(...text: unknown[]): string;
	}

	interface Chalk extends ChalkFunction {
		/**
		Return a new Chalk instance.
		*/
		Instance: Instance;

		/**
		The color support for Chalk.

		By default, color support is automatically detected based on the environment.

		Levels:
		- `0` - All colors disabled.
		- `1` - Basic 16 colors support.
		- `2` - ANSI 256 colors support.
		- `3` - Truecolor 16 million colors support.
		*/
		level: Level;

		/**
		Use HEX value to set text color.

		@param color - Hexadecimal value representing the desired color.

		@example
		```
		import chalk = require('chalk');

		chalk.hex('#DEADED');
		```
		*/
		hex(color: string): Chalk;

		/**
		Use keyword color value to set text color.

		@param color - Keyword value representing the desired color.

		@example
		```
		import chalk = require('chalk');

		chalk.keyword('orange');
		```
		*/
		keyword(color: string): Chalk;

		/**
		Use RGB values to set text color.
		*/
		rgb(red: number, green: number, blue: number): Chalk;

		/**
		Use HSL values to set text color.
		*/
		hsl(hue: number, saturation: number, lightness: number): Chalk;

		/**
		Use HSV values to set text color.
		*/
		hsv(hue: number, saturation: number, value: number): Chalk;

		/**
		Use HWB values to set text color.
		*/
		hwb(hue: number, whiteness: number, blackness: number): Chalk;

		/**
		Use a [Select/Set Graphic Rendition](https://en.wikipedia.org/wiki/ANSI_escape_code#SGR_parameters) (SGR) [color code number](https://en.wikipedia.org/wiki/ANSI_escape_code#3/4_bit) to set text color.

		30 <= code && code < 38 || 90 <= code && code < 98
		For example, 31 for red, 91 for redBright.
		*/
		ansi(code: number): Chalk;

		/**
		Use a [8-bit unsigned number](https://en.wikipedia.org/wiki/ANSI_escape_code#8-bit) to set text color.
		*/
		ansi256(index: number): Chalk;

		/**
		Use HEX value to set background color.

		@param color - Hexadecimal value representing the desired color.

		@example
		```
		import chalk = require('chalk');

		chalk.bgHex('#DEADED');
		```
		*/
		bgHex(color: string): Chalk;

		/**
		Use keyword color value to set background color.

		@param color - Keyword value representing the desired color.

		@example
		```
		import chalk = require('chalk');

		chalk.bgKeyword('orange');
		```
		*/
		bgKeyword(color: string): Chalk;

		/**
		Use RGB values to set background color.
		*/
		bgRgb(red: number, green: number, blue: number): Chalk;

		/**
		Use HSL values to set background color.
		*/
		bgHsl(hue: number, saturation: number, lightness: number): Chalk;

		/**
		Use HSV values to set background color.
		*/
		bgHsv(hue: number, saturation: number, value: number): Chalk;

		/**
		Use HWB values to set background color.
		*/
		bgHwb(hue: number, whiteness: number, blackness: number): Chalk;

		/**
		Use a [Select/Set Graphic Rendition](https://en.wikipedia.org/wiki/ANSI_escape_code#SGR_parameters) (SGR) [color code number](https://en.wikipedia.org/wiki/ANSI_escape_code#3/4_bit) to set background color.

		30 <= code && code < 38 || 90 <= code && code < 98
		For example, 31 for red, 91 for redBright.
		Use the foreground code, not the background code (for example, not 41, nor 101).
		*/
		bgAnsi(code: number): Chalk;

		/**
		Use a [8-bit unsigned number](https://en.wikipedia.org/wiki/ANSI_escape_code#8-bit) to set background color.
		*/
		bgAnsi256(index: number): Chalk;

		/**
		Modifier: Resets the current color chain.
		*/
		readonly reset: Chalk;

		/**
		Modifier: Make text bold.
		*/
		readonly bold: Chalk;

		/**
		Modifier: Emitting only a small amount of light.
		*/
		readonly dim: Chalk;

		/**
		Modifier: Make text italic. (Not widely supported)
		*/
		readonly italic: Chalk;

		/**
		Modifier: Make text underline. (Not widely supported)
		*/
		readonly underline: Chalk;

		/**
		Modifier: Inverse background and foreground colors.
		*/
		readonly inverse: Chalk;

		/**
		Modifier: Prints the text, but makes it invisible.
		*/
		readonly hidden: Chalk;

		/**
		Modifier: Puts a horizontal line through the center of the text. (Not widely supported)
		*/
		readonly strikethrough: Chalk;

		/**
		Modifier: Prints the text only when Chalk has a color support level > 0.
		Can be useful for things that are purely cosmetic.
		*/
		readonly visible: Chalk;

		readonly black: Chalk;
		readonly red: Chalk;
		readonly green: Chalk;
		readonly yellow: Chalk;
		readonly blue: Chalk;
		readonly magenta: Chalk;
		readonly cyan: Chalk;
		readonly white: Chalk;

		/*
		Alias for `blackBright`.
		*/
		readonly gray: Chalk;

		/*
		Alias for `blackBright`.
		*/
		readonly grey: Chalk;

		readonly blackBright: Chalk;
		readonly redBright: Chalk;
		readonly greenBright: Chalk;
		readonly yellowBright: Chalk;
		readonly blueBright: Chalk;
		readonly magentaBright: Chalk;
		readonly cyanBright: Chalk;
		readonly whiteBright: Chalk;

		readonly bgBlack: Chalk;
		readonly bgRed: Chalk;
		readonly bgGreen: Chalk;
		readonly bgYellow: Chalk;
		readonly bgBlue: Chalk;
		readonly bgMagenta: Chalk;
		readonly bgCyan: Chalk;
		readonly bgWhite: Chalk;

		/*
		Alias for `bgBlackBright`.
		*/
		readonly bgGray: Chalk;

		/*
		Alias for `bgBlackBright`.
		*/
		readonly bgGrey: Chalk;

		readonly bgBlackBright: Chalk;
		readonly bgRedBright: Chalk;
		readonly bgGreenBright: Chalk;
		readonly bgYellowBright: Chalk;
		readonly bgBlueBright: Chalk;
		readonly bgMagentaBright: Chalk;
		readonly bgCyanBright: Chalk;
		readonly bgWhiteBright: Chalk;
	}
}

/**
Main Chalk object that allows to chain styles together.
Call the last one as a method with a string argument.
Order doesn't matter, and later styles take precedent in case of a conflict.
This simply means that `chalk.red.yellow.green` is equivalent to `chalk.green`.
*/
declare const chalk: chalk.Chalk & chalk.ChalkFunction & {
	supportsColor: chalk.ColorSupport | false;
	Level: chalk.Level;
	Color: Color;
	ForegroundColor: ForegroundColor;
	BackgroundColor: BackgroundColor;
	Modifiers: Modifiers;
	stderr: chalk.Chalk & {supportsColor: chalk.ColorSupport | false};
};

export = chalk;


---

File name: node_modules\chalk\package.json

Code:
{
	"name": "chalk",
	"version": "4.1.2",
	"description": "Terminal string styling done right",
	"license": "MIT",
	"repository": "chalk/chalk",
	"funding": "https://github.com/chalk/chalk?sponsor=1",
	"main": "source",
	"engines": {
		"node": ">=10"
	},
	"scripts": {
		"test": "xo && nyc ava && tsd",
		"bench": "matcha benchmark.js"
	},
	"files": [
		"source",
		"index.d.ts"
	],
	"keywords": [
		"color",
		"colour",
		"colors",
		"terminal",
		"console",
		"cli",
		"string",
		"str",
		"ansi",
		"style",
		"styles",
		"tty",
		"formatting",
		"rgb",
		"256",
		"shell",
		"xterm",
		"log",
		"logging",
		"command-line",
		"text"
	],
	"dependencies": {
		"ansi-styles": "^4.1.0",
		"supports-color": "^7.1.0"
	},
	"devDependencies": {
		"ava": "^2.4.0",
		"coveralls": "^3.0.7",
		"execa": "^4.0.0",
		"import-fresh": "^3.1.0",
		"matcha": "^0.7.0",
		"nyc": "^15.0.0",
		"resolve-from": "^5.0.0",
		"tsd": "^0.7.4",
		"xo": "^0.28.2"
	},
	"xo": {
		"rules": {
			"unicorn/prefer-string-slice": "off",
			"unicorn/prefer-includes": "off",
			"@typescript-eslint/member-ordering": "off",
			"no-redeclare": "off",
			"unicorn/string-content": "off",
			"unicorn/better-regex": "off"
		}
	}
}


---

File name: node_modules\chalk\readme.md

Code:
<h1 align="center">
	<br>
	<br>
	<img width="320" src="media/logo.svg" alt="Chalk">
	<br>
	<br>
	<br>
</h1>

> Terminal string styling done right

[![Build Status](https://travis-ci.org/chalk/chalk.svg?branch=master)](https://travis-ci.org/chalk/chalk) [![Coverage Status](https://coveralls.io/repos/github/chalk/chalk/badge.svg?branch=master)](https://coveralls.io/github/chalk/chalk?branch=master) [![npm dependents](https://badgen.net/npm/dependents/chalk)](https://www.npmjs.com/package/chalk?activeTab=dependents) [![Downloads](https://badgen.net/npm/dt/chalk)](https://www.npmjs.com/package/chalk) [![](https://img.shields.io/badge/unicorn-approved-ff69b4.svg)](https://www.youtube.com/watch?v=9auOCbH5Ns4) [![XO code style](https://img.shields.io/badge/code_style-XO-5ed9c7.svg)](https://github.com/xojs/xo) ![TypeScript-ready](https://img.shields.io/npm/types/chalk.svg) [![run on repl.it](https://repl.it/badge/github/chalk/chalk)](https://repl.it/github/chalk/chalk)

<img src="https://cdn.jsdelivr.net/gh/chalk/ansi-styles@8261697c95bf34b6c7767e2cbe9941a851d59385/screenshot.svg" width="900">

<br>

---

<div align="center">
	<p>
		<p>
			<sup>
				Sindre Sorhus' open source work is supported by the community on <a href="https://github.com/sponsors/sindresorhus">GitHub Sponsors</a> and <a href="https://stakes.social/0x44d871aebF0126Bf646753E2C976Aa7e68A66c15">Dev</a>
			</sup>
		</p>
		<sup>Special thanks to:</sup>
		<br>
		<br>
		<a href="https://standardresume.co/tech">
			<img src="https://sindresorhus.com/assets/thanks/standard-resume-logo.svg" width="160"/>
		</a>
		<br>
		<br>
		<a href="https://retool.com/?utm_campaign=sindresorhus">
			<img src="https://sindresorhus.com/assets/thanks/retool-logo.svg" width="230"/>
		</a>
		<br>
		<br>
		<a href="https://doppler.com/?utm_campaign=github_repo&utm_medium=referral&utm_content=chalk&utm_source=github">
			<div>
				<img src="https://dashboard.doppler.com/imgs/logo-long.svg" width="240" alt="Doppler">
			</div>
			<b>All your environment variables, in one place</b>
			<div>
				<span>Stop struggling with scattered API keys, hacking together home-brewed tools,</span>
				<br>
				<span>and avoiding access controls. Keep your team and servers in sync with Doppler.</span>
			</div>
		</a>
		<br>
		<a href="https://uibakery.io/?utm_source=chalk&utm_medium=sponsor&utm_campaign=github">
			<div>
				<img src="https://sindresorhus.com/assets/thanks/uibakery-logo.jpg" width="270" alt="UI Bakery">
			</div>
		</a>
	</p>
</div>

---

<br>

## Highlights

- Expressive API
- Highly performant
- Ability to nest styles
- [256/Truecolor color support](#256-and-truecolor-color-support)
- Auto-detects color support
- Doesn't extend `String.prototype`
- Clean and focused
- Actively maintained
- [Used by ~50,000 packages](https://www.npmjs.com/browse/depended/chalk) as of January 1, 2020

## Install

```console
$ npm install chalk
```

## Usage

```js
const chalk = require('chalk');

console.log(chalk.blue('Hello world!'));
```

Chalk comes with an easy to use composable API where you just chain and nest the styles you want.

```js
const chalk = require('chalk');
const log = console.log;

// Combine styled and normal strings
log(chalk.blue('Hello') + ' World' + chalk.red('!'));

// Compose multiple styles using the chainable API
log(chalk.blue.bgRed.bold('Hello world!'));

// Pass in multiple arguments
log(chalk.blue('Hello', 'World!', 'Foo', 'bar', 'biz', 'baz'));

// Nest styles
log(chalk.red('Hello', chalk.underline.bgBlue('world') + '!'));

// Nest styles of the same type even (color, underline, background)
log(chalk.green(
	'I am a green line ' +
	chalk.blue.underline.bold('with a blue substring') +
	' that becomes green again!'
));

// ES2015 template literal
log(`
CPU: ${chalk.red('90%')}
RAM: ${chalk.green('40%')}
DISK: ${chalk.yellow('70%')}
`);

// ES2015 tagged template literal
log(chalk`
CPU: {red ${cpu.totalPercent}%}
RAM: {green ${ram.used / ram.total * 100}%}
DISK: {rgb(255,131,0) ${disk.used / disk.total * 100}%}
`);

// Use RGB colors in terminal emulators that support it.
log(chalk.keyword('orange')('Yay for orange colored text!'));
log(chalk.rgb(123, 45, 67).underline('Underlined reddish color'));
log(chalk.hex('#DEADED').bold('Bold gray!'));
```

Easily define your own themes:

```js
const chalk = require('chalk');

const error = chalk.bold.red;
const warning = chalk.keyword('orange');

console.log(error('Error!'));
console.log(warning('Warning!'));
```

Take advantage of console.log [string substitution](https://nodejs.org/docs/latest/api/console.html#console_console_log_data_args):

```js
const name = 'Sindre';
console.log(chalk.green('Hello %s'), name);
//=> 'Hello Sindre'
```

## API

### chalk.`<style>[.<style>...](string, [string...])`

Example: `chalk.red.bold.underline('Hello', 'world');`

Chain [styles](#styles) and call the last one as a method with a string argument. Order doesn't matter, and later styles take precedent in case of a conflict. This simply means that `chalk.red.yellow.green` is equivalent to `chalk.green`.

Multiple arguments will be separated by space.

### chalk.level

Specifies the level of color support.

Color support is automatically detected, but you can override it by setting the `level` property. You should however only do this in your own code as it applies globally to all Chalk consumers.

If you need to change this in a reusable module, create a new instance:

```js
const ctx = new chalk.Instance({level: 0});
```

| Level | Description |
| :---: | :--- |
| `0` | All colors disabled |
| `1` | Basic color support (16 colors) |
| `2` | 256 color support |
| `3` | Truecolor support (16 million colors) |

### chalk.supportsColor

Detect whether the terminal [supports color](https://github.com/chalk/supports-color). Used internally and handled for you, but exposed for convenience.

Can be overridden by the user with the flags `--color` and `--no-color`. For situations where using `--color` is not possible, use the environment variable `FORCE_COLOR=1` (level 1), `FORCE_COLOR=2` (level 2), or `FORCE_COLOR=3` (level 3) to forcefully enable color, or `FORCE_COLOR=0` to forcefully disable. The use of `FORCE_COLOR` overrides all other color support checks.

Explicit 256/Truecolor mode can be enabled using the `--color=256` and `--color=16m` flags, respectively.

### chalk.stderr and chalk.stderr.supportsColor

`chalk.stderr` contains a separate instance configured with color support detected for `stderr` stream instead of `stdout`. Override rules from `chalk.supportsColor` apply to this too. `chalk.stderr.supportsColor` is exposed for convenience.

## Styles

### Modifiers

- `reset` - Resets the current color chain.
- `bold` - Make text bold.
- `dim` - Emitting only a small amount of light.
- `italic` - Make text italic. *(Not widely supported)*
- `underline` - Make text underline. *(Not widely supported)*
- `inverse`- Inverse background and foreground colors.
- `hidden` - Prints the text, but makes it invisible.
- `strikethrough` - Puts a horizontal line through the center of the text. *(Not widely supported)*
- `visible`- Prints the text only when Chalk has a color level > 0. Can be useful for things that are purely cosmetic.

### Colors

- `black`
- `red`
- `green`
- `yellow`
- `blue`
- `magenta`
- `cyan`
- `white`
- `blackBright` (alias: `gray`, `grey`)
- `redBright`
- `greenBright`
- `yellowBright`
- `blueBright`
- `magentaBright`
- `cyanBright`
- `whiteBright`

### Background colors

- `bgBlack`
- `bgRed`
- `bgGreen`
- `bgYellow`
- `bgBlue`
- `bgMagenta`
- `bgCyan`
- `bgWhite`
- `bgBlackBright` (alias: `bgGray`, `bgGrey`)
- `bgRedBright`
- `bgGreenBright`
- `bgYellowBright`
- `bgBlueBright`
- `bgMagentaBright`
- `bgCyanBright`
- `bgWhiteBright`

## Tagged template literal

Chalk can be used as a [tagged template literal](https://exploringjs.com/es6/ch_template-literals.html#_tagged-template-literals).

```js
const chalk = require('chalk');

const miles = 18;
const calculateFeet = miles => miles * 5280;

console.log(chalk`
	There are {bold 5280 feet} in a mile.
	In {bold ${miles} miles}, there are {green.bold ${calculateFeet(miles)} feet}.
`);
```

Blocks are delimited by an opening curly brace (`{`), a style, some content, and a closing curly brace (`}`).

Template styles are chained exactly like normal Chalk styles. The following three statements are equivalent:

```js
console.log(chalk.bold.rgb(10, 100, 200)('Hello!'));
console.log(chalk.bold.rgb(10, 100, 200)`Hello!`);
console.log(chalk`{bold.rgb(10,100,200) Hello!}`);
```

Note that function styles (`rgb()`, `hsl()`, `keyword()`, etc.) may not contain spaces between parameters.

All interpolated values (`` chalk`${foo}` ``) are converted to strings via the `.toString()` method. All curly braces (`{` and `}`) in interpolated value strings are escaped.

## 256 and Truecolor color support

Chalk supports 256 colors and [Truecolor](https://gist.github.com/XVilka/8346728) (16 million colors) on supported terminal apps.

Colors are downsampled from 16 million RGB values to an ANSI color format that is supported by the terminal emulator (or by specifying `{level: n}` as a Chalk option). For example, Chalk configured to run at level 1 (basic color support) will downsample an RGB value of #FF0000 (red) to 31 (ANSI escape for red).

Examples:

- `chalk.hex('#DEADED').underline('Hello, world!')`
- `chalk.keyword('orange')('Some orange text')`
- `chalk.rgb(15, 100, 204).inverse('Hello!')`

Background versions of these models are prefixed with `bg` and the first level of the module capitalized (e.g. `keyword` for foreground colors and `bgKeyword` for background colors).

- `chalk.bgHex('#DEADED').underline('Hello, world!')`
- `chalk.bgKeyword('orange')('Some orange text')`
- `chalk.bgRgb(15, 100, 204).inverse('Hello!')`

The following color models can be used:

- [`rgb`](https://en.wikipedia.org/wiki/RGB_color_model) - Example: `chalk.rgb(255, 136, 0).bold('Orange!')`
- [`hex`](https://en.wikipedia.org/wiki/Web_colors#Hex_triplet) - Example: `chalk.hex('#FF8800').bold('Orange!')`
- [`keyword`](https://www.w3.org/wiki/CSS/Properties/color/keywords) (CSS keywords) - Example: `chalk.keyword('orange').bold('Orange!')`
- [`hsl`](https://en.wikipedia.org/wiki/HSL_and_HSV) - Example: `chalk.hsl(32, 100, 50).bold('Orange!')`
- [`hsv`](https://en.wikipedia.org/wiki/HSL_and_HSV) - Example: `chalk.hsv(32, 100, 100).bold('Orange!')`
- [`hwb`](https://en.wikipedia.org/wiki/HWB_color_model) - Example: `chalk.hwb(32, 0, 50).bold('Orange!')`
- [`ansi`](https://en.wikipedia.org/wiki/ANSI_escape_code#3/4_bit) - Example: `chalk.ansi(31).bgAnsi(93)('red on yellowBright')`
- [`ansi256`](https://en.wikipedia.org/wiki/ANSI_escape_code#8-bit) - Example: `chalk.bgAnsi256(194)('Honeydew, more or less')`

## Windows

If you're on Windows, do yourself a favor and use [Windows Terminal](https://github.com/microsoft/terminal) instead of `cmd.exe`.

## Origin story

[colors.js](https://github.com/Marak/colors.js) used to be the most popular string styling module, but it has serious deficiencies like extending `String.prototype` which causes all kinds of [problems](https://github.com/yeoman/yo/issues/68) and the package is unmaintained. Although there are other packages, they either do too much or not enough. Chalk is a clean and focused alternative.

## chalk for enterprise

Available as part of the Tidelift Subscription.

The maintainers of chalk and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source dependencies you use to build your applications. Save time, reduce risk, and improve code health, while paying the maintainers of the exact dependencies you use. [Learn more.](https://tidelift.com/subscription/pkg/npm-chalk?utm_source=npm-chalk&utm_medium=referral&utm_campaign=enterprise&utm_term=repo)

## Related

- [chalk-cli](https://github.com/chalk/chalk-cli) - CLI for this module
- [ansi-styles](https://github.com/chalk/ansi-styles) - ANSI escape codes for styling strings in the terminal
- [supports-color](https://github.com/chalk/supports-color) - Detect whether a terminal supports color
- [strip-ansi](https://github.com/chalk/strip-ansi) - Strip ANSI escape codes
- [strip-ansi-stream](https://github.com/chalk/strip-ansi-stream) - Strip ANSI escape codes from a stream
- [has-ansi](https://github.com/chalk/has-ansi) - Check if a string has ANSI escape codes
- [ansi-regex](https://github.com/chalk/ansi-regex) - Regular expression for matching ANSI escape codes
- [wrap-ansi](https://github.com/chalk/wrap-ansi) - Wordwrap a string with ANSI escape codes
- [slice-ansi](https://github.com/chalk/slice-ansi) - Slice a string with ANSI escape codes
- [color-convert](https://github.com/qix-/color-convert) - Converts colors between different models
- [chalk-animation](https://github.com/bokub/chalk-animation) - Animate strings in the terminal
- [gradient-string](https://github.com/bokub/gradient-string) - Apply color gradients to strings
- [chalk-pipe](https://github.com/LitoMore/chalk-pipe) - Create chalk style schemes with simpler style strings
- [terminal-link](https://github.com/sindresorhus/terminal-link) - Create clickable links in the terminal

## Maintainers

- [Sindre Sorhus](https://github.com/sindresorhus)
- [Josh Junon](https://github.com/qix-)


---

File name: node_modules\chalk\source\index.js

Code:
'use strict';
const ansiStyles = require('ansi-styles');
const {stdout: stdoutColor, stderr: stderrColor} = require('supports-color');
const {
	stringReplaceAll,
	stringEncaseCRLFWithFirstIndex
} = require('./util');

const {isArray} = Array;

// `supportsColor.level` → `ansiStyles.color[name]` mapping
const levelMapping = [
	'ansi',
	'ansi',
	'ansi256',
	'ansi16m'
];

const styles = Object.create(null);

const applyOptions = (object, options = {}) => {
	if (options.level && !(Number.isInteger(options.level) && options.level >= 0 && options.level <= 3)) {
		throw new Error('The `level` option should be an integer from 0 to 3');
	}

	// Detect level if not set manually
	const colorLevel = stdoutColor ? stdoutColor.level : 0;
	object.level = options.level === undefined ? colorLevel : options.level;
};

class ChalkClass {
	constructor(options) {
		// eslint-disable-next-line no-constructor-return
		return chalkFactory(options);
	}
}

const chalkFactory = options => {
	const chalk = {};
	applyOptions(chalk, options);

	chalk.template = (...arguments_) => chalkTag(chalk.template, ...arguments_);

	Object.setPrototypeOf(chalk, Chalk.prototype);
	Object.setPrototypeOf(chalk.template, chalk);

	chalk.template.constructor = () => {
		throw new Error('`chalk.constructor()` is deprecated. Use `new chalk.Instance()` instead.');
	};

	chalk.template.Instance = ChalkClass;

	return chalk.template;
};

function Chalk(options) {
	return chalkFactory(options);
}

for (const [styleName, style] of Object.entries(ansiStyles)) {
	styles[styleName] = {
		get() {
			const builder = createBuilder(this, createStyler(style.open, style.close, this._styler), this._isEmpty);
			Object.defineProperty(this, styleName, {value: builder});
			return builder;
		}
	};
}

styles.visible = {
	get() {
		const builder = createBuilder(this, this._styler, true);
		Object.defineProperty(this, 'visible', {value: builder});
		return builder;
	}
};

const usedModels = ['rgb', 'hex', 'keyword', 'hsl', 'hsv', 'hwb', 'ansi', 'ansi256'];

for (const model of usedModels) {
	styles[model] = {
		get() {
			const {level} = this;
			return function (...arguments_) {
				const styler = createStyler(ansiStyles.color[levelMapping[level]][model](...arguments_), ansiStyles.color.close, this._styler);
				return createBuilder(this, styler, this._isEmpty);
			};
		}
	};
}

for (const model of usedModels) {
	const bgModel = 'bg' + model[0].toUpperCase() + model.slice(1);
	styles[bgModel] = {
		get() {
			const {level} = this;
			return function (...arguments_) {
				const styler = createStyler(ansiStyles.bgColor[levelMapping[level]][model](...arguments_), ansiStyles.bgColor.close, this._styler);
				return createBuilder(this, styler, this._isEmpty);
			};
		}
	};
}

const proto = Object.defineProperties(() => {}, {
	...styles,
	level: {
		enumerable: true,
		get() {
			return this._generator.level;
		},
		set(level) {
			this._generator.level = level;
		}
	}
});

const createStyler = (open, close, parent) => {
	let openAll;
	let closeAll;
	if (parent === undefined) {
		openAll = open;
		closeAll = close;
	} else {
		openAll = parent.openAll + open;
		closeAll = close + parent.closeAll;
	}

	return {
		open,
		close,
		openAll,
		closeAll,
		parent
	};
};

const createBuilder = (self, _styler, _isEmpty) => {
	const builder = (...arguments_) => {
		if (isArray(arguments_[0]) && isArray(arguments_[0].raw)) {
			// Called as a template literal, for example: chalk.red`2 + 3 = {bold ${2+3}}`
			return applyStyle(builder, chalkTag(builder, ...arguments_));
		}

		// Single argument is hot path, implicit coercion is faster than anything
		// eslint-disable-next-line no-implicit-coercion
		return applyStyle(builder, (arguments_.length === 1) ? ('' + arguments_[0]) : arguments_.join(' '));
	};

	// We alter the prototype because we must return a function, but there is
	// no way to create a function with a different prototype
	Object.setPrototypeOf(builder, proto);

	builder._generator = self;
	builder._styler = _styler;
	builder._isEmpty = _isEmpty;

	return builder;
};

const applyStyle = (self, string) => {
	if (self.level <= 0 || !string) {
		return self._isEmpty ? '' : string;
	}

	let styler = self._styler;

	if (styler === undefined) {
		return string;
	}

	const {openAll, closeAll} = styler;
	if (string.indexOf('\u001B') !== -1) {
		while (styler !== undefined) {
			// Replace any instances already present with a re-opening code
			// otherwise only the part of the string until said closing code
			// will be colored, and the rest will simply be 'plain'.
			string = stringReplaceAll(string, styler.close, styler.open);

			styler = styler.parent;
		}
	}

	// We can move both next actions out of loop, because remaining actions in loop won't have
	// any/visible effect on parts we add here. Close the styling before a linebreak and reopen
	// after next line to fix a bleed issue on macOS: https://github.com/chalk/chalk/pull/92
	const lfIndex = string.indexOf('\n');
	if (lfIndex !== -1) {
		string = stringEncaseCRLFWithFirstIndex(string, closeAll, openAll, lfIndex);
	}

	return openAll + string + closeAll;
};

let template;
const chalkTag = (chalk, ...strings) => {
	const [firstString] = strings;

	if (!isArray(firstString) || !isArray(firstString.raw)) {
		// If chalk() was called by itself or with a string,
		// return the string itself as a string.
		return strings.join(' ');
	}

	const arguments_ = strings.slice(1);
	const parts = [firstString.raw[0]];

	for (let i = 1; i < firstString.length; i++) {
		parts.push(
			String(arguments_[i - 1]).replace(/[{}\\]/g, '\\$&'),
			String(firstString.raw[i])
		);
	}

	if (template === undefined) {
		template = require('./templates');
	}

	return template(chalk, parts.join(''));
};

Object.defineProperties(Chalk.prototype, styles);

const chalk = Chalk(); // eslint-disable-line new-cap
chalk.supportsColor = stdoutColor;
chalk.stderr = Chalk({level: stderrColor ? stderrColor.level : 0}); // eslint-disable-line new-cap
chalk.stderr.supportsColor = stderrColor;

module.exports = chalk;


---

File name: node_modules\chalk\source\templates.js

Code:
'use strict';
const TEMPLATE_REGEX = /(?:\\(u(?:[a-f\d]{4}|\{[a-f\d]{1,6}\})|x[a-f\d]{2}|.))|(?:\{(~)?(\w+(?:\([^)]*\))?(?:\.\w+(?:\([^)]*\))?)*)(?:[ \t]|(?=\r?\n)))|(\})|((?:.|[\r\n\f])+?)/gi;
const STYLE_REGEX = /(?:^|\.)(\w+)(?:\(([^)]*)\))?/g;
const STRING_REGEX = /^(['"])((?:\\.|(?!\1)[^\\])*)\1$/;
const ESCAPE_REGEX = /\\(u(?:[a-f\d]{4}|{[a-f\d]{1,6}})|x[a-f\d]{2}|.)|([^\\])/gi;

const ESCAPES = new Map([
	['n', '\n'],
	['r', '\r'],
	['t', '\t'],
	['b', '\b'],
	['f', '\f'],
	['v', '\v'],
	['0', '\0'],
	['\\', '\\'],
	['e', '\u001B'],
	['a', '\u0007']
]);

function unescape(c) {
	const u = c[0] === 'u';
	const bracket = c[1] === '{';

	if ((u && !bracket && c.length === 5) || (c[0] === 'x' && c.length === 3)) {
		return String.fromCharCode(parseInt(c.slice(1), 16));
	}

	if (u && bracket) {
		return String.fromCodePoint(parseInt(c.slice(2, -1), 16));
	}

	return ESCAPES.get(c) || c;
}

function parseArguments(name, arguments_) {
	const results = [];
	const chunks = arguments_.trim().split(/\s*,\s*/g);
	let matches;

	for (const chunk of chunks) {
		const number = Number(chunk);
		if (!Number.isNaN(number)) {
			results.push(number);
		} else if ((matches = chunk.match(STRING_REGEX))) {
			results.push(matches[2].replace(ESCAPE_REGEX, (m, escape, character) => escape ? unescape(escape) : character));
		} else {
			throw new Error(`Invalid Chalk template style argument: ${chunk} (in style '${name}')`);
		}
	}

	return results;
}

function parseStyle(style) {
	STYLE_REGEX.lastIndex = 0;

	const results = [];
	let matches;

	while ((matches = STYLE_REGEX.exec(style)) !== null) {
		const name = matches[1];

		if (matches[2]) {
			const args = parseArguments(name, matches[2]);
			results.push([name].concat(args));
		} else {
			results.push([name]);
		}
	}

	return results;
}

function buildStyle(chalk, styles) {
	const enabled = {};

	for (const layer of styles) {
		for (const style of layer.styles) {
			enabled[style[0]] = layer.inverse ? null : style.slice(1);
		}
	}

	let current = chalk;
	for (const [styleName, styles] of Object.entries(enabled)) {
		if (!Array.isArray(styles)) {
			continue;
		}

		if (!(styleName in current)) {
			throw new Error(`Unknown Chalk style: ${styleName}`);
		}

		current = styles.length > 0 ? current[styleName](...styles) : current[styleName];
	}

	return current;
}

module.exports = (chalk, temporary) => {
	const styles = [];
	const chunks = [];
	let chunk = [];

	// eslint-disable-next-line max-params
	temporary.replace(TEMPLATE_REGEX, (m, escapeCharacter, inverse, style, close, character) => {
		if (escapeCharacter) {
			chunk.push(unescape(escapeCharacter));
		} else if (style) {
			const string = chunk.join('');
			chunk = [];
			chunks.push(styles.length === 0 ? string : buildStyle(chalk, styles)(string));
			styles.push({inverse, styles: parseStyle(style)});
		} else if (close) {
			if (styles.length === 0) {
				throw new Error('Found extraneous } in Chalk template literal');
			}

			chunks.push(buildStyle(chalk, styles)(chunk.join('')));
			chunk = [];
			styles.pop();
		} else {
			chunk.push(character);
		}
	});

	chunks.push(chunk.join(''));

	if (styles.length > 0) {
		const errMessage = `Chalk template literal is missing ${styles.length} closing bracket${styles.length === 1 ? '' : 's'} (\`}\`)`;
		throw new Error(errMessage);
	}

	return chunks.join('');
};


---

File name: node_modules\chalk\source\util.js

Code:
'use strict';

const stringReplaceAll = (string, substring, replacer) => {
	let index = string.indexOf(substring);
	if (index === -1) {
		return string;
	}

	const substringLength = substring.length;
	let endIndex = 0;
	let returnValue = '';
	do {
		returnValue += string.substr(endIndex, index - endIndex) + substring + replacer;
		endIndex = index + substringLength;
		index = string.indexOf(substring, endIndex);
	} while (index !== -1);

	returnValue += string.substr(endIndex);
	return returnValue;
};

const stringEncaseCRLFWithFirstIndex = (string, prefix, postfix, index) => {
	let endIndex = 0;
	let returnValue = '';
	do {
		const gotCR = string[index - 1] === '\r';
		returnValue += string.substr(endIndex, (gotCR ? index - 1 : index) - endIndex) + prefix + (gotCR ? '\r\n' : '\n') + postfix;
		endIndex = index + 1;
		index = string.indexOf('\n', endIndex);
	} while (index !== -1);

	returnValue += string.substr(endIndex);
	return returnValue;
};

module.exports = {
	stringReplaceAll,
	stringEncaseCRLFWithFirstIndex
};


---

File name: node_modules\char-regex\index.d.ts

Code:
/**
 * A regex to match any full character, considering weird character ranges.
 * @example
 * ```
 * const charRegex = require("char-regex");
 *
 * "❤️👊🏽".match(charRegex());
 * //=> ["❤️", "👊🏽"]
 * ```
*/
declare function charRegex(): RegExp

export = charRegex


---

File name: node_modules\char-regex\index.js

Code:
"use strict"

// Based on: https://github.com/lodash/lodash/blob/6018350ac10d5ce6a5b7db625140b82aeab804df/.internal/unicodeSize.js

module.exports = () => {
	// Used to compose unicode character classes.
	const astralRange = "\\ud800-\\udfff"
	const comboMarksRange = "\\u0300-\\u036f"
	const comboHalfMarksRange = "\\ufe20-\\ufe2f"
	const comboSymbolsRange = "\\u20d0-\\u20ff"
	const comboMarksExtendedRange = "\\u1ab0-\\u1aff"
	const comboMarksSupplementRange = "\\u1dc0-\\u1dff"
	const comboRange = comboMarksRange + comboHalfMarksRange + comboSymbolsRange + comboMarksExtendedRange + comboMarksSupplementRange
	const varRange = "\\ufe0e\\ufe0f"
	const familyRange = "\\uD83D\\uDC69\\uD83C\\uDFFB\\u200D\\uD83C\\uDF93"

	// Used to compose unicode capture groups.
	const astral = `[${astralRange}]`
	const combo = `[${comboRange}]`
	const fitz = "\\ud83c[\\udffb-\\udfff]"
	const modifier = `(?:${combo}|${fitz})`
	const nonAstral = `[^${astralRange}]`
	const regional = "(?:\\uD83C[\\uDDE6-\\uDDFF]){2}"
	const surrogatePair = "[\\ud800-\\udbff][\\udc00-\\udfff]"
	const zwj = "\\u200d"
	const blackFlag = "(?:\\ud83c\\udff4\\udb40\\udc67\\udb40\\udc62\\udb40(?:\\udc65|\\udc73|\\udc77)\\udb40(?:\\udc6e|\\udc63|\\udc6c)\\udb40(?:\\udc67|\\udc74|\\udc73)\\udb40\\udc7f)"
	const family = `[${familyRange}]`

	// Used to compose unicode regexes.
	const optModifier = `${modifier}?`
	const optVar = `[${varRange}]?`
	const optJoin = `(?:${zwj}(?:${[nonAstral, regional, surrogatePair].join("|")})${optVar + optModifier})*`
	const seq = optVar + optModifier + optJoin
	const nonAstralCombo = `${nonAstral}${combo}?`
	const symbol = `(?:${[nonAstralCombo, combo, regional, surrogatePair, astral, family].join("|")})`

	// Used to match [String symbols](https://mathiasbynens.be/notes/javascript-unicode).
	return new RegExp(`${blackFlag}|${fitz}(?=${fitz})|${symbol + seq}`, "g")
}


---

File name: node_modules\char-regex\package.json

Code:
{
	"name": "char-regex",
	"version": "1.0.2",
	"description": "A regex to match any full character, considering weird character ranges.",
	"repository": "https://github.com/Richienb/char-regex.git",
	"author": "Richie Bendall <richiebendall@gmail.com>",
	"license": "MIT",
	"main": "index.js",
	"files": [
		"index.js",
		"index.d.ts"
	],
	"engines": {
		"node": ">=10"
	},
	"scripts": {
		"lint": "xo",
		"test": "yarn lint && ava"
	},
	"keywords": [
		"character",
		"regex",
		"match",
		"split",
		"length"
	],
	"dependencies": {},
	"devDependencies": {
		"@babel/core": "^7.8.4",
		"@babel/plugin-proposal-unicode-property-regex": "^7.8.3",
		"array-uniq": "^2.1.0",
		"ava": "^3.0.0",
		"emoji.json": "^12.1.1",
		"eslint-config-richienb": "^0.3.0",
		"unicode-chars": "^1.0.1",
		"xo": "^0.25.3"
	},
	"resolutions": {
		"eslint": "^6.8.0"
	},
	"xo": {
		"extends": "richienb/node"
	}
}


---

File name: node_modules\char-regex\README.md

Code:
# Char Regex [![Travis CI Build Status](https://img.shields.io/travis/com/Richienb/char-regex/master.svg?style=for-the-badge)](https://travis-ci.com/Richienb/char-regex)

A regex to match any full character, considering weird character ranges. Tested on every single emoji and unicode character. Based on the Lodash implementation.

[![NPM Badge](https://nodei.co/npm/char-regex.png)](https://npmjs.com/package/char-regex)

## Install

```sh
npm install char-regex
```

## Usage

```js
const charRegex = require("char-regex");

"❤️👊🏽".match(/./);
//=> ["", "", "", "", "", "", ""]

"❤️👊🏽".match(charRegex());
//=> ["❤️", "👊🏽"]
```

## API

### charRegex()


---

File name: node_modules\ci-info\CHANGELOG.md

Code:
# Changelog

## v3.9.0

- better support for Azure Pipelines ([#116](https://github.com/watson/ci-info/pull/116)), [5ea8d85](https://github.com/watson/ci-info/commit/5ea8d85)
- detect PullRequest in Azure Pipelines [5ea8d85](https://github.com/watson/ci-info/commit/5ea8d85)

## v3.8.0

- support Harness CI [76a2867](https://github.com/watson/ci-info/commit/76a2867)

## v3.7.1

- ignore ci detection when CI is set to `'false'` [24cc450](https://github.com/watson/ci-info/commit/24cc450)

## v3.7.0

- support Sourcehut CI [85b96ea](https://github.com/watson/ci-info/commit/85b96ea)
- support ReleaseHub CI [409d886](https://github.com/watson/ci-info/commit/409d886)

## v3.6.2

- fix VERCEL environment detection ([#98](https://github.com/watson/ci-info/pull/98))

## v3.6.1

- fix error in typings [357b454](https://github.com/watson/ci-info/commit/357b454)

## v3.6.0

This release attempts to bring parity with [@npmcli/ci-detect](https://github.com/npm/ci-detect). See [#95](https://github.com/watson/ci-info/pull/95) for more details.

- support gerrit ([#95](https://github.com/watson/ci-info/pull/95))
- support google cloud build ([#95](https://github.com/watson/ci-info/pull/95))
- support heroku ([#95](https://github.com/watson/ci-info/pull/95))
- support anonymous CI's that exposes BUILD_ID and CI_NAME env vars ([#95](https://github.com/watson/ci-info/pull/95))
- support more vercel environments ([#95](https://github.com/watson/ci-info/pull/95))

## v3.5.0

- support Woodpecker CI ([#90](https://github.com/watson/ci-info/pull/90))

## v3.4.0

- partial support Appflow CI (only CI detection) ([#84](https://github.com/watson/ci-info/pull/84))
- support Codemagic CI ([#85](https://github.com/watson/ci-info/pull/85))
- support Xcode Server CI ([#86](https://github.com/watson/ci-info/pull/86))
- support Xcode Cloud CI ([#86](https://github.com/watson/ci-info/pull/86))

## v3.3.2

- fix: export correct typings for `EAS`

## v3.3.1

- fix: export `EAS_BUILD` constant in typings
- Add support for nodejs v18

## v3.3.0

- support Expo Application Services ([#70](https://github.com/watson/ci-info/pull/70))

## v3.2.0

- support LayerCI ([#68](https://github.com/watson/ci-info/pull/68))
- support Appcircle ([#69](https://github.com/watson/ci-info/pull/69))
- support Codefresh CI ([#65](https://github.com/watson/ci-info/pull/65))
- add support for nodejs v16

## v3.1.1

Bug Fixes:

- remove duplicate declaration in typings

## v3.1.0

Features:

- add typings

## v3.0.0

Features:

- Add support nodejs versions: 14, 15
- support Nevercode ([#30](https://github.com/watson/ci-info/pull/30))
- support Render CI ([#36](https://github.com/watson/ci-info/pull/36))
- support Now CI ([#37](https://github.com/watson/ci-info/pull/37))
- support GitLab PR ([#59](https://github.com/watson/ci-info/pull/59))
- support Screwdriver CD ([#60](https://github.com/watson/ci-info/pull/60))
- support Visual Studio App Center ([#61](https://github.com/watson/ci-info/pull/61))

Bug Fixes:

- update Netlify env constant ([#47](https://github.com/watson/ci-info/pull/47))

Breaking changes:

- Drop support for Node.js end-of-life versions: 6, 13
- replace `Zeit Now` with `Vercel` ([#55](https://github.com/watson/ci-info/pull/55))

## v2.0.0

Breaking changes:

- Drop support for Node.js end-of-life versions: 0.10, 0.12, 4, 5, 7, and 9
- Team Foundation Server will now be detected as Azure Pipelines. The constant `ci.TFS` no longer exists - use
  `ci.AZURE_PIPELINES` instead
- Remove deprecated `ci.TDDIUM` constant - use `ci.SOLANDO` instead

New features:

- feat: support Azure Pipelines ([#23](https://github.com/watson/ci-info/pull/23))
- feat: support Netlify CI ([#26](https://github.com/watson/ci-info/pull/26))
- feat: support Bitbucket pipelines PR detection ([#27](https://github.com/watson/ci-info/pull/27))

## v1.6.0

- feat: add Sail CI support
- feat: add Buddy support
- feat: add Bitrise support
- feat: detect Jenkins PRs
- feat: detect Drone PRs

## v1.5.1

- fix: use full path to vendors.json

## v1.5.0

- feat: add dsari detection ([#15](https://github.com/watson/ci-info/pull/15))
- feat: add ci.isPR ([#16](https://github.com/watson/ci-info/pull/16))

## v1.4.0

- feat: add Cirrus CI detection ([#13](https://github.com/watson/ci-info/pull/13))
- feat: add Shippable CI detection ([#14](https://github.com/watson/ci-info/pull/14))

## v1.3.1

- chore: reduce npm package size by not including `.github` folder content
  ([#11](https://github.com/watson/ci-info/pull/11))

## v1.3.0

- feat: add support for Strider CD
- chore: deprecate vendor constant `TDDIUM` in favor of `SOLANO`
- docs: add missing vendor constant to docs

## v1.2.0

- feat: detect solano-ci ([#9](https://github.com/watson/ci-info/pull/9))

## v1.1.3

- fix: fix spelling of Hunson in `ci.name`

## v1.1.2

- fix: no more false positive matches for Jenkins

## v1.1.1

- docs: sort lists of CI servers in README.md
- docs: add missing AWS CodeBuild to the docs

## v1.1.0

- feat: add AWS CodeBuild to CI detection ([#2](https://github.com/watson/ci-info/pull/2))

## v1.0.1

- chore: reduce npm package size by using an `.npmignore` file ([#3](https://github.com/watson/ci-info/pull/3))

## v1.0.0

- Initial release


---

File name: node_modules\ci-info\index.d.ts

Code:
// This file is generated at pre-commit by running `node create-typings.js`.

/**
 * Returns a boolean. Will be `true` if the code is running on a CI server,
 * otherwise `false`.
 *
 * Some CI servers not listed here might still trigger the `ci.isCI`
 * boolean to be set to `true` if they use certain vendor neutral environment
 * variables. In those cases `ci.name` will be `null` and no vendor specific
 * boolean will be set to `true`.
 */
export const isCI: boolean;
/**
 * Returns a boolean if PR detection is supported for the current CI server.
 * Will be `true` if a PR is being tested, otherwise `false`. If PR detection is
 * not supported for the current CI server, the value will be `null`.
 */
export const isPR: boolean | null;
/**
 * Returns a string containing name of the CI server the code is running on. If
 * CI server is not detected, it returns `null`.
 *
 * Don't depend on the value of this string not to change for a specific vendor.
 * If you find your self writing `ci.name === 'Travis CI'`, you most likely want
 * to use `ci.TRAVIS` instead.
 */
export const name: string | null;

export const APPCIRCLE: boolean;
export const APPVEYOR: boolean;
export const CODEBUILD: boolean;
export const AZURE_PIPELINES: boolean;
export const BAMBOO: boolean;
export const BITBUCKET: boolean;
export const BITRISE: boolean;
export const BUDDY: boolean;
export const BUILDKITE: boolean;
export const CIRCLE: boolean;
export const CIRRUS: boolean;
export const CODEFRESH: boolean;
export const CODEMAGIC: boolean;
export const CODESHIP: boolean;
export const DRONE: boolean;
export const DSARI: boolean;
export const EAS: boolean;
export const GERRIT: boolean;
export const GITHUB_ACTIONS: boolean;
export const GITLAB: boolean;
export const GOCD: boolean;
export const GOOGLE_CLOUD_BUILD: boolean;
export const HARNESS: boolean;
export const HEROKU: boolean;
export const HUDSON: boolean;
export const JENKINS: boolean;
export const LAYERCI: boolean;
export const MAGNUM: boolean;
export const NETLIFY: boolean;
export const NEVERCODE: boolean;
export const RELEASEHUB: boolean;
export const RENDER: boolean;
export const SAIL: boolean;
export const SCREWDRIVER: boolean;
export const SEMAPHORE: boolean;
export const SHIPPABLE: boolean;
export const SOLANO: boolean;
export const SOURCEHUT: boolean;
export const STRIDER: boolean;
export const TASKCLUSTER: boolean;
export const TEAMCITY: boolean;
export const TRAVIS: boolean;
export const VERCEL: boolean;
export const APPCENTER: boolean;
export const WOODPECKER: boolean;
export const XCODE_CLOUD: boolean;
export const XCODE_SERVER: boolean;


---

File name: node_modules\ci-info\index.js

Code:
'use strict'

const vendors = require('./vendors.json')

const env = process.env

// Used for testing only
Object.defineProperty(exports, '_vendors', {
  value: vendors.map(function (v) {
    return v.constant
  })
})

exports.name = null
exports.isPR = null

vendors.forEach(function (vendor) {
  const envs = Array.isArray(vendor.env) ? vendor.env : [vendor.env]
  const isCI = envs.every(function (obj) {
    return checkEnv(obj)
  })

  exports[vendor.constant] = isCI

  if (!isCI) {
    return
  }

  exports.name = vendor.name

  switch (typeof vendor.pr) {
    case 'string':
      // "pr": "CIRRUS_PR"
      exports.isPR = !!env[vendor.pr]
      break
    case 'object':
      if ('env' in vendor.pr) {
        // "pr": { "env": "BUILDKITE_PULL_REQUEST", "ne": "false" }
        exports.isPR = vendor.pr.env in env && env[vendor.pr.env] !== vendor.pr.ne
      } else if ('any' in vendor.pr) {
        // "pr": { "any": ["ghprbPullId", "CHANGE_ID"] }
        exports.isPR = vendor.pr.any.some(function (key) {
          return !!env[key]
        })
      } else {
        // "pr": { "DRONE_BUILD_EVENT": "pull_request" }
        exports.isPR = checkEnv(vendor.pr)
      }
      break
    default:
      // PR detection not supported for this vendor
      exports.isPR = null
  }
})

exports.isCI = !!(
  env.CI !== 'false' && // Bypass all checks if CI env is explicitly set to 'false'
  (env.BUILD_ID || // Jenkins, Cloudbees
  env.BUILD_NUMBER || // Jenkins, TeamCity
  env.CI || // Travis CI, CircleCI, Cirrus CI, Gitlab CI, Appveyor, CodeShip, dsari
  env.CI_APP_ID || // Appflow
  env.CI_BUILD_ID || // Appflow
  env.CI_BUILD_NUMBER || // Appflow
  env.CI_NAME || // Codeship and others
  env.CONTINUOUS_INTEGRATION || // Travis CI, Cirrus CI
  env.RUN_ID || // TaskCluster, dsari
  exports.name ||
  false)
)

function checkEnv (obj) {
  // "env": "CIRRUS"
  if (typeof obj === 'string') return !!env[obj]

  // "env": { "env": "NODE", "includes": "/app/.heroku/node/bin/node" }
  if ('env' in obj) {
    // Currently there are no other types, uncomment when there are
    // if ('includes' in obj) {
    return env[obj.env] && env[obj.env].includes(obj.includes)
    // }
  }
  if ('any' in obj) {
    return obj.any.some(function (k) {
      return !!env[k]
    })
  }
  return Object.keys(obj).every(function (k) {
    return env[k] === obj[k]
  })
}


---

File name: node_modules\ci-info\package.json

Code:
{
  "name": "ci-info",
  "version": "3.9.0",
  "description": "Get details about the current Continuous Integration environment",
  "main": "index.js",
  "typings": "index.d.ts",
  "author": "Thomas Watson Steen <w@tson.dk> (https://twitter.com/wa7son)",
  "license": "MIT",
  "repository": "https://github.com/watson/ci-info.git",
  "bugs": "https://github.com/watson/ci-info/issues",
  "homepage": "https://github.com/watson/ci-info",
  "keywords": [
    "ci",
    "continuous",
    "integration",
    "test",
    "detect"
  ],
  "files": [
    "vendors.json",
    "index.js",
    "index.d.ts",
    "CHANGELOG.md"
  ],
  "funding": [
    {
      "type": "github",
      "url": "https://github.com/sponsors/sibiraj-s"
    }
  ],
  "scripts": {
    "lint:fix": "standard --fix",
    "test": "standard && node test.js",
    "prepare": "husky install"
  },
  "devDependencies": {
    "clear-module": "^4.1.2",
    "husky": "^8.0.3",
    "standard": "^17.1.0",
    "tape": "^5.7.0"
  },
  "engines": {
    "node": ">=8"
  }
}


---

File name: node_modules\ci-info\README.md

Code:
# ci-info

Get details about the current Continuous Integration environment.

Please [open an
issue](https://github.com/watson/ci-info/issues/new?template=ci-server-not-detected.md)
if your CI server isn't properly detected :)

[![npm](https://img.shields.io/npm/v/ci-info.svg)](https://www.npmjs.com/package/ci-info)
[![Tests](https://github.com/watson/ci-info/workflows/Tests/badge.svg)](https://github.com/watson/ci-info/actions)
[![js-standard-style](https://img.shields.io/badge/code%20style-standard-brightgreen.svg?style=flat)](https://github.com/feross/standard)

## Installation

```bash
npm install ci-info --save
```

## Usage

```js
var ci = require('ci-info')

if (ci.isCI) {
  console.log('The name of the CI server is:', ci.name)
} else {
  console.log('This program is not running on a CI server')
}
```

## Supported CI tools

Officially supported CI servers:

| Name                                                                            | Constant                | isPR |
| ------------------------------------------------------------------------------- | ----------------------- | ---- |
| [AWS CodeBuild](https://aws.amazon.com/codebuild/)                              | `ci.CODEBUILD`          | 🚫   |
| [AppVeyor](http://www.appveyor.com)                                             | `ci.APPVEYOR`           | ✅   |
| [Azure Pipelines](https://azure.microsoft.com/en-us/services/devops/pipelines/) | `ci.AZURE_PIPELINES`    | ✅   |
| [Appcircle](https://appcircle.io/)                                              | `ci.APPCIRCLE`          | 🚫   |
| [Bamboo](https://www.atlassian.com/software/bamboo) by Atlassian                | `ci.BAMBOO`             | 🚫   |
| [Bitbucket Pipelines](https://bitbucket.org/product/features/pipelines)         | `ci.BITBUCKET`          | ✅   |
| [Bitrise](https://www.bitrise.io/)                                              | `ci.BITRISE`            | ✅   |
| [Buddy](https://buddy.works/)                                                   | `ci.BUDDY`              | ✅   |
| [Buildkite](https://buildkite.com)                                              | `ci.BUILDKITE`          | ✅   |
| [CircleCI](http://circleci.com)                                                 | `ci.CIRCLE`             | ✅   |
| [Cirrus CI](https://cirrus-ci.org)                                              | `ci.CIRRUS`             | ✅   |
| [Codefresh](https://codefresh.io/)                                              | `ci.CODEFRESH`          | ✅   |
| [Codeship](https://codeship.com)                                                | `ci.CODESHIP`           | 🚫   |
| [Drone](https://drone.io)                                                       | `ci.DRONE`              | ✅   |
| [dsari](https://github.com/rfinnie/dsari)                                       | `ci.DSARI`              | 🚫   |
| [Expo Application Services](https://expo.dev/eas)                               | `ci.EAS`                | 🚫   |
| [Gerrit CI](https://www.gerritcodereview.com)                                   | `ci.GERRIT`             | 🚫   |
| [GitHub Actions](https://github.com/features/actions/)                          | `ci.GITHUB_ACTIONS`     | ✅   |
| [GitLab CI](https://about.gitlab.com/gitlab-ci/)                                | `ci.GITLAB`             | ✅   |
| [GoCD](https://www.go.cd/)                                                      | `ci.GOCD`               | 🚫   |
| [Google Cloud Build](https://cloud.google.com/build)                            | `ci.GOOGLE_CLOUD_BUILD` | 🚫   |
| [Harness CI](https://www.harness.io/products/continuous-integration)            | `ci.HARNESS`            | 🚫   |
| [Heroku](https://www.heroku.com)                                                | `ci.HEROKU`             | 🚫   |
| [Hudson](http://hudson-ci.org)                                                  | `ci.HUDSON`             | 🚫   |
| [Jenkins CI](https://jenkins-ci.org)                                            | `ci.JENKINS`            | ✅   |
| [LayerCI](https://layerci.com/)                                                 | `ci.LAYERCI`            | ✅   |
| [Magnum CI](https://magnum-ci.com)                                              | `ci.MAGNUM`             | 🚫   |
| [Netlify CI](https://www.netlify.com/)                                          | `ci.NETLIFY`            | ✅   |
| [Nevercode](http://nevercode.io/)                                               | `ci.NEVERCODE`          | ✅   |
| [ReleaseHub](https://releasehub.com/)                                           | `ci.RELEASEHUB`         | 🚫   |
| [Render](https://render.com/)                                                   | `ci.RENDER`             | ✅   |
| [Sail CI](https://sail.ci/)                                                     | `ci.SAIL`               | ✅   |
| [Screwdriver](https://screwdriver.cd/)                                          | `ci.SCREWDRIVER`        | ✅   |
| [Semaphore](https://semaphoreci.com)                                            | `ci.SEMAPHORE`          | ✅   |
| [Shippable](https://www.shippable.com/)                                         | `ci.SHIPPABLE`          | ✅   |
| [Solano CI](https://www.solanolabs.com/)                                        | `ci.SOLANO`             | ✅   |
| [Sourcehut](https://sourcehut.org/)                                             | `ci.SOURCEHUT`          | 🚫   |
| [Strider CD](https://strider-cd.github.io/)                                     | `ci.STRIDER`            | 🚫   |
| [TaskCluster](http://docs.taskcluster.net)                                      | `ci.TASKCLUSTER`        | 🚫   |
| [TeamCity](https://www.jetbrains.com/teamcity/) by JetBrains                    | `ci.TEAMCITY`           | 🚫   |
| [Travis CI](http://travis-ci.org)                                               | `ci.TRAVIS`             | ✅   |
| [Vercel](https://vercel.com/)                                                   | `ci.VERCEL`             | ✅   |
| [Visual Studio App Center](https://appcenter.ms/)                               | `ci.APPCENTER`          | 🚫   |
| [Woodpecker](https://woodpecker-ci.org/)                                        | `ci.WOODPECKER`         | ✅   |

## API

### `ci.name`

Returns a string containing name of the CI server the code is running on.
If CI server is not detected, it returns `null`.

Don't depend on the value of this string not to change for a specific
vendor. If you find your self writing `ci.name === 'Travis CI'`, you
most likely want to use `ci.TRAVIS` instead.

### `ci.isCI`

Returns a boolean. Will be `true` if the code is running on a CI server,
otherwise `false`.

Some CI servers not listed here might still trigger the `ci.isCI`
boolean to be set to `true` if they use certain vendor neutral
environment variables. In those cases `ci.name` will be `null` and no
vendor specific boolean will be set to `true`.

### `ci.isPR`

Returns a boolean if PR detection is supported for the current CI server. Will
be `true` if a PR is being tested, otherwise `false`. If PR detection is
not supported for the current CI server, the value will be `null`.

### `ci.<VENDOR-CONSTANT>`

A vendor specific boolean constant is exposed for each support CI
vendor. A constant will be `true` if the code is determined to run on
the given CI server, otherwise `false`.

Examples of vendor constants are `ci.TRAVIS` or `ci.APPVEYOR`. For a
complete list, see the support table above.

Deprecated vendor constants that will be removed in the next major
release:

- `ci.TDDIUM` (Solano CI) This have been renamed `ci.SOLANO`

## Ports

ci-info has been ported to the following languages

| Language | Repository |
|----------|------------|
| Go       | https://github.com/hofstadter-io/cinful |
| Rust     | https://github.com/sagiegurari/ci_info |
| Kotlin   | https://github.com/cloudflightio/ci-info |

## License

[MIT](LICENSE)


---

File name: node_modules\ci-info\vendors.json

Code:
[
  {
    "name": "Appcircle",
    "constant": "APPCIRCLE",
    "env": "AC_APPCIRCLE"
  },
  {
    "name": "AppVeyor",
    "constant": "APPVEYOR",
    "env": "APPVEYOR",
    "pr": "APPVEYOR_PULL_REQUEST_NUMBER"
  },
  {
    "name": "AWS CodeBuild",
    "constant": "CODEBUILD",
    "env": "CODEBUILD_BUILD_ARN"
  },
  {
    "name": "Azure Pipelines",
    "constant": "AZURE_PIPELINES",
    "env": "TF_BUILD",
    "pr": {
      "BUILD_REASON": "PullRequest"
    }
  },
  {
    "name": "Bamboo",
    "constant": "BAMBOO",
    "env": "bamboo_planKey"
  },
  {
    "name": "Bitbucket Pipelines",
    "constant": "BITBUCKET",
    "env": "BITBUCKET_COMMIT",
    "pr": "BITBUCKET_PR_ID"
  },
  {
    "name": "Bitrise",
    "constant": "BITRISE",
    "env": "BITRISE_IO",
    "pr": "BITRISE_PULL_REQUEST"
  },
  {
    "name": "Buddy",
    "constant": "BUDDY",
    "env": "BUDDY_WORKSPACE_ID",
    "pr": "BUDDY_EXECUTION_PULL_REQUEST_ID"
  },
  {
    "name": "Buildkite",
    "constant": "BUILDKITE",
    "env": "BUILDKITE",
    "pr": {
      "env": "BUILDKITE_PULL_REQUEST",
      "ne": "false"
    }
  },
  {
    "name": "CircleCI",
    "constant": "CIRCLE",
    "env": "CIRCLECI",
    "pr": "CIRCLE_PULL_REQUEST"
  },
  {
    "name": "Cirrus CI",
    "constant": "CIRRUS",
    "env": "CIRRUS_CI",
    "pr": "CIRRUS_PR"
  },
  {
    "name": "Codefresh",
    "constant": "CODEFRESH",
    "env": "CF_BUILD_ID",
    "pr": {
      "any": [
        "CF_PULL_REQUEST_NUMBER",
        "CF_PULL_REQUEST_ID"
      ]
    }
  },
  {
    "name": "Codemagic",
    "constant": "CODEMAGIC",
    "env": "CM_BUILD_ID",
    "pr": "CM_PULL_REQUEST"
  },
  {
    "name": "Codeship",
    "constant": "CODESHIP",
    "env": {
      "CI_NAME": "codeship"
    }
  },
  {
    "name": "Drone",
    "constant": "DRONE",
    "env": "DRONE",
    "pr": {
      "DRONE_BUILD_EVENT": "pull_request"
    }
  },
  {
    "name": "dsari",
    "constant": "DSARI",
    "env": "DSARI"
  },
  {
    "name": "Expo Application Services",
    "constant": "EAS",
    "env": "EAS_BUILD"
  },
  {
    "name": "Gerrit",
    "constant": "GERRIT",
    "env": "GERRIT_PROJECT"
  },
  {
    "name": "GitHub Actions",
    "constant": "GITHUB_ACTIONS",
    "env": "GITHUB_ACTIONS",
    "pr": {
      "GITHUB_EVENT_NAME": "pull_request"
    }
  },
  {
    "name": "GitLab CI",
    "constant": "GITLAB",
    "env": "GITLAB_CI",
    "pr": "CI_MERGE_REQUEST_ID"
  },
  {
    "name": "GoCD",
    "constant": "GOCD",
    "env": "GO_PIPELINE_LABEL"
  },
  {
    "name": "Google Cloud Build",
    "constant": "GOOGLE_CLOUD_BUILD",
    "env": "BUILDER_OUTPUT"
  },
  {
    "name": "Harness CI",
    "constant": "HARNESS",
    "env": "HARNESS_BUILD_ID"
  },
  {
    "name": "Heroku",
    "constant": "HEROKU",
    "env": {
      "env": "NODE",
      "includes": "/app/.heroku/node/bin/node"
    }
  },
  {
    "name": "Hudson",
    "constant": "HUDSON",
    "env": "HUDSON_URL"
  },
  {
    "name": "Jenkins",
    "constant": "JENKINS",
    "env": [
      "JENKINS_URL",
      "BUILD_ID"
    ],
    "pr": {
      "any": [
        "ghprbPullId",
        "CHANGE_ID"
      ]
    }
  },
  {
    "name": "LayerCI",
    "constant": "LAYERCI",
    "env": "LAYERCI",
    "pr": "LAYERCI_PULL_REQUEST"
  },
  {
    "name": "Magnum CI",
    "constant": "MAGNUM",
    "env": "MAGNUM"
  },
  {
    "name": "Netlify CI",
    "constant": "NETLIFY",
    "env": "NETLIFY",
    "pr": {
      "env": "PULL_REQUEST",
      "ne": "false"
    }
  },
  {
    "name": "Nevercode",
    "constant": "NEVERCODE",
    "env": "NEVERCODE",
    "pr": {
      "env": "NEVERCODE_PULL_REQUEST",
      "ne": "false"
    }
  },
  {
    "name": "ReleaseHub",
    "constant": "RELEASEHUB",
    "env": "RELEASE_BUILD_ID"
  },
  {
    "name": "Render",
    "constant": "RENDER",
    "env": "RENDER",
    "pr": {
      "IS_PULL_REQUEST": "true"
    }
  },
  {
    "name": "Sail CI",
    "constant": "SAIL",
    "env": "SAILCI",
    "pr": "SAIL_PULL_REQUEST_NUMBER"
  },
  {
    "name": "Screwdriver",
    "constant": "SCREWDRIVER",
    "env": "SCREWDRIVER",
    "pr": {
      "env": "SD_PULL_REQUEST",
      "ne": "false"
    }
  },
  {
    "name": "Semaphore",
    "constant": "SEMAPHORE",
    "env": "SEMAPHORE",
    "pr": "PULL_REQUEST_NUMBER"
  },
  {
    "name": "Shippable",
    "constant": "SHIPPABLE",
    "env": "SHIPPABLE",
    "pr": {
      "IS_PULL_REQUEST": "true"
    }
  },
  {
    "name": "Solano CI",
    "constant": "SOLANO",
    "env": "TDDIUM",
    "pr": "TDDIUM_PR_ID"
  },
  {
    "name": "Sourcehut",
    "constant": "SOURCEHUT",
    "env": {
      "CI_NAME": "sourcehut"
    }
  },
  {
    "name": "Strider CD",
    "constant": "STRIDER",
    "env": "STRIDER"
  },
  {
    "name": "TaskCluster",
    "constant": "TASKCLUSTER",
    "env": [
      "TASK_ID",
      "RUN_ID"
    ]
  },
  {
    "name": "TeamCity",
    "constant": "TEAMCITY",
    "env": "TEAMCITY_VERSION"
  },
  {
    "name": "Travis CI",
    "constant": "TRAVIS",
    "env": "TRAVIS",
    "pr": {
      "env": "TRAVIS_PULL_REQUEST",
      "ne": "false"
    }
  },
  {
    "name": "Vercel",
    "constant": "VERCEL",
    "env": {
      "any": [
        "NOW_BUILDER",
        "VERCEL"
      ]
    },
    "pr": "VERCEL_GIT_PULL_REQUEST_ID"
  },
  {
    "name": "Visual Studio App Center",
    "constant": "APPCENTER",
    "env": "APPCENTER_BUILD_ID"
  },
  {
    "name": "Woodpecker",
    "constant": "WOODPECKER",
    "env": {
      "CI": "woodpecker"
    },
    "pr": {
      "CI_BUILD_EVENT": "pull_request"
    }
  },
  {
    "name": "Xcode Cloud",
    "constant": "XCODE_CLOUD",
    "env": "CI_XCODE_PROJECT",
    "pr": "CI_PULL_REQUEST_NUMBER"
  },
  {
    "name": "Xcode Server",
    "constant": "XCODE_SERVER",
    "env": "XCS"
  }
]


---

File name: node_modules\cjs-module-lexer\dist\lexer.js

Code:
"use strict";exports.init=init;exports.initSync=initSync;exports.parse=parse;let A;const Q=1===new Uint8Array(new Uint16Array([1]).buffer)[0];function parse(g,I="@"){if(!A)throw new Error("Not initialized");const D=g.length+1,N=(A.__heap_base.value||A.__heap_base)+4*D-A.memory.buffer.byteLength;N>0&&A.memory.grow(Math.ceil(N/65536));const k=A.sa(D);(Q?C:E)(g,new Uint16Array(A.memory.buffer,k,D));const w=A.parseCJS(k,g.length,0,0,0);if(w){const Q=new Error(`Parse error ${I}${A.e()}:${g.slice(0,A.e()).split("\n").length}:${A.e()-g.lastIndexOf("\n",A.e()-1)}`);throw Object.assign(Q,{idx:A.e()}),5!==w&&6!==w&&7!==w||Object.assign(Q,{code:"ERR_LEXER_ESM_SYNTAX"}),Q}let H=new Set,J=new Set,o=new Set;for(;A.rre();){const Q=B(g.slice(A.res(),A.ree()));Q&&J.add(Q)}for(;A.ru();)o.add(B(g.slice(A.us(),A.ue())));for(;A.re();){let Q=B(g.slice(A.es(),A.ee()));void 0===Q||o.has(Q)||H.add(Q)}return{exports:[...H],reexports:[...J]}}function B(A){if('"'!==A[0]&&"'"!==A[0])return A;try{const Q=(0,eval)(A);for(let A=0;A<Q.length;A++){const B=64512&Q.charCodeAt(A);if(!(B<55296)){if(55296!==B)return;if(56320!=(64512&Q.charCodeAt(++A)))return}}return Q}catch{}}function E(A,Q){const B=A.length;let E=0;for(;E<B;){const B=A.charCodeAt(E);Q[E++]=(255&B)<<8|B>>>8}}function C(A,Q){const B=A.length;let E=0;for(;E<B;)Q[E]=A.charCodeAt(E++)}function g(){const A="";return"undefined"!=typeof Buffer?Buffer.from(A,"base64"):Uint8Array.from(atob(A),A=>A.charCodeAt(0))}let I;function init(){return I||(I=(async()=>{const Q=await WebAssembly.compile(g()),{exports:B}=await WebAssembly.instantiate(Q);A=B})())}function initSync(){if(A)return;const Q=new WebAssembly.Module(g()),{exports:B}=new WebAssembly.Instance(Q);A=B}

---

File name: node_modules\cjs-module-lexer\lexer.d.ts

Code:
export interface Exports {
  exports: string[];
  reexports: string[];
}

export declare function parse(source: string, name?: string): Exports;
export declare function init(): Promise<void>;
export declare function initSync(): void;


---

File name: node_modules\cjs-module-lexer\lexer.js

Code:
let source, pos, end;
let openTokenDepth,
  templateDepth,
  lastTokenPos,
  lastSlashWasDivision,
  templateStack,
  templateStackDepth,
  openTokenPosStack,
  openClassPosStack,
  nextBraceIsClass,
  starExportMap,
  lastStarExportSpecifier,
  _exports,
  unsafeGetters,
  reexports;

function resetState () {
  openTokenDepth = 0;
  templateDepth = -1;
  lastTokenPos = -1;
  lastSlashWasDivision = false;
  templateStack = new Array(1024);
  templateStackDepth = 0;
  openTokenPosStack = new Array(1024);
  openClassPosStack = new Array(1024);
  nextBraceIsClass = false;
  starExportMap = Object.create(null);
  lastStarExportSpecifier = null;

  _exports = new Set();
  unsafeGetters = new Set();
  reexports = new Set();
}

// RequireType
const Import = 0;
const ExportAssign = 1;
const ExportStar = 2;

function parseCJS (source, name = '@') {
  resetState();
  try {
    parseSource(source);
  }
  catch (e) {
    e.message += `\n  at ${name}:${source.slice(0, pos).split('\n').length}:${pos - source.lastIndexOf('\n', pos - 1)}`;
    e.loc = pos;
    throw e;
  }
  const result = { exports: [..._exports].filter(expt => expt !== undefined && !unsafeGetters.has(expt)), reexports: [...reexports].filter(reexpt => reexpt !== undefined) };
  resetState();
  return result;
}

function decode (str) {
  if (str[0] === '"' || str[0] === '\'') {
    try {
      const decoded = (0, eval)(str);
      // Filter to exclude non-matching UTF-16 surrogate strings
      for (let i = 0; i < decoded.length; i++) {
        const surrogatePrefix = decoded.charCodeAt(i) & 0xFC00;
        if (surrogatePrefix < 0xD800) {
          // Not a surrogate
          continue;
        }
        else if (surrogatePrefix === 0xD800) {
          // Validate surrogate pair
          if ((decoded.charCodeAt(++i) & 0xFC00) !== 0xDC00)
            return;
        }
        else {
          // Out-of-range surrogate code (above 0xD800)
          return;
        }
      }
      return decoded;
    }
    catch {}
  }
  else {
    return str;
  }
}

function parseSource (cjsSource) {
  source = cjsSource;
  pos = -1;
  end = source.length - 1;
  let ch = 0;

  // Handle #!
  if (source.charCodeAt(0) === 35/*#*/ && source.charCodeAt(1) === 33/*!*/) {
    if (source.length === 2)
      return true;
    pos += 2;
    while (pos++ < end) {
      ch = source.charCodeAt(pos);
      if (ch === 10/*\n*/ || ch === 13/*\r*/)
        break;
    }
  }

  while (pos++ < end) {
    ch = source.charCodeAt(pos);

    if (ch === 32 || ch < 14 && ch > 8)
      continue;

    if (openTokenDepth === 0) {
      switch (ch) {
        case 105/*i*/:
          if (source.startsWith('mport', pos + 1) && keywordStart(pos))
            throwIfImportStatement();
          lastTokenPos = pos;
          continue;
        case 114/*r*/:
          const startPos = pos;
          if (tryParseRequire(Import) && keywordStart(startPos))
            tryBacktrackAddStarExportBinding(startPos - 1);
          lastTokenPos = pos;
          continue;
        case 95/*_*/:
          if (source.startsWith('interopRequireWildcard', pos + 1) && (keywordStart(pos) || source.charCodeAt(pos - 1) === 46/*.*/)) {
            const startPos = pos;
            pos += 23;
            if (source.charCodeAt(pos) === 40/*(*/) {
              pos++;
              openTokenPosStack[openTokenDepth++] = lastTokenPos;
              if (tryParseRequire(Import) && keywordStart(startPos)) {
                tryBacktrackAddStarExportBinding(startPos - 1);
              }
            }
          }
          else if (source.startsWith('_export', pos + 1) && (keywordStart(pos) || source.charCodeAt(pos - 1) === 46/*.*/)) {
            pos += 8;
            if (source.startsWith('Star', pos))
              pos += 4;
            if (source.charCodeAt(pos) === 40/*(*/) {
              openTokenPosStack[openTokenDepth++] = lastTokenPos;
              if (source.charCodeAt(++pos) === 114/*r*/)
                tryParseRequire(ExportStar);
            }
          }
          lastTokenPos = pos;
          continue;
      }
    }

    switch (ch) {
      case 101/*e*/:
        if (source.startsWith('xport', pos + 1) && keywordStart(pos)) {
          if (source.charCodeAt(pos + 6) === 115/*s*/)
            tryParseExportsDotAssign(false);
          else if (openTokenDepth === 0)
            throwIfExportStatement();
        }
        break;
      case 99/*c*/:
        if (keywordStart(pos) && source.startsWith('lass', pos + 1) && isBrOrWs(source.charCodeAt(pos + 5)))
          nextBraceIsClass = true;
        break;
      case 109/*m*/:
        if (source.startsWith('odule', pos + 1) && keywordStart(pos))
          tryParseModuleExportsDotAssign();
        break;
      case 79/*O*/:
        if (source.startsWith('bject', pos + 1) && keywordStart(pos))
          tryParseObjectDefineOrKeys(openTokenDepth === 0);
        break;
      case 40/*(*/:
        openTokenPosStack[openTokenDepth++] = lastTokenPos;
        break;
      case 41/*)*/:
        if (openTokenDepth === 0)
          throw new Error('Unexpected closing bracket.');
        openTokenDepth--;
        break;
      case 123/*{*/:
        openClassPosStack[openTokenDepth] = nextBraceIsClass;
        nextBraceIsClass = false;
        openTokenPosStack[openTokenDepth++] = lastTokenPos;
        break;
      case 125/*}*/:
        if (openTokenDepth === 0)
          throw new Error('Unexpected closing brace.');
        if (openTokenDepth-- === templateDepth) {
          templateDepth = templateStack[--templateStackDepth];
          templateString();
        }
        else {
          if (templateDepth !== -1 && openTokenDepth < templateDepth)
            throw new Error('Unexpected closing brace.');
        }
        break;
      case 60/*>*/:
        // TODO: <!-- XML comment support
        break;
      case 39/*'*/:
      case 34/*"*/:
        stringLiteral(ch);
        break;
      case 47/*/*/: {
        const next_ch = source.charCodeAt(pos + 1);
        if (next_ch === 47/*/*/) {
          lineComment();
          // dont update lastToken
          continue;
        }
        else if (next_ch === 42/***/) {
          blockComment();
          // dont update lastToken
          continue;
        }
        else {
          // Division / regex ambiguity handling based on checking backtrack analysis of:
          // - what token came previously (lastToken)
          // - if a closing brace or paren, what token came before the corresponding
          //   opening brace or paren (lastOpenTokenIndex)
          const lastToken = source.charCodeAt(lastTokenPos);
          if (isExpressionPunctuator(lastToken) &&
              !(lastToken === 46/*.*/ && (source.charCodeAt(lastTokenPos - 1) >= 48/*0*/ && source.charCodeAt(lastTokenPos - 1) <= 57/*9*/)) &&
              !(lastToken === 43/*+*/ && source.charCodeAt(lastTokenPos - 1) === 43/*+*/) && !(lastToken === 45/*-*/ && source.charCodeAt(lastTokenPos - 1) === 45/*-*/) ||
              lastToken === 41/*)*/ && isParenKeyword(openTokenPosStack[openTokenDepth]) ||
              lastToken === 125/*}*/ && (isExpressionTerminator(openTokenPosStack[openTokenDepth]) || openClassPosStack[openTokenDepth]) ||
              lastToken === 47/*/*/ && lastSlashWasDivision ||
              isExpressionKeyword(lastTokenPos) ||
              !lastToken) {
            regularExpression();
            lastSlashWasDivision = false;
          }
          else {
            lastSlashWasDivision = true;
          }
        }
        break;
      }
      case 96/*`*/:
        templateString();
        break;
    }
    lastTokenPos = pos;
  }

  if (templateDepth !== -1)
    throw new Error('Unterminated template.');

  if (openTokenDepth)
    throw new Error('Unterminated braces.');
}

function tryBacktrackAddStarExportBinding (bPos) {
  while (source.charCodeAt(bPos) === 32/* */ && bPos >= 0)
    bPos--;
  if (source.charCodeAt(bPos) === 61/*=*/) {
    bPos--;
    while (source.charCodeAt(bPos) === 32/* */ && bPos >= 0)
      bPos--;
    let codePoint;
    const id_end = bPos;
    let identifierStart = false;
    while ((codePoint = codePointAtLast(bPos)) && bPos >= 0) {
      if (codePoint === 92/*\*/)
        return;
      if (!isIdentifierChar(codePoint, true))
        break;
      identifierStart = isIdentifierStart(codePoint, true);
      bPos -= codePointLen(codePoint);
    }
    if (identifierStart && source.charCodeAt(bPos) === 32/* */) {
      const starExportId = source.slice(bPos + 1, id_end + 1);
      while (source.charCodeAt(bPos) === 32/* */ && bPos >= 0)
        bPos--;
      switch (source.charCodeAt(bPos)) {
        case 114/*r*/:
          if (!source.startsWith('va', bPos - 2))
            return;
          break;
        case 116/*t*/:
          if (!source.startsWith('le', bPos - 2) && !source.startsWith('cons', bPos - 4))
            return;
          break;
        default: return;
      }
      starExportMap[starExportId] = lastStarExportSpecifier;
    }
  }
}

// `Object.` `prototype.`? hasOwnProperty.call(`  IDENTIFIER `, ` IDENTIFIER$2 `)`
function tryParseObjectHasOwnProperty (it_id) {
  ch = commentWhitespace();
  if (ch !== 79/*O*/ || !source.startsWith('bject', pos + 1)) return false;
  pos += 6;
  ch = commentWhitespace();
  if (ch !== 46/*.*/) return false;
  pos++;
  ch = commentWhitespace();
  if (ch === 112/*p*/) {
    if (!source.startsWith('rototype', pos + 1)) return false;
    pos += 9;
    ch = commentWhitespace();
    if (ch !== 46/*.*/) return false;
    pos++;
    ch = commentWhitespace();
  }
  if (ch !== 104/*h*/ || !source.startsWith('asOwnProperty', pos + 1)) return false;
  pos += 14;
  ch = commentWhitespace();
  if (ch !== 46/*.*/) return false;
  pos++;
  ch = commentWhitespace();
  if (ch !== 99/*c*/ || !source.startsWith('all', pos + 1)) return false;
  pos += 4;
  ch = commentWhitespace();
  if (ch !== 40/*(*/) return false;
  pos++;
  ch = commentWhitespace();
  if (!identifier()) return false;
  ch = commentWhitespace();
  if (ch !== 44/*,*/) return false;
  pos++;
  ch = commentWhitespace();
  if (!source.startsWith(it_id, pos)) return false;
  pos += it_id.length;
  ch = commentWhitespace();
  if (ch !== 41/*)*/) return false;
  pos++;
  return true;
}

function tryParseObjectDefineOrKeys (keys) {
  pos += 6;
  let revertPos = pos - 1;
  let ch = commentWhitespace();
  if (ch === 46/*.*/) {
    pos++;
    ch = commentWhitespace();
    if (ch === 100/*d*/ && source.startsWith('efineProperty', pos + 1)) {
      let expt;
      while (true) {
        pos += 14;
        revertPos = pos - 1;
        ch = commentWhitespace();
        if (ch !== 40/*(*/) break;
        pos++;
        ch = commentWhitespace();
        if (!readExportsOrModuleDotExports(ch)) break;
        ch = commentWhitespace();
        if (ch !== 44/*,*/) break;
        pos++;
        ch = commentWhitespace();
        if (ch !== 39/*'*/ && ch !== 34/*"*/) break;
        const exportPos = pos;
        stringLiteral(ch);
        expt = source.slice(exportPos, ++pos);
        ch = commentWhitespace();
        if (ch !== 44/*,*/) break;
        pos++;
        ch = commentWhitespace();
        if (ch !== 123/*{*/) break;
        pos++;
        ch = commentWhitespace();
        if (ch === 101/*e*/) {
          if (!source.startsWith('numerable', pos + 1)) break;
          pos += 10;
          ch = commentWhitespace();
          if (ch !== 58/*:*/) break;
          pos++;
          ch = commentWhitespace();
          if (ch !== 116/*t*/ || !source.startsWith('rue', pos + 1)) break;
          pos += 4;
          ch = commentWhitespace();
          if (ch !== 44) break;
          pos++;
          ch = commentWhitespace();
        }
        if (ch === 118/*v*/) {
          if (!source.startsWith('alue', pos + 1)) break;
          pos += 5;
          ch = commentWhitespace();
          if (ch !== 58/*:*/) break;
          _exports.add(decode(expt));
          pos = revertPos;
          return;
        }
        else if (ch === 103/*g*/) {
          if (!source.startsWith('et', pos + 1)) break;
          pos += 3;
          ch = commentWhitespace();
          if (ch === 58/*:*/) {
            pos++;
            ch = commentWhitespace();
            if (ch !== 102/*f*/) break;
            if (!source.startsWith('unction', pos + 1)) break;
            pos += 8;
            let lastPos = pos;
            ch = commentWhitespace();
            if (ch !== 40 && (lastPos === pos || !identifier())) break;
            ch = commentWhitespace();
          }
          if (ch !== 40/*(*/) break;
          pos++;
          ch = commentWhitespace();
          if (ch !== 41/*)*/) break;
          pos++;
          ch = commentWhitespace();
          if (ch !== 123/*{*/) break;
          pos++;
          ch = commentWhitespace();
          if (ch !== 114/*r*/) break;
          if (!source.startsWith('eturn', pos + 1)) break;
          pos += 6;
          ch = commentWhitespace();
          if (!identifier()) break;
          ch = commentWhitespace();
          if (ch === 46/*.*/) {
            pos++;
            commentWhitespace();
            if (!identifier()) break;
            ch = commentWhitespace();
          }
          else if (ch === 91/*[*/) {
            pos++;
            ch = commentWhitespace();
            if (ch === 39/*'*/ || ch === 34/*"*/) stringLiteral(ch);
            else break;
            pos++;
            ch = commentWhitespace();
            if (ch !== 93/*]*/) break;
            pos++;
            ch = commentWhitespace();
          }
          if (ch === 59/*;*/) {
            pos++;
            ch = commentWhitespace();
          }
          if (ch !== 125/*}*/) break;
          pos++;
          ch = commentWhitespace();
          if (ch === 44/*,*/) {
            pos++;
            ch = commentWhitespace();
          }
          if (ch !== 125/*}*/) break;
          pos++;
          ch = commentWhitespace();
          if (ch !== 41/*)*/) break;
          _exports.add(decode(expt));
          return;
        }
        break;
      }
      if (expt) {
        unsafeGetters.add(decode(expt));
      }
    }
    else if (keys && ch === 107/*k*/ && source.startsWith('eys', pos + 1)) {
      while (true) {
        pos += 4;
        revertPos = pos - 1;
        ch = commentWhitespace();
        if (ch !== 40/*(*/) break;
        pos++;
        ch = commentWhitespace();
        const id_start = pos;
        if (!identifier()) break;
        const id = source.slice(id_start, pos);
        ch = commentWhitespace();
        if (ch !== 41/*)*/) break;

        revertPos = pos++;
        ch = commentWhitespace();
        if (ch !== 46/*.*/) break;
        pos++;
        ch = commentWhitespace();
        if (ch !== 102/*f*/ || !source.startsWith('orEach', pos + 1)) break;
        pos += 7;
        ch = commentWhitespace();
        revertPos = pos - 1;
        if (ch !== 40/*(*/) break;
        pos++;
        ch = commentWhitespace();
        if (ch !== 102/*f*/ || !source.startsWith('unction', pos + 1)) break;
        pos += 8;
        ch = commentWhitespace();
        if (ch !== 40/*(*/) break;
        pos++;
        ch = commentWhitespace();
        const it_id_start = pos;
        if (!identifier()) break;
        const it_id = source.slice(it_id_start, pos);
        ch = commentWhitespace();
        if (ch !== 41/*)*/) break;
        pos++;
        ch = commentWhitespace();
        if (ch !== 123/*{*/) break;
        pos++;
        ch = commentWhitespace();
        if (ch !== 105/*i*/ || source.charCodeAt(pos + 1) !== 102/*f*/) break;
        pos += 2;
        ch = commentWhitespace();
        if (ch !== 40/*(*/) break;
        pos++;
        ch = commentWhitespace();
        if (!source.startsWith(it_id, pos)) break;
        pos += it_id.length;
        ch = commentWhitespace();
        // `if (` IDENTIFIER$2 `===` ( `'default'` | `"default"` ) `||` IDENTIFIER$2 `===` ( '__esModule' | `"__esModule"` ) `) return` `;`? |
        if (ch === 61/*=*/) {
          if (!source.startsWith('==', pos + 1)) break;
          pos += 3;
          ch = commentWhitespace();
          if (ch !== 34/*"*/ && ch !== 39/*'*/) break;
          let quot = ch;
          if (!source.startsWith('default', pos + 1)) break;
          pos += 8;
          ch = commentWhitespace();
          if (ch !== quot) break;
          pos += 1;
          ch = commentWhitespace();
          if (ch !== 124/*|*/ || source.charCodeAt(pos + 1) !== 124/*|*/) break;
          pos += 2;
          ch = commentWhitespace();
          if (source.slice(pos, pos + it_id.length) !== it_id) break;
          pos += it_id.length;
          ch = commentWhitespace();
          if (ch !== 61/*=*/ || source.slice(pos + 1, pos + 3) !== '==') break;
          pos += 3;
          ch = commentWhitespace();
          if (ch !== 34/*"*/ && ch !== 39/*'*/) break;
          quot = ch;
          if (!source.startsWith('__esModule', pos + 1)) break;
          pos += 11;
          ch = commentWhitespace();
          if (ch !== quot) break;
          pos += 1;
          ch = commentWhitespace();
          if (ch !== 41/*)*/) break;
          pos += 1;
          ch = commentWhitespace();
          if (ch !== 114/*r*/ || !source.startsWith('eturn', pos + 1)) break;
          pos += 6;
          ch = commentWhitespace();
          if (ch === 59/*;*/)
            pos++;
          ch = commentWhitespace();

          // `if (`
          if (ch === 105/*i*/ && source.charCodeAt(pos + 1) === 102/*f*/) {
            let inIf = true;
            pos += 2;
            ch = commentWhitespace();
            if (ch !== 40/*(*/) break;
            pos++;
            const ifInnerPos = pos;
            // `Object.prototype.hasOwnProperty.call(`  IDENTIFIER `, ` IDENTIFIER$2 `)) return` `;`?
            if (tryParseObjectHasOwnProperty(it_id)) {
              ch = commentWhitespace();
              if (ch !== 41/*)*/) break;
              pos++;
              ch = commentWhitespace();
              if (ch !== 114/*r*/ || !source.startsWith('eturn', pos + 1)) break;
              pos += 6;
              ch = commentWhitespace();
              if (ch === 59/*;*/)
                pos++;
              ch = commentWhitespace();
              // match next if
              if (ch === 105/*i*/ && source.charCodeAt(pos + 1) === 102/*f*/) {
                pos += 2;
                ch = commentWhitespace();
                if (ch !== 40/*(*/) break;
                pos++;
              }
              else {
                inIf = false;
              }
            }
            else {
              pos = ifInnerPos;
            }

            // IDENTIFIER$2 `in` EXPORTS_IDENTIFIER `&&` EXPORTS_IDENTIFIER `[` IDENTIFIER$2 `] ===` IDENTIFIER$1 `[` IDENTIFIER$2 `]) return` `;`?
            if (inIf) {
              if (!source.startsWith(it_id, pos)) break;
              pos += it_id.length;
              ch = commentWhitespace();
              if (ch !== 105/*i*/ || !source.startsWith('n ', pos + 1)) break;
              pos += 3;
              ch = commentWhitespace();
              if (!readExportsOrModuleDotExports(ch)) break;
              ch = commentWhitespace();
              if (ch !== 38/*&*/ || source.charCodeAt(pos + 1) !== 38/*&*/) break;
              pos += 2;
              ch = commentWhitespace();
              if (!readExportsOrModuleDotExports(ch)) break;
              ch = commentWhitespace();
              if (ch !== 91/*[*/) break;
              pos++;
              ch = commentWhitespace();
              if (!source.startsWith(it_id, pos)) break;
              pos += it_id.length;
              ch = commentWhitespace();
              if (ch !== 93/*]*/) break;
              pos++;
              ch = commentWhitespace();
              if (ch !== 61/*=*/ || !source.startsWith('==', pos + 1)) break;
              pos += 3;
              ch = commentWhitespace();
              if (!source.startsWith(id, pos)) break;
              pos += id.length;
              ch = commentWhitespace();
              if (ch !== 91/*[*/) break;
              pos++;
              ch = commentWhitespace();
              if (!source.startsWith(it_id, pos)) break;
              pos += it_id.length;
              ch = commentWhitespace();
              if (ch !== 93/*]*/) break;
              pos++;
              ch = commentWhitespace();
              if (ch !== 41/*)*/) break;
              pos++;
              ch = commentWhitespace();
              if (ch !== 114/*r*/ || !source.startsWith('eturn', pos + 1)) break;
              pos += 6;
              ch = commentWhitespace();
              if (ch === 59/*;*/)
                pos++;
              ch = commentWhitespace();
            }
          }
        }
        // `if (` IDENTIFIER$2 `!==` ( `'default'` | `"default"` ) (`&& !` IDENTIFIER `.hasOwnProperty(` IDENTIFIER$2 `)`  )? `)`
        else if (ch === 33/*!*/) {
          if (!source.startsWith('==', pos + 1)) break;
          pos += 3;
          ch = commentWhitespace();
          if (ch !== 34/*"*/ && ch !== 39/*'*/) break;
          const quot = ch;
          if (!source.startsWith('default', pos + 1)) break;
          pos += 8;
          ch = commentWhitespace();
          if (ch !== quot) break;
          pos += 1;
          ch = commentWhitespace();
          if (ch === 38/*&*/) {
            if (source.charCodeAt(pos + 1) !== 38/*&*/) break;
            pos += 2;
            ch = commentWhitespace();
            if (ch !== 33/*!*/) break;
            pos += 1;
            ch = commentWhitespace();
            if (ch === 79/*O*/ && source.startsWith('bject', pos + 1) && source[pos + 6] === '.') {
              if (!tryParseObjectHasOwnProperty(it_id)) break;
            }
            else if (identifier()) {
              ch = commentWhitespace();
              if (ch !== 46/*.*/) break;
              pos++;
              ch = commentWhitespace();
              if (ch !== 104/*h*/ || !source.startsWith('asOwnProperty', pos + 1)) break;
              pos += 14;
              ch = commentWhitespace();
              if (ch !== 40/*(*/) break;
              pos += 1;
              ch = commentWhitespace();
              if (!source.startsWith(it_id, pos)) break;
              pos += it_id.length;
              ch = commentWhitespace();
              if (ch !== 41/*)*/) break;
              pos += 1;
            }
            else break;
            ch = commentWhitespace();
          }
          if (ch !== 41/*)*/) break;
          pos += 1;
          ch = commentWhitespace();
        }
        else break;

        // EXPORTS_IDENTIFIER `[` IDENTIFIER$2 `] =` IDENTIFIER$1 `[` IDENTIFIER$2 `]`
        if (readExportsOrModuleDotExports(ch)) {
          ch = commentWhitespace();
          if (ch !== 91/*[*/) break;
          pos++;
          ch = commentWhitespace();
          if (source.slice(pos, pos + it_id.length) !== it_id) break;
          pos += it_id.length;
          ch = commentWhitespace();
          if (ch !== 93/*]*/) break;
          pos++;
          ch = commentWhitespace();
          if (ch !== 61/*=*/) break;
          pos++;
          ch = commentWhitespace();
          if (source.slice(pos, pos + id.length) !== id) break;
          pos += id.length;
          ch = commentWhitespace();
          if (ch !== 91/*[*/) break;
          pos++;
          ch = commentWhitespace();
          if (source.slice(pos, pos + it_id.length) !== it_id) break;
          pos += it_id.length;
          ch = commentWhitespace();
          if (ch !== 93/*]*/) break;
          pos++;
          ch = commentWhitespace();
          if (ch === 59/*;*/) {
            pos++;
            ch = commentWhitespace();
          }
        }
        // `Object.defineProperty(` EXPORTS_IDENTIFIER `, ` IDENTIFIER$2 `, { enumerable: true, get: function () { return ` IDENTIFIER$1 `[` IDENTIFIER$2 `]; } })`
        else if (ch === 79/*O*/) {
          if (source.slice(pos + 1, pos + 6) !== 'bject') break;
          pos += 6;
          ch = commentWhitespace();
          if (ch !== 46/*.*/) break;
          pos++;
          ch = commentWhitespace();
          if (ch !== 100/*d*/ || !source.startsWith('efineProperty', pos + 1)) break;
          pos += 14;
          ch = commentWhitespace();
          if (ch !== 40/*(*/) break;
          pos++;
          ch = commentWhitespace();
          if (!readExportsOrModuleDotExports(ch)) break;
          ch = commentWhitespace();
          if (ch !== 44/*,*/) break;
          pos++;
          ch = commentWhitespace();
          if (!source.startsWith(it_id, pos)) break;
          pos += it_id.length;
          ch = commentWhitespace();
          if (ch !== 44/*,*/) break;
          pos++;
          ch = commentWhitespace();
          if (ch !== 123/*{*/) break;
          pos++;
          ch = commentWhitespace();
          if (ch !== 101/*e*/ || !source.startsWith('numerable', pos + 1)) break;
          pos += 10;
          ch = commentWhitespace();
          if (ch !== 58/*:*/) break;
          pos++;
          ch = commentWhitespace();
          if (ch !== 116/*t*/ && !source.startsWith('rue', pos + 1)) break;
          pos += 4;
          ch = commentWhitespace();
          if (ch !== 44/*,*/) break;
          pos++;
          ch = commentWhitespace();
          if (ch !== 103/*g*/ || !source.startsWith('et', pos + 1)) break;
          pos += 3;
          ch = commentWhitespace();
          if (ch === 58/*:*/) {
            pos++;
            ch = commentWhitespace();
            if (ch !== 102/*f*/) break;
            if (!source.startsWith('unction', pos + 1)) break;
            pos += 8;
            let lastPos = pos;
            ch = commentWhitespace();
            if (ch !== 40 && (lastPos === pos || !identifier())) break;
            ch = commentWhitespace();
          }
          if (ch !== 40/*(*/) break;
          pos++;
          ch = commentWhitespace();
          if (ch !== 41/*)*/) break;
          pos++;
          ch = commentWhitespace();
          if (ch !== 123/*{*/) break;
          pos++;
          ch = commentWhitespace();
          if (ch !== 114/*r*/ || !source.startsWith('eturn', pos + 1)) break;
          pos += 6;
          ch = commentWhitespace();
          if (!source.startsWith(id, pos)) break;
          pos += id.length;
          ch = commentWhitespace();
          if (ch !== 91/*[*/) break;
          pos++;
          ch = commentWhitespace();
          if (!source.startsWith(it_id, pos)) break;
          pos += it_id.length;
          ch = commentWhitespace();
          if (ch !== 93/*]*/) break;
          pos++;
          ch = commentWhitespace();
          if (ch === 59/*;*/) {
            pos++;
            ch = commentWhitespace();
          }
          if (ch !== 125/*}*/) break;
          pos++;
          ch = commentWhitespace();
          if (ch === 44/*,*/) {
            pos++;
            ch = commentWhitespace();
          }
          if (ch !== 125/*}*/) break;
          pos++;
          ch = commentWhitespace();
          if (ch !== 41/*)*/) break;
          pos++;
          ch = commentWhitespace();
          if (ch === 59/*;*/) {
            pos++;
            ch = commentWhitespace();
          }
        }
        else break;

        if (ch !== 125/*}*/) break;
        pos++;
        ch = commentWhitespace();
        if (ch !== 41/*)*/) break;

        const starExportSpecifier = starExportMap[id];
        if (starExportSpecifier) {
          reexports.add(decode(starExportSpecifier));
          pos = revertPos;
          return;
        }
        return;
      }
    }
  }
  pos = revertPos;
}

function readExportsOrModuleDotExports (ch) {
  const revertPos = pos;
  if (ch === 109/*m*/ && source.startsWith('odule', pos + 1)) {
    pos += 6;
    ch = commentWhitespace();
    if (ch !== 46/*.*/) {
      pos = revertPos;
      return false;
    }
    pos++;
    ch = commentWhitespace();
  }
  if (ch === 101/*e*/ && source.startsWith('xports', pos + 1)) {
    pos += 7;
    return true;
  }
  else {
    pos = revertPos;
    return false;
  }
}

function tryParseModuleExportsDotAssign () {
  pos += 6;
  const revertPos = pos - 1;
  let ch = commentWhitespace();
  if (ch === 46/*.*/) {
    pos++;
    ch = commentWhitespace();
    if (ch === 101/*e*/ && source.startsWith('xports', pos + 1)) {
      tryParseExportsDotAssign(true);
      return;
    }
  }
  pos = revertPos;
}

function tryParseExportsDotAssign (assign) {
  pos += 7;
  const revertPos = pos - 1;
  let ch = commentWhitespace();
  switch (ch) {
    // exports.asdf
    case 46/*.*/: {
      pos++;
      ch = commentWhitespace();
      const startPos = pos;
      if (identifier()) {
        const endPos = pos;
        ch = commentWhitespace();
        if (ch === 61/*=*/) {
          _exports.add(decode(source.slice(startPos, endPos)));
          return;
        }
      }
      break;
    }
    // exports['asdf']
    case 91/*[*/: {
      pos++;
      ch = commentWhitespace();
      if (ch === 39/*'*/ || ch === 34/*"*/) {
        const startPos = pos;
        stringLiteral(ch);
        const endPos = ++pos;
        ch = commentWhitespace();
        if (ch !== 93/*]*/) break;
        pos++;
        ch = commentWhitespace();
        if (ch !== 61/*=*/) break;
        _exports.add(decode(source.slice(startPos, endPos)));
      }
      break;
    }
    // module.exports =
    case 61/*=*/: {
      if (assign) {
        if (reexports.size)
          reexports = new Set();
        pos++;
        ch = commentWhitespace();
        // { ... }
        if (ch === 123/*{*/) {
          tryParseLiteralExports();
          return;
        }

        // require('...')
        if (ch === 114/*r*/)
          tryParseRequire(ExportAssign);
      }
    }
  }
  pos = revertPos;
}

function tryParseRequire (requireType) {
  // require('...')
  const revertPos = pos;
  if (source.startsWith('equire', pos + 1)) {
    pos += 7;
    let ch = commentWhitespace();
    if (ch === 40/*(*/) {
      pos++;
      ch = commentWhitespace();
      const reexportStart = pos;
      if (ch === 39/*'*/ || ch === 34/*"*/) {
        stringLiteral(ch);
        const reexportEnd = ++pos;
        ch = commentWhitespace();
        if (ch === 41/*)*/) {
          switch (requireType) {
            case ExportAssign:
              reexports.add(decode(source.slice(reexportStart, reexportEnd)));
              return true;
            case ExportStar:
              reexports.add(decode(source.slice(reexportStart, reexportEnd)));
              return true;
            default:
              lastStarExportSpecifier = decode(source.slice(reexportStart, reexportEnd));
              return true;
          }
        }
      }
    }
    pos = revertPos;
  }
  return false;
}

function tryParseLiteralExports () {
  const revertPos = pos - 1;
  while (pos++ < end) {
    let ch = commentWhitespace();
    const startPos = pos;
    if (identifier()) {
      const endPos = pos;
      ch = commentWhitespace();
      if (ch === 58/*:*/) {
        pos++;
        ch = commentWhitespace();
        // nothing more complex than identifier expressions for now
        if (!identifier()) {
          pos = revertPos;
          return;
        }
        ch = source.charCodeAt(pos);
      }
      _exports.add(decode(source.slice(startPos, endPos)));
    }
    else if (ch === 46/*.*/ && source.startsWith('..', pos + 1)) {
      pos += 3;
      if (source.charCodeAt(pos) === 114/*r*/ && tryParseRequire(ExportAssign)) {
        pos++;
      }
      else if (!identifier()) {
        pos = revertPos;
        return;
      }
      ch = commentWhitespace();
    }
    else if (ch === 39/*'*/ || ch === 34/*"*/) {
      const startPos = pos;
      stringLiteral(ch);
      const endPos = ++pos;
      ch = commentWhitespace();
      if (ch === 58/*:*/) {
        pos++;
        ch = commentWhitespace();
        // nothing more complex than identifier expressions for now
        if (!identifier()) {
          pos = revertPos;
          return;
        }
        ch = source.charCodeAt(pos);
        _exports.add(decode(source.slice(startPos, endPos)));
      }
    }
    else {
      pos = revertPos;
      return;
    }

    if (ch === 125/*}*/)
      return;

    if (ch !== 44/*,*/) {
      pos = revertPos;
      return;
    }
  }
}

// --- Extracted from AcornJS ---
//(https://github.com/acornjs/acorn/blob/master/acorn/src/identifier.js#L23
//
// MIT License

// Copyright (C) 2012-2018 by various contributors (see AUTHORS)

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// ## Character categories

// Big ugly regular expressions that match characters in the
// whitespace, identifier, and identifier-start categories. These
// are only applied when a character is found to actually have a
// code point above 128.
// Generated by `bin/generate-identifier-regex.js`.
let nonASCIIidentifierStartChars = "\xaa\xb5\xba\xc0-\xd6\xd8-\xf6\xf8-\u02c1\u02c6-\u02d1\u02e0-\u02e4\u02ec\u02ee\u0370-\u0374\u0376\u0377\u037a-\u037d\u037f\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u048a-\u052f\u0531-\u0556\u0559\u0560-\u0588\u05d0-\u05ea\u05ef-\u05f2\u0620-\u064a\u066e\u066f\u0671-\u06d3\u06d5\u06e5\u06e6\u06ee\u06ef\u06fa-\u06fc\u06ff\u0710\u0712-\u072f\u074d-\u07a5\u07b1\u07ca-\u07ea\u07f4\u07f5\u07fa\u0800-\u0815\u081a\u0824\u0828\u0840-\u0858\u0860-\u086a\u08a0-\u08b4\u08b6-\u08c7\u0904-\u0939\u093d\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098c\u098f\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bd\u09ce\u09dc\u09dd\u09df-\u09e1\u09f0\u09f1\u09fc\u0a05-\u0a0a\u0a0f\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a59-\u0a5c\u0a5e\u0a72-\u0a74\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2\u0ab3\u0ab5-\u0ab9\u0abd\u0ad0\u0ae0\u0ae1\u0af9\u0b05-\u0b0c\u0b0f\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32\u0b33\u0b35-\u0b39\u0b3d\u0b5c\u0b5d\u0b5f-\u0b61\u0b71\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99\u0b9a\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bd0\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c39\u0c3d\u0c58-\u0c5a\u0c60\u0c61\u0c80\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbd\u0cde\u0ce0\u0ce1\u0cf1\u0cf2\u0d04-\u0d0c\u0d0e-\u0d10\u0d12-\u0d3a\u0d3d\u0d4e\u0d54-\u0d56\u0d5f-\u0d61\u0d7a-\u0d7f\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0e01-\u0e30\u0e32\u0e33\u0e40-\u0e46\u0e81\u0e82\u0e84\u0e86-\u0e8a\u0e8c-\u0ea3\u0ea5\u0ea7-\u0eb0\u0eb2\u0eb3\u0ebd\u0ec0-\u0ec4\u0ec6\u0edc-\u0edf\u0f00\u0f40-\u0f47\u0f49-\u0f6c\u0f88-\u0f8c\u1000-\u102a\u103f\u1050-\u1055\u105a-\u105d\u1061\u1065\u1066\u106e-\u1070\u1075-\u1081\u108e\u10a0-\u10c5\u10c7\u10cd\u10d0-\u10fa\u10fc-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u1380-\u138f\u13a0-\u13f5\u13f8-\u13fd\u1401-\u166c\u166f-\u167f\u1681-\u169a\u16a0-\u16ea\u16ee-\u16f8\u1700-\u170c\u170e-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176c\u176e-\u1770\u1780-\u17b3\u17d7\u17dc\u1820-\u1878\u1880-\u18a8\u18aa\u18b0-\u18f5\u1900-\u191e\u1950-\u196d\u1970-\u1974\u1980-\u19ab\u19b0-\u19c9\u1a00-\u1a16\u1a20-\u1a54\u1aa7\u1b05-\u1b33\u1b45-\u1b4b\u1b83-\u1ba0\u1bae\u1baf\u1bba-\u1be5\u1c00-\u1c23\u1c4d-\u1c4f\u1c5a-\u1c7d\u1c80-\u1c88\u1c90-\u1cba\u1cbd-\u1cbf\u1ce9-\u1cec\u1cee-\u1cf3\u1cf5\u1cf6\u1cfa\u1d00-\u1dbf\u1e00-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u2071\u207f\u2090-\u209c\u2102\u2107\u210a-\u2113\u2115\u2118-\u211d\u2124\u2126\u2128\u212a-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2160-\u2188\u2c00-\u2c2e\u2c30-\u2c5e\u2c60-\u2ce4\u2ceb-\u2cee\u2cf2\u2cf3\u2d00-\u2d25\u2d27\u2d2d\u2d30-\u2d67\u2d6f\u2d80-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303c\u3041-\u3096\u309b-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312f\u3131-\u318e\u31a0-\u31bf\u31f0-\u31ff\u3400-\u4dbf\u4e00-\u9ffc\ua000-\ua48c\ua4d0-\ua4fd\ua500-\ua60c\ua610-\ua61f\ua62a\ua62b\ua640-\ua66e\ua67f-\ua69d\ua6a0-\ua6ef\ua717-\ua71f\ua722-\ua788\ua78b-\ua7bf\ua7c2-\ua7ca\ua7f5-\ua801\ua803-\ua805\ua807-\ua80a\ua80c-\ua822\ua840-\ua873\ua882-\ua8b3\ua8f2-\ua8f7\ua8fb\ua8fd\ua8fe\ua90a-\ua925\ua930-\ua946\ua960-\ua97c\ua984-\ua9b2\ua9cf\ua9e0-\ua9e4\ua9e6-\ua9ef\ua9fa-\ua9fe\uaa00-\uaa28\uaa40-\uaa42\uaa44-\uaa4b\uaa60-\uaa76\uaa7a\uaa7e-\uaaaf\uaab1\uaab5\uaab6\uaab9-\uaabd\uaac0\uaac2\uaadb-\uaadd\uaae0-\uaaea\uaaf2-\uaaf4\uab01-\uab06\uab09-\uab0e\uab11-\uab16\uab20-\uab26\uab28-\uab2e\uab30-\uab5a\uab5c-\uab69\uab70-\uabe2\uac00-\ud7a3\ud7b0-\ud7c6\ud7cb-\ud7fb\uf900-\ufa6d\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d\ufb1f-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40\ufb41\ufb43\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe70-\ufe74\ufe76-\ufefc\uff21-\uff3a\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc"
let nonASCIIidentifierChars = "\u200c\u200d\xb7\u0300-\u036f\u0387\u0483-\u0487\u0591-\u05bd\u05bf\u05c1\u05c2\u05c4\u05c5\u05c7\u0610-\u061a\u064b-\u0669\u0670\u06d6-\u06dc\u06df-\u06e4\u06e7\u06e8\u06ea-\u06ed\u06f0-\u06f9\u0711\u0730-\u074a\u07a6-\u07b0\u07c0-\u07c9\u07eb-\u07f3\u07fd\u0816-\u0819\u081b-\u0823\u0825-\u0827\u0829-\u082d\u0859-\u085b\u08d3-\u08e1\u08e3-\u0903\u093a-\u093c\u093e-\u094f\u0951-\u0957\u0962\u0963\u0966-\u096f\u0981-\u0983\u09bc\u09be-\u09c4\u09c7\u09c8\u09cb-\u09cd\u09d7\u09e2\u09e3\u09e6-\u09ef\u09fe\u0a01-\u0a03\u0a3c\u0a3e-\u0a42\u0a47\u0a48\u0a4b-\u0a4d\u0a51\u0a66-\u0a71\u0a75\u0a81-\u0a83\u0abc\u0abe-\u0ac5\u0ac7-\u0ac9\u0acb-\u0acd\u0ae2\u0ae3\u0ae6-\u0aef\u0afa-\u0aff\u0b01-\u0b03\u0b3c\u0b3e-\u0b44\u0b47\u0b48\u0b4b-\u0b4d\u0b55-\u0b57\u0b62\u0b63\u0b66-\u0b6f\u0b82\u0bbe-\u0bc2\u0bc6-\u0bc8\u0bca-\u0bcd\u0bd7\u0be6-\u0bef\u0c00-\u0c04\u0c3e-\u0c44\u0c46-\u0c48\u0c4a-\u0c4d\u0c55\u0c56\u0c62\u0c63\u0c66-\u0c6f\u0c81-\u0c83\u0cbc\u0cbe-\u0cc4\u0cc6-\u0cc8\u0cca-\u0ccd\u0cd5\u0cd6\u0ce2\u0ce3\u0ce6-\u0cef\u0d00-\u0d03\u0d3b\u0d3c\u0d3e-\u0d44\u0d46-\u0d48\u0d4a-\u0d4d\u0d57\u0d62\u0d63\u0d66-\u0d6f\u0d81-\u0d83\u0dca\u0dcf-\u0dd4\u0dd6\u0dd8-\u0ddf\u0de6-\u0def\u0df2\u0df3\u0e31\u0e34-\u0e3a\u0e47-\u0e4e\u0e50-\u0e59\u0eb1\u0eb4-\u0ebc\u0ec8-\u0ecd\u0ed0-\u0ed9\u0f18\u0f19\u0f20-\u0f29\u0f35\u0f37\u0f39\u0f3e\u0f3f\u0f71-\u0f84\u0f86\u0f87\u0f8d-\u0f97\u0f99-\u0fbc\u0fc6\u102b-\u103e\u1040-\u1049\u1056-\u1059\u105e-\u1060\u1062-\u1064\u1067-\u106d\u1071-\u1074\u1082-\u108d\u108f-\u109d\u135d-\u135f\u1369-\u1371\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17b4-\u17d3\u17dd\u17e0-\u17e9\u180b-\u180d\u1810-\u1819\u18a9\u1920-\u192b\u1930-\u193b\u1946-\u194f\u19d0-\u19da\u1a17-\u1a1b\u1a55-\u1a5e\u1a60-\u1a7c\u1a7f-\u1a89\u1a90-\u1a99\u1ab0-\u1abd\u1abf\u1ac0\u1b00-\u1b04\u1b34-\u1b44\u1b50-\u1b59\u1b6b-\u1b73\u1b80-\u1b82\u1ba1-\u1bad\u1bb0-\u1bb9\u1be6-\u1bf3\u1c24-\u1c37\u1c40-\u1c49\u1c50-\u1c59\u1cd0-\u1cd2\u1cd4-\u1ce8\u1ced\u1cf4\u1cf7-\u1cf9\u1dc0-\u1df9\u1dfb-\u1dff\u203f\u2040\u2054\u20d0-\u20dc\u20e1\u20e5-\u20f0\u2cef-\u2cf1\u2d7f\u2de0-\u2dff\u302a-\u302f\u3099\u309a\ua620-\ua629\ua66f\ua674-\ua67d\ua69e\ua69f\ua6f0\ua6f1\ua802\ua806\ua80b\ua823-\ua827\ua82c\ua880\ua881\ua8b4-\ua8c5\ua8d0-\ua8d9\ua8e0-\ua8f1\ua8ff-\ua909\ua926-\ua92d\ua947-\ua953\ua980-\ua983\ua9b3-\ua9c0\ua9d0-\ua9d9\ua9e5\ua9f0-\ua9f9\uaa29-\uaa36\uaa43\uaa4c\uaa4d\uaa50-\uaa59\uaa7b-\uaa7d\uaab0\uaab2-\uaab4\uaab7\uaab8\uaabe\uaabf\uaac1\uaaeb-\uaaef\uaaf5\uaaf6\uabe3-\uabea\uabec\uabed\uabf0-\uabf9\ufb1e\ufe00-\ufe0f\ufe20-\ufe2f\ufe33\ufe34\ufe4d-\ufe4f\uff10-\uff19\uff3f"

const nonASCIIidentifierStart = new RegExp("[" + nonASCIIidentifierStartChars + "]")
const nonASCIIidentifier = new RegExp("[" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + "]")

nonASCIIidentifierStartChars = nonASCIIidentifierChars = null

// These are a run-length and offset encoded representation of the
// >0xffff code points that are a valid part of identifiers. The
// offset starts at 0x10000, and each pair of numbers represents an
// offset to the next range, and then a size of the range. They were
// generated by bin/generate-identifier-regex.js

// eslint-disable-next-line comma-spacing
const astralIdentifierStartCodes = [0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,14,29,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,157,310,10,21,11,7,153,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,28,43,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,14,35,349,41,7,1,79,28,11,0,9,21,107,20,28,22,13,52,76,44,33,24,27,35,30,0,3,0,9,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,85,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,159,52,19,3,21,2,31,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,14,0,72,26,230,43,117,63,32,7,3,0,3,7,2,1,2,23,16,0,2,0,95,7,3,38,17,0,2,0,29,0,11,39,8,0,22,0,12,45,20,0,35,56,264,8,2,36,18,0,50,29,113,6,2,1,2,37,22,0,26,5,2,1,2,31,15,0,328,18,190,0,80,921,103,110,18,195,2749,1070,4050,582,8634,568,8,30,114,29,19,47,17,3,32,20,6,18,689,63,129,74,6,0,67,12,65,1,2,0,29,6135,9,1237,43,8,8952,286,50,2,18,3,9,395,2309,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,2357,44,11,6,17,0,370,43,1301,196,60,67,8,0,1205,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42717,35,4148,12,221,3,5761,15,7472,3104,541,1507,4938]

// eslint-disable-next-line comma-spacing
const astralIdentifierCodes = [509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,574,3,9,9,370,1,154,10,176,2,54,14,32,9,16,3,46,10,54,9,7,2,37,13,2,9,6,1,45,0,13,2,49,13,9,3,2,11,83,11,7,0,161,11,6,9,7,3,56,1,2,6,3,1,3,2,10,0,11,1,3,6,4,4,193,17,10,9,5,0,82,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,84,14,5,9,243,14,166,9,71,5,2,1,3,3,2,0,2,1,13,9,120,6,3,6,4,0,29,9,41,6,2,3,9,0,10,10,47,15,406,7,2,7,17,9,57,21,2,13,123,5,4,0,2,1,2,6,2,0,9,9,49,4,2,1,2,4,9,9,330,3,19306,9,135,4,60,6,26,9,1014,0,2,54,8,3,82,0,12,1,19628,1,5319,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,262,6,10,9,419,13,1495,6,110,6,6,9,4759,9,787719,239]

// This has a complexity linear to the value of the code. The
// assumption is that looking up astral identifier characters is
// rare.
function isInAstralSet(code, set) {
  let pos = 0x10000
  for (let i = 0; i < set.length; i += 2) {
    pos += set[i]
    if (pos > code) return false
    pos += set[i + 1]
    if (pos >= code) return true
  }
}

// Test whether a given character code starts an identifier.

function isIdentifierStart(code, astral) {
  if (code < 65) return code === 36
  if (code < 91) return true
  if (code < 97) return code === 95
  if (code < 123) return true
  if (code <= 0xffff) return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code))
  if (astral === false) return false
  return isInAstralSet(code, astralIdentifierStartCodes)
}

// Test whether a given character is part of an identifier.

function isIdentifierChar(code, astral) {
  if (code < 48) return code === 36
  if (code < 58) return true
  if (code < 65) return false
  if (code < 91) return true
  if (code < 97) return code === 95
  if (code < 123) return true
  if (code <= 0xffff) return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code))
  if (astral === false) return false
  return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes)
}

function identifier () {
  let ch = source.codePointAt(pos);
  if (!isIdentifierStart(ch, true) || ch === '\\')
    return false;
  pos += codePointLen(ch);
  while (ch = source.codePointAt(pos)) {
    if (isIdentifierChar(ch, true)) {
      pos += codePointLen(ch);
    }
    else if (ch === '\\') {
      // no identifier escapes support for now
      return false;
    }
    else {
      break;
    }
  }
  return true;
}

function codePointLen (ch) {
  if (ch < 0x10000) return 1;
  return 2;
}

function codePointAtLast (bPos) {
  // Gives the UTF char for backtracking surrogates
  const ch = source.charCodeAt(bPos);
  if ((ch & 0xFC00) === 0xDC00)
    return (((source.charCodeAt(bPos - 1) & 0x3FF) << 10) | (ch & 0x3FF)) + 0x10000;
  return ch;
}

function esmSyntaxErr (msg) {
  return Object.assign(new Error(msg), { code: 'ERR_LEXER_ESM_SYNTAX' });
}

function throwIfImportStatement () {
  const startPos = pos;
  pos += 6;
  const ch = commentWhitespace();
  switch (ch) {
    // dynamic import
    case 40/*(*/:
      openTokenPosStack[openTokenDepth++] = startPos;
      return;
    // import.meta
    case 46/*.*/:
      throw esmSyntaxErr('Unexpected import.meta in CJS module.');

    default:
      // no space after "import" -> not an import keyword
      if (pos === startPos + 6)
        break;
    case 34/*"*/:
    case 39/*'*/:
    case 123/*{*/:
    case 42/***/:
      // import statement only permitted at base-level
      if (openTokenDepth !== 0) {
        pos--;
        return;
      }
      // import statements are a syntax error in CommonJS
      throw esmSyntaxErr('Unexpected import statement in CJS module.');
  }
}

function throwIfExportStatement () {
  pos += 6;
  const curPos = pos;
  const ch = commentWhitespace();
  if (pos === curPos && !isPunctuator(ch))
    return;
  throw esmSyntaxErr('Unexpected export statement in CJS module.');
}

function commentWhitespace () {
  let ch;
  do {
    ch = source.charCodeAt(pos);
    if (ch === 47/*/*/) {
      const next_ch = source.charCodeAt(pos + 1);
      if (next_ch === 47/*/*/)
        lineComment();
      else if (next_ch === 42/***/)
        blockComment();
      else
        return ch;
    }
    else if (!isBrOrWs(ch)) {
      return ch;
    }
  } while (pos++ < end);
  return ch;
}

function templateString () {
  while (pos++ < end) {
    const ch = source.charCodeAt(pos);
    if (ch === 36/*$*/ && source.charCodeAt(pos + 1) === 123/*{*/) {
      pos++;
      templateStack[templateStackDepth++] = templateDepth;
      templateDepth = ++openTokenDepth;
      return;
    }
    if (ch === 96/*`*/)
      return;
    if (ch === 92/*\*/)
      pos++;
  }
  syntaxError();
}

function blockComment () {
  pos++;
  while (pos++ < end) {
    const ch = source.charCodeAt(pos);
    if (ch === 42/***/ && source.charCodeAt(pos + 1) === 47/*/*/) {
      pos++;
      return;
    }
  }
}

function lineComment () {
  while (pos++ < end) {
    const ch = source.charCodeAt(pos);
    if (ch === 10/*\n*/ || ch === 13/*\r*/)
      return;
  }
}

function stringLiteral (quote) {
  while (pos++ < end) {
    let ch = source.charCodeAt(pos);
    if (ch === quote)
      return;
    if (ch === 92/*\*/) {
      ch = source.charCodeAt(++pos);
      if (ch === 13/*\r*/ && source.charCodeAt(pos + 1) === 10/*\n*/)
        pos++;
    }
    else if (isBr(ch))
      break;
  }
  throw new Error('Unterminated string.');
}

function regexCharacterClass () {
  while (pos++ < end) {
    let ch = source.charCodeAt(pos);
    if (ch === 93/*]*/)
      return ch;
    if (ch === 92/*\*/)
      pos++;
    else if (ch === 10/*\n*/ || ch === 13/*\r*/)
      break;
  }
  throw new Error('Syntax error reading regular expression class.');
}

function regularExpression () {
  while (pos++ < end) {
    let ch = source.charCodeAt(pos);
    if (ch === 47/*/*/)
      return;
    if (ch === 91/*[*/)
      ch = regexCharacterClass();
    else if (ch === 92/*\*/)
      pos++;
    else if (ch === 10/*\n*/ || ch === 13/*\r*/)
      break;
  }
  throw new Error('Syntax error reading regular expression.');
}

// Note: non-asii BR and whitespace checks omitted for perf / footprint
// if there is a significant user need this can be reconsidered
function isBr (c) {
  return c === 13/*\r*/ || c === 10/*\n*/;
}

function isBrOrWs (c) {
  return c > 8 && c < 14 || c === 32 || c === 160;
}

function isBrOrWsOrPunctuatorNotDot (c) {
  return c > 8 && c < 14 || c === 32 || c === 160 || isPunctuator(c) && c !== 46/*.*/;
}

function keywordStart (pos) {
  return pos === 0 || isBrOrWsOrPunctuatorNotDot(source.charCodeAt(pos - 1));
}

function readPrecedingKeyword (pos, match) {
  if (pos < match.length - 1)
    return false;
  return source.startsWith(match, pos - match.length + 1) && (pos === 0 || isBrOrWsOrPunctuatorNotDot(source.charCodeAt(pos - match.length)));
}

function readPrecedingKeyword1 (pos, ch) {
  return source.charCodeAt(pos) === ch && (pos === 0 || isBrOrWsOrPunctuatorNotDot(source.charCodeAt(pos - 1)));
}

// Detects one of case, debugger, delete, do, else, in, instanceof, new,
//   return, throw, typeof, void, yield, await
function isExpressionKeyword (pos) {
  switch (source.charCodeAt(pos)) {
    case 100/*d*/:
      switch (source.charCodeAt(pos - 1)) {
        case 105/*i*/:
          // void
          return readPrecedingKeyword(pos - 2, 'vo');
        case 108/*l*/:
          // yield
          return readPrecedingKeyword(pos - 2, 'yie');
        default:
          return false;
      }
    case 101/*e*/:
      switch (source.charCodeAt(pos - 1)) {
        case 115/*s*/:
          switch (source.charCodeAt(pos - 2)) {
            case 108/*l*/:
              // else
              return readPrecedingKeyword1(pos - 3, 101/*e*/);
            case 97/*a*/:
              // case
              return readPrecedingKeyword1(pos - 3, 99/*c*/);
            default:
              return false;
          }
        case 116/*t*/:
          // delete
          return readPrecedingKeyword(pos - 2, 'dele');
        default:
          return false;
      }
    case 102/*f*/:
      if (source.charCodeAt(pos - 1) !== 111/*o*/ || source.charCodeAt(pos - 2) !== 101/*e*/)
        return false;
      switch (source.charCodeAt(pos - 3)) {
        case 99/*c*/:
          // instanceof
          return readPrecedingKeyword(pos - 4, 'instan');
        case 112/*p*/:
          // typeof
          return readPrecedingKeyword(pos - 4, 'ty');
        default:
          return false;
      }
    case 110/*n*/:
      // in, return
      return readPrecedingKeyword1(pos - 1, 105/*i*/) || readPrecedingKeyword(pos - 1, 'retur');
    case 111/*o*/:
      // do
      return readPrecedingKeyword1(pos - 1, 100/*d*/);
    case 114/*r*/:
      // debugger
      return readPrecedingKeyword(pos - 1, 'debugge');
    case 116/*t*/:
      // await
      return readPrecedingKeyword(pos - 1, 'awai');
    case 119/*w*/:
      switch (source.charCodeAt(pos - 1)) {
        case 101/*e*/:
          // new
          return readPrecedingKeyword1(pos - 2, 110/*n*/);
        case 111/*o*/:
          // throw
          return readPrecedingKeyword(pos - 2, 'thr');
        default:
          return false;
      }
  }
  return false;
}

function isParenKeyword (curPos) {
  return source.charCodeAt(curPos) === 101/*e*/ && source.startsWith('whil', curPos - 4) ||
      source.charCodeAt(curPos) === 114/*r*/ && source.startsWith('fo', curPos - 2) ||
      source.charCodeAt(curPos - 1) === 105/*i*/ && source.charCodeAt(curPos) === 102/*f*/;
}

function isPunctuator (ch) {
  // 23 possible punctuator endings: !%&()*+,-./:;<=>?[]^{}|~
  return ch === 33/*!*/ || ch === 37/*%*/ || ch === 38/*&*/ ||
    ch > 39 && ch < 48 || ch > 57 && ch < 64 ||
    ch === 91/*[*/ || ch === 93/*]*/ || ch === 94/*^*/ ||
    ch > 122 && ch < 127;
}

function isExpressionPunctuator (ch) {
  // 20 possible expression endings: !%&(*+,-.:;<=>?[^{|~
  return ch === 33/*!*/ || ch === 37/*%*/ || ch === 38/*&*/ ||
    ch > 39 && ch < 47 && ch !== 41 || ch > 57 && ch < 64 ||
    ch === 91/*[*/ || ch === 94/*^*/ || ch > 122 && ch < 127 && ch !== 125/*}*/;
}

function isExpressionTerminator (curPos) {
  // detects:
  // => ; ) finally catch else
  // as all of these followed by a { will indicate a statement brace
  switch (source.charCodeAt(curPos)) {
    case 62/*>*/:
      return source.charCodeAt(curPos - 1) === 61/*=*/;
    case 59/*;*/:
    case 41/*)*/:
      return true;
    case 104/*h*/:
      return source.startsWith('catc', curPos - 4);
    case 121/*y*/:
      return source.startsWith('finall', curPos - 6);
    case 101/*e*/:
      return source.startsWith('els', curPos - 3);
  }
  return false;
}

const initPromise = Promise.resolve();

module.exports.init = () => initPromise;
module.exports.initSync = () => {};
module.exports.parse = parseCJS;


---

File name: node_modules\cjs-module-lexer\package.json

Code:
{
  "name": "cjs-module-lexer",
  "version": "1.4.3",
  "description": "Lexes CommonJS modules, returning their named exports metadata",
  "main": "lexer.js",
  "exports": {
    "import": {
      "types": "./lexer.d.mts",
      "default": "./dist/lexer.mjs"
    },
    "default": "./lexer.js"
  },
  "types": "lexer.d.ts",
  "scripts": {
    "test-js": "mocha -b -u tdd test/*.js",
    "test-wasm": "cross-env WASM=1 mocha -b -u tdd test/*.js",
    "test-wasm-sync": "cross-env WASM_SYNC=1 mocha -b -u tdd test/*.js",
    "test": "npm run test-wasm ; npm run test-wasm-sync ; npm run test-js",
    "bench": "node --expose-gc bench/index.mjs",
    "build": "node build.js ; babel dist/lexer.mjs -o dist/lexer.js ; terser dist/lexer.js -o dist/lexer.js",
    "build-wasm": "make lib/lexer.wasm ; node build.js",
    "prepublishOnly": "make && npm run build",
    "footprint": "npm run build && cat dist/lexer.js | gzip -9f | wc -c"
  },
  "author": "Guy Bedford",
  "license": "MIT",
  "devDependencies": {
    "@babel/cli": "^7.5.5",
    "@babel/core": "^7.5.5",
    "@babel/plugin-transform-modules-commonjs": "^7.5.0",
    "cross-env": "^7.0.3",
    "kleur": "^2.0.2",
    "mocha": "^9.1.3",
    "terser": "^4.1.4"
  },
  "files": [
    "dist",
    "lexer.d.ts"
  ],
  "repository": {
    "type": "git",
    "url": "git+https://github.com/nodejs/cjs-module-lexer.git"
  },
  "bugs": {
    "url": "https://github.com/nodejs/cjs-module-lexer/issues"
  },
  "homepage": "https://github.com/nodejs/cjs-module-lexer#readme"
}


---

File name: node_modules\cjs-module-lexer\README.md

Code:
# CJS Module Lexer

[![Build Status][travis-image]][travis-url]

A [very fast](#benchmarks) JS CommonJS module syntax lexer used to detect the most likely list of named exports of a CommonJS module.

Outputs the list of named exports (`exports.name = ...`) and possible module reexports (`module.exports = require('...')`), including the common transpiler variations of these cases.

Forked from https://github.com/guybedford/es-module-lexer.

_Comprehensively handles the JS language grammar while remaining small and fast. - ~90ms per MB of JS cold and ~15ms per MB of JS warm, [see benchmarks](#benchmarks) for more info._

### Project Status

This project is used in Node.js core for detecting the named exports available when importing a CJS module into ESM, and is maintained for this purpose.

PRs will be accepted and upstreamed for parser bugs, performance improvements or new syntax support only.

_Detection patterns for this project are **frozen**_. This is because adding any new export detection patterns would result in fragmented backwards-compatibility. Specifically, it would be very difficult to figure out why an ES module named export for CommonJS might work in newer Node.js versions but not older versions. This problem would only be discovered downstream of module authors, with the fix for module authors being to then have to understand which patterns in this project provide full backwards-compatibily. Rather, by fully freezing the detected patterns, if it works in any Node.js version it will work in any other. Build tools can also reliably treat the supported syntax for this project as a part of their output target for ensuring syntax support.

### Usage

```
npm install cjs-module-lexer
```

For use in CommonJS:

```js
const { parse } = require('cjs-module-lexer');

// `init` return a promise for parity with the ESM API, but you do not have to call it

const { exports, reexports } = parse(`
  // named exports detection
  module.exports.a = 'a';
  (function () {
    exports.b = 'b';
  })();
  Object.defineProperty(exports, 'c', { value: 'c' });
  /* exports.d = 'not detected'; */

  // reexports detection
  if (maybe) module.exports = require('./dep1.js');
  if (another) module.exports = require('./dep2.js');

  // literal exports assignments
  module.exports = { a, b: c, d, 'e': f }

  // __esModule detection
  Object.defineProperty(module.exports, '__esModule', { value: true })
`);

// exports === ['a', 'b', 'c', '__esModule']
// reexports === ['./dep1.js', './dep2.js']
```

When using the ESM version, Wasm is supported instead:

```js
import { parse, init } from 'cjs-module-lexer';
// init() needs to be called and waited upon, or use initSync() to compile
// Wasm blockingly and synchronously.
await init();
const { exports, reexports } = parse(source);
```

The Wasm build is around 1.5x faster and without a cold start.

### Grammar

CommonJS exports matches are run against the source token stream.

The token grammar is:

```
IDENTIFIER: As defined by ECMA-262, without support for identifier `\` escapes, filtered to remove strict reserved words:
            "implements", "interface", "let", "package", "private", "protected", "public", "static", "yield", "enum"

STRING_LITERAL: A `"` or `'` bounded ECMA-262 string literal.

MODULE_EXPORTS: `module` `.` `exports`

EXPORTS_IDENTIFIER: MODULE_EXPORTS_IDENTIFIER | `exports`

EXPORTS_DOT_ASSIGN: EXPORTS_IDENTIFIER `.` IDENTIFIER `=`

EXPORTS_LITERAL_COMPUTED_ASSIGN: EXPORTS_IDENTIFIER `[` STRING_LITERAL `]` `=`

EXPORTS_LITERAL_PROP: (IDENTIFIER  (`:` IDENTIFIER)?) | (STRING_LITERAL `:` IDENTIFIER)

EXPORTS_SPREAD: `...` (IDENTIFIER | REQUIRE)

EXPORTS_MEMBER: EXPORTS_DOT_ASSIGN | EXPORTS_LITERAL_COMPUTED_ASSIGN

EXPORTS_DEFINE: `Object` `.` `defineProperty `(` EXPORTS_IDENFITIER `,` STRING_LITERAL

EXPORTS_DEFINE_VALUE: EXPORTS_DEFINE `, {`
  (`enumerable: true,`)?
  (
    `value:` |
    `get` (`: function` IDENTIFIER? )?  `() {` return IDENTIFIER (`.` IDENTIFIER | `[` STRING_LITERAL `]`)? `;`? `}` `,`?
  )
  `})`

EXPORTS_LITERAL: MODULE_EXPORTS `=` `{` (EXPORTS_LITERAL_PROP | EXPORTS_SPREAD) `,`)+ `}`

REQUIRE: `require` `(` STRING_LITERAL `)`

EXPORTS_ASSIGN: (`var` | `const` | `let`) IDENTIFIER `=` (`_interopRequireWildcard (`)? REQUIRE

MODULE_EXPORTS_ASSIGN: MODULE_EXPORTS `=` REQUIRE

EXPORT_STAR: (`__export` | `__exportStar`) `(` REQUIRE

EXPORT_STAR_LIB: `Object.keys(` IDENTIFIER$1 `).forEach(function (` IDENTIFIER$2 `) {`
  (
    (
      `if (` IDENTIFIER$2 `===` ( `'default'` | `"default"` ) `||` IDENTIFIER$2 `===` ( '__esModule' | `"__esModule"` ) `) return` `;`?
      (
        (`if (Object` `.prototype`? `.hasOwnProperty.call(`  IDENTIFIER `, ` IDENTIFIER$2 `)) return` `;`?)?
        (`if (` IDENTIFIER$2 `in` EXPORTS_IDENTIFIER `&&` EXPORTS_IDENTIFIER `[` IDENTIFIER$2 `] ===` IDENTIFIER$1 `[` IDENTIFIER$2 `]) return` `;`)?
      )?
    ) |
    `if (` IDENTIFIER$2 `!==` ( `'default'` | `"default"` ) (`&& !` (`Object` `.prototype`? `.hasOwnProperty.call(`  IDENTIFIER `, ` IDENTIFIER$2 `)` | IDENTIFIER `.hasOwnProperty(` IDENTIFIER$2 `)`))? `)`
  )
  (
    EXPORTS_IDENTIFIER `[` IDENTIFIER$2 `] =` IDENTIFIER$1 `[` IDENTIFIER$2 `]` `;`? |
    `Object.defineProperty(` EXPORTS_IDENTIFIER `, ` IDENTIFIER$2 `, { enumerable: true, get` (`: function` IDENTIFIER? )?  `() { return ` IDENTIFIER$1 `[` IDENTIFIER$2 `]` `;`? `}` `,`? `})` `;`?
  )
  `})`
```

Spacing between tokens is taken to be any ECMA-262 whitespace, ECMA-262 block comment or ECMA-262 line comment.

* The returned export names are taken to be the combination of:
  1. All `IDENTIFIER` and `STRING_LITERAL` slots for `EXPORTS_MEMBER` and `EXPORTS_LITERAL` matches.
  2. The first `STRING_LITERAL` slot for all `EXPORTS_DEFINE_VALUE` matches where that same string is not an `EXPORTS_DEFINE` match that is not also an `EXPORTS_DEFINE_VALUE` match.
* The reexport specifiers are taken to be the combination of:
  1. The `REQUIRE` matches of the last matched of either `MODULE_EXPORTS_ASSIGN` or `EXPORTS_LITERAL`.
  2. All _top-level_ `EXPORT_STAR` `REQUIRE` matches and `EXPORTS_ASSIGN` matches whose `IDENTIFIER` also matches the first `IDENTIFIER` in `EXPORT_STAR_LIB`.

### Parsing Examples

#### Named Exports Parsing

The basic matching rules for named exports are `exports.name`, `exports['name']` or `Object.defineProperty(exports, 'name', ...)`. This matching is done without scope analysis and regardless of the expression position:

```js
// DETECTS EXPORTS: a, b
(function (exports) {
  exports.a = 'a'; 
  exports['b'] = 'b';
})(exports);
```

Because there is no scope analysis, the above detection may overclassify:

```js
// DETECTS EXPORTS: a, b, c
(function (exports, Object) {
  exports.a = 'a';
  exports['b'] = 'b';
  if (false)
    exports.c = 'c';
})(NOT_EXPORTS, NOT_OBJECT);
```

It will in turn underclassify in cases where the identifiers are renamed:

```js
// DETECTS: NO EXPORTS
(function (e) {
  e.a = 'a';
  e['b'] = 'b';
})(exports);
```

#### Getter Exports Parsing

`Object.defineProperty` is detected for specifically value and getter forms returning an identifier or member expression:

```js
// DETECTS: a, b, c, d, __esModule
Object.defineProperty(exports, 'a', {
  enumerable: true,
  get: function () {
    return q.p;
  }
});
Object.defineProperty(exports, 'b', {
  enumerable: true,
  get: function () {
    return q['p'];
  }
});
Object.defineProperty(exports, 'c', {
  enumerable: true,
  get () {
    return b;
  }
});
Object.defineProperty(exports, 'd', { value: 'd' });
Object.defineProperty(exports, '__esModule', { value: true });
```

Value properties are also detected specifically:

```js
Object.defineProperty(exports, 'a', {
  value: 'no problem'
});
```

To avoid matching getters that have side effects, any getter for an export name that does not support the forms above will
opt-out of the getter matching:

```js
// DETECTS: NO EXPORTS
Object.defineProperty(exports, 'a', {
  get () {
    return 'nope';
  }
});

if (false) {
  Object.defineProperty(module.exports, 'a', {
    get () {
      return dynamic();
    }
  })
}
```

Alternative object definition structures or getter function bodies are not detected:

```js
// DETECTS: NO EXPORTS
Object.defineProperty(exports, 'a', {
  enumerable: false,
  get () {
    return p;
  }
});
Object.defineProperty(exports, 'b', {
  configurable: true,
  get () {
    return p;
  }
});
Object.defineProperty(exports, 'c', {
  get: () => p
});
Object.defineProperty(exports, 'd', {
  enumerable: true,
  get: function () {
    return dynamic();
  }
});
Object.defineProperty(exports, 'e', {
  enumerable: true,
  get () {
    return 'str';
  }
});
```

`Object.defineProperties` is also not supported.

#### Exports Object Assignment

A best-effort is made to detect `module.exports` object assignments, but because this is not a full parser, arbitrary expressions are not handled in the
object parsing process.

Simple object definitions are supported:

```js
// DETECTS EXPORTS: a, b, c
module.exports = {
  a,
  'b': b,
  c: c,
  ...d
};
```

Object properties that are not identifiers or string expressions will bail out of the object detection, while spreads are ignored:

```js
// DETECTS EXPORTS: a, b
module.exports = {
  a,
  ...d,
  b: require('c'),
  c: "not detected since require('c') above bails the object detection"
}
```

`Object.defineProperties` is not currently supported either.

#### module.exports reexport assignment

Any `module.exports = require('mod')` assignment is detected as a reexport, but only the last one is returned:

```js
// DETECTS REEXPORTS: c
module.exports = require('a');
(module => module.exports = require('b'))(NOT_MODULE);
if (false) module.exports = require('c');
```

This is to avoid over-classification in Webpack bundles with externals which include `module.exports = require('external')` in their source for every external dependency.

In exports object assignment, any spread of `require()` are detected as multiple separate reexports:

```js
// DETECTS REEXPORTS: a, b
module.exports = require('ignored');
module.exports = {
  ...require('a'),
  ...require('b')
};
```

#### Transpiler Re-exports

For named exports, transpiler output works well with the rules described above.

But for star re-exports, special care is taken to support common patterns of transpiler outputs from Babel and TypeScript as well as bundlers like RollupJS.
These reexport and star reexport patterns are restricted to only be detected at the top-level as provided by the direct output of these tools.

For example, `export * from 'external'` is output by Babel as:

```js
"use strict";

exports.__esModule = true;

var _external = require("external");

Object.keys(_external).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  exports[key] = _external[key];
});
```

Where the `var _external = require("external")` is specifically detected as well as the `Object.keys(_external)` statement, down to the exact
for of that entire expression including minor variations of the output. The `_external` and `key` identifiers are carefully matched in this
detection.

Similarly for TypeScript, `export * from 'external'` is output as:

```js
"use strict";
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(require("external"));
```

Where the `__export(require("external"))` statement is explicitly detected as a reexport, including variations `tslib.__export` and `__exportStar`.

### Environment Support

Node.js 10+, and [all browsers with Web Assembly support](https://caniuse.com/#feat=wasm).

### JS Grammar Support

* Token state parses all line comments, block comments, strings, template strings, blocks, parens and punctuators.
* Division operator / regex token ambiguity is handled via backtracking checks against punctuator prefixes, including closing brace or paren backtracking.
* Always correctly parses valid JS source, but may parse invalid JS source without errors.

### Benchmarks

Benchmarks can be run with `npm run bench`.

Current results:

JS Build:

```
Module load time
> 4ms
Cold Run, All Samples
test/samples/*.js (3635 KiB)
> 299ms

Warm Runs (average of 25 runs)
test/samples/angular.js (1410 KiB)
> 13.96ms
test/samples/angular.min.js (303 KiB)
> 4.72ms
test/samples/d3.js (553 KiB)
> 6.76ms
test/samples/d3.min.js (250 KiB)
> 4ms
test/samples/magic-string.js (34 KiB)
> 0.64ms
test/samples/magic-string.min.js (20 KiB)
> 0ms
test/samples/rollup.js (698 KiB)
> 8.48ms
test/samples/rollup.min.js (367 KiB)
> 5.36ms

Warm Runs, All Samples (average of 25 runs)
test/samples/*.js (3635 KiB)
> 40.28ms
```

Wasm Build:
```
Module load time
> 10ms
Cold Run, All Samples
test/samples/*.js (3635 KiB)
> 43ms

Warm Runs (average of 25 runs)
test/samples/angular.js (1410 KiB)
> 9.32ms
test/samples/angular.min.js (303 KiB)
> 3.16ms
test/samples/d3.js (553 KiB)
> 5ms
test/samples/d3.min.js (250 KiB)
> 2.32ms
test/samples/magic-string.js (34 KiB)
> 0.16ms
test/samples/magic-string.min.js (20 KiB)
> 0ms
test/samples/rollup.js (698 KiB)
> 6.28ms
test/samples/rollup.min.js (367 KiB)
> 3.6ms

Warm Runs, All Samples (average of 25 runs)
test/samples/*.js (3635 KiB)
> 27.76ms
```

### Wasm Build Steps

To build download the WASI SDK from https://github.com/WebAssembly/wasi-sdk/releases.

The Makefile assumes the existence of "wasi-sdk-11.0" and "wabt" (optional) as sibling folders to this project.

The build through the Makefile is then run via `make lib/lexer.wasm`, which can also be triggered via `npm run build-wasm` to create `dist/lexer.js`.

On Windows it may be preferable to use the Linux subsystem.

After the Web Assembly build, the CJS build can be triggered via `npm run build`.

Optimization passes are run with [Binaryen](https://github.com/WebAssembly/binaryen) prior to publish to reduce the Web Assembly footprint.

### License

MIT

[travis-url]: https://travis-ci.org/guybedford/es-module-lexer
[travis-image]: https://travis-ci.org/guybedford/es-module-lexer.svg?branch=master


---

File name: node_modules\cliui\build\lib\index.js

Code:
'use strict';
const align = {
    right: alignRight,
    center: alignCenter
};
const top = 0;
const right = 1;
const bottom = 2;
const left = 3;
export class UI {
    constructor(opts) {
        var _a;
        this.width = opts.width;
        this.wrap = (_a = opts.wrap) !== null && _a !== void 0 ? _a : true;
        this.rows = [];
    }
    span(...args) {
        const cols = this.div(...args);
        cols.span = true;
    }
    resetOutput() {
        this.rows = [];
    }
    div(...args) {
        if (args.length === 0) {
            this.div('');
        }
        if (this.wrap && this.shouldApplyLayoutDSL(...args) && typeof args[0] === 'string') {
            return this.applyLayoutDSL(args[0]);
        }
        const cols = args.map(arg => {
            if (typeof arg === 'string') {
                return this.colFromString(arg);
            }
            return arg;
        });
        this.rows.push(cols);
        return cols;
    }
    shouldApplyLayoutDSL(...args) {
        return args.length === 1 && typeof args[0] === 'string' &&
            /[\t\n]/.test(args[0]);
    }
    applyLayoutDSL(str) {
        const rows = str.split('\n').map(row => row.split('\t'));
        let leftColumnWidth = 0;
        // simple heuristic for layout, make sure the
        // second column lines up along the left-hand.
        // don't allow the first column to take up more
        // than 50% of the screen.
        rows.forEach(columns => {
            if (columns.length > 1 && mixin.stringWidth(columns[0]) > leftColumnWidth) {
                leftColumnWidth = Math.min(Math.floor(this.width * 0.5), mixin.stringWidth(columns[0]));
            }
        });
        // generate a table:
        //  replacing ' ' with padding calculations.
        //  using the algorithmically generated width.
        rows.forEach(columns => {
            this.div(...columns.map((r, i) => {
                return {
                    text: r.trim(),
                    padding: this.measurePadding(r),
                    width: (i === 0 && columns.length > 1) ? leftColumnWidth : undefined
                };
            }));
        });
        return this.rows[this.rows.length - 1];
    }
    colFromString(text) {
        return {
            text,
            padding: this.measurePadding(text)
        };
    }
    measurePadding(str) {
        // measure padding without ansi escape codes
        const noAnsi = mixin.stripAnsi(str);
        return [0, noAnsi.match(/\s*$/)[0].length, 0, noAnsi.match(/^\s*/)[0].length];
    }
    toString() {
        const lines = [];
        this.rows.forEach(row => {
            this.rowToString(row, lines);
        });
        // don't display any lines with the
        // hidden flag set.
        return lines
            .filter(line => !line.hidden)
            .map(line => line.text)
            .join('\n');
    }
    rowToString(row, lines) {
        this.rasterize(row).forEach((rrow, r) => {
            let str = '';
            rrow.forEach((col, c) => {
                const { width } = row[c]; // the width with padding.
                const wrapWidth = this.negatePadding(row[c]); // the width without padding.
                let ts = col; // temporary string used during alignment/padding.
                if (wrapWidth > mixin.stringWidth(col)) {
                    ts += ' '.repeat(wrapWidth - mixin.stringWidth(col));
                }
                // align the string within its column.
                if (row[c].align && row[c].align !== 'left' && this.wrap) {
                    const fn = align[row[c].align];
                    ts = fn(ts, wrapWidth);
                    if (mixin.stringWidth(ts) < wrapWidth) {
                        ts += ' '.repeat((width || 0) - mixin.stringWidth(ts) - 1);
                    }
                }
                // apply border and padding to string.
                const padding = row[c].padding || [0, 0, 0, 0];
                if (padding[left]) {
                    str += ' '.repeat(padding[left]);
                }
                str += addBorder(row[c], ts, '| ');
                str += ts;
                str += addBorder(row[c], ts, ' |');
                if (padding[right]) {
                    str += ' '.repeat(padding[right]);
                }
                // if prior row is span, try to render the
                // current row on the prior line.
                if (r === 0 && lines.length > 0) {
                    str = this.renderInline(str, lines[lines.length - 1]);
                }
            });
            // remove trailing whitespace.
            lines.push({
                text: str.replace(/ +$/, ''),
                span: row.span
            });
        });
        return lines;
    }
    // if the full 'source' can render in
    // the target line, do so.
    renderInline(source, previousLine) {
        const match = source.match(/^ */);
        const leadingWhitespace = match ? match[0].length : 0;
        const target = previousLine.text;
        const targetTextWidth = mixin.stringWidth(target.trimRight());
        if (!previousLine.span) {
            return source;
        }
        // if we're not applying wrapping logic,
        // just always append to the span.
        if (!this.wrap) {
            previousLine.hidden = true;
            return target + source;
        }
        if (leadingWhitespace < targetTextWidth) {
            return source;
        }
        previousLine.hidden = true;
        return target.trimRight() + ' '.repeat(leadingWhitespace - targetTextWidth) + source.trimLeft();
    }
    rasterize(row) {
        const rrows = [];
        const widths = this.columnWidths(row);
        let wrapped;
        // word wrap all columns, and create
        // a data-structure that is easy to rasterize.
        row.forEach((col, c) => {
            // leave room for left and right padding.
            col.width = widths[c];
            if (this.wrap) {
                wrapped = mixin.wrap(col.text, this.negatePadding(col), { hard: true }).split('\n');
            }
            else {
                wrapped = col.text.split('\n');
            }
            if (col.border) {
                wrapped.unshift('.' + '-'.repeat(this.negatePadding(col) + 2) + '.');
                wrapped.push("'" + '-'.repeat(this.negatePadding(col) + 2) + "'");
            }
            // add top and bottom padding.
            if (col.padding) {
                wrapped.unshift(...new Array(col.padding[top] || 0).fill(''));
                wrapped.push(...new Array(col.padding[bottom] || 0).fill(''));
            }
            wrapped.forEach((str, r) => {
                if (!rrows[r]) {
                    rrows.push([]);
                }
                const rrow = rrows[r];
                for (let i = 0; i < c; i++) {
                    if (rrow[i] === undefined) {
                        rrow.push('');
                    }
                }
                rrow.push(str);
            });
        });
        return rrows;
    }
    negatePadding(col) {
        let wrapWidth = col.width || 0;
        if (col.padding) {
            wrapWidth -= (col.padding[left] || 0) + (col.padding[right] || 0);
        }
        if (col.border) {
            wrapWidth -= 4;
        }
        return wrapWidth;
    }
    columnWidths(row) {
        if (!this.wrap) {
            return row.map(col => {
                return col.width || mixin.stringWidth(col.text);
            });
        }
        let unset = row.length;
        let remainingWidth = this.width;
        // column widths can be set in config.
        const widths = row.map(col => {
            if (col.width) {
                unset--;
                remainingWidth -= col.width;
                return col.width;
            }
            return undefined;
        });
        // any unset widths should be calculated.
        const unsetWidth = unset ? Math.floor(remainingWidth / unset) : 0;
        return widths.map((w, i) => {
            if (w === undefined) {
                return Math.max(unsetWidth, _minWidth(row[i]));
            }
            return w;
        });
    }
}
function addBorder(col, ts, style) {
    if (col.border) {
        if (/[.']-+[.']/.test(ts)) {
            return '';
        }
        if (ts.trim().length !== 0) {
            return style;
        }
        return '  ';
    }
    return '';
}
// calculates the minimum width of
// a column, based on padding preferences.
function _minWidth(col) {
    const padding = col.padding || [];
    const minWidth = 1 + (padding[left] || 0) + (padding[right] || 0);
    if (col.border) {
        return minWidth + 4;
    }
    return minWidth;
}
function getWindowWidth() {
    /* istanbul ignore next: depends on terminal */
    if (typeof process === 'object' && process.stdout && process.stdout.columns) {
        return process.stdout.columns;
    }
    return 80;
}
function alignRight(str, width) {
    str = str.trim();
    const strWidth = mixin.stringWidth(str);
    if (strWidth < width) {
        return ' '.repeat(width - strWidth) + str;
    }
    return str;
}
function alignCenter(str, width) {
    str = str.trim();
    const strWidth = mixin.stringWidth(str);
    /* istanbul ignore next */
    if (strWidth >= width) {
        return str;
    }
    return ' '.repeat((width - strWidth) >> 1) + str;
}
let mixin;
export function cliui(opts, _mixin) {
    mixin = _mixin;
    return new UI({
        width: (opts === null || opts === void 0 ? void 0 : opts.width) || getWindowWidth(),
        wrap: opts === null || opts === void 0 ? void 0 : opts.wrap
    });
}


---

File name: node_modules\cliui\build\lib\string-utils.js

Code:
// Minimal replacement for ansi string helpers "wrap-ansi" and "strip-ansi".
// to facilitate ESM and Deno modules.
// TODO: look at porting https://www.npmjs.com/package/wrap-ansi to ESM.
// The npm application
// Copyright (c) npm, Inc. and Contributors
// Licensed on the terms of The Artistic License 2.0
// See: https://github.com/npm/cli/blob/4c65cd952bc8627811735bea76b9b110cc4fc80e/lib/utils/ansi-trim.js
const ansi = new RegExp('\x1b(?:\\[(?:\\d+[ABCDEFGJKSTm]|\\d+;\\d+[Hfm]|' +
    '\\d+;\\d+;\\d+m|6n|s|u|\\?25[lh])|\\w)', 'g');
export function stripAnsi(str) {
    return str.replace(ansi, '');
}
export function wrap(str, width) {
    const [start, end] = str.match(ansi) || ['', ''];
    str = stripAnsi(str);
    let wrapped = '';
    for (let i = 0; i < str.length; i++) {
        if (i !== 0 && (i % width) === 0) {
            wrapped += '\n';
        }
        wrapped += str.charAt(i);
    }
    if (start && end) {
        wrapped = `${start}${wrapped}${end}`;
    }
    return wrapped;
}


---

File name: node_modules\cliui\CHANGELOG.md

Code:
# Change Log

All notable changes to this project will be documented in this file. See [standard-version](https://github.com/conventional-changelog/standard-version) for commit guidelines.

## [8.0.1](https://github.com/yargs/cliui/compare/v8.0.0...v8.0.1) (2022-10-01)


### Bug Fixes

* **deps:** move rollup-plugin-ts to dev deps ([#124](https://github.com/yargs/cliui/issues/124)) ([7c8bd6b](https://github.com/yargs/cliui/commit/7c8bd6ba024d61e4eeae310c7959ab8ab6829081))

## [8.0.0](https://github.com/yargs/cliui/compare/v7.0.4...v8.0.0) (2022-09-30)


### ⚠ BREAKING CHANGES

* **deps:** drop Node 10 to release CVE-2021-3807 patch (#122)

### Bug Fixes

* **deps:** drop Node 10 to release CVE-2021-3807 patch ([#122](https://github.com/yargs/cliui/issues/122)) ([f156571](https://github.com/yargs/cliui/commit/f156571ce4f2ebf313335e3a53ad905589da5a30))

### [7.0.4](https://www.github.com/yargs/cliui/compare/v7.0.3...v7.0.4) (2020-11-08)


### Bug Fixes

* **deno:** import UIOptions from definitions ([#97](https://www.github.com/yargs/cliui/issues/97)) ([f04f343](https://www.github.com/yargs/cliui/commit/f04f3439bc78114c7e90f82ff56f5acf16268ea8))

### [7.0.3](https://www.github.com/yargs/cliui/compare/v7.0.2...v7.0.3) (2020-10-16)


### Bug Fixes

* **exports:** node 13.0 and 13.1 require the dotted object form _with_ a string fallback ([#93](https://www.github.com/yargs/cliui/issues/93)) ([eca16fc](https://www.github.com/yargs/cliui/commit/eca16fc05d26255df3280906c36d7f0e5b05c6e9))

### [7.0.2](https://www.github.com/yargs/cliui/compare/v7.0.1...v7.0.2) (2020-10-14)


### Bug Fixes

* **exports:** node 13.0-13.6 require a string fallback ([#91](https://www.github.com/yargs/cliui/issues/91)) ([b529d7e](https://www.github.com/yargs/cliui/commit/b529d7e432901af1af7848b23ed6cf634497d961))

### [7.0.1](https://www.github.com/yargs/cliui/compare/v7.0.0...v7.0.1) (2020-08-16)


### Bug Fixes

* **build:** main should be build/index.cjs ([dc29a3c](https://www.github.com/yargs/cliui/commit/dc29a3cc617a410aa850e06337b5954b04f2cb4d))

## [7.0.0](https://www.github.com/yargs/cliui/compare/v6.0.0...v7.0.0) (2020-08-16)


### ⚠ BREAKING CHANGES

* tsc/ESM/Deno support (#82)
* modernize deps and build (#80)

### Build System

* modernize deps and build ([#80](https://www.github.com/yargs/cliui/issues/80)) ([339d08d](https://www.github.com/yargs/cliui/commit/339d08dc71b15a3928aeab09042af94db2f43743))


### Code Refactoring

* tsc/ESM/Deno support ([#82](https://www.github.com/yargs/cliui/issues/82)) ([4b777a5](https://www.github.com/yargs/cliui/commit/4b777a5fe01c5d8958c6708695d6aab7dbe5706c))

## [6.0.0](https://www.github.com/yargs/cliui/compare/v5.0.0...v6.0.0) (2019-11-10)


### ⚠ BREAKING CHANGES

* update deps, drop Node 6

### Code Refactoring

* update deps, drop Node 6 ([62056df](https://www.github.com/yargs/cliui/commit/62056df))

## [5.0.0](https://github.com/yargs/cliui/compare/v4.1.0...v5.0.0) (2019-04-10)


### Bug Fixes

* Update wrap-ansi to fix compatibility with latest versions of chalk. ([#60](https://github.com/yargs/cliui/issues/60)) ([7bf79ae](https://github.com/yargs/cliui/commit/7bf79ae))


### BREAKING CHANGES

* Drop support for node < 6.



<a name="4.1.0"></a>
## [4.1.0](https://github.com/yargs/cliui/compare/v4.0.0...v4.1.0) (2018-04-23)


### Features

* add resetOutput method ([#57](https://github.com/yargs/cliui/issues/57)) ([7246902](https://github.com/yargs/cliui/commit/7246902))



<a name="4.0.0"></a>
## [4.0.0](https://github.com/yargs/cliui/compare/v3.2.0...v4.0.0) (2017-12-18)


### Bug Fixes

* downgrades strip-ansi to version 3.0.1 ([#54](https://github.com/yargs/cliui/issues/54)) ([5764c46](https://github.com/yargs/cliui/commit/5764c46))
* set env variable FORCE_COLOR. ([#56](https://github.com/yargs/cliui/issues/56)) ([7350e36](https://github.com/yargs/cliui/commit/7350e36))


### Chores

* drop support for node < 4 ([#53](https://github.com/yargs/cliui/issues/53)) ([b105376](https://github.com/yargs/cliui/commit/b105376))


### Features

* add fallback for window width ([#45](https://github.com/yargs/cliui/issues/45)) ([d064922](https://github.com/yargs/cliui/commit/d064922))


### BREAKING CHANGES

* officially drop support for Node < 4



<a name="3.2.0"></a>
## [3.2.0](https://github.com/yargs/cliui/compare/v3.1.2...v3.2.0) (2016-04-11)


### Bug Fixes

* reduces tarball size ([acc6c33](https://github.com/yargs/cliui/commit/acc6c33))

### Features

* adds standard-version for release management ([ff84e32](https://github.com/yargs/cliui/commit/ff84e32))


---

File name: node_modules\cliui\LICENSE.txt

Code:
Copyright (c) 2015, Contributors

Permission to use, copy, modify, and/or distribute this software
for any purpose with or without fee is hereby granted, provided
that the above copyright notice and this permission notice
appear in all copies.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE
LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES
OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.


---

File name: node_modules\cliui\package.json

Code:
{
  "name": "cliui",
  "version": "8.0.1",
  "description": "easily create complex multi-column command-line-interfaces",
  "main": "build/index.cjs",
  "exports": {
    ".": [
      {
        "import": "./index.mjs",
        "require": "./build/index.cjs"
      },
      "./build/index.cjs"
    ]
  },
  "type": "module",
  "module": "./index.mjs",
  "scripts": {
    "check": "standardx '**/*.ts' && standardx '**/*.js' && standardx '**/*.cjs'",
    "fix": "standardx --fix '**/*.ts' && standardx --fix '**/*.js' && standardx --fix '**/*.cjs'",
    "pretest": "rimraf build && tsc -p tsconfig.test.json && cross-env NODE_ENV=test npm run build:cjs",
    "test": "c8 mocha ./test/*.cjs",
    "test:esm": "c8 mocha ./test/esm/cliui-test.mjs",
    "postest": "check",
    "coverage": "c8 report --check-coverage",
    "precompile": "rimraf build",
    "compile": "tsc",
    "postcompile": "npm run build:cjs",
    "build:cjs": "rollup -c",
    "prepare": "npm run compile"
  },
  "repository": "yargs/cliui",
  "standard": {
    "ignore": [
      "**/example/**"
    ],
    "globals": [
      "it"
    ]
  },
  "keywords": [
    "cli",
    "command-line",
    "layout",
    "design",
    "console",
    "wrap",
    "table"
  ],
  "author": "Ben Coe <ben@npmjs.com>",
  "license": "ISC",
  "dependencies": {
    "string-width": "^4.2.0",
    "strip-ansi": "^6.0.1",
    "wrap-ansi": "^7.0.0"
  },
  "devDependencies": {
    "@types/node": "^14.0.27",
    "@typescript-eslint/eslint-plugin": "^4.0.0",
    "@typescript-eslint/parser": "^4.0.0",
    "c8": "^7.3.0",
    "chai": "^4.2.0",
    "chalk": "^4.1.0",
    "cross-env": "^7.0.2",
    "eslint": "^7.6.0",
    "eslint-plugin-import": "^2.22.0",
    "eslint-plugin-node": "^11.1.0",
    "gts": "^3.0.0",
    "mocha": "^10.0.0",
    "rimraf": "^3.0.2",
    "rollup": "^2.23.1",
    "rollup-plugin-ts": "^3.0.2",
    "standardx": "^7.0.0",
    "typescript": "^4.0.0"
  },
  "files": [
    "build",
    "index.mjs",
    "!*.d.ts"
  ],
  "engines": {
    "node": ">=12"
  }
}


---

File name: node_modules\cliui\README.md

Code:
# cliui

![ci](https://github.com/yargs/cliui/workflows/ci/badge.svg)
[![NPM version](https://img.shields.io/npm/v/cliui.svg)](https://www.npmjs.com/package/cliui)
[![Conventional Commits](https://img.shields.io/badge/Conventional%20Commits-1.0.0-yellow.svg)](https://conventionalcommits.org)
![nycrc config on GitHub](https://img.shields.io/nycrc/yargs/cliui)

easily create complex multi-column command-line-interfaces.

## Example

```js
const ui = require('cliui')()

ui.div('Usage: $0 [command] [options]')

ui.div({
  text: 'Options:',
  padding: [2, 0, 1, 0]
})

ui.div(
  {
    text: "-f, --file",
    width: 20,
    padding: [0, 4, 0, 4]
  },
  {
    text: "the file to load." +
      chalk.green("(if this description is long it wraps).")
    ,
    width: 20
  },
  {
    text: chalk.red("[required]"),
    align: 'right'
  }
)

console.log(ui.toString())
```

## Deno/ESM Support

As of `v7` `cliui` supports [Deno](https://github.com/denoland/deno) and
[ESM](https://nodejs.org/api/esm.html#esm_ecmascript_modules):

```typescript
import cliui from "https://deno.land/x/cliui/deno.ts";

const ui = cliui({})

ui.div('Usage: $0 [command] [options]')

ui.div({
  text: 'Options:',
  padding: [2, 0, 1, 0]
})

ui.div({
  text: "-f, --file",
  width: 20,
  padding: [0, 4, 0, 4]
})

console.log(ui.toString())
```

<img width="500" src="screenshot.png">

## Layout DSL

cliui exposes a simple layout DSL:

If you create a single `ui.div`, passing a string rather than an
object:

* `\n`: characters will be interpreted as new rows.
* `\t`: characters will be interpreted as new columns.
* `\s`: characters will be interpreted as padding.

**as an example...**

```js
var ui = require('./')({
  width: 60
})

ui.div(
  'Usage: node ./bin/foo.js\n' +
  '  <regex>\t  provide a regex\n' +
  '  <glob>\t  provide a glob\t [required]'
)

console.log(ui.toString())
```

**will output:**

```shell
Usage: node ./bin/foo.js
  <regex>  provide a regex
  <glob>   provide a glob          [required]
```

## Methods

```js
cliui = require('cliui')
```

### cliui({width: integer})

Specify the maximum width of the UI being generated.
If no width is provided, cliui will try to get the current window's width and use it, and if that doesn't work, width will be set to `80`.

### cliui({wrap: boolean})

Enable or disable the wrapping of text in a column.

### cliui.div(column, column, column)

Create a row with any number of columns, a column
can either be a string, or an object with the following
options:

* **text:** some text to place in the column.
* **width:** the width of a column.
* **align:** alignment, `right` or `center`.
* **padding:** `[top, right, bottom, left]`.
* **border:** should a border be placed around the div?

### cliui.span(column, column, column)

Similar to `div`, except the next row will be appended without
a new line being created.

### cliui.resetOutput()

Resets the UI elements of the current cliui instance, maintaining the values
set for `width` and `wrap`.


---

File name: node_modules\co\History.md

Code:
4.6.0 / 2015-07-09
==================

 * support passing the rest of the arguments to co into the generator

 ```js
 function *gen(...args) { }
 co(gen, ...args);
 ```

4.5.0 / 2015-03-17
==================

 * support regular functions (that return promises)

4.4.0 / 2015-02-14
==================

 * refactor `isGeneratorFunction`
 * expose generator function from `co.wrap()`
 * drop support for node < 0.12

4.3.0 / 2015-02-05
==================

 * check for generator functions in a ES5-transpiler-friendly way

4.2.0 / 2015-01-20
==================

 * support comparing generator functions with ES6 transpilers

4.1.0 / 2014-12-26
==================

 * fix memory leak #180

4.0.2 / 2014-12-18
==================

 * always return a global promise implementation

4.0.1 / 2014-11-30
==================

 * friendlier ES6 module exports

4.0.0 / 2014-11-15
==================

 * co now returns a promise and uses promises underneath
 * `co.wrap()` for wrapping generator functions

3.1.0 / 2014-06-30
==================

 * remove `setImmediate()` shim for node 0.8. semi-backwards breaking.
   Users are expected to shim themselves. Also returns CommonJS browser support.
 * added key order preservation for objects. thanks @greim
 * replace `q` with `bluebird` in benchmarks and tests

3.0.6 / 2014-05-03
==================

 * add `setImmediate()` fallback to `process.nextTick`
 * remove duplicate code in toThunk
 * update thunkify

3.0.5 / 2014-03-17
==================

 * fix object/array test failure which tries to enumerate dates. Closes #98
 * fix final callback error propagation. Closes #92

3.0.4 / 2014-02-17
==================

 * fix toThunk object check regression. Closes #89

3.0.3 / 2014-02-08
==================

 * refactor: arrayToThunk @AutoSponge #88

3.0.2 / 2014-01-01
==================

 * fixed: nil arguments replaced with error fn

3.0.1 / 2013-12-19
==================

 * fixed: callback passed as an argument to generators

3.0.0 / 2013-12-19
==================

 * fixed: callback passed as an argument to generators
 * change: `co(function *(){})` now returns a reusable thunk
 * change: `this` must now be passed through the returned thunk, ex. `co(function *(){}).call(this)`
 * fix "generator already finished" errors

2.3.0 / 2013-11-12
==================

 * add `yield object` support

2.2.0 / 2013-11-05
==================

 * change: make the `isGenerator()` function more generic

2.1.0 / 2013-10-21
==================

 * add passing of arguments into the generator. closes #33.

2.0.0 / 2013-10-14
==================

 * remove callback in favour of thunk-only co(). Closes #30 [breaking change]
 * remove `co.wrap()` [breaking change]

1.5.2 / 2013-09-02
==================

 * fix: preserve receiver with co.wrap()

1.5.1 / 2013-08-11
==================

 * remove setImmediate() usage - ~110% perf increase. Closes #14

0.5.0 / 2013-08-10
==================

 * add receiver propagation support
 * examples: update streams.js example to use `http.get()` and streams2 API

1.4.1 / 2013-07-01
==================

 * fix gen.next(val) for latest v8. Closes #8

1.4.0 / 2013-06-21
==================

 * add promise support to joins
 * add `yield generatorFunction` support
 * add `yield generator` support
 * add nested join support

1.3.0 / 2013-06-10
==================

 * add passing of arguments

1.2.1 / 2013-06-08
==================

 * fix join() of zero thunks

1.2.0 / 2013-06-08
==================

 * add array yielding support. great suggestion by @domenic

1.1.0 / 2013-06-06
==================

 * add promise support
 * change nextTick to setImmediate


---

File name: node_modules\co\index.js

Code:

/**
 * slice() reference.
 */

var slice = Array.prototype.slice;

/**
 * Expose `co`.
 */

module.exports = co['default'] = co.co = co;

/**
 * Wrap the given generator `fn` into a
 * function that returns a promise.
 * This is a separate function so that
 * every `co()` call doesn't create a new,
 * unnecessary closure.
 *
 * @param {GeneratorFunction} fn
 * @return {Function}
 * @api public
 */

co.wrap = function (fn) {
  createPromise.__generatorFunction__ = fn;
  return createPromise;
  function createPromise() {
    return co.call(this, fn.apply(this, arguments));
  }
};

/**
 * Execute the generator function or a generator
 * and return a promise.
 *
 * @param {Function} fn
 * @return {Promise}
 * @api public
 */

function co(gen) {
  var ctx = this;
  var args = slice.call(arguments, 1)

  // we wrap everything in a promise to avoid promise chaining,
  // which leads to memory leak errors.
  // see https://github.com/tj/co/issues/180
  return new Promise(function(resolve, reject) {
    if (typeof gen === 'function') gen = gen.apply(ctx, args);
    if (!gen || typeof gen.next !== 'function') return resolve(gen);

    onFulfilled();

    /**
     * @param {Mixed} res
     * @return {Promise}
     * @api private
     */

    function onFulfilled(res) {
      var ret;
      try {
        ret = gen.next(res);
      } catch (e) {
        return reject(e);
      }
      next(ret);
    }

    /**
     * @param {Error} err
     * @return {Promise}
     * @api private
     */

    function onRejected(err) {
      var ret;
      try {
        ret = gen.throw(err);
      } catch (e) {
        return reject(e);
      }
      next(ret);
    }

    /**
     * Get the next value in the generator,
     * return a promise.
     *
     * @param {Object} ret
     * @return {Promise}
     * @api private
     */

    function next(ret) {
      if (ret.done) return resolve(ret.value);
      var value = toPromise.call(ctx, ret.value);
      if (value && isPromise(value)) return value.then(onFulfilled, onRejected);
      return onRejected(new TypeError('You may only yield a function, promise, generator, array, or object, '
        + 'but the following object was passed: "' + String(ret.value) + '"'));
    }
  });
}

/**
 * Convert a `yield`ed value into a promise.
 *
 * @param {Mixed} obj
 * @return {Promise}
 * @api private
 */

function toPromise(obj) {
  if (!obj) return obj;
  if (isPromise(obj)) return obj;
  if (isGeneratorFunction(obj) || isGenerator(obj)) return co.call(this, obj);
  if ('function' == typeof obj) return thunkToPromise.call(this, obj);
  if (Array.isArray(obj)) return arrayToPromise.call(this, obj);
  if (isObject(obj)) return objectToPromise.call(this, obj);
  return obj;
}

/**
 * Convert a thunk to a promise.
 *
 * @param {Function}
 * @return {Promise}
 * @api private
 */

function thunkToPromise(fn) {
  var ctx = this;
  return new Promise(function (resolve, reject) {
    fn.call(ctx, function (err, res) {
      if (err) return reject(err);
      if (arguments.length > 2) res = slice.call(arguments, 1);
      resolve(res);
    });
  });
}

/**
 * Convert an array of "yieldables" to a promise.
 * Uses `Promise.all()` internally.
 *
 * @param {Array} obj
 * @return {Promise}
 * @api private
 */

function arrayToPromise(obj) {
  return Promise.all(obj.map(toPromise, this));
}

/**
 * Convert an object of "yieldables" to a promise.
 * Uses `Promise.all()` internally.
 *
 * @param {Object} obj
 * @return {Promise}
 * @api private
 */

function objectToPromise(obj){
  var results = new obj.constructor();
  var keys = Object.keys(obj);
  var promises = [];
  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    var promise = toPromise.call(this, obj[key]);
    if (promise && isPromise(promise)) defer(promise, key);
    else results[key] = obj[key];
  }
  return Promise.all(promises).then(function () {
    return results;
  });

  function defer(promise, key) {
    // predefine the key in the result
    results[key] = undefined;
    promises.push(promise.then(function (res) {
      results[key] = res;
    }));
  }
}

/**
 * Check if `obj` is a promise.
 *
 * @param {Object} obj
 * @return {Boolean}
 * @api private
 */

function isPromise(obj) {
  return 'function' == typeof obj.then;
}

/**
 * Check if `obj` is a generator.
 *
 * @param {Mixed} obj
 * @return {Boolean}
 * @api private
 */

function isGenerator(obj) {
  return 'function' == typeof obj.next && 'function' == typeof obj.throw;
}

/**
 * Check if `obj` is a generator function.
 *
 * @param {Mixed} obj
 * @return {Boolean}
 * @api private
 */
function isGeneratorFunction(obj) {
  var constructor = obj.constructor;
  if (!constructor) return false;
  if ('GeneratorFunction' === constructor.name || 'GeneratorFunction' === constructor.displayName) return true;
  return isGenerator(constructor.prototype);
}

/**
 * Check for plain object.
 *
 * @param {Mixed} val
 * @return {Boolean}
 * @api private
 */

function isObject(val) {
  return Object == val.constructor;
}


---

File name: node_modules\co\package.json

Code:
{
  "name": "co",
  "version": "4.6.0",
  "description": "generator async control flow goodness",
  "keywords": [
    "async",
    "flow",
    "generator",
    "coro",
    "coroutine"
  ],
  "devDependencies": {
    "browserify": "^10.0.0",
    "istanbul-harmony": "0",
    "mocha": "^2.0.0",
    "mz": "^1.0.2"
  },
  "scripts": {
    "test": "mocha --harmony",
    "test-cov": "node --harmony node_modules/.bin/istanbul cover ./node_modules/.bin/_mocha -- --reporter dot",
    "test-travis": "node --harmony node_modules/.bin/istanbul cover ./node_modules/.bin/_mocha --report lcovonly -- --reporter dot",
    "prepublish": "npm run browserify",
    "browserify": "browserify index.js -o ./co-browser.js -s co"
  },
  "files": [
    "index.js"
  ],
  "license": "MIT",
  "repository": "tj/co",
  "engines": {
    "iojs": ">= 1.0.0",
    "node": ">= 0.12.0"
  }
}


---

File name: node_modules\co\Readme.md

Code:
# co

[![Gitter][gitter-image]][gitter-url]
[![NPM version][npm-image]][npm-url]
[![Build status][travis-image]][travis-url]
[![Test coverage][coveralls-image]][coveralls-url]
[![Downloads][downloads-image]][downloads-url]

  Generator based control flow goodness for nodejs and the browser,
  using promises, letting you write non-blocking code in a nice-ish way.

## Co v4

  `co@4.0.0` has been released, which now relies on promises.
  It is a stepping stone towards [ES7 async/await](https://github.com/lukehoban/ecmascript-asyncawait).
  The primary API change is how `co()` is invoked.
  Before, `co` returned a "thunk", which you then called with a callback and optional arguments.
  Now, `co()` returns a promise.

```js
co(function* () {
  var result = yield Promise.resolve(true);
  return result;
}).then(function (value) {
  console.log(value);
}, function (err) {
  console.error(err.stack);
});
```

  If you want to convert a `co`-generator-function into a regular function that returns a promise,
  you now use `co.wrap(fn*)`.

```js
var fn = co.wrap(function* (val) {
  return yield Promise.resolve(val);
});

fn(true).then(function (val) {

});
```

## Platform Compatibility

  `co@4+` requires a `Promise` implementation.
  For versions of node `< 0.11` and for many older browsers,
  you should/must include your own `Promise` polyfill.

  When using node 0.11.x or greater, you must use the `--harmony-generators`
  flag or just `--harmony` to get access to generators.

  When using node 0.10.x and lower or browsers without generator support,
  you must use [gnode](https://github.com/TooTallNate/gnode) and/or [regenerator](http://facebook.github.io/regenerator/).

  io.js is supported out of the box, you can use `co` without flags or polyfills.

## Installation

```
$ npm install co
```

## Associated libraries

Any library that returns promises work well with `co`.

- [mz](https://github.com/normalize/mz) - wrap all of node's code libraries as promises.

View the [wiki](https://github.com/visionmedia/co/wiki) for more libraries.

## Examples

```js
var co = require('co');

co(function *(){
  // yield any promise
  var result = yield Promise.resolve(true);
}).catch(onerror);

co(function *(){
  // resolve multiple promises in parallel
  var a = Promise.resolve(1);
  var b = Promise.resolve(2);
  var c = Promise.resolve(3);
  var res = yield [a, b, c];
  console.log(res);
  // => [1, 2, 3]
}).catch(onerror);

// errors can be try/catched
co(function *(){
  try {
    yield Promise.reject(new Error('boom'));
  } catch (err) {
    console.error(err.message); // "boom"
 }
}).catch(onerror);

function onerror(err) {
  // log any uncaught errors
  // co will not throw any errors you do not handle!!!
  // HANDLE ALL YOUR ERRORS!!!
  console.error(err.stack);
}
```

## Yieldables

  The `yieldable` objects currently supported are:

  - promises
  - thunks (functions)
  - array (parallel execution)
  - objects (parallel execution)
  - generators (delegation)
  - generator functions (delegation)

Nested `yieldable` objects are supported, meaning you can nest
promises within objects within arrays, and so on!

### Promises

[Read more on promises!](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)

### Thunks

Thunks are functions that only have a single argument, a callback.
Thunk support only remains for backwards compatibility and may
be removed in future versions of `co`.

### Arrays

`yield`ing an array will resolve all the `yieldables` in parallel.

```js
co(function* () {
  var res = yield [
    Promise.resolve(1),
    Promise.resolve(2),
    Promise.resolve(3),
  ];
  console.log(res); // => [1, 2, 3]
}).catch(onerror);
```

### Objects

Just like arrays, objects resolve all `yieldable`s in parallel.

```js
co(function* () {
  var res = yield {
    1: Promise.resolve(1),
    2: Promise.resolve(2),
  };
  console.log(res); // => { 1: 1, 2: 2 }
}).catch(onerror);
```

### Generators and Generator Functions

Any generator or generator function you can pass into `co`
can be yielded as well. This should generally be avoided
as we should be moving towards spec-compliant `Promise`s instead.

## API

### co(fn*).then( val => )

Returns a promise that resolves a generator, generator function,
or any function that returns a generator.

```js
co(function* () {
  return yield Promise.resolve(true);
}).then(function (val) {
  console.log(val);
}, function (err) {
  console.error(err.stack);
});
```

### var fn = co.wrap(fn*)

Convert a generator into a regular function that returns a `Promise`.

```js
var fn = co.wrap(function* (val) {
  return yield Promise.resolve(val);
});

fn(true).then(function (val) {

});
```

## License

  MIT

[npm-image]: https://img.shields.io/npm/v/co.svg?style=flat-square
[npm-url]: https://npmjs.org/package/co
[travis-image]: https://img.shields.io/travis/tj/co.svg?style=flat-square
[travis-url]: https://travis-ci.org/tj/co
[coveralls-image]: https://img.shields.io/coveralls/tj/co.svg?style=flat-square
[coveralls-url]: https://coveralls.io/r/tj/co
[downloads-image]: http://img.shields.io/npm/dm/co.svg?style=flat-square
[downloads-url]: https://npmjs.org/package/co
[gitter-image]: https://badges.gitter.im/Join%20Chat.svg
[gitter-url]: https://gitter.im/tj/co?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge


---

File name: node_modules\collect-v8-coverage\CHANGELOG.md

Code:
## [1.0.2](https://github.com/SimenB/collect-v8-coverage/compare/v1.0.1...v1.0.2) (2023-07-05)


### Bug Fixes

* workaround for networked filesystems on Windows ([#174](https://github.com/SimenB/collect-v8-coverage/issues/174)) ([4de72ea](https://github.com/SimenB/collect-v8-coverage/commit/4de72ea976228d6d8b7fb78207c1187aa58ddf50))

## [1.0.1](https://github.com/SimenB/collect-v8-coverage/compare/v1.0.0...v1.0.1) (2020-04-02)

### Bug Fixes

- link to repo from package.json ([cf54d65](https://github.com/SimenB/collect-v8-coverage/commit/cf54d659f23afd411cd0ff752e69fa97d2ab1707))

# 1.0.0 (2019-12-16)

### Features

- initial commit ([57e2041](https://github.com/SimenB/collect-v8-coverage/commit/57e20413f385d7730c5684b1852c14777583807e))


---

File name: node_modules\collect-v8-coverage\index.d.ts

Code:
/// <reference types="node" />
import { Profiler } from 'inspector';
export declare type V8Coverage = ReadonlyArray<Profiler.ScriptCoverage>;
export declare class CoverageInstrumenter {
  startInstrumenting(): Promise<void>;
  stopInstrumenting(): Promise<V8Coverage>;
}


---

File name: node_modules\collect-v8-coverage\index.js

Code:
'use strict';

const { Session } = require('inspector');
const { promisify } = require('util');

class CoverageInstrumenter {
  constructor() {
    this.session = new Session();

    this.postSession = promisify(this.session.post.bind(this.session));
  }

  async startInstrumenting() {
    this.session.connect();

    await this.postSession('Profiler.enable');

    await this.postSession('Profiler.startPreciseCoverage', {
      callCount: true,
      detailed: true,
    });
  }

  async stopInstrumenting() {
    const {result} = await this.postSession(
      'Profiler.takePreciseCoverage',
    );

    await this.postSession('Profiler.stopPreciseCoverage');

    await this.postSession('Profiler.disable');

    // When using networked filesystems on Windows, v8 sometimes returns URLs
    // of the form file:////<host>/path. These URLs are not well understood
    // by NodeJS (see https://github.com/nodejs/node/issues/48530).
    // We circumvent this issue here by fixing these URLs.
    // FWIW, Python has special code to deal with URLs like this
    // https://github.com/python/cpython/blob/bef1c8761e3b0dfc5708747bb646ad8b669cbd67/Lib/nturl2path.py#L22C1-L22C1
    if (process.platform === 'win32') {
      const prefix = 'file:////';
      result.forEach(res => {
        if (res.url.startsWith(prefix)) {
          res.url = 'file://' + res.url.slice(prefix.length);
        }
      })
    }

    return result;
  }
}

module.exports.CoverageInstrumenter = CoverageInstrumenter;


---

File name: node_modules\collect-v8-coverage\package.json

Code:
{
  "name": "collect-v8-coverage",
  "version": "1.0.2",
  "main": "index.js",
  "types": "index.d.ts",
  "repository": "SimenB/collect-v8-coverage",
  "files": [
    "CHANGELOG.md",
    "index.js",
    "index.d.ts"
  ],
  "license": "MIT",
  "devDependencies": {
    "@commitlint/cli": "^17.0.0",
    "@commitlint/config-conventional": "^17.0.0",
    "@semantic-release/changelog": "^6.0.0",
    "@semantic-release/git": "^10.0.0",
    "husky": "^8.0.0",
    "lint-staged": "^13.0.0",
    "prettier": "^2.2.1",
    "semantic-release": "^21.0.0"
  },
  "prettier": {
    "singleQuote": true,
    "trailingComma": "all"
  },
  "lint-staged": {
    "*.{js,ts,md,json}": "prettier --write"
  },
  "commitlint": {
    "extends": [
      "@commitlint/config-conventional"
    ]
  },
  "release": {
    "branches": [
      "main"
    ],
    "plugins": [
      "@semantic-release/commit-analyzer",
      "@semantic-release/release-notes-generator",
      "@semantic-release/changelog",
      "@semantic-release/npm",
      "@semantic-release/git",
      "@semantic-release/github"
    ]
  },
  "scripts": {
    "prepare": "husky install"
  },
  "packageManager": "yarn@3.6.0"
}


---

File name: node_modules\collect-v8-coverage\README.md

Code:
# collect-v8-coverage

Use this module to start and stop the V8 inspector manually and collect precise coverage.

```js
const {CoverageInstrumenter} = require('collect-v8-coverage');

const instrumenter = new CoverageInstrumenter();

await instrumenter.startInstrumenting();

// require some modules, run some code

const coverage = await instrumenter.stopInstrumenting();
```


---

File name: node_modules\color-convert\CHANGELOG.md

Code:
# 1.0.0 - 2016-01-07

- Removed: unused speed test
- Added: Automatic routing between previously unsupported conversions
([#27](https://github.com/Qix-/color-convert/pull/27))
- Removed: `xxx2xxx()` and `xxx2xxxRaw()` functions
([#27](https://github.com/Qix-/color-convert/pull/27))
- Removed: `convert()` class
([#27](https://github.com/Qix-/color-convert/pull/27))
- Changed: all functions to lookup dictionary
([#27](https://github.com/Qix-/color-convert/pull/27))
- Changed: `ansi` to `ansi256`
([#27](https://github.com/Qix-/color-convert/pull/27))
- Fixed: argument grouping for functions requiring only one argument
([#27](https://github.com/Qix-/color-convert/pull/27))

# 0.6.0 - 2015-07-23

- Added: methods to handle
[ANSI](https://en.wikipedia.org/wiki/ANSI_escape_code#Colors) 16/256 colors:
  - rgb2ansi16
  - rgb2ansi
  - hsl2ansi16
  - hsl2ansi
  - hsv2ansi16
  - hsv2ansi
  - hwb2ansi16
  - hwb2ansi
  - cmyk2ansi16
  - cmyk2ansi
  - keyword2ansi16
  - keyword2ansi
  - ansi162rgb
  - ansi162hsl
  - ansi162hsv
  - ansi162hwb
  - ansi162cmyk
  - ansi162keyword
  - ansi2rgb
  - ansi2hsl
  - ansi2hsv
  - ansi2hwb
  - ansi2cmyk
  - ansi2keyword
([#18](https://github.com/harthur/color-convert/pull/18))

# 0.5.3 - 2015-06-02

- Fixed: hsl2hsv does not return `NaN` anymore when using `[0,0,0]`
([#15](https://github.com/harthur/color-convert/issues/15))

---

Check out commit logs for older releases


---

File name: node_modules\color-convert\conversions.js

Code:
/* MIT license */
/* eslint-disable no-mixed-operators */
const cssKeywords = require('color-name');

// NOTE: conversions should only return primitive values (i.e. arrays, or
//       values that give correct `typeof` results).
//       do not use box values types (i.e. Number(), String(), etc.)

const reverseKeywords = {};
for (const key of Object.keys(cssKeywords)) {
	reverseKeywords[cssKeywords[key]] = key;
}

const convert = {
	rgb: {channels: 3, labels: 'rgb'},
	hsl: {channels: 3, labels: 'hsl'},
	hsv: {channels: 3, labels: 'hsv'},
	hwb: {channels: 3, labels: 'hwb'},
	cmyk: {channels: 4, labels: 'cmyk'},
	xyz: {channels: 3, labels: 'xyz'},
	lab: {channels: 3, labels: 'lab'},
	lch: {channels: 3, labels: 'lch'},
	hex: {channels: 1, labels: ['hex']},
	keyword: {channels: 1, labels: ['keyword']},
	ansi16: {channels: 1, labels: ['ansi16']},
	ansi256: {channels: 1, labels: ['ansi256']},
	hcg: {channels: 3, labels: ['h', 'c', 'g']},
	apple: {channels: 3, labels: ['r16', 'g16', 'b16']},
	gray: {channels: 1, labels: ['gray']}
};

module.exports = convert;

// Hide .channels and .labels properties
for (const model of Object.keys(convert)) {
	if (!('channels' in convert[model])) {
		throw new Error('missing channels property: ' + model);
	}

	if (!('labels' in convert[model])) {
		throw new Error('missing channel labels property: ' + model);
	}

	if (convert[model].labels.length !== convert[model].channels) {
		throw new Error('channel and label counts mismatch: ' + model);
	}

	const {channels, labels} = convert[model];
	delete convert[model].channels;
	delete convert[model].labels;
	Object.defineProperty(convert[model], 'channels', {value: channels});
	Object.defineProperty(convert[model], 'labels', {value: labels});
}

convert.rgb.hsl = function (rgb) {
	const r = rgb[0] / 255;
	const g = rgb[1] / 255;
	const b = rgb[2] / 255;
	const min = Math.min(r, g, b);
	const max = Math.max(r, g, b);
	const delta = max - min;
	let h;
	let s;

	if (max === min) {
		h = 0;
	} else if (r === max) {
		h = (g - b) / delta;
	} else if (g === max) {
		h = 2 + (b - r) / delta;
	} else if (b === max) {
		h = 4 + (r - g) / delta;
	}

	h = Math.min(h * 60, 360);

	if (h < 0) {
		h += 360;
	}

	const l = (min + max) / 2;

	if (max === min) {
		s = 0;
	} else if (l <= 0.5) {
		s = delta / (max + min);
	} else {
		s = delta / (2 - max - min);
	}

	return [h, s * 100, l * 100];
};

convert.rgb.hsv = function (rgb) {
	let rdif;
	let gdif;
	let bdif;
	let h;
	let s;

	const r = rgb[0] / 255;
	const g = rgb[1] / 255;
	const b = rgb[2] / 255;
	const v = Math.max(r, g, b);
	const diff = v - Math.min(r, g, b);
	const diffc = function (c) {
		return (v - c) / 6 / diff + 1 / 2;
	};

	if (diff === 0) {
		h = 0;
		s = 0;
	} else {
		s = diff / v;
		rdif = diffc(r);
		gdif = diffc(g);
		bdif = diffc(b);

		if (r === v) {
			h = bdif - gdif;
		} else if (g === v) {
			h = (1 / 3) + rdif - bdif;
		} else if (b === v) {
			h = (2 / 3) + gdif - rdif;
		}

		if (h < 0) {
			h += 1;
		} else if (h > 1) {
			h -= 1;
		}
	}

	return [
		h * 360,
		s * 100,
		v * 100
	];
};

convert.rgb.hwb = function (rgb) {
	const r = rgb[0];
	const g = rgb[1];
	let b = rgb[2];
	const h = convert.rgb.hsl(rgb)[0];
	const w = 1 / 255 * Math.min(r, Math.min(g, b));

	b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));

	return [h, w * 100, b * 100];
};

convert.rgb.cmyk = function (rgb) {
	const r = rgb[0] / 255;
	const g = rgb[1] / 255;
	const b = rgb[2] / 255;

	const k = Math.min(1 - r, 1 - g, 1 - b);
	const c = (1 - r - k) / (1 - k) || 0;
	const m = (1 - g - k) / (1 - k) || 0;
	const y = (1 - b - k) / (1 - k) || 0;

	return [c * 100, m * 100, y * 100, k * 100];
};

function comparativeDistance(x, y) {
	/*
		See https://en.m.wikipedia.org/wiki/Euclidean_distance#Squared_Euclidean_distance
	*/
	return (
		((x[0] - y[0]) ** 2) +
		((x[1] - y[1]) ** 2) +
		((x[2] - y[2]) ** 2)
	);
}

convert.rgb.keyword = function (rgb) {
	const reversed = reverseKeywords[rgb];
	if (reversed) {
		return reversed;
	}

	let currentClosestDistance = Infinity;
	let currentClosestKeyword;

	for (const keyword of Object.keys(cssKeywords)) {
		const value = cssKeywords[keyword];

		// Compute comparative distance
		const distance = comparativeDistance(rgb, value);

		// Check if its less, if so set as closest
		if (distance < currentClosestDistance) {
			currentClosestDistance = distance;
			currentClosestKeyword = keyword;
		}
	}

	return currentClosestKeyword;
};

convert.keyword.rgb = function (keyword) {
	return cssKeywords[keyword];
};

convert.rgb.xyz = function (rgb) {
	let r = rgb[0] / 255;
	let g = rgb[1] / 255;
	let b = rgb[2] / 255;

	// Assume sRGB
	r = r > 0.04045 ? (((r + 0.055) / 1.055) ** 2.4) : (r / 12.92);
	g = g > 0.04045 ? (((g + 0.055) / 1.055) ** 2.4) : (g / 12.92);
	b = b > 0.04045 ? (((b + 0.055) / 1.055) ** 2.4) : (b / 12.92);

	const x = (r * 0.4124) + (g * 0.3576) + (b * 0.1805);
	const y = (r * 0.2126) + (g * 0.7152) + (b * 0.0722);
	const z = (r * 0.0193) + (g * 0.1192) + (b * 0.9505);

	return [x * 100, y * 100, z * 100];
};

convert.rgb.lab = function (rgb) {
	const xyz = convert.rgb.xyz(rgb);
	let x = xyz[0];
	let y = xyz[1];
	let z = xyz[2];

	x /= 95.047;
	y /= 100;
	z /= 108.883;

	x = x > 0.008856 ? (x ** (1 / 3)) : (7.787 * x) + (16 / 116);
	y = y > 0.008856 ? (y ** (1 / 3)) : (7.787 * y) + (16 / 116);
	z = z > 0.008856 ? (z ** (1 / 3)) : (7.787 * z) + (16 / 116);

	const l = (116 * y) - 16;
	const a = 500 * (x - y);
	const b = 200 * (y - z);

	return [l, a, b];
};

convert.hsl.rgb = function (hsl) {
	const h = hsl[0] / 360;
	const s = hsl[1] / 100;
	const l = hsl[2] / 100;
	let t2;
	let t3;
	let val;

	if (s === 0) {
		val = l * 255;
		return [val, val, val];
	}

	if (l < 0.5) {
		t2 = l * (1 + s);
	} else {
		t2 = l + s - l * s;
	}

	const t1 = 2 * l - t2;

	const rgb = [0, 0, 0];
	for (let i = 0; i < 3; i++) {
		t3 = h + 1 / 3 * -(i - 1);
		if (t3 < 0) {
			t3++;
		}

		if (t3 > 1) {
			t3--;
		}

		if (6 * t3 < 1) {
			val = t1 + (t2 - t1) * 6 * t3;
		} else if (2 * t3 < 1) {
			val = t2;
		} else if (3 * t3 < 2) {
			val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
		} else {
			val = t1;
		}

		rgb[i] = val * 255;
	}

	return rgb;
};

convert.hsl.hsv = function (hsl) {
	const h = hsl[0];
	let s = hsl[1] / 100;
	let l = hsl[2] / 100;
	let smin = s;
	const lmin = Math.max(l, 0.01);

	l *= 2;
	s *= (l <= 1) ? l : 2 - l;
	smin *= lmin <= 1 ? lmin : 2 - lmin;
	const v = (l + s) / 2;
	const sv = l === 0 ? (2 * smin) / (lmin + smin) : (2 * s) / (l + s);

	return [h, sv * 100, v * 100];
};

convert.hsv.rgb = function (hsv) {
	const h = hsv[0] / 60;
	const s = hsv[1] / 100;
	let v = hsv[2] / 100;
	const hi = Math.floor(h) % 6;

	const f = h - Math.floor(h);
	const p = 255 * v * (1 - s);
	const q = 255 * v * (1 - (s * f));
	const t = 255 * v * (1 - (s * (1 - f)));
	v *= 255;

	switch (hi) {
		case 0:
			return [v, t, p];
		case 1:
			return [q, v, p];
		case 2:
			return [p, v, t];
		case 3:
			return [p, q, v];
		case 4:
			return [t, p, v];
		case 5:
			return [v, p, q];
	}
};

convert.hsv.hsl = function (hsv) {
	const h = hsv[0];
	const s = hsv[1] / 100;
	const v = hsv[2] / 100;
	const vmin = Math.max(v, 0.01);
	let sl;
	let l;

	l = (2 - s) * v;
	const lmin = (2 - s) * vmin;
	sl = s * vmin;
	sl /= (lmin <= 1) ? lmin : 2 - lmin;
	sl = sl || 0;
	l /= 2;

	return [h, sl * 100, l * 100];
};

// http://dev.w3.org/csswg/css-color/#hwb-to-rgb
convert.hwb.rgb = function (hwb) {
	const h = hwb[0] / 360;
	let wh = hwb[1] / 100;
	let bl = hwb[2] / 100;
	const ratio = wh + bl;
	let f;

	// Wh + bl cant be > 1
	if (ratio > 1) {
		wh /= ratio;
		bl /= ratio;
	}

	const i = Math.floor(6 * h);
	const v = 1 - bl;
	f = 6 * h - i;

	if ((i & 0x01) !== 0) {
		f = 1 - f;
	}

	const n = wh + f * (v - wh); // Linear interpolation

	let r;
	let g;
	let b;
	/* eslint-disable max-statements-per-line,no-multi-spaces */
	switch (i) {
		default:
		case 6:
		case 0: r = v;  g = n;  b = wh; break;
		case 1: r = n;  g = v;  b = wh; break;
		case 2: r = wh; g = v;  b = n; break;
		case 3: r = wh; g = n;  b = v; break;
		case 4: r = n;  g = wh; b = v; break;
		case 5: r = v;  g = wh; b = n; break;
	}
	/* eslint-enable max-statements-per-line,no-multi-spaces */

	return [r * 255, g * 255, b * 255];
};

convert.cmyk.rgb = function (cmyk) {
	const c = cmyk[0] / 100;
	const m = cmyk[1] / 100;
	const y = cmyk[2] / 100;
	const k = cmyk[3] / 100;

	const r = 1 - Math.min(1, c * (1 - k) + k);
	const g = 1 - Math.min(1, m * (1 - k) + k);
	const b = 1 - Math.min(1, y * (1 - k) + k);

	return [r * 255, g * 255, b * 255];
};

convert.xyz.rgb = function (xyz) {
	const x = xyz[0] / 100;
	const y = xyz[1] / 100;
	const z = xyz[2] / 100;
	let r;
	let g;
	let b;

	r = (x * 3.2406) + (y * -1.5372) + (z * -0.4986);
	g = (x * -0.9689) + (y * 1.8758) + (z * 0.0415);
	b = (x * 0.0557) + (y * -0.2040) + (z * 1.0570);

	// Assume sRGB
	r = r > 0.0031308
		? ((1.055 * (r ** (1.0 / 2.4))) - 0.055)
		: r * 12.92;

	g = g > 0.0031308
		? ((1.055 * (g ** (1.0 / 2.4))) - 0.055)
		: g * 12.92;

	b = b > 0.0031308
		? ((1.055 * (b ** (1.0 / 2.4))) - 0.055)
		: b * 12.92;

	r = Math.min(Math.max(0, r), 1);
	g = Math.min(Math.max(0, g), 1);
	b = Math.min(Math.max(0, b), 1);

	return [r * 255, g * 255, b * 255];
};

convert.xyz.lab = function (xyz) {
	let x = xyz[0];
	let y = xyz[1];
	let z = xyz[2];

	x /= 95.047;
	y /= 100;
	z /= 108.883;

	x = x > 0.008856 ? (x ** (1 / 3)) : (7.787 * x) + (16 / 116);
	y = y > 0.008856 ? (y ** (1 / 3)) : (7.787 * y) + (16 / 116);
	z = z > 0.008856 ? (z ** (1 / 3)) : (7.787 * z) + (16 / 116);

	const l = (116 * y) - 16;
	const a = 500 * (x - y);
	const b = 200 * (y - z);

	return [l, a, b];
};

convert.lab.xyz = function (lab) {
	const l = lab[0];
	const a = lab[1];
	const b = lab[2];
	let x;
	let y;
	let z;

	y = (l + 16) / 116;
	x = a / 500 + y;
	z = y - b / 200;

	const y2 = y ** 3;
	const x2 = x ** 3;
	const z2 = z ** 3;
	y = y2 > 0.008856 ? y2 : (y - 16 / 116) / 7.787;
	x = x2 > 0.008856 ? x2 : (x - 16 / 116) / 7.787;
	z = z2 > 0.008856 ? z2 : (z - 16 / 116) / 7.787;

	x *= 95.047;
	y *= 100;
	z *= 108.883;

	return [x, y, z];
};

convert.lab.lch = function (lab) {
	const l = lab[0];
	const a = lab[1];
	const b = lab[2];
	let h;

	const hr = Math.atan2(b, a);
	h = hr * 360 / 2 / Math.PI;

	if (h < 0) {
		h += 360;
	}

	const c = Math.sqrt(a * a + b * b);

	return [l, c, h];
};

convert.lch.lab = function (lch) {
	const l = lch[0];
	const c = lch[1];
	const h = lch[2];

	const hr = h / 360 * 2 * Math.PI;
	const a = c * Math.cos(hr);
	const b = c * Math.sin(hr);

	return [l, a, b];
};

convert.rgb.ansi16 = function (args, saturation = null) {
	const [r, g, b] = args;
	let value = saturation === null ? convert.rgb.hsv(args)[2] : saturation; // Hsv -> ansi16 optimization

	value = Math.round(value / 50);

	if (value === 0) {
		return 30;
	}

	let ansi = 30
		+ ((Math.round(b / 255) << 2)
		| (Math.round(g / 255) << 1)
		| Math.round(r / 255));

	if (value === 2) {
		ansi += 60;
	}

	return ansi;
};

convert.hsv.ansi16 = function (args) {
	// Optimization here; we already know the value and don't need to get
	// it converted for us.
	return convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);
};

convert.rgb.ansi256 = function (args) {
	const r = args[0];
	const g = args[1];
	const b = args[2];

	// We use the extended greyscale palette here, with the exception of
	// black and white. normal palette only has 4 greyscale shades.
	if (r === g && g === b) {
		if (r < 8) {
			return 16;
		}

		if (r > 248) {
			return 231;
		}

		return Math.round(((r - 8) / 247) * 24) + 232;
	}

	const ansi = 16
		+ (36 * Math.round(r / 255 * 5))
		+ (6 * Math.round(g / 255 * 5))
		+ Math.round(b / 255 * 5);

	return ansi;
};

convert.ansi16.rgb = function (args) {
	let color = args % 10;

	// Handle greyscale
	if (color === 0 || color === 7) {
		if (args > 50) {
			color += 3.5;
		}

		color = color / 10.5 * 255;

		return [color, color, color];
	}

	const mult = (~~(args > 50) + 1) * 0.5;
	const r = ((color & 1) * mult) * 255;
	const g = (((color >> 1) & 1) * mult) * 255;
	const b = (((color >> 2) & 1) * mult) * 255;

	return [r, g, b];
};

convert.ansi256.rgb = function (args) {
	// Handle greyscale
	if (args >= 232) {
		const c = (args - 232) * 10 + 8;
		return [c, c, c];
	}

	args -= 16;

	let rem;
	const r = Math.floor(args / 36) / 5 * 255;
	const g = Math.floor((rem = args % 36) / 6) / 5 * 255;
	const b = (rem % 6) / 5 * 255;

	return [r, g, b];
};

convert.rgb.hex = function (args) {
	const integer = ((Math.round(args[0]) & 0xFF) << 16)
		+ ((Math.round(args[1]) & 0xFF) << 8)
		+ (Math.round(args[2]) & 0xFF);

	const string = integer.toString(16).toUpperCase();
	return '000000'.substring(string.length) + string;
};

convert.hex.rgb = function (args) {
	const match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);
	if (!match) {
		return [0, 0, 0];
	}

	let colorString = match[0];

	if (match[0].length === 3) {
		colorString = colorString.split('').map(char => {
			return char + char;
		}).join('');
	}

	const integer = parseInt(colorString, 16);
	const r = (integer >> 16) & 0xFF;
	const g = (integer >> 8) & 0xFF;
	const b = integer & 0xFF;

	return [r, g, b];
};

convert.rgb.hcg = function (rgb) {
	const r = rgb[0] / 255;
	const g = rgb[1] / 255;
	const b = rgb[2] / 255;
	const max = Math.max(Math.max(r, g), b);
	const min = Math.min(Math.min(r, g), b);
	const chroma = (max - min);
	let grayscale;
	let hue;

	if (chroma < 1) {
		grayscale = min / (1 - chroma);
	} else {
		grayscale = 0;
	}

	if (chroma <= 0) {
		hue = 0;
	} else
	if (max === r) {
		hue = ((g - b) / chroma) % 6;
	} else
	if (max === g) {
		hue = 2 + (b - r) / chroma;
	} else {
		hue = 4 + (r - g) / chroma;
	}

	hue /= 6;
	hue %= 1;

	return [hue * 360, chroma * 100, grayscale * 100];
};

convert.hsl.hcg = function (hsl) {
	const s = hsl[1] / 100;
	const l = hsl[2] / 100;

	const c = l < 0.5 ? (2.0 * s * l) : (2.0 * s * (1.0 - l));

	let f = 0;
	if (c < 1.0) {
		f = (l - 0.5 * c) / (1.0 - c);
	}

	return [hsl[0], c * 100, f * 100];
};

convert.hsv.hcg = function (hsv) {
	const s = hsv[1] / 100;
	const v = hsv[2] / 100;

	const c = s * v;
	let f = 0;

	if (c < 1.0) {
		f = (v - c) / (1 - c);
	}

	return [hsv[0], c * 100, f * 100];
};

convert.hcg.rgb = function (hcg) {
	const h = hcg[0] / 360;
	const c = hcg[1] / 100;
	const g = hcg[2] / 100;

	if (c === 0.0) {
		return [g * 255, g * 255, g * 255];
	}

	const pure = [0, 0, 0];
	const hi = (h % 1) * 6;
	const v = hi % 1;
	const w = 1 - v;
	let mg = 0;

	/* eslint-disable max-statements-per-line */
	switch (Math.floor(hi)) {
		case 0:
			pure[0] = 1; pure[1] = v; pure[2] = 0; break;
		case 1:
			pure[0] = w; pure[1] = 1; pure[2] = 0; break;
		case 2:
			pure[0] = 0; pure[1] = 1; pure[2] = v; break;
		case 3:
			pure[0] = 0; pure[1] = w; pure[2] = 1; break;
		case 4:
			pure[0] = v; pure[1] = 0; pure[2] = 1; break;
		default:
			pure[0] = 1; pure[1] = 0; pure[2] = w;
	}
	/* eslint-enable max-statements-per-line */

	mg = (1.0 - c) * g;

	return [
		(c * pure[0] + mg) * 255,
		(c * pure[1] + mg) * 255,
		(c * pure[2] + mg) * 255
	];
};

convert.hcg.hsv = function (hcg) {
	const c = hcg[1] / 100;
	const g = hcg[2] / 100;

	const v = c + g * (1.0 - c);
	let f = 0;

	if (v > 0.0) {
		f = c / v;
	}

	return [hcg[0], f * 100, v * 100];
};

convert.hcg.hsl = function (hcg) {
	const c = hcg[1] / 100;
	const g = hcg[2] / 100;

	const l = g * (1.0 - c) + 0.5 * c;
	let s = 0;

	if (l > 0.0 && l < 0.5) {
		s = c / (2 * l);
	} else
	if (l >= 0.5 && l < 1.0) {
		s = c / (2 * (1 - l));
	}

	return [hcg[0], s * 100, l * 100];
};

convert.hcg.hwb = function (hcg) {
	const c = hcg[1] / 100;
	const g = hcg[2] / 100;
	const v = c + g * (1.0 - c);
	return [hcg[0], (v - c) * 100, (1 - v) * 100];
};

convert.hwb.hcg = function (hwb) {
	const w = hwb[1] / 100;
	const b = hwb[2] / 100;
	const v = 1 - b;
	const c = v - w;
	let g = 0;

	if (c < 1) {
		g = (v - c) / (1 - c);
	}

	return [hwb[0], c * 100, g * 100];
};

convert.apple.rgb = function (apple) {
	return [(apple[0] / 65535) * 255, (apple[1] / 65535) * 255, (apple[2] / 65535) * 255];
};

convert.rgb.apple = function (rgb) {
	return [(rgb[0] / 255) * 65535, (rgb[1] / 255) * 65535, (rgb[2] / 255) * 65535];
};

convert.gray.rgb = function (args) {
	return [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];
};

convert.gray.hsl = function (args) {
	return [0, 0, args[0]];
};

convert.gray.hsv = convert.gray.hsl;

convert.gray.hwb = function (gray) {
	return [0, 100, gray[0]];
};

convert.gray.cmyk = function (gray) {
	return [0, 0, 0, gray[0]];
};

convert.gray.lab = function (gray) {
	return [gray[0], 0, 0];
};

convert.gray.hex = function (gray) {
	const val = Math.round(gray[0] / 100 * 255) & 0xFF;
	const integer = (val << 16) + (val << 8) + val;

	const string = integer.toString(16).toUpperCase();
	return '000000'.substring(string.length) + string;
};

convert.rgb.gray = function (rgb) {
	const val = (rgb[0] + rgb[1] + rgb[2]) / 3;
	return [val / 255 * 100];
};


---

File name: node_modules\color-convert\index.js

Code:
const conversions = require('./conversions');
const route = require('./route');

const convert = {};

const models = Object.keys(conversions);

function wrapRaw(fn) {
	const wrappedFn = function (...args) {
		const arg0 = args[0];
		if (arg0 === undefined || arg0 === null) {
			return arg0;
		}

		if (arg0.length > 1) {
			args = arg0;
		}

		return fn(args);
	};

	// Preserve .conversion property if there is one
	if ('conversion' in fn) {
		wrappedFn.conversion = fn.conversion;
	}

	return wrappedFn;
}

function wrapRounded(fn) {
	const wrappedFn = function (...args) {
		const arg0 = args[0];

		if (arg0 === undefined || arg0 === null) {
			return arg0;
		}

		if (arg0.length > 1) {
			args = arg0;
		}

		const result = fn(args);

		// We're assuming the result is an array here.
		// see notice in conversions.js; don't use box types
		// in conversion functions.
		if (typeof result === 'object') {
			for (let len = result.length, i = 0; i < len; i++) {
				result[i] = Math.round(result[i]);
			}
		}

		return result;
	};

	// Preserve .conversion property if there is one
	if ('conversion' in fn) {
		wrappedFn.conversion = fn.conversion;
	}

	return wrappedFn;
}

models.forEach(fromModel => {
	convert[fromModel] = {};

	Object.defineProperty(convert[fromModel], 'channels', {value: conversions[fromModel].channels});
	Object.defineProperty(convert[fromModel], 'labels', {value: conversions[fromModel].labels});

	const routes = route(fromModel);
	const routeModels = Object.keys(routes);

	routeModels.forEach(toModel => {
		const fn = routes[toModel];

		convert[fromModel][toModel] = wrapRounded(fn);
		convert[fromModel][toModel].raw = wrapRaw(fn);
	});
});

module.exports = convert;


---

File name: node_modules\color-convert\package.json

Code:
{
  "name": "color-convert",
  "description": "Plain color conversion functions",
  "version": "2.0.1",
  "author": "Heather Arthur <fayearthur@gmail.com>",
  "license": "MIT",
  "repository": "Qix-/color-convert",
  "scripts": {
    "pretest": "xo",
    "test": "node test/basic.js"
  },
  "engines": {
    "node": ">=7.0.0"
  },
  "keywords": [
    "color",
    "colour",
    "convert",
    "converter",
    "conversion",
    "rgb",
    "hsl",
    "hsv",
    "hwb",
    "cmyk",
    "ansi",
    "ansi16"
  ],
  "files": [
    "index.js",
    "conversions.js",
    "route.js"
  ],
  "xo": {
    "rules": {
      "default-case": 0,
      "no-inline-comments": 0,
      "operator-linebreak": 0
    }
  },
  "devDependencies": {
    "chalk": "^2.4.2",
    "xo": "^0.24.0"
  },
  "dependencies": {
    "color-name": "~1.1.4"
  }
}


---

File name: node_modules\color-convert\README.md

Code:
# color-convert

[![Build Status](https://travis-ci.org/Qix-/color-convert.svg?branch=master)](https://travis-ci.org/Qix-/color-convert)

Color-convert is a color conversion library for JavaScript and node.
It converts all ways between `rgb`, `hsl`, `hsv`, `hwb`, `cmyk`, `ansi`, `ansi16`, `hex` strings, and CSS `keyword`s (will round to closest):

```js
var convert = require('color-convert');

convert.rgb.hsl(140, 200, 100);             // [96, 48, 59]
convert.keyword.rgb('blue');                // [0, 0, 255]

var rgbChannels = convert.rgb.channels;     // 3
var cmykChannels = convert.cmyk.channels;   // 4
var ansiChannels = convert.ansi16.channels; // 1
```

# Install

```console
$ npm install color-convert
```

# API

Simply get the property of the _from_ and _to_ conversion that you're looking for.

All functions have a rounded and unrounded variant. By default, return values are rounded. To get the unrounded (raw) results, simply tack on `.raw` to the function.

All 'from' functions have a hidden property called `.channels` that indicates the number of channels the function expects (not including alpha).

```js
var convert = require('color-convert');

// Hex to LAB
convert.hex.lab('DEADBF');         // [ 76, 21, -2 ]
convert.hex.lab.raw('DEADBF');     // [ 75.56213190997677, 20.653827952644754, -2.290532499330533 ]

// RGB to CMYK
convert.rgb.cmyk(167, 255, 4);     // [ 35, 0, 98, 0 ]
convert.rgb.cmyk.raw(167, 255, 4); // [ 34.509803921568626, 0, 98.43137254901961, 0 ]
```

### Arrays
All functions that accept multiple arguments also support passing an array.

Note that this does **not** apply to functions that convert from a color that only requires one value (e.g. `keyword`, `ansi256`, `hex`, etc.)

```js
var convert = require('color-convert');

convert.rgb.hex(123, 45, 67);      // '7B2D43'
convert.rgb.hex([123, 45, 67]);    // '7B2D43'
```

## Routing

Conversions that don't have an _explicitly_ defined conversion (in [conversions.js](conversions.js)), but can be converted by means of sub-conversions (e.g. XYZ -> **RGB** -> CMYK), are automatically routed together. This allows just about any color model supported by `color-convert` to be converted to any other model, so long as a sub-conversion path exists. This is also true for conversions requiring more than one step in between (e.g. LCH -> **LAB** -> **XYZ** -> **RGB** -> Hex).

Keep in mind that extensive conversions _may_ result in a loss of precision, and exist only to be complete. For a list of "direct" (single-step) conversions, see [conversions.js](conversions.js).

# Contribute

If there is a new model you would like to support, or want to add a direct conversion between two existing models, please send us a pull request.

# License
Copyright &copy; 2011-2016, Heather Arthur and Josh Junon. Licensed under the [MIT License](LICENSE).


---

File name: node_modules\color-convert\route.js

Code:
const conversions = require('./conversions');

/*
	This function routes a model to all other models.

	all functions that are routed have a property `.conversion` attached
	to the returned synthetic function. This property is an array
	of strings, each with the steps in between the 'from' and 'to'
	color models (inclusive).

	conversions that are not possible simply are not included.
*/

function buildGraph() {
	const graph = {};
	// https://jsperf.com/object-keys-vs-for-in-with-closure/3
	const models = Object.keys(conversions);

	for (let len = models.length, i = 0; i < len; i++) {
		graph[models[i]] = {
			// http://jsperf.com/1-vs-infinity
			// micro-opt, but this is simple.
			distance: -1,
			parent: null
		};
	}

	return graph;
}

// https://en.wikipedia.org/wiki/Breadth-first_search
function deriveBFS(fromModel) {
	const graph = buildGraph();
	const queue = [fromModel]; // Unshift -> queue -> pop

	graph[fromModel].distance = 0;

	while (queue.length) {
		const current = queue.pop();
		const adjacents = Object.keys(conversions[current]);

		for (let len = adjacents.length, i = 0; i < len; i++) {
			const adjacent = adjacents[i];
			const node = graph[adjacent];

			if (node.distance === -1) {
				node.distance = graph[current].distance + 1;
				node.parent = current;
				queue.unshift(adjacent);
			}
		}
	}

	return graph;
}

function link(from, to) {
	return function (args) {
		return to(from(args));
	};
}

function wrapConversion(toModel, graph) {
	const path = [graph[toModel].parent, toModel];
	let fn = conversions[graph[toModel].parent][toModel];

	let cur = graph[toModel].parent;
	while (graph[cur].parent) {
		path.unshift(graph[cur].parent);
		fn = link(conversions[graph[cur].parent][cur], fn);
		cur = graph[cur].parent;
	}

	fn.conversion = path;
	return fn;
}

module.exports = function (fromModel) {
	const graph = deriveBFS(fromModel);
	const conversion = {};

	const models = Object.keys(graph);
	for (let len = models.length, i = 0; i < len; i++) {
		const toModel = models[i];
		const node = graph[toModel];

		if (node.parent === null) {
			// No possible conversion, or this node is the source model.
			continue;
		}

		conversion[toModel] = wrapConversion(toModel, graph);
	}

	return conversion;
};



---

File name: node_modules\color-name\index.js

Code:
'use strict'

module.exports = {
	"aliceblue": [240, 248, 255],
	"antiquewhite": [250, 235, 215],
	"aqua": [0, 255, 255],
	"aquamarine": [127, 255, 212],
	"azure": [240, 255, 255],
	"beige": [245, 245, 220],
	"bisque": [255, 228, 196],
	"black": [0, 0, 0],
	"blanchedalmond": [255, 235, 205],
	"blue": [0, 0, 255],
	"blueviolet": [138, 43, 226],
	"brown": [165, 42, 42],
	"burlywood": [222, 184, 135],
	"cadetblue": [95, 158, 160],
	"chartreuse": [127, 255, 0],
	"chocolate": [210, 105, 30],
	"coral": [255, 127, 80],
	"cornflowerblue": [100, 149, 237],
	"cornsilk": [255, 248, 220],
	"crimson": [220, 20, 60],
	"cyan": [0, 255, 255],
	"darkblue": [0, 0, 139],
	"darkcyan": [0, 139, 139],
	"darkgoldenrod": [184, 134, 11],
	"darkgray": [169, 169, 169],
	"darkgreen": [0, 100, 0],
	"darkgrey": [169, 169, 169],
	"darkkhaki": [189, 183, 107],
	"darkmagenta": [139, 0, 139],
	"darkolivegreen": [85, 107, 47],
	"darkorange": [255, 140, 0],
	"darkorchid": [153, 50, 204],
	"darkred": [139, 0, 0],
	"darksalmon": [233, 150, 122],
	"darkseagreen": [143, 188, 143],
	"darkslateblue": [72, 61, 139],
	"darkslategray": [47, 79, 79],
	"darkslategrey": [47, 79, 79],
	"darkturquoise": [0, 206, 209],
	"darkviolet": [148, 0, 211],
	"deeppink": [255, 20, 147],
	"deepskyblue": [0, 191, 255],
	"dimgray": [105, 105, 105],
	"dimgrey": [105, 105, 105],
	"dodgerblue": [30, 144, 255],
	"firebrick": [178, 34, 34],
	"floralwhite": [255, 250, 240],
	"forestgreen": [34, 139, 34],
	"fuchsia": [255, 0, 255],
	"gainsboro": [220, 220, 220],
	"ghostwhite": [248, 248, 255],
	"gold": [255, 215, 0],
	"goldenrod": [218, 165, 32],
	"gray": [128, 128, 128],
	"green": [0, 128, 0],
	"greenyellow": [173, 255, 47],
	"grey": [128, 128, 128],
	"honeydew": [240, 255, 240],
	"hotpink": [255, 105, 180],
	"indianred": [205, 92, 92],
	"indigo": [75, 0, 130],
	"ivory": [255, 255, 240],
	"khaki": [240, 230, 140],
	"lavender": [230, 230, 250],
	"lavenderblush": [255, 240, 245],
	"lawngreen": [124, 252, 0],
	"lemonchiffon": [255, 250, 205],
	"lightblue": [173, 216, 230],
	"lightcoral": [240, 128, 128],
	"lightcyan": [224, 255, 255],
	"lightgoldenrodyellow": [250, 250, 210],
	"lightgray": [211, 211, 211],
	"lightgreen": [144, 238, 144],
	"lightgrey": [211, 211, 211],
	"lightpink": [255, 182, 193],
	"lightsalmon": [255, 160, 122],
	"lightseagreen": [32, 178, 170],
	"lightskyblue": [135, 206, 250],
	"lightslategray": [119, 136, 153],
	"lightslategrey": [119, 136, 153],
	"lightsteelblue": [176, 196, 222],
	"lightyellow": [255, 255, 224],
	"lime": [0, 255, 0],
	"limegreen": [50, 205, 50],
	"linen": [250, 240, 230],
	"magenta": [255, 0, 255],
	"maroon": [128, 0, 0],
	"mediumaquamarine": [102, 205, 170],
	"mediumblue": [0, 0, 205],
	"mediumorchid": [186, 85, 211],
	"mediumpurple": [147, 112, 219],
	"mediumseagreen": [60, 179, 113],
	"mediumslateblue": [123, 104, 238],
	"mediumspringgreen": [0, 250, 154],
	"mediumturquoise": [72, 209, 204],
	"mediumvioletred": [199, 21, 133],
	"midnightblue": [25, 25, 112],
	"mintcream": [245, 255, 250],
	"mistyrose": [255, 228, 225],
	"moccasin": [255, 228, 181],
	"navajowhite": [255, 222, 173],
	"navy": [0, 0, 128],
	"oldlace": [253, 245, 230],
	"olive": [128, 128, 0],
	"olivedrab": [107, 142, 35],
	"orange": [255, 165, 0],
	"orangered": [255, 69, 0],
	"orchid": [218, 112, 214],
	"palegoldenrod": [238, 232, 170],
	"palegreen": [152, 251, 152],
	"paleturquoise": [175, 238, 238],
	"palevioletred": [219, 112, 147],
	"papayawhip": [255, 239, 213],
	"peachpuff": [255, 218, 185],
	"peru": [205, 133, 63],
	"pink": [255, 192, 203],
	"plum": [221, 160, 221],
	"powderblue": [176, 224, 230],
	"purple": [128, 0, 128],
	"rebeccapurple": [102, 51, 153],
	"red": [255, 0, 0],
	"rosybrown": [188, 143, 143],
	"royalblue": [65, 105, 225],
	"saddlebrown": [139, 69, 19],
	"salmon": [250, 128, 114],
	"sandybrown": [244, 164, 96],
	"seagreen": [46, 139, 87],
	"seashell": [255, 245, 238],
	"sienna": [160, 82, 45],
	"silver": [192, 192, 192],
	"skyblue": [135, 206, 235],
	"slateblue": [106, 90, 205],
	"slategray": [112, 128, 144],
	"slategrey": [112, 128, 144],
	"snow": [255, 250, 250],
	"springgreen": [0, 255, 127],
	"steelblue": [70, 130, 180],
	"tan": [210, 180, 140],
	"teal": [0, 128, 128],
	"thistle": [216, 191, 216],
	"tomato": [255, 99, 71],
	"turquoise": [64, 224, 208],
	"violet": [238, 130, 238],
	"wheat": [245, 222, 179],
	"white": [255, 255, 255],
	"whitesmoke": [245, 245, 245],
	"yellow": [255, 255, 0],
	"yellowgreen": [154, 205, 50]
};


---

File name: node_modules\color-name\package.json

Code:
{
  "name": "color-name",
  "version": "1.1.4",
  "description": "A list of color names and its values",
  "main": "index.js",
  "files": [
    "index.js"
  ],
  "scripts": {
    "test": "node test.js"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:colorjs/color-name.git"
  },
  "keywords": [
    "color-name",
    "color",
    "color-keyword",
    "keyword"
  ],
  "author": "DY <dfcreative@gmail.com>",
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/colorjs/color-name/issues"
  },
  "homepage": "https://github.com/colorjs/color-name"
}


---

File name: node_modules\color-name\README.md

Code:
A JSON with color names and its values. Based on http://dev.w3.org/csswg/css-color/#named-colors.

[![NPM](https://nodei.co/npm/color-name.png?mini=true)](https://nodei.co/npm/color-name/)


```js
var colors = require('color-name');
colors.red //[255,0,0]
```

<a href="LICENSE"><img src="https://upload.wikimedia.org/wikipedia/commons/0/0c/MIT_logo.svg" width="120"/></a>


---

File name: node_modules\concat-map\example\map.js

Code:
var concatMap = require('../');
var xs = [ 1, 2, 3, 4, 5, 6 ];
var ys = concatMap(xs, function (x) {
    return x % 2 ? [ x - 0.1, x, x + 0.1 ] : [];
});
console.dir(ys);


---

File name: node_modules\concat-map\index.js

Code:
module.exports = function (xs, fn) {
    var res = [];
    for (var i = 0; i < xs.length; i++) {
        var x = fn(xs[i], i);
        if (isArray(x)) res.push.apply(res, x);
        else res.push(x);
    }
    return res;
};

var isArray = Array.isArray || function (xs) {
    return Object.prototype.toString.call(xs) === '[object Array]';
};


---

File name: node_modules\concat-map\package.json

Code:
{
    "name" : "concat-map",
    "description" : "concatenative mapdashery",
    "version" : "0.0.1",
    "repository" : {
        "type" : "git",
        "url" : "git://github.com/substack/node-concat-map.git"
    },
    "main" : "index.js",
    "keywords" : [
        "concat",
        "concatMap",
        "map",
        "functional",
        "higher-order"
    ],
    "directories" : {
        "example" : "example",
        "test" : "test"
    },
    "scripts" : {
        "test" : "tape test/*.js"
    },
    "devDependencies" : {
        "tape" : "~2.4.0"
    },
    "license" : "MIT",
    "author" : {
        "name" : "James Halliday",
        "email" : "mail@substack.net",
        "url" : "http://substack.net"
    },
    "testling" : {
        "files" : "test/*.js",
        "browsers" : {
            "ie" : [ 6, 7, 8, 9 ],
            "ff" : [ 3.5, 10, 15.0 ],
            "chrome" : [ 10, 22 ],
            "safari" : [ 5.1 ],
            "opera" : [ 12 ]
        }
    }
}


---

File name: node_modules\concat-map\test\map.js

Code:
var concatMap = require('../');
var test = require('tape');

test('empty or not', function (t) {
    var xs = [ 1, 2, 3, 4, 5, 6 ];
    var ixes = [];
    var ys = concatMap(xs, function (x, ix) {
        ixes.push(ix);
        return x % 2 ? [ x - 0.1, x, x + 0.1 ] : [];
    });
    t.same(ys, [ 0.9, 1, 1.1, 2.9, 3, 3.1, 4.9, 5, 5.1 ]);
    t.same(ixes, [ 0, 1, 2, 3, 4, 5 ]);
    t.end();
});

test('always something', function (t) {
    var xs = [ 'a', 'b', 'c', 'd' ];
    var ys = concatMap(xs, function (x) {
        return x === 'b' ? [ 'B', 'B', 'B' ] : [ x ];
    });
    t.same(ys, [ 'a', 'B', 'B', 'B', 'c', 'd' ]);
    t.end();
});

test('scalars', function (t) {
    var xs = [ 'a', 'b', 'c', 'd' ];
    var ys = concatMap(xs, function (x) {
        return x === 'b' ? [ 'B', 'B', 'B' ] : x;
    });
    t.same(ys, [ 'a', 'B', 'B', 'B', 'c', 'd' ]);
    t.end();
});

test('undefs', function (t) {
    var xs = [ 'a', 'b', 'c', 'd' ];
    var ys = concatMap(xs, function () {});
    t.same(ys, [ undefined, undefined, undefined, undefined ]);
    t.end();
});


---

File name: node_modules\convert-source-map\index.js

Code:
'use strict';

Object.defineProperty(exports, 'commentRegex', {
  get: function getCommentRegex () {
    // Groups: 1: media type, 2: MIME type, 3: charset, 4: encoding, 5: data.
    return /^\s*?\/[\/\*][@#]\s+?sourceMappingURL=data:(((?:application|text)\/json)(?:;charset=([^;,]+?)?)?)?(?:;(base64))?,(.*?)$/mg;
  }
});


Object.defineProperty(exports, 'mapFileCommentRegex', {
  get: function getMapFileCommentRegex () {
    // Matches sourceMappingURL in either // or /* comment styles.
    return /(?:\/\/[@#][ \t]+?sourceMappingURL=([^\s'"`]+?)[ \t]*?$)|(?:\/\*[@#][ \t]+sourceMappingURL=([^*]+?)[ \t]*?(?:\*\/){1}[ \t]*?$)/mg;
  }
});

var decodeBase64;
if (typeof Buffer !== 'undefined') {
  if (typeof Buffer.from === 'function') {
    decodeBase64 = decodeBase64WithBufferFrom;
  } else {
    decodeBase64 = decodeBase64WithNewBuffer;
  }
} else {
  decodeBase64 = decodeBase64WithAtob;
}

function decodeBase64WithBufferFrom(base64) {
  return Buffer.from(base64, 'base64').toString();
}

function decodeBase64WithNewBuffer(base64) {
  if (typeof value === 'number') {
    throw new TypeError('The value to decode must not be of type number.');
  }
  return new Buffer(base64, 'base64').toString();
}

function decodeBase64WithAtob(base64) {
  return decodeURIComponent(escape(atob(base64)));
}

function stripComment(sm) {
  return sm.split(',').pop();
}

function readFromFileMap(sm, read) {
  var r = exports.mapFileCommentRegex.exec(sm);
  // for some odd reason //# .. captures in 1 and /* .. */ in 2
  var filename = r[1] || r[2];

  try {
    var sm = read(filename);
    if (sm != null && typeof sm.catch === 'function') {
      return sm.catch(throwError);
    } else {
      return sm;
    }
  } catch (e) {
    throwError(e);
  }

  function throwError(e) {
    throw new Error('An error occurred while trying to read the map file at ' + filename + '\n' + e.stack);
  }
}

function Converter (sm, opts) {
  opts = opts || {};

  if (opts.hasComment) {
    sm = stripComment(sm);
  }

  if (opts.encoding === 'base64') {
    sm = decodeBase64(sm);
  } else if (opts.encoding === 'uri') {
    sm = decodeURIComponent(sm);
  }

  if (opts.isJSON || opts.encoding) {
    sm = JSON.parse(sm);
  }

  this.sourcemap = sm;
}

Converter.prototype.toJSON = function (space) {
  return JSON.stringify(this.sourcemap, null, space);
};

if (typeof Buffer !== 'undefined') {
  if (typeof Buffer.from === 'function') {
    Converter.prototype.toBase64 = encodeBase64WithBufferFrom;
  } else {
    Converter.prototype.toBase64 = encodeBase64WithNewBuffer;
  }
} else {
  Converter.prototype.toBase64 = encodeBase64WithBtoa;
}

function encodeBase64WithBufferFrom() {
  var json = this.toJSON();
  return Buffer.from(json, 'utf8').toString('base64');
}

function encodeBase64WithNewBuffer() {
  var json = this.toJSON();
  if (typeof json === 'number') {
    throw new TypeError('The json to encode must not be of type number.');
  }
  return new Buffer(json, 'utf8').toString('base64');
}

function encodeBase64WithBtoa() {
  var json = this.toJSON();
  return btoa(unescape(encodeURIComponent(json)));
}

Converter.prototype.toURI = function () {
  var json = this.toJSON();
  return encodeURIComponent(json);
};

Converter.prototype.toComment = function (options) {
  var encoding, content, data;
  if (options != null && options.encoding === 'uri') {
    encoding = '';
    content = this.toURI();
  } else {
    encoding = ';base64';
    content = this.toBase64();
  }
  data = 'sourceMappingURL=data:application/json;charset=utf-8' + encoding + ',' + content;
  return options != null && options.multiline ? '/*# ' + data + ' */' : '//# ' + data;
};

// returns copy instead of original
Converter.prototype.toObject = function () {
  return JSON.parse(this.toJSON());
};

Converter.prototype.addProperty = function (key, value) {
  if (this.sourcemap.hasOwnProperty(key)) throw new Error('property "' + key + '" already exists on the sourcemap, use set property instead');
  return this.setProperty(key, value);
};

Converter.prototype.setProperty = function (key, value) {
  this.sourcemap[key] = value;
  return this;
};

Converter.prototype.getProperty = function (key) {
  return this.sourcemap[key];
};

exports.fromObject = function (obj) {
  return new Converter(obj);
};

exports.fromJSON = function (json) {
  return new Converter(json, { isJSON: true });
};

exports.fromURI = function (uri) {
  return new Converter(uri, { encoding: 'uri' });
};

exports.fromBase64 = function (base64) {
  return new Converter(base64, { encoding: 'base64' });
};

exports.fromComment = function (comment) {
  var m, encoding;
  comment = comment
    .replace(/^\/\*/g, '//')
    .replace(/\*\/$/g, '');
  m = exports.commentRegex.exec(comment);
  encoding = m && m[4] || 'uri';
  return new Converter(comment, { encoding: encoding, hasComment: true });
};

function makeConverter(sm) {
  return new Converter(sm, { isJSON: true });
}

exports.fromMapFileComment = function (comment, read) {
  if (typeof read === 'string') {
    throw new Error(
      'String directory paths are no longer supported with `fromMapFileComment`\n' +
      'Please review the Upgrading documentation at https://github.com/thlorenz/convert-source-map#upgrading'
    )
  }

  var sm = readFromFileMap(comment, read);
  if (sm != null && typeof sm.then === 'function') {
    return sm.then(makeConverter);
  } else {
    return makeConverter(sm);
  }
};

// Finds last sourcemap comment in file or returns null if none was found
exports.fromSource = function (content) {
  var m = content.match(exports.commentRegex);
  return m ? exports.fromComment(m.pop()) : null;
};

// Finds last sourcemap comment in file or returns null if none was found
exports.fromMapFileSource = function (content, read) {
  if (typeof read === 'string') {
    throw new Error(
      'String directory paths are no longer supported with `fromMapFileSource`\n' +
      'Please review the Upgrading documentation at https://github.com/thlorenz/convert-source-map#upgrading'
    )
  }
  var m = content.match(exports.mapFileCommentRegex);
  return m ? exports.fromMapFileComment(m.pop(), read) : null;
};

exports.removeComments = function (src) {
  return src.replace(exports.commentRegex, '');
};

exports.removeMapFileComments = function (src) {
  return src.replace(exports.mapFileCommentRegex, '');
};

exports.generateMapFileComment = function (file, options) {
  var data = 'sourceMappingURL=' + file;
  return options && options.multiline ? '/*# ' + data + ' */' : '//# ' + data;
};


---

File name: node_modules\convert-source-map\package.json

Code:
{
  "name": "convert-source-map",
  "version": "2.0.0",
  "description": "Converts a source-map from/to  different formats and allows adding/changing properties.",
  "main": "index.js",
  "scripts": {
    "test": "tap test/*.js --color"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/thlorenz/convert-source-map.git"
  },
  "homepage": "https://github.com/thlorenz/convert-source-map",
  "devDependencies": {
    "inline-source-map": "~0.6.2",
    "tap": "~9.0.0"
  },
  "keywords": [
    "convert",
    "sourcemap",
    "source",
    "map",
    "browser",
    "debug"
  ],
  "author": {
    "name": "Thorsten Lorenz",
    "email": "thlorenz@gmx.de",
    "url": "http://thlorenz.com"
  },
  "license": "MIT",
  "engine": {
    "node": ">=4"
  },
  "files": [
    "index.js"
  ]
}


---

File name: node_modules\convert-source-map\README.md

Code:
# convert-source-map [![Build Status][ci-image]][ci-url]

Converts a source-map from/to  different formats and allows adding/changing properties.

```js
var convert = require('convert-source-map');

var json = convert
  .fromComment('//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVpbGQvZm9vLm1pbi5qcyIsInNvdXJjZXMiOlsic3JjL2Zvby5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZVJvb3QiOiIvIn0=')
  .toJSON();

var modified = convert
  .fromComment('//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVpbGQvZm9vLm1pbi5qcyIsInNvdXJjZXMiOlsic3JjL2Zvby5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZVJvb3QiOiIvIn0=')
  .setProperty('sources', [ 'SRC/FOO.JS' ])
  .toJSON();

console.log(json);
console.log(modified);
```

```json
{"version":3,"file":"build/foo.min.js","sources":["src/foo.js"],"names":[],"mappings":"AAAA","sourceRoot":"/"}
{"version":3,"file":"build/foo.min.js","sources":["SRC/FOO.JS"],"names":[],"mappings":"AAAA","sourceRoot":"/"}
```

## Upgrading

Prior to v2.0.0, the `fromMapFileComment` and `fromMapFileSource` functions took a String directory path and used that to resolve & read the source map file from the filesystem. However, this made the library limited to nodejs environments and broke on sources with querystrings.

In v2.0.0, you now need to pass a function that does the file reading. It will receive the source filename as a String that you can resolve to a filesystem path, URL, or anything else.

If you are using `convert-source-map` in nodejs and want the previous behavior, you'll use a function like such:

```diff
+ var fs = require('fs'); // Import the fs module to read a file
+ var path = require('path'); // Import the path module to resolve a path against your directory
- var conv = convert.fromMapFileSource(css, '../my-dir');
+ var conv = convert.fromMapFileSource(css, function (filename) {
+   return fs.readFileSync(path.resolve('../my-dir', filename), 'utf-8');
+ });
```

## API

### fromObject(obj)

Returns source map converter from given object.

### fromJSON(json)

Returns source map converter from given json string.

### fromURI(uri)

Returns source map converter from given uri encoded json string.

### fromBase64(base64)

Returns source map converter from given base64 encoded json string.

### fromComment(comment)

Returns source map converter from given base64 or uri encoded json string prefixed with `//# sourceMappingURL=...`.

### fromMapFileComment(comment, readMap)

Returns source map converter from given `filename` by parsing `//# sourceMappingURL=filename`.

`readMap` must be a function which receives the source map filename and returns either a String or Buffer of the source map (if read synchronously), or a `Promise` containing a String or Buffer of the source map (if read asynchronously).

If `readMap` doesn't return a `Promise`, `fromMapFileComment` will return a source map converter synchronously.

If `readMap` returns a `Promise`, `fromMapFileComment` will also return `Promise`. The `Promise` will be either resolved with the source map converter or rejected with an error.

#### Examples

**Synchronous read in Node.js:**

```js
var convert = require('convert-source-map');
var fs = require('fs');

function readMap(filename) {
  return fs.readFileSync(filename, 'utf8');
}

var json = convert
  .fromMapFileComment('//# sourceMappingURL=map-file-comment.css.map', readMap)
  .toJSON();
console.log(json);
```


**Asynchronous read in Node.js:**

```js
var convert = require('convert-source-map');
var { promises: fs } = require('fs'); // Notice the `promises` import

function readMap(filename) {
  return fs.readFile(filename, 'utf8');
}

var converter = await convert.fromMapFileComment('//# sourceMappingURL=map-file-comment.css.map', readMap)
var json = converter.toJSON();
console.log(json);
```

**Asynchronous read in the browser:**

```js
var convert = require('convert-source-map');

async function readMap(url) {
  const res = await fetch(url);
  return res.text();
}

const converter = await convert.fromMapFileComment('//# sourceMappingURL=map-file-comment.css.map', readMap)
var json = converter.toJSON();
console.log(json);
```

### fromSource(source)

Finds last sourcemap comment in file and returns source map converter or returns `null` if no source map comment was found.

### fromMapFileSource(source, readMap)

Finds last sourcemap comment in file and returns source map converter or returns `null` if no source map comment was found.

`readMap` must be a function which receives the source map filename and returns either a String or Buffer of the source map (if read synchronously), or a `Promise` containing a String or Buffer of the source map (if read asynchronously).

If `readMap` doesn't return a `Promise`, `fromMapFileSource` will return a source map converter synchronously.

If `readMap` returns a `Promise`, `fromMapFileSource` will also return `Promise`. The `Promise` will be either resolved with the source map converter or rejected with an error.

### toObject()

Returns a copy of the underlying source map.

### toJSON([space])

Converts source map to json string. If `space` is given (optional), this will be passed to
[JSON.stringify](https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/JSON/stringify) when the
JSON string is generated.

### toURI()

Converts source map to uri encoded json string.

### toBase64()

Converts source map to base64 encoded json string.

### toComment([options])

Converts source map to an inline comment that can be appended to the source-file.

By default, the comment is formatted like: `//# sourceMappingURL=...`, which you would
normally see in a JS source file.

When `options.encoding == 'uri'`, the data will be uri encoded, otherwise they will be base64 encoded.

When `options.multiline == true`, the comment is formatted like: `/*# sourceMappingURL=... */`, which you would find in a CSS source file.

### addProperty(key, value)

Adds given property to the source map. Throws an error if property already exists.

### setProperty(key, value)

Sets given property to the source map. If property doesn't exist it is added, otherwise its value is updated.

### getProperty(key)

Gets given property of the source map.

### removeComments(src)

Returns `src` with all source map comments removed

### removeMapFileComments(src)

Returns `src` with all source map comments pointing to map files removed.

### commentRegex

Provides __a fresh__ RegExp each time it is accessed. Can be used to find source map comments.

Breaks down a source map comment into groups: Groups: 1: media type, 2: MIME type, 3: charset, 4: encoding, 5: data.

### mapFileCommentRegex

Provides __a fresh__ RegExp each time it is accessed. Can be used to find source map comments pointing to map files.

### generateMapFileComment(file, [options])

Returns a comment that links to an external source map via `file`.

By default, the comment is formatted like: `//# sourceMappingURL=...`, which you would normally see in a JS source file.

When `options.multiline == true`, the comment is formatted like: `/*# sourceMappingURL=... */`, which you would find in a CSS source file.

[ci-url]: https://github.com/thlorenz/convert-source-map/actions?query=workflow:ci
[ci-image]: https://img.shields.io/github/workflow/status/thlorenz/convert-source-map/CI?style=flat-square


---

File name: node_modules\core-js-compat\compat.d.ts

Code:
import type { ModuleName, Target, TargetVersion } from "./shared";

type StringOrRegExp = string | RegExp;

type Modules = StringOrRegExp | readonly StringOrRegExp[];

type BrowserslistQuery = string | ReadonlyArray<string>;

type Environments = {
  [target in Target]?: string | number;
};

type Targets = Environments & {
  browsers?: Environments | BrowserslistQuery,
  esmodules?: boolean | 'intersect',
};

type CompatOptions = {
  /** entry / module / namespace / an array of them, by default - all `core-js` modules */
  modules?: Modules,
  /** a blacklist, entry / module / namespace / an array of them, by default - empty list */
  exclude?: Modules,
  /** optional browserslist or core-js-compat format query */
  targets?: Targets | BrowserslistQuery,
  /** used `core-js` version, by default the latest */
  version?: string,
  /** inverse of the result, shows modules that are NOT required for the target environment */
  inverse?: boolean,
  /**
   * @deprecated use `modules` instead
   */
  filter?: Modules
};

type CompatOutput = {
  /** array of required modules */
  list: ModuleName[],
  /** object with targets for each module */
  targets: {
    [module: ModuleName]: {
      [target in Target]?: TargetVersion
    }
  }
}

declare function compat(options?: CompatOptions): CompatOutput;

export = compat;


---

File name: node_modules\core-js-compat\compat.js

Code:
'use strict';
const { compare, filterOutStabilizedProposals, has, intersection } = require('./helpers');
const data = require('./data');
const entries = require('./entries');
const getModulesListForTargetVersion = require('./get-modules-list-for-target-version');
const allModules = require('./modules');
const targetsParser = require('./targets-parser');

function throwInvalidFilter(filter) {
  throw new TypeError(`Specified invalid module name or pattern: ${ filter }`);
}

function atLeastSomeModules(modules, filter) {
  if (!modules.length) throwInvalidFilter(filter);
  return modules;
}

function getModules(filter) {
  if (typeof filter == 'string') {
    if (has(entries, filter)) return entries[filter];
    return atLeastSomeModules(allModules.filter(it => it.startsWith(filter)), filter);
  }
  if (filter instanceof RegExp) return atLeastSomeModules(allModules.filter(it => filter.test(it)), filter);
  throwInvalidFilter(filter);
}

function normalizeModules(option) {
  // TODO: use `.flatMap` in core-js@4
  return new Set(Array.isArray(option) ? [].concat(...option.map(getModules)) : getModules(option));
}

function checkModule(name, targets) {
  const result = {
    required: !targets,
    targets: {},
  };

  if (!targets) return result;

  const requirements = data[name];

  for (const [engine, version] of targets) {
    if (!has(requirements, engine) || compare(version, '<', requirements[engine])) {
      result.required = true;
      result.targets[engine] = version;
    }
  }

  return result;
}

module.exports = function ({
  filter = null, // TODO: Obsolete, remove from `core-js@4`
  modules = null,
  exclude = [],
  targets = null,
  version = null,
  inverse = false,
} = {}) {
  if (modules === null || modules === undefined) modules = filter;
  inverse = !!inverse;

  const parsedTargets = targets ? targetsParser(targets) : null;

  const result = {
    list: [],
    targets: {},
  };

  exclude = normalizeModules(exclude);

  modules = modules ? [...normalizeModules(modules)] : allModules;

  if (exclude.size) modules = modules.filter(it => !exclude.has(it));

  modules = intersection(modules, version ? getModulesListForTargetVersion(version) : allModules);

  if (!inverse) modules = filterOutStabilizedProposals(modules);

  for (const key of modules) {
    const check = checkModule(key, parsedTargets);

    if (check.required ^ inverse) {
      result.list.push(key);
      result.targets[key] = check.targets;
    }
  }

  return result;
};


---

File name: node_modules\core-js-compat\data.json

Code:
{
  "es.symbol": {
    "android": "49",
    "bun": "0.1.1",
    "chrome": "49",
    "chrome-android": "49",
    "deno": "1.0",
    "edge": "15",
    "electron": "0.37",
    "firefox": "51",
    "firefox-android": "51",
    "hermes": "0.1",
    "ios": "10.0",
    "node": "6.0",
    "oculus": "3.0",
    "opera": "36",
    "opera-android": "36",
    "opera_mobile": "36",
    "quest": "3.0",
    "react-native": "0.69",
    "rhino": "1.7.15",
    "safari": "10.0",
    "samsung": "5.0"
  },
  "es.symbol.description": {
    "android": "70",
    "bun": "0.1.1",
    "chrome": "70",
    "chrome-android": "70",
    "deno": "1.0",
    "edge": "79",
    "electron": "5.0",
    "firefox": "63",
    "firefox-android": "63",
    "ios": "12.2",
    "node": "11.0",
    "oculus": "6.0",
    "opera": "57",
    "opera-android": "49",
    "opera_mobile": "49",
    "quest": "6.0",
    "rhino": "1.8.0",
    "safari": "12.1",
    "samsung": "10.0"
  },
  "es.symbol.async-dispose": {
    "android": "127",
    "bun": "1.0.23",
    "chrome": "127",
    "chrome-android": "127",
    "deno": "1.38",
    "edge": "127",
    "electron": "32.0",
    "firefox": "135",
    "firefox-android": "135",
    "node": "20.5.0",
    "oculus": "35.0",
    "opera": "113",
    "opera-android": "84",
    "opera_mobile": "84",
    "quest": "35.0",
    "samsung": "28.0"
  },
  "es.symbol.async-iterator": {
    "android": "63",
    "bun": "0.1.1",
    "chrome": "63",
    "chrome-android": "63",
    "deno": "1.0",
    "edge": "79",
    "electron": "3.0",
    "firefox": "55",
    "firefox-android": "55",
    "ios": "12.0",
    "node": "10.0",
    "oculus": "5.0",
    "opera": "50",
    "opera-android": "46",
    "opera_mobile": "46",
    "quest": "5.0",
    "safari": "12.0",
    "samsung": "8.0"
  },
  "es.symbol.dispose": {
    "android": "125",
    "bun": "1.0.23",
    "chrome": "125",
    "chrome-android": "125",
    "deno": "1.38",
    "edge": "125",
    "electron": "31.0",
    "firefox": "135",
    "firefox-android": "135",
    "node": "20.5.0",
    "oculus": "34.0",
    "opera": "111",
    "opera-android": "83",
    "opera_mobile": "83",
    "quest": "34.0",
    "samsung": "27.0"
  },
  "es.symbol.has-instance": {
    "android": "50",
    "bun": "0.1.1",
    "chrome": "50",
    "chrome-android": "50",
    "deno": "1.0",
    "edge": "15",
    "electron": "1.1",
    "firefox": "49",
    "firefox-android": "49",
    "hermes": "0.1",
    "ios": "10.0",
    "node": "6.0",
    "oculus": "3.0",
    "opera": "37",
    "opera-android": "37",
    "opera_mobile": "37",
    "quest": "3.0",
    "react-native": "0.69",
    "rhino": "1.7.13",
    "safari": "10.0",
    "samsung": "5.0"
  },
  "es.symbol.is-concat-spreadable": {
    "android": "48",
    "bun": "0.1.1",
    "chrome": "48",
    "chrome-android": "48",
    "deno": "1.0",
    "edge": "15",
    "electron": "0.37",
    "firefox": "48",
    "firefox-android": "48",
    "hermes": "0.1",
    "ios": "10.0",
    "node": "6.0",
    "oculus": "3.0",
    "opera": "35",
    "opera-android": "35",
    "opera_mobile": "35",
    "quest": "3.0",
    "react-native": "0.69",
    "rhino": "1.7.13",
    "safari": "10.0",
    "samsung": "5.0"
  },
  "es.symbol.iterator": {
    "android": "41",
    "bun": "0.1.1",
    "chrome": "41",
    "chrome-android": "41",
    "deno": "1.0",
    "edge": "13",
    "electron": "0.21",
    "firefox": "36",
    "firefox-android": "36",
    "hermes": "0.1",
    "ios": "9.0",
    "node": "1.0",
    "oculus": "3.0",
    "opera": "28",
    "opera-android": "28",
    "opera_mobile": "28",
    "quest": "3.0",
    "react-native": "0.69",
    "rhino": "1.7.13",
    "safari": "9.0",
    "samsung": "3.4"
  },
  "es.symbol.match": {
    "android": "50",
    "bun": "0.1.1",
    "chrome": "50",
    "chrome-android": "50",
    "deno": "1.0",
    "edge": "79",
    "electron": "1.1",
    "firefox": "40",
    "firefox-android": "40",
    "hermes": "0.1",
    "ios": "10.0",
    "node": "6.0",
    "oculus": "3.0",
    "opera": "37",
    "opera-android": "37",
    "opera_mobile": "37",
    "quest": "3.0",
    "react-native": "0.69",
    "rhino": "1.7.13",
    "safari": "10.0",
    "samsung": "5.0"
  },
  "es.symbol.match-all": {
    "android": "73",
    "bun": "0.1.1",
    "chrome": "73",
    "chrome-android": "73",
    "deno": "1.0",
    "edge": "79",
    "electron": "5.0",
    "firefox": "67",
    "firefox-android": "67",
    "hermes": "0.6",
    "ios": "13.0",
    "node": "12.0",
    "oculus": "6.0",
    "opera": "60",
    "opera-android": "52",
    "opera_mobile": "52",
    "quest": "6.0",
    "react-native": "0.69",
    "rhino": "1.8.0",
    "safari": "13",
    "samsung": "11.0"
  },
  "es.symbol.replace": {
    "android": "50",
    "bun": "0.1.1",
    "chrome": "50",
    "chrome-android": "50",
    "deno": "1.0",
    "edge": "79",
    "electron": "1.1",
    "firefox": "49",
    "firefox-android": "49",
    "hermes": "0.1",
    "ios": "10.0",
    "node": "6.0",
    "oculus": "3.0",
    "opera": "37",
    "opera-android": "37",
    "opera_mobile": "37",
    "quest": "3.0",
    "react-native": "0.69",
    "rhino": "1.7.13",
    "safari": "10.0",
    "samsung": "5.0"
  },
  "es.symbol.search": {
    "android": "50",
    "bun": "0.1.1",
    "chrome": "50",
    "chrome-android": "50",
    "deno": "1.0",
    "edge": "79",
    "electron": "1.1",
    "firefox": "49",
    "firefox-android": "49",
    "hermes": "0.1",
    "ios": "10.0",
    "node": "6.0",
    "oculus": "3.0",
    "opera": "37",
    "opera-android": "37",
    "opera_mobile": "37",
    "quest": "3.0",
    "react-native": "0.69",
    "rhino": "1.7.13",
    "safari": "10.0",
    "samsung": "5.0"
  },
  "es.symbol.species": {
    "android": "51",
    "bun": "0.1.1",
    "chrome": "51",
    "chrome-android": "51",
    "deno": "1.0",
    "edge": "13",
    "electron": "1.2",
    "firefox": "41",
    "firefox-android": "41",
    "ios": "10.0",
    "node": "6.5",
    "oculus": "3.0",
    "opera": "38",
    "opera-android": "38",
    "opera_mobile": "38",
    "quest": "3.0",
    "rhino": "1.7.13",
    "safari": "10.0",
    "samsung": "5.0"
  },
  "es.symbol.split": {
    "android": "50",
    "bun": "0.1.1",
    "chrome": "50",
    "chrome-android": "50",
    "deno": "1.0",
    "edge": "79",
    "electron": "1.1",
    "firefox": "49",
    "firefox-android": "49",
    "hermes": "0.1",
    "ios": "10.0",
    "node": "6.0",
    "oculus": "3.0",
    "opera": "37",
    "opera-android": "37",
    "opera_mobile": "37",
    "quest": "3.0",
    "react-native": "0.69",
    "rhino": "1.7.13",
    "safari": "10.0",
    "samsung": "5.0"
  },
  "es.symbol.to-primitive": {
    "android": "47",
    "bun": "0.1.1",
    "chrome": "47",
    "chrome-android": "47",
    "deno": "1.0",
    "edge": "15",
    "electron": "0.36",
    "firefox": "44",
    "firefox-android": "44",
    "hermes": "0.1",
    "ios": "10.0",
    "node": "6.0",
    "oculus": "3.0",
    "opera": "34",
    "opera-android": "34",
    "opera_mobile": "34",
    "quest": "3.0",
    "react-native": "0.69",
    "rhino": "1.7.13",
    "safari": "10.0",
    "samsung": "5.0"
  },
  "es.symbol.to-string-tag": {
    "android": "49",
    "bun": "0.1.1",
    "chrome": "49",
    "chrome-android": "49",
    "deno": "1.0",
    "edge": "15",
    "electron": "0.37",
    "firefox": "51",
    "firefox-android": "51",
    "hermes": "0.1",
    "ios": "10.0",
    "node": "6.0",
    "oculus": "3.0",
    "opera": "36",
    "opera-android": "36",
    "opera_mobile": "36",
    "quest": "3.0",
    "react-native": "0.69",
    "rhino": "1.7.13",
    "safari": "10.0",
    "samsung": "5.0"
  },
  "es.symbol.unscopables": {
    "android": "41",
    "bun": "0.1.1",
    "chrome": "41",
    "chrome-android": "41",
    "deno": "1.0",
    "edge": "13",
    "electron": "0.21",
    "firefox": "48",
    "firefox-android": "48",
    "ios": "9.0",
    "node": "1.0",
    "oculus": "3.0",
    "opera": "28",
    "opera-android": "28",
    "opera_mobile": "28",
    "quest": "3.0",
    "rhino": "1.7.13",
    "safari": "9.0",
    "samsung": "3.4"
  },
  "es.error.cause": {
    "android": "94",
    "bun": "0.1.1",
    "chrome": "94",
    "chrome-android": "94",
    "deno": "1.14",
    "edge": "94",
    "electron": "15.0",
    "firefox": "91",
    "firefox-android": "91",
    "hermes": "0.8",
    "ios": "15.0",
    "node": "16.11",
    "oculus": "18.0",
    "opera": "80",
    "opera-android": "66",
    "opera_mobile": "66",
    "quest": "18.0",
    "react-native": "0.69",
    "rhino": "1.8.0",
    "safari": "15.0",
    "samsung": "17.0"
  },
  "es.error.is-error": {
    "android": "134",
    "chrome": "134",
    "chrome-android": "134",
    "deno": "2.2",
    "edge": "134",
    "electron": "35.0",
    "firefox": "138",
    "firefox-android": "138",
    "opera": "119",
    "opera-android": "88",
    "opera_mobile": "88"
  },
  "es.error.to-string": {
    "android": "4.4.3",
    "bun": "0.1.1",
    "chrome": "33",
    "chrome-android": "33",
    "deno": "1.0",
    "edge": "12",
    "electron": "0.20",
    "firefox": "11",
    "firefox-android": "11",
    "hermes": "0.1",
    "ie": "9",
    "ios": "9.0",
    "node": "0.11.13",
    "oculus": "3.0",
    "opera": "20",
    "opera-android": "20",
    "opera_mobile": "20",
    "quest": "3.0",
    "react-native": "0.69",
    "rhino": "1.7.14",
    "safari": "8.0",
    "samsung": "2.0"
  },
  "es.aggregate-error": {
    "android": "85",
    "bun": "0.1.1",
    "chrome": "85",
    "chrome-android": "85",
    "deno": "1.2",
    "edge": "85",
    "electron": "10.0",
    "firefox": "79",
    "firefox-android": "79",
    "hermes": "0.13",
    "ios": "14.0",
    "node": "15.0",
    "oculus": "12.0",
    "opera": "71",
    "opera-android": "60",
    "opera_mobile": "60",
    "quest": "12.0",
    "react-native": "0.72",
    "rhino": "1.8.0",
    "safari": "14.0",
    "samsung": "14.0"
  },
  "es.aggregate-error.cause": {
    "android": "94",
    "bun": "0.1.1",
    "chrome": "94",
    "chrome-android": "94",
    "deno": "1.14",
    "edge": "94",
    "electron": "15.0",
    "firefox": "91",
    "firefox-android": "91",
    "hermes": "0.13",
    "ios": "15.0",
    "node": "16.11",
    "oculus": "18.0",
    "opera": "80",
    "opera-android": "66",
    "opera_mobile": "66",
    "quest": "18.0",
    "react-native": "0.72",
    "rhino": "1.8.0",
    "safari": "15.0",
    "samsung": "17.0"
  },
  "es.suppressed-error.constructor": {
    "android": "136",
    "bun": "1.2.15",
    "chrome": "136",
    "chrome-android": "136",
    "deno": "2.2.10",
    "edge": "136",
    "electron": "36.0",
    "node": "24.0",
    "opera": "121",
    "opera-android": "90",
    "opera_mobile": "90"
  },
  "es.array.at": {
    "android": "92",
    "bun": "0.1.1",
    "chrome": "92",
    "chrome-android": "92",
    "deno": "1.12",
    "edge": "92",
    "electron": "14.0",
    "firefox": "90",
    "firefox-android": "90",
    "hermes": "0.13",
    "ios": "15.4",
    "node": "16.6",
    "oculus": "17.0",
    "opera": "78",
    "opera-android": "65",
    "opera_mobile": "65",
    "quest": "17.0",
    "react-native": "0.71",
    "rhino": "1.7.15",
    "safari": "15.4",
    "samsung": "16.0"
  },
  "es.array.concat": {
    "android": "51",
    "bun": "0.1.1",
    "chrome": "51",
    "chrome-android": "51",
    "deno": "1.0",
    "edge": "15",
    "electron": "1.2",
    "firefox": "48",
    "firefox-android": "48",
    "ios": "10.0",
    "node": "6.5",
    "oculus": "3.0",
    "opera": "38",
    "opera-android": "38",
    "opera_mobile": "38",
    "quest": "3.0",
    "safari": "10.0",
    "samsung": "5.0"
  },
  "es.array.copy-within": {
    "android": "45",
    "bun": "0.1.1",
    "chrome": "45",
    "chrome-android": "45",
    "deno": "1.0",
    "edge": "12",
    "electron": "0.31",
    "firefox": "48",
    "firefox-android": "48",
    "ios": "9.0",
    "node": "4.0",
    "oculus": "3.0",
    "opera": "32",
    "opera-android": "32",
    "opera_mobile": "32",
    "quest": "3.0",
    "rhino": "1.8.0",
    "safari": "9.0",
    "samsung": "5.0"
  },
  "es.array.every": {
    "android": "4.4",
    "bun": "0.1.1",
    "chrome": "26",
    "chrome-android": "26",
    "deno": "1.0",
    "edge": "12",
    "electron": "0.20",
    "firefox": "4",
    "firefox-android": "4",
    "hermes": "0.1",
    "ie": "9",
    "ios": "8.0",
    "node": "0.11.0",
    "oculus": "3.0",
    "opera": "15",
    "opera-android": "15",
    "opera_mobile": "15",
    "quest": "3.0",
    "react-native": "0.69",
    "rhino": "1.7.13",
    "safari": "7.1",
    "samsung": "1.5"
  },
  "es.array.fill": {
    "android": "45",
    "bun": "0.1.1",
    "chrome": "45",
    "chrome-android": "45",
    "deno": "1.0",
    "edge": "12",
    "electron": "0.31",
    "firefox": "48",
    "firefox-android": "48",
    "ios": "9.0",
    "node": "4.0",
    "oculus": "3.0",
    "opera": "32",
    "opera-android": "32",
    "opera_mobile": "32",
    "quest": "3.0",
    "rhino": "1.8.0",
    "safari": "9.0",
    "samsung": "5.0"
  },
  "es.array.filter": {
    "android": "51",
    "bun": "0.1.1",
    "chrome": "51",
    "chrome-android": "51",
    "deno": "1.0",
    "edge": "15",
    "electron": "1.2",
    "firefox": "48",
    "firefox-android": "48",
    "ios": "10.0",
    "node": "6.5",
    "oculus": "3.0",
    "opera": "38",
    "opera-android": "38",
    "opera_mobile": "38",
    "quest": "3.0",
    "safari": "10.0",
    "samsung": "5.0"
  },
  "es.array.find": {
    "android": "45",
    "bun": "0.1.1",
    "chrome": "45",
    "chrome-android": "45",
    "deno": "1.0",
    "edge": "13",
    "electron": "0.31",
    "firefox": "48",
    "firefox-android": "48",
    "ios": "9.0",
    "node": "4.0",
    "oculus": "3.0",
    "opera": "32",
    "opera-android": "32",
    "opera_mobile": "32",
    "quest": "3.0",
    "rhino": "1.8.0",
    "safari": "9.0",
    "samsung": "5.0"
  },
  "es.array.find-index": {
    "android": "45",
    "bun": "0.1.1",
    "chrome": "45",
    "chrome-android": "45",
    "deno": "1.0",
    "edge": "13",
    "electron": "0.31",
    "firefox": "48",
    "firefox-android": "48",
    "ios": "9.0",
    "node": "4.0",
    "oculus": "3.0",
    "opera": "32",
    "opera-android": "32",
    "opera_mobile": "32",
    "quest": "3.0",
    "rhino": "1.8.0",
    "safari": "9.0",
    "samsung": "5.0"
  },
  "es.array.find-last": {
    "android": "97",
    "bun": "0.1.1",
    "chrome": "97",
    "chrome-android": "97",
    "deno": "1.16",
    "edge": "97",
    "electron": "17.0",
    "firefox": "104",
    "firefox-android": "104",
    "hermes": "0.11",
    "ios": "15.4",
    "node": "18.0",
    "oculus": "20.0",
    "opera": "83",
    "opera-android": "68",
    "opera_mobile": "68",
    "quest": "20.0",
    "react-native": "0.69",
    "rhino": "1.8.0",
    "safari": "15.4",
    "samsung": "18.0"
  },
  "es.array.find-last-index": {
    "android": "97",
    "bun": "0.1.1",
    "chrome": "97",
    "chrome-android": "97",
    "deno": "1.16",
    "edge": "97",
    "electron": "17.0",
    "firefox": "104",
    "firefox-android": "104",
    "hermes": "0.11",
    "ios": "15.4",
    "node": "18.0",
    "oculus": "20.0",
    "opera": "83",
    "opera-android": "68",
    "opera_mobile": "68",
    "quest": "20.0",
    "react-native": "0.69",
    "rhino": "1.8.0",
    "safari": "15.4",
    "samsung": "18.0"
  },
  "es.array.flat": {
    "android": "69",
    "bun": "0.1.1",
    "chrome": "69",
    "chrome-android": "69",
    "deno": "1.0",
    "edge": "79",
    "electron": "4.0",
    "firefox": "62",
    "firefox-android": "62",
    "hermes": "0.4",
    "ios": "12.0",
    "node": "11.0",
    "oculus": "6.0",
    "opera": "56",
    "opera-android": "48",
    "opera_mobile": "48",
    "quest": "6.0",
    "react-native": "0.69",
    "rhino": "1.7.15",
    "safari": "12.0",
    "samsung": "10.0"
  },
  "es.array.flat-map": {
    "android": "69",
    "bun": "0.1.1",
    "chrome": "69",
    "chrome-android": "69",
    "deno": "1.0",
    "edge": "79",
    "electron": "4.0",
    "firefox": "62",
    "firefox-android": "62",
    "hermes": "0.4",
    "ios": "12.0",
    "node": "11.0",
    "oculus": "6.0",
    "opera": "56",
    "opera-android": "48",
    "opera_mobile": "48",
    "quest": "6.0",
    "react-native": "0.69",
    "rhino": "1.7.15",
    "safari": "12.0",
    "samsung": "10.0"
  },
  "es.array.for-each": {
    "android": "4.4",
    "bun": "0.1.1",
    "chrome": "26",
    "chrome-android": "26",
    "deno": "1.0",
    "edge": "12",
    "electron": "0.20",
    "firefox": "4",
    "firefox-android": "4",
    "hermes": "0.1",
    "ie": "9",
    "ios": "8.0",
    "node": "0.11.0",
    "oculus": "3.0",
    "opera": "15",
    "opera-android": "15",
    "opera_mobile": "15",
    "quest": "3.0",
    "react-native": "0.69",
    "rhino": "1.7.13",
    "safari": "7.1",
    "samsung": "1.5"
  },
  "es.array.from": {
    "android": "51",
    "bun": "0.1.1",
    "chrome": "51",
    "chrome-android": "51",
    "deno": "1.0",
    "edge": "15",
    "electron": "1.2",
    "firefox": "53",
    "firefox-android": "53",
    "hermes": "0.13",
    "ios": "9.0",
    "node": "6.5",
    "oculus": "3.0",
    "opera": "38",
    "opera-android": "38",
    "opera_mobile": "38",
    "quest": "3.0",
    "react-native": "0.73",
    "rhino": "1.7.13",
    "safari": "9.0",
    "samsung": "5.0"
  },
  "es.array.includes": {
    "android": "53",
    "bun": "0.1.1",
    "chrome": "53",
    "chrome-android": "53",
    "deno": "1.0",
    "edge": "14",
    "electron": "1.4",
    "firefox": "102",
    "firefox-android": "102",
    "ios": "10.0",
    "node": "7.0",
    "oculus": "3.0",
    "opera": "40",
    "opera-android": "40",
    "opera_mobile": "40",
    "quest": "3.0",
    "rhino": "1.8.0",
    "safari": "10.0",
    "samsung": "6.0"
  },
  "es.array.index-of": {
    "android": "51",
    "bun": "0.1.1",
    "chrome": "51",
    "chrome-android": "51",
    "deno": "1.0",
    "edge": "12",
    "electron": "1.2",
    "firefox": "47",
    "firefox-android": "47",
    "hermes": "0.1",
    "ie": "9",
    "ios": "8.0",
    "node": "6.5",
    "oculus": "3.0",
    "opera": "38",
    "opera-android": "38",
    "opera_mobile": "38",
    "quest": "3.0",
    "react-native": "0.69",
    "rhino": "1.7.13",
    "safari": "7.1",
    "samsung": "5.0"
  },
  "es.array.is-array": {
    "android": "3.0",
    "bun": "0.1.1",
    "chrome": "5",
    "chrome-android": "18",
    "deno": "1.0",
    "edge": "12",
    "electron": "0.20",
    "firefox": "4",
    "firefox-android": "4",
    "hermes": "0.1",
    "ie": "9",
    "ios": "3.0",
    "node": "0.1.27",
    "oculus": "3.0",
    "opera": "10.50",
    "opera-android": "10.50",
    "opera_mobile": "10.50",
    "phantom": "1.9",
    "quest": "3.0",
    "react-native": "0.69",
    "rhino": "1.7.13",
    "safari": "4.0",
    "samsung": "1.0"
  },
  "es.array.iterator": {
    "android": "66",
    "bun": "0.1.1",
    "chrome": "66",
    "chrome-android": "66",
    "deno": "1.0",
    "edge": "15",
    "electron": "3.0",
    "firefox": "60",
    "firefox-android": "60",
    "ios": "10.0",
    "node": "10.0",
    "oculus": "5.0",
    "opera": "53",
    "opera-android": "47",
    "opera_mobile": "47",
    "quest": "5.0",
    "rhino": "1.8.0",
    "safari": "10.0",
    "samsung": "9.0"
  },
  "es.array.join": {
    "android": "4.4",
    "bun": "0.1.1",
    "chrome": "26",
    "chrome-android": "26",
    "deno": "1.0",
    "edge": "13",
    "electron": "0.20",
    "firefox": "4",
    "firefox-android": "4",
    "hermes": "0.1",
    "ios": "8.0",
    "node": "0.11.0",
    "oculus": "3.0",
    "opera": "15",
    "opera-android": "15",
    "opera_mobile": "15",
    "quest": "3.0",
    "react-native": "0.69",
    "rhino": "1.7.13",
    "safari": "7.1",
    "samsung": "1.5"
  },
  "es.array.last-index-of": {
    "android": "51",
    "bun": "0.1.1",
    "chrome": "51",
    "chrome-android": "51",
    "deno": "1.0",
    "edge": "12",
    "electron": "1.2",
    "firefox": "47",
    "firefox-android": "47",
    "hermes": "0.1",
    "ie": "9",
    "ios": "8.0",
    "node": "6.5",
    "oculus": "3.0",
    "opera": "38",
    "opera-android": "38",
    "opera_mobile": "38",
    "quest": "3.0",
    "react-native": "0.69",
    "rhino": "1.7.13",
    "safari": "7.1",
    "samsung": "5.0"
  },
  "es.array.map": {
    "android": "51",
    "bun": "0.1.1",
    "chrome": "51",
    "chrome-android": "51",
    "deno": "1.0",
    "edge": "13",
    "electron": "1.2",
    "firefox": "50",
    "firefox-android": "50",
    "ios": "10.0",
    "node": "6.5",
    "oculus": "3.0",
    "opera": "38",
    "opera-android": "38",
    "opera_mobile": "38",
    "quest": "3.0",
    "safari": "10.0",
    "samsung": "5.0"
  },
  "es.array.of": {
    "android": "45",
    "bun": "0.1.1",
    "chrome": "45",
    "chrome-android": "45",
    "deno": "1.0",
    "edge": "13",
    "electron": "0.31",
    "firefox": "25",
    "firefox-android": "25",
    "hermes": "0.1",
    "ios": "9.0",
    "node": "4.0",
    "oculus": "3.0",
    "opera": "32",
    "opera-android": "32",
    "opera_mobile": "32",
    "quest": "3.0",
    "react-native": "0.69",
    "rhino": "1.7.13",
    "safari": "9.0",
    "samsung": "5.0"
  },
  "es.array.push": {
    "android": "122",
    "bun": "0.1.1",
    "chrome": "122",
    "chrome-android": "122",
    "deno": "1.41.3",
    "edge": "122",
    "electron": "29.0",
    "firefox": "55",
    "firefox-android": "55",
    "hermes": "0.2",
    "ios": "16.0",
    "node": "22.0",
    "oculus": "32.0",
    "opera": "108",
    "opera-android": "81",
    "opera_mobile": "81",
    "quest": "32.0",
    "react-native": "0.69",
    "safari": "16.0",
    "samsung": "26.0"
  },
  "es.array.reduce": {
    "android": "83",
    "bun": "0.1.1",
    "chrome": "83",
    "chrome-android": "83",
    "deno": "1.0",
    "edge": "12",
    "electron": "9.0",
    "firefox": "4",
    "firefox-android": "4",
    "hermes": "0.1",
    "ie": "9",
    "ios": "8.0",
    "node": "6.0",
    "oculus": "10.0",
    "opera": "69",
    "opera-android": "59",
    "opera_mobile": "59",
    "quest": "10.0",
    "react-native": "0.69",
    "rhino": "1.7.13",
    "safari": "7.1",
    "samsung": "13.0"
  },
  "es.array.reduce-right": {
    "android": "83",
    "bun": "0.1.1",
    "chrome": "83",
    "chrome-android": "83",
    "deno": "1.0",
    "edge": "12",
    "electron": "9.0",
    "firefox": "4",
    "firefox-android": "4",
    "hermes": "0.1",
    "ie": "9",
    "ios": "8.0",
    "node": "6.0",
    "oculus": "10.0",
    "opera": "69",
    "opera-android": "59",
    "opera_mobile": "59",
    "quest": "10.0",
    "react-native": "0.69",
    "rhino": "1.7.13",
    "safari": "7.1",
    "samsung": "13.0"
  },
  "es.array.reverse": {
    "android": "3.0",
    "bun": "0.1.1",
    "chrome": "1",
    "chrome-android": "18",
    "deno": "1.0",
    "edge": "12",
    "electron": "0.20",
    "firefox": "1",
    "firefox-android": "4",
    "hermes": "0.1",
    "ie": "5.5",
    "ios": "12.2",
    "node": "0.0.3",
    "oculus": "3.0",
    "opera": "10.50",
    "opera-android": "10.50",
    "opera_mobile": "10.50",
    "quest": "3.0",
    "react-native": "0.69",
    "rhino": "1.7.13",
    "safari": "12.0.2",
    "samsung": "1.0"
  },
  "es.array.slice": {
    "android": "51",
    "bun": "0.1.1",
    "chrome": "51",
    "chrome-android": "51",
    "deno": "1.0",
    "edge": "13",
    "electron": "1.2",
    "firefox": "48",
    "firefox-android": "48",
    "ios": "10.0",
    "node": "6.5",
    "oculus": "3.0",
    "opera": "38",
    "opera-android": "38",
    "opera_mobile": "38",
    "quest": "3.0",
    "safari": "10.0",
    "samsung": "5.0"
  },
  "es.array.some": {
    "android": "4.4",
    "bun": "0.1.1",
    "chrome": "26",
    "chrome-android": "26",
    "deno": "1.0",
    "edge": "12",
    "electron": "0.20",
    "firefox": "4",
    "firefox-android": "4",
    "hermes": "0.1",
    "ie": "9",
    "ios": "8.0",
    "node": "0.11.0",
    "oculus": "3.0",
    "opera": "15",
    "opera-android": "15",
    "opera_mobile": "15",
    "quest": "3.0",
    "react-native": "0.69",
    "rhino": "1.7.13",
    "safari": "7.1",
    "samsung": "1.5"
  },
  "es.array.sort": {
    "android": "70",
    "bun": "0.1.1",
    "chrome": "70",
    "chrome-android": "70",
    "deno": "1.0",
    "edge": "79",
    "electron": "5.0",
    "firefox": "4",
    "firefox-android": "4",
    "hermes": "0.10",
    "ios": "12.0",
    "node": "11.0",
    "oculus": "6.0",
    "opera": "57",
    "opera-android": "49",
    "opera_mobile": "49",
    "quest": "6.0",
    "react-native": "0.69",
    "rhino": "1.8.0",
    "safari": "12.0",
    "samsung": "10.0"
  },
  "es.array.species": {
    "android": "51",
    "bun": "0.1.1",
    "chrome": "51",
    "chrome-android": "51",
    "deno": "1.0",
    "edge": "13",
    "electron": "1.2",
    "firefox": "48",
    "firefox-android": "48",
    "ios": "10.0",
    "node": "6.5",
    "oculus": "3.0",
    "opera": "38",
    "opera-android": "38",
    "opera_mobile": "38",
    "quest": "3.0",
    "rhino": "1.7.15",
    "safari": "10.0",
    "samsung": "5.0"
  },
  "es.array.splice": {
    "android": "51",
    "bun": "0.1.1",
    "chrome": "51",
    "chrome-android": "51",
    "deno": "1.0",
    "edge": "13",
    "electron": "1.2",
    "firefox": "49",
    "firefox-android": "49",
    "ios": "10.0",
    "node": "6.5",
    "oculus": "3.0",
    "opera": "38",
    "opera-android": "38",
    "opera_mobile": "38",
    "quest": "3.0",
    "safari": "10.0",
    "samsung": "5.0"
  },
  "es.array.to-reversed": {
    "android": "110",
    "bun": "0.1.1",
    "chrome": "110",
    "chrome-android": "110",
    "deno": "1.27",
    "edge": "110",
    "electron": "23.0",
    "firefox": "115",
    "firefox-android": "115",
    "hermes": "0.13",
    "ios": "16.0",
    "node": "20.0",
    "oculus": "26.0",
    "opera": "96",
    "opera-android": "74",
    "opera_mobile": "74",
    "quest": "26.0",
    "react-native": "0.74",
    "rhino": "1.8.0",
    "safari": "16.0",
    "samsung": "21.0"
  },
  "es.array.to-sorted": {
    "android": "110",
    "bun": "0.1.1",
    "chrome": "110",
    "chrome-android": "110",
    "deno": "1.27",
    "edge": "110",
    "electron": "23.0",
    "firefox": "115",
    "firefox-android": "115",
    "ios": "16.0",
    "node": "20.0",
    "oculus": "26.0",
    "opera": "96",
    "opera-android": "74",
    "opera_mobile": "74",
    "quest": "26.0",
    "rhino": "1.8.0",
    "safari": "16.0",
    "samsung": "21.0"
  },
  "es.array.to-spliced": {
    "android": "110",
    "bun": "0.1.1",
    "chrome": "110",
    "chrome-android": "110",
    "deno": "1.27",
    "edge": "110",
    "electron": "23.0",
    "firefox": "115",
    "firefox-android": "115",
    "hermes": "0.13",
    "ios": "16.0",
    "node": "20.0",
    "oculus": "26.0",
    "opera": "96",
    "opera-android": "74",
    "opera_mobile": "74",
    "quest": "26.0",
    "react-native": "0.74",
    "rhino": "1.8.0",
    "safari": "16.0",
    "samsung": "21.0"
  },
  "es.array.unscopables.flat": {
    "android": "73",
    "bun": "0.1.1",
    "chrome": "73",
    "chrome-android": "73",
    "deno": "1.0",
    "edge": "79",
    "electron": "5.0",
    "firefox": "67",
    "firefox-android": "67",
    "ios": "13.0",
    "node": "12.0",
    "oculus": "6.0",
    "opera": "60",
    "opera-android": "52",
    "opera_mobile": "52",
    "quest": "6.0",
    "rhino": "1.8.0",
    "safari": "13",
    "samsung": "11.0"
  },
  "es.array.unscopables.flat-map": {
    "android": "73",
    "bun": "0.1.1",
    "chrome": "73",
    "chrome-android": "73",
    "deno": "1.0",
    "edge": "79",
    "electron": "5.0",
    "firefox": "67",
    "firefox-android": "67",
    "ios": "13.0",
    "node": "12.0",
    "oculus": "6.0",
    "opera": "60",
    "opera-android": "52",
    "opera_mobile": "52",
    "quest": "6.0",
    "rhino": "1.8.0",
    "safari": "13",
    "samsung": "11.0"
  },
  "es.array.unshift": {
    "android": "71",
    "bun": "0.1.1",
    "chrome": "71",
    "chrome-android": "71",
    "deno": "1.0",
    "edge": "12",
    "electron": "5.0",
    "firefox": "23",
    "firefox-android": "23",
    "hermes": "0.1",
    "ie": "9",
    "ios": "16.0",
    "node": "12.0",
    "oculus": "6.0",
    "opera": "58",
    "opera-android": "50",
    "opera_mobile": "50",
    "quest": "6.0",
    "react-native": "0.69",
    "safari": "16.0",
    "samsung": "10.0"
  },
  "es.array.with": {
    "android": "110",
    "bun": "0.1.1",
    "chrome": "110",
    "chrome-android": "110",
    "deno": "1.27",
    "edge": "110",
    "electron": "23.0",
    "firefox": "140",
    "firefox-android": "140",
    "hermes": "0.13",
    "ios": "16.0",
    "node": "20.0",
    "oculus": "26.0",
    "opera": "96",
    "opera-android": "74",
    "opera_mobile": "74",
    "quest": "26.0",
    "react-native": "0.74",
    "rhino": "1.8.0",
    "safari": "16.0",
    "samsung": "21.0"
  },
  "es.array-buffer.constructor": {
    "android": "4.4",
    "bun": "0.1.1",
    "chrome": "28",
    "chrome-android": "28",
    "deno": "1.0",
    "edge": "14",
    "electron": "0.20",
    "firefox": "44",
    "firefox-android": "44",
    "hermes": "0.1",
    "ios": "12.0",
    "node": "0.11.1",
    "oculus": "3.0",
    "opera": "15",
    "opera-android": "15",
    "opera_mobile": "15",
    "quest": "3.0",
    "react-native": "0.69",
    "rhino": "1.8.0",
    "safari": "12.0",
    "samsung": "1.5"
  },
  "es.array-buffer.is-view": {
    "android": "4.4.3",
    "bun": "0.1.1",
    "chrome": "32",
    "chrome-android": "32",
    "deno": "1.0",
    "edge": "12",
    "electron": "0.20",
    "firefox": "29",
    "firefox-android": "29",
    "hermes": "0.1",
    "ie": "11",
    "ios": "8.0",
    "node": "0.11.9",
    "oculus": "3.0",
    "opera": "19",
    "opera-android": "19",
    "opera_mobile": "19",
    "quest": "3.0",
    "react-native": "0.69",
    "safari": "7.1",
    "samsung": "2.0"
  },
  "es.array-buffer.slice": {
    "android": "4.4.3",
    "bun": "0.1.1",
    "chrome": "31",
    "chrome-android": "31",
    "deno": "1.0",
    "edge": "12",
    "electron": "0.20",
    "firefox": "46",
    "firefox-android": "46",
    "hermes": "0.1",
    "ie": "11",
    "ios": "12.2",
    "node": "0.11.8",
    "oculus": "3.0",
    "opera": "18",
    "opera-android": "18",
    "opera_mobile": "18",
    "quest": "3.0",
    "react-native": "0.69",
    "rhino": "1.7.13",
    "safari": "12.1",
    "samsung": "2.0"
  },
  "es.data-view": {
    "android": "4.4",
    "bun": "0.1.1",
    "chrome": "26",
    "chrome-android": "26",
    "deno": "1.0",
    "edge": "12",
    "electron": "0.20",
    "firefox": "15",
    "firefox-android": "15",
    "hermes": "0.1",
    "ie": "10",
    "ios": "8.0",
    "node": "0.11.0",
    "oculus": "3.0",
    "opera": "15",
    "opera-android": "15",
    "opera_mobile": "15",
    "quest": "3.0",
    "react-native": "0.69",
    "rhino": "1.7.13",
    "safari": "7.1",
    "samsung": "1.5"
  },
  "es.data-view.get-float16": {
    "android": "135",
    "bun": "1.1.23",
    "chrome": "135",
    "chrome-android": "135",
    "deno": "1.43",
    "edge": "135",
    "electron": "36.0",
    "firefox": "129",
    "firefox-android": "129",
    "ios": "18.2",
    "node": "24.0",
    "opera": "120",
    "opera-android": "89",
    "opera_mobile": "89",
    "safari": "18.2"
  },
  "es.data-view.set-float16": {
    "android": "135",
    "bun": "1.1.23",
    "chrome": "135",
    "chrome-android": "135",
    "deno": "1.43",
    "edge": "135",
    "electron": "36.0",
    "firefox": "129",
    "firefox-android": "129",
    "ios": "18.2",
    "node": "24.0",
    "opera": "120",
    "opera-android": "89",
    "opera_mobile": "89",
    "safari": "18.2"
  },
  "es.array-buffer.detached": {
    "android": "114",
    "bun": "1.0.19",
    "chrome": "114",
    "chrome-android": "114",
    "deno": "1.33",
    "edge": "114",
    "electron": "25.0",
    "firefox": "122",
    "firefox-android": "122",
    "ios": "17.4",
    "node": "21.0",
    "oculus": "28.0",
    "opera": "100",
    "opera-android": "76",
    "opera_mobile": "76",
    "quest": "28.0",
    "safari": "17.4",
    "samsung": "23.0"
  },
  "es.array-buffer.transfer": {
    "android": "114",
    "bun": "1.0.19",
    "chrome": "114",
    "chrome-android": "114",
    "deno": "1.33",
    "edge": "114",
    "electron": "25.0",
    "firefox": "122",
    "firefox-android": "122",
    "ios": "17.4",
    "node": "21.0",
    "oculus": "28.0",
    "opera": "100",
    "opera-android": "76",
    "opera_mobile": "76",
    "quest": "28.0",
    "safari": "17.4",
    "samsung": "23.0"
  },
  "es.array-buffer.transfer-to-fixed-length": {
    "android": "114",
    "bun": "1.0.19",
    "chrome": "114",
    "chrome-android": "114",
    "deno": "1.33",
    "edge": "114",
    "electron": "25.0",
    "firefox": "122",
    "firefox-android": "122",
    "ios": "17.4",
    "node": "21.0",
    "oculus": "28.0",
    "opera": "100",
    "opera-android": "76",
    "opera_mobile": "76",
    "quest": "28.0",
    "safari": "17.4",
    "samsung": "23.0"
  },
  "es.date.get-year": {
    "android": "3.0",
    "bun": "0.1.1",
    "chrome": "1",
    "chrome-android": "18",
    "deno": "1.0",
    "edge": "12",
    "electron": "0.20",
    "firefox": "1",
    "firefox-android": "4",
    "hermes": "0.1",
    "ie": "9",
    "ios": "1.0",
    "node": "0.0.3",
    "oculus": "3.0",
    "opera": "3",
    "opera-android": "3",
    "opera_mobile": "3",
    "phantom": "1.9",
    "quest": "3.0",
    "react-native": "0.69",
    "rhino": "1.7.13",
    "safari": "1",
    "samsung": "1.0"
  },
  "es.date.now": {
    "android": "3.0",
    "bun": "0.1.1",
    "chrome": "5",
    "chrome-android": "18",
    "deno": "1.0",
    "edge": "12",
    "electron": "0.20",
    "firefox": "2",
    "firefox-android": "4",
    "hermes": "0.1",
    "ie": "9",
    "ios": "3.0",
    "node": "0.1.27",
    "oculus": "3.0",
    "opera": "10.50",
    "opera-android": "10.50",
    "opera_mobile": "10.50",
    "phantom": "1.9",
    "quest": "3.0",
    "react-native": "0.69",
    "rhino": "1.7.13",
    "safari": "4.0",
    "samsung": "1.0"
  },
  "es.date.set-year": {
    "android": "3.0",
    "bun": "0.1.1",
    "chrome": "1",
    "chrome-android": "18",
    "deno": "1.0",
    "edge": "12",
    "electron": "0.20",
    "firefox": "1",
    "firefox-android": "4",
    "hermes": "0.1",
    "ie": "3",
    "ios": "1.0",
    "node": "0.0.3",
    "oculus": "3.0",
    "opera": "3",
    "opera-android": "3",
    "opera_mobile": "3",
    "phantom": "1.9",
    "quest": "3.0",
    "react-native": "0.69",
    "rhino": "1.7.13",
    "safari": "1",
    "samsung": "1.0"
  },
  "es.date.to-gmt-string": {
    "android": "3.0",
    "bun": "0.1.1",
    "chrome": "1",
    "chrome-android": "18",
    "deno": "1.0",
    "edge": "12",
    "electron": "0.20",
    "firefox": "1",
    "firefox-android": "4",
    "hermes": "0.1",
    "ie": "3",
    "ios": "1.0",
    "node": "0.0.3",
    "oculus": "3.0",
    "opera": "3",
    "opera-android": "3",
    "opera_mobile": "3",
    "phantom": "1.9",
    "quest": "3.0",
    "react-native": "0.69",
    "rhino": "1.7.13",
    "safari": "1",
    "samsung": "1.0"
  },
  "es.date.to-iso-string": {
    "android": "4.4",
    "bun": "0.1.1",
    "chrome": "26",
    "chrome-android": "26",
    "deno": "1.0",
    "edge": "12",
    "electron": "0.20",
    "firefox": "7",
    "firefox-android": "7",
    "hermes": "0.1",
    "ie": "9",
    "ios": "8.0",
    "node": "0.11.0",
    "oculus": "3.0",
    "opera": "15",
    "opera-android": "15",
    "opera_mobile": "15",
    "quest": "3.0",
    "react-native": "0.69",
    "rhino": "1.7.13",
    "safari": "7.1",
    "samsung": "1.5"
  },
  "es.date.to-json": {
    "android": "4.4",
    "bun": "0.1.1",
    "chrome": "26",
    "chrome-android": "26",
    "deno": "1.0",
    "edge": "12",
    "electron": "0.20",
    "firefox": "4",
    "firefox-android": "4",
    "hermes": "0.1",
    "ie": "9",
    "ios": "10.0",
    "node": "0.11.0",
    "oculus": "3.0",
    "opera": "15",
    "opera-android": "15",
    "opera_mobile": "15",
    "quest": "3.0",
    "react-native": "0.69",
    "rhino": "1.7.13",
    "safari": "10.0",
    "samsung": "1.5"
  },
  "es.date.to-primitive": {
    "android": "47",
    "bun": "0.1.1",
    "chrome": "47",
    "chrome-android": "47",
    "deno": "1.0",
    "edge": "15",
    "electron": "0.36",
    "firefox": "44",
    "firefox-android": "44",
    "hermes": "0.1",
    "ios": "10.0",
    "node": "6.0",
    "oculus": "3.0",
    "opera": "34",
    "opera-android": "34",
    "opera_mobile": "34",
    "quest": "3.0",
    "react-native": "0.69",
    "rhino": "1.8.0",
    "safari": "10.0",
    "samsung": "5.0"
  },
  "es.date.to-string": {
    "android": "3.0",
    "bun": "0.1.1",
    "chrome": "5",
    "chrome-android": "18",
    "deno": "1.0",
    "edge": "12",
    "electron": "0.20",
    "firefox": "2",
    "firefox-android": "4",
    "hermes": "0.1",
    "ie": "9",
    "ios": "2.0",
    "node": "0.1.27",
    "oculus": "3.0",
    "opera": "10.50",
    "opera-android": "10.50",
    "opera_mobile": "10.50",
    "phantom": "1.9",
    "quest": "3.0",
    "react-native": "0.69",
    "rhino": "1.7.13",
    "safari": "3.1",
    "samsung": "1.0"
  },
  "es.disposable-stack.constructor": {
    "android": "136",
    "chrome": "136",
    "chrome-android": "136",
    "deno": "2.2.10",
    "edge": "136",
    "electron": "36.0",
    "firefox": "141",
    "firefox-android": "141",
    "node": "24.0",
    "opera": "121",
    "opera-android": "90",
    "opera_mobile": "90"
  },
  "es.escape": {
    "android": "3.0",
    "bun": "0.1.1",
    "chrome": "1",
    "chrome-android": "18",
    "deno": "1.0",
    "edge": "12",
    "electron": "0.20",
    "firefox": "1",
    "firefox-android": "4",
    "hermes": "0.1",
    "ie": "3",
    "ios": "1.0",
    "node": "0.0.3",
    "oculus": "3.0",
    "opera": "3",
    "opera-android": "3",
    "opera_mobile": "3",
    "phantom": "1.9",
    "quest": "3.0",
    "react-native": "0.69",
    "rhino": "1.7.13",
    "safari": "1",
    "samsung": "1.0"
  },
  "es.function.bind": {
    "android": "3.0",
    "bun": "0.1.1",
    "chrome": "7",
    "chrome-android": "18",
    "deno": "1.0",
    "edge": "12",
    "electron": "0.20",
    "firefox": "4",
    "firefox-android": "4",
    "hermes": "0.1",
    "ie": "9",
    "ios": "5.0",
    "node": "0.1.101",
    "oculus": "3.0",
    "opera": "12",
    "opera-android": "12",
    "opera_mobile": "12",
    "phantom": "2.0",
    "quest": "3.0",
    "react-native": "0.69",
    "rhino": "1.7.13",
    "safari": "5.1",
    "samsung": "1.0"
  },
  "es.function.has-instance": {
    "android": "51",
    "bun": "0.1.1",
    "chrome": "51",
    "chrome-android": "51",
    "deno": "1.0",
    "edge": "15",
    "electron": "1.2",
    "firefox": "50",
    "firefox-android": "50",
    "hermes": "0.1",
    "ios": "10.0",
    "node": "6.5",
    "oculus": "3.0",
    "opera": "38",
    "opera-android": "38",
    "opera_mobile": "38",
    "quest": "3.0",
    "react-native": "0.69",
    "safari": "10.0",
    "samsung": "5.0"
  },
  "es.function.name": {
    "android": "3.0",
    "bun": "0.1.1",
    "chrome": "5",
    "chrome-android": "18",
    "deno": "1.0",
    "edge": "12",
    "electron": "0.20",
    "firefox": "2",
    "firefox-android": "4",
    "hermes": "0.1",
    "ios": "3.0",
    "node": "0.1.27",
    "oculus": "3.0",
    "opera": "10.50",
    "opera-android": "10.50",
    "opera_mobile": "10.50",
    "phantom": "1.9",
    "quest": "3.0",
    "react-native": "0.69",
    "rhino": "1.7.13",
    "safari": "4.0",
    "samsung": "1.0"
  },
  "es.global-this": {
    "android": "71",
    "bun": "0.1.1",
    "chrome": "71",
    "chrome-android": "71",
    "deno": "1.0",
    "edge": "79",
    "electron": "5.0",
    "firefox": "65",
    "firefox-android": "65",
    "hermes": "0.2",
    "ios": "12.2",
    "node": "12.0",
    "oculus": "6.0",
    "opera": "58",
    "opera-android": "50",
    "opera_mobile": "50",
    "quest": "6.0",
    "react-native": "0.69",
    "rhino": "1.7.14",
    "safari": "12.1",
    "samsung": "10.0"
  },
  "es.iterator.constructor": {
    "android": "122",
    "bun": "1.1.31",
    "chrome": "122",
    "chrome-android": "122",
    "deno": "1.38.1",
    "edge": "122",
    "electron": "29.0",
    "firefox": "131",
    "firefox-android": "131",
    "ios": "18.4",
    "node": "22.0",
    "oculus": "32.0",
    "opera": "108",
    "opera-android": "81",
    "opera_mobile": "81",
    "quest": "32.0",
    "safari": "18.4",
    "samsung": "26.0"
  },
  "es.iterator.dispose": {
    "android": "136",
    "chrome": "136",
    "chrome-android": "136",
    "deno": "2.2.10",
    "edge": "136",
    "electron": "36.0",
    "firefox": "135",
    "firefox-android": "135",
    "node": "24.0",
    "opera": "121",
    "opera-android": "90",
    "opera_mobile": "90"
  },
  "es.iterator.drop": {
    "android": "135",
    "bun": "1.2.11",
    "chrome": "135",
    "chrome-android": "135",
    "deno": "2.2.5",
    "edge": "135",
    "electron": "36.0",
    "firefox": "141",
    "firefox-android": "141",
    "node": "24.0",
    "opera": "120",
    "opera-android": "89",
    "opera_mobile": "89"
  },
  "es.iterator.every": {
    "android": "135",
    "bun": "1.2.4",
    "chrome": "135",
    "chrome-android": "135",
    "deno": "2.2.5",
    "edge": "135",
    "electron": "36.0",
    "firefox": "141",
    "firefox-android": "141",
    "node": "24.0",
    "opera": "120",
    "opera-android": "89",
    "opera_mobile": "89"
  },
  "es.iterator.filter": {
    "android": "135",
    "bun": "1.2.4",
    "chrome": "135",
    "chrome-android": "135",
    "deno": "2.2.5",
    "edge": "135",
    "electron": "36.0",
    "firefox": "141",
    "firefox-android": "141",
    "node": "24.0",
    "opera": "120",
    "opera-android": "89",
    "opera_mobile": "89"
  },
  "es.iterator.find": {
    "android": "135",
    "bun": "1.2.4",
    "chrome": "135",
    "chrome-android": "135",
    "deno": "2.2.5",
    "edge": "135",
    "electron": "36.0",
    "firefox": "141",
    "firefox-android": "141",
    "node": "24.0",
    "opera": "120",
    "opera-android": "89",
    "opera_mobile": "89"
  },
  "es.iterator.flat-map": {
    "android": "135",
    "bun": "1.2.4",
    "chrome": "135",
    "chrome-android": "135",
    "deno": "2.2.5",
    "edge": "135",
    "electron": "36.0",
    "firefox": "141",
    "firefox-android": "141",
    "node": "24.0",
    "opera": "120",
    "opera-android": "89",
    "opera_mobile": "89"
  },
  "es.iterator.for-each": {
    "android": "135",
    "bun": "1.2.4",
    "chrome": "135",
    "chrome-android": "135",
    "deno": "2.2.5",
    "edge": "135",
    "electron": "36.0",
    "firefox": "141",
    "firefox-android": "141",
    "node": "24.0",
    "opera": "120",
    "opera-android": "89",
    "opera_mobile": "89"
  },
  "es.iterator.from": {
    "android": "122",
    "bun": "1.2.5",
    "chrome": "122",
    "chrome-android": "122",
    "deno": "1.38.1",
    "edge": "122",
    "electron": "29.0",
    "firefox": "131",
    "firefox-android": "131",
    "node": "22.0",
    "oculus": "32.0",
    "opera": "108",
    "opera-android": "81",
    "opera_mobile": "81",
    "quest": "32.0",
    "samsung": "26.0"
  },
  "es.iterator.map": {
    "android": "135",
    "bun": "1.2.4",
    "chrome": "135",
    "chrome-android": "135",
    "deno": "2.2.5",
    "edge": "135",
    "electron": "36.0",
    "firefox": "141",
    "firefox-android": "141",
    "node": "24.0",
    "opera": "120",
    "opera-android": "89",
    "opera_mobile": "89"
  },
  "es.iterator.reduce": {
    "android": "135",
    "bun": "1.2.11",
    "chrome": "135",
    "chrome-android": "135",
    "deno": "2.2.5",
    "edge": "135",
    "electron": "36.0",
    "firefox": "141",
    "firefox-android": "141",
    "node": "24.0",
    "opera": "120",
    "opera-android": "89",
    "opera_mobile": "89"
  },
  "es.iterator.some": {
    "android": "135",
    "bun": "1.2.4",
    "chrome": "135",
    "chrome-android": "135",
    "deno": "2.2.5",
    "edge": "135",
    "electron": "36.0",
    "firefox": "141",
    "firefox-android": "141",
    "node": "24.0",
    "opera": "120",
    "opera-android": "89",
    "opera_mobile": "89"
  },
  "es.iterator.take": {
    "android": "135",
    "bun": "1.2.11",
    "chrome": "135",
    "chrome-android": "135",
    "deno": "2.2.5",
    "edge": "135",
    "electron": "36.0",
    "firefox": "141",
    "firefox-android": "141",
    "node": "24.0",
    "opera": "120",
    "opera-android": "89",
    "opera_mobile": "89"
  },
  "es.iterator.to-array": {
    "android": "122",
    "bun": "1.1.31",
    "chrome": "122",
    "chrome-android": "122",
    "deno": "1.38.1",
    "edge": "122",
    "electron": "29.0",
    "firefox": "131",
    "firefox-android": "131",
    "ios": "18.4",
    "node": "22.0",
    "oculus": "32.0",
    "opera": "108",
    "opera-android": "81",
    "opera_mobile": "81",
    "quest": "32.0",
    "safari": "18.4",
    "samsung": "26.0"
  },
  "es.json.stringify": {
    "android": "72",
    "bun": "0.1.1",
    "chrome": "72",
    "chrome-android": "72",
    "deno": "1.0",
    "edge": "79",
    "electron": "5.0",
    "firefox": "64",
    "firefox-android": "64",
    "hermes": "0.13",
    "ios": "12.2",
    "node": "12.0",
    "oculus": "6.0",
    "opera": "59",
    "opera-android": "51",
    "opera_mobile": "51",
    "quest": "6.0",
    "react-native": "0.72",
    "rhino": "1.8.0",
    "safari": "12.1",
    "samsung": "11.0"
  },
  "es.json.to-string-tag": {
    "android": "50",
    "bun": "0.1.1",
    "chrome": "50",
    "chrome-android": "50",
    "deno": "1.0",
    "edge": "15",
    "electron": "1.1",
    "firefox": "51",
    "firefox-android": "51",
    "hermes": "0.1",
    "ios": "10.0",
    "node": "6.0",
    "oculus": "3.0",
    "opera": "37",
    "opera-android": "37",
    "opera_mobile": "37",
    "quest": "3.0",
    "react-native": "0.69",
    "rhino": "1.7.15",
    "safari": "10.0",
    "samsung": "5.0"
  },
  "es.map": {
    "android": "51",
    "bun": "0.1.1",
    "chrome": "51",
    "chrome-android": "51",
    "deno": "1.0",
    "edge": "15",
    "electron": "1.2",
    "firefox": "53",
    "firefox-android": "53",
    "hermes": "0.13",
    "ios": "10.0",
    "node": "6.5",
    "oculus": "3.0",
    "opera": "38",
    "opera-android": "38",
    "opera_mobile": "38",
    "quest": "3.0",
    "react-native": "0.73",
    "rhino": "1.7.13",
    "safari": "10.0",
    "samsung": "5.0"
  },
  "es.map.group-by": {
    "android": "117",
    "bun": "1.1.2",
    "chrome": "117",
    "chrome-android": "117",
    "deno": "1.37",
    "edge": "117",
    "electron": "27.0",
    "firefox": "119",
    "firefox-android": "119",
    "ios": "18.0",
    "node": "21.0",
    "oculus": "30.0",
    "opera": "103",
    "opera-android": "78",
    "opera_mobile": "78",
    "quest": "30.0",
    "rhino": "1.8.0",
    "safari": "18.0",
    "samsung": "24.0"
  },
  "es.math.acosh": {
    "android": "54",
    "bun": "0.1.1",
    "chrome": "54",
    "chrome-android": "54",
    "deno": "1.0",
    "edge": "13",
    "electron": "1.4",
    "firefox": "25",
    "firefox-android": "25",
    "hermes": "0.1",
    "ios": "8.0",
    "node": "7.0",
    "oculus": "3.0",
    "opera": "41",
    "opera-android": "41",
    "opera_mobile": "41",
    "quest": "3.0",
    "react-native": "0.69",
    "safari": "7.1",
    "samsung": "6.0"
  },
  "es.math.asinh": {
    "android": "38",
    "bun": "0.1.1",
    "chrome": "38",
    "chrome-android": "38",
    "deno": "1.0",
    "edge": "13",
    "electron": "0.20",
    "firefox": "25",
    "firefox-android": "25",
    "hermes": "0.1",
    "ios": "8.0",
    "node": "0.11.15",
    "oculus": "3.0",
    "opera": "25",
    "opera-android": "25",
    "opera_mobile": "25",
    "quest": "3.0",
    "react-native": "0.69",
    "rhino": "1.7.13",
    "safari": "7.1",
    "samsung": "3.0"
  },
  "es.math.atanh": {
    "android": "38",
    "bun": "0.1.1",
    "chrome": "38",
    "chrome-android": "38",
    "deno": "1.0",
    "edge": "13",
    "electron": "0.20",
    "firefox": "25",
    "firefox-android": "25",
    "hermes": "0.1",
    "ios": "8.0",
    "node": "0.11.15",
    "oculus": "3.0",
    "opera": "25",
    "opera-android": "25",
    "opera_mobile": "25",
    "quest": "3.0",
    "react-native": "0.69",
    "rhino": "1.7.13",
    "safari": "7.1",
    "samsung": "3.0"
  },
  "es.math.cbrt": {
    "android": "38",
    "bun": "0.1.1",
    "chrome": "38",
    "chrome-android": "38",
    "deno": "1.0",
    "edge": "12",
    "electron": "0.20",
    "firefox": "25",
    "firefox-android": "25",
    "hermes": "0.1",
    "ios": "8.0",
    "node": "0.11.15",
    "oculus": "3.0",
    "opera": "25",
    "opera-android": "25",
    "opera_mobile": "25",
    "quest": "3.0",
    "react-native": "0.69",
    "rhino": "1.7.13",
    "safari": "7.1",
    "samsung": "3.0"
  },
  "es.math.clz32": {
    "android": "38",
    "bun": "0.1.1",
    "chrome": "38",
    "chrome-android": "38",
    "deno": "1.0",
    "edge": "12",
    "electron": "0.20",
    "firefox": "31",
    "firefox-android": "31",
    "hermes": "0.1",
    "ios": "9.0",
    "node": "0.11.15",
    "oculus": "3.0",
    "opera": "25",
    "opera-android": "25",
    "opera_mobile": "25",
    "quest": "3.0",
    "react-native": "0.69",
    "rhino": "1.7.13",
    "safari": "9.0",
    "samsung": "3.0"
  },
  "es.math.cosh": {
    "android": "39",
    "bun": "0.1.1",
    "chrome": "39",
    "chrome-android": "39",
    "deno": "1.0",
    "edge": "13",
    "electron": "0.20",
    "firefox": "25",
    "firefox-android": "25",
    "hermes": "0.1",
    "ios": "8.0",
    "node": "1.0",
    "oculus": "3.0",
    "opera": "26",
    "opera-android": "26",
    "opera_mobile": "26",
    "quest": "3.0",
    "react-native": "0.69",
    "rhino": "1.7.13",
    "safari": "7.1",
    "samsung": "3.4"
  },
  "es.math.expm1": {
    "android": "39",
    "bun": "0.1.1",
    "chrome": "39",
    "chrome-android": "39",
    "deno": "1.0",
    "edge": "13",
    "electron": "0.20",
    "firefox": "46",
    "firefox-android": "46",
    "hermes": "0.1",
    "ios": "8.0",
    "node": "1.0",
    "oculus": "3.0",
    "opera": "26",
    "opera-android": "26",
    "opera_mobile": "26",
    "quest": "3.0",
    "react-native": "0.69",
    "rhino": "1.7.13",
    "safari": "7.1",
    "samsung": "3.4"
  },
  "es.math.fround": {
    "android": "38",
    "bun": "0.1.1",
    "chrome": "38",
    "chrome-android": "38",
    "deno": "1.0",
    "edge": "12",
    "electron": "0.20",
    "firefox": "26",
    "firefox-android": "26",
    "hermes": "0.1",
    "ios": "8.0",
    "node": "0.11.15",
    "oculus": "3.0",
    "opera": "25",
    "opera-android": "25",
    "opera_mobile": "25",
    "quest": "3.0",
    "react-native": "0.69",
    "rhino": "1.7.13",
    "safari": "7.1",
    "samsung": "3.0"
  },
  "es.math.f16round": {
    "android": "135",
    "bun": "1.1.23",
    "chrome": "135",
    "chrome-android": "135",
    "deno": "1.43",
    "edge": "135",
    "electron": "36.0",
    "firefox": "129",
    "firefox-android": "129",
    "ios": "18.2",
    "node": "24.0",
    "opera": "120",
    "opera-android": "89",
    "opera_mobile": "89",
    "safari": "18.2"
  },
  "es.math.hypot": {
    "android": "78",
    "bun": "0.1.1",
    "chrome": "78",
    "chrome-android": "78",
    "deno": "1.0",
    "edge": "12",
    "electron": "7.0",
    "firefox": "27",
    "firefox-android": "27",
    "hermes": "0.1",
    "ios": "8.0",
    "node": "12.16",
    "oculus": "8.0",
    "opera": "65",
    "opera-android": "56",
    "opera_mobile": "56",
    "quest": "8.0",
    "react-native": "0.69",
    "rhino": "1.7.13",
    "safari": "7.1",
    "samsung": "12.0"
  },
  "es.math.imul": {
    "android": "4.4",
    "bun": "0.1.1",
    "chrome": "28",
    "chrome-android": "28",
    "deno": "1.0",
    "edge": "13",
    "electron": "0.20",
    "firefox": "20",
    "firefox-android": "20",
    "hermes": "0.1",
    "ios": "9.0",
    "node": "0.11.1",
    "oculus": "3.0",
    "opera": "15",
    "opera-android": "15",
    "opera_mobile": "15",
    "quest": "3.0",
    "react-native": "0.69",
    "rhino": "1.7.13",
    "safari": "9.0",
    "samsung": "1.5"
  },
  "es.math.log10": {
    "android": "38",
    "bun": "0.1.1",
    "chrome": "38",
    "chrome-android": "38",
    "deno": "1.0",
    "edge": "12",
    "electron": "0.20",
    "firefox": "25",
    "firefox-android": "25",
    "hermes": "0.1",
    "ios": "8.0",
    "node": "0.11.15",
    "oculus": "3.0",
    "opera": "25",
    "opera-android": "25",
    "opera_mobile": "25",
    "quest": "3.0",
    "react-native": "0.69",
    "rhino": "1.7.13",
    "safari": "7.1",
    "samsung": "3.0"
  },
  "es.math.log1p": {
    "android": "38",
    "bun": "0.1.1",
    "chrome": "38",
    "chrome-android": "38",
    "deno": "1.0",
    "edge": "12",
    "electron": "0.20",
    "firefox": "25",
    "firefox-android": "25",
    "hermes": "0.1",
    "ios": "8.0",
    "node": "0.11.15",
    "oculus": "3.0",
    "opera": "25",
    "opera-android": "25",
    "opera_mobile": "25",
    "quest": "3.0",
    "react-native": "0.69",
    "rhino": "1.7.13",
    "safari": "7.1",
    "samsung": "3.0"
  },
  "es.math.log2": {
    "android": "38",
    "bun": "0.1.1",
    "chrome": "38",
    "chrome-android": "38",
    "deno": "1.0",
    "edge": "12",
    "electron": "0.20",
    "firefox": "25",
    "firefox-android": "25",
    "hermes": "0.1",
    "ios": "8.0",
    "node": "0.11.15",
    "oculus": "3.0",
    "opera": "25",
    "opera-android": "25",
    "opera_mobile": "25",
    "quest": "3.0",
    "react-native": "0.69",
    "rhino": "1.7.13",
    "safari": "7.1",
    "samsung": "3.0"
  },
  "es.math.sign": {
    "android": "38",
    "bun": "0.1.1",
    "chrome": "38",
    "chrome-android": "38",
    "deno": "1.0",
    "edge": "12",
    "electron": "0.20",
    "firefox": "25",
    "firefox-android": "25",
    "hermes": "0.1",
    "ios": "9.0",
    "node": "0.11.15",
    "oculus": "3.0",
    "opera": "25",
    "opera-android": "25",
    "opera_mobile": "25",
    "quest": "3.0",
    "react-native": "0.69",
    "rhino": "1.7.13",
    "safari": "9.0",
    "samsung": "3.0"
  },
  "es.math.sinh": {
    "android": "39",
    "bun": "0.1.1",
    "chrome": "39",
    "chrome-android": "39",
    "deno": "1.0",
    "edge": "13",
    "electron": "0.20",
    "firefox": "25",
    "firefox-android": "25",
    "hermes": "0.1",
    "ios": "8.0",
    "node": "1.0",
    "oculus": "3.0",
    "opera": "26",
    "opera-android": "26",
    "opera_mobile": "26",
    "quest": "3.0",
    "react-native": "0.69",
    "rhino": "1.7.13",
    "safari": "7.1",
    "samsung": "3.4"
  },
  "es.math.tanh": {
    "android": "38",
    "bun": "0.1.1",
    "chrome": "38",
    "chrome-android": "38",
    "deno": "1.0",
    "edge": "12",
    "electron": "0.20",
    "firefox": "25",
    "firefox-android": "25",
    "hermes": "0.1",
    "ios": "8.0",
    "node": "0.11.15",
    "oculus": "3.0",
    "opera": "25",
    "opera-android": "25",
    "opera_mobile": "25",
    "quest": "3.0",
    "react-native": "0.69",
    "rhino": "1.7.13",
    "safari": "7.1",
    "samsung": "3.0"
  },
  "es.math.to-string-tag": {
    "android": "50",
    "bun": "0.1.1",
    "chrome": "50",
    "chrome-android": "50",
    "deno": "1.0",
    "edge": "15",
    "electron": "1.1",
    "firefox": "51",
    "firefox-android": "51",
    "hermes": "0.1",
    "ios": "10.0",
    "node": "6.0",
    "oculus": "3.0",
    "opera": "37",
    "opera-android": "37",
    "opera_mobile": "37",
    "quest": "3.0",
    "react-native": "0.69",
    "rhino": "1.7.15",
    "safari": "10.0",
    "samsung": "5.0"
  },
  "es.math.trunc": {
    "android": "38",
    "bun": "0.1.1",
    "chrome": "38",
    "chrome-android": "38",
    "deno": "1.0",
    "edge": "12",
    "electron": "0.20",
    "firefox": "25",
    "firefox-android": "25",
    "hermes": "0.1",
    "ios": "8.0",
    "node": "0.11.15",
    "oculus": "3.0",
    "opera": "25",
    "opera-android": "25",
    "opera_mobile": "25",
    "quest": "3.0",
    "react-native": "0.69",
    "rhino": "1.7.13",
    "safari": "7.1",
    "samsung": "3.0"
  },
  "es.number.constructor": {
    "android": "41",
    "bun": "0.1.1",
    "chrome": "41",
    "chrome-android": "41",
    "deno": "1.0",
    "edge": "13",
    "electron": "0.21",
    "firefox": "46",
    "firefox-android": "46",
    "hermes": "0.5",
    "ios": "9.0",
    "node": "1.0",
    "oculus": "3.0",
    "opera": "28",
    "opera-android": "28",
    "opera_mobile": "28",
    "quest": "3.0",
    "react-native": "0.69",
    "rhino": "1.7.13",
    "safari": "9.0",
    "samsung": "3.4"
  },
  "es.number.epsilon": {
    "android": "37",
    "bun": "0.1.1",
    "chrome": "34",
    "chrome-android": "34",
    "deno": "1.0",
    "edge": "12",
    "electron": "0.20",
    "firefox": "25",
    "firefox-android": "25",
    "hermes": "0.1",
    "ios": "9.0",
    "node": "0.11.13",
    "oculus": "3.0",
    "opera": "21",
    "opera-android": "21",
    "opera_mobile": "21",
    "quest": "3.0",
    "react-native": "0.69",
    "rhino": "1.7.14",
    "safari": "9.0",
    "samsung": "2.0"
  },
  "es.number.is-finite": {
    "android": "4.1",
    "bun": "0.1.1",
    "chrome": "19",
    "chrome-android": "25",
    "deno": "1.0",
    "edge": "12",
    "electron": "0.20",
    "firefox": "16",
    "firefox-android": "16",
    "hermes": "0.1",
    "ios": "9.0",
    "node": "0.7.3",
    "oculus": "3.0",
    "opera": "15",
    "opera-android": "15",
    "opera_mobile": "15",
    "quest": "3.0",
    "react-native": "0.69",
    "rhino": "1.7.13",
    "safari": "9.0",
    "samsung": "1.5"
  },
  "es.number.is-integer": {
    "android": "37",
    "bun": "0.1.1",
    "chrome": "34",
    "chrome-android": "34",
    "deno": "1.0",
    "edge": "12",
    "electron": "0.20",
    "firefox": "16",
    "firefox-android": "16",
    "hermes": "0.1",
    "ios": "9.0",
    "node": "0.11.13",
    "oculus": "3.0",
    "opera": "21",
    "opera-android": "21",
    "opera_mobile": "21",
    "quest": "3.0",
    "react-native": "0.69",
    "rhino": "1.7.13",
    "safari": "9.0",
    "samsung": "2.0"
  },
  "es.number.is-nan": {
    "android": "4.1",
    "bun": "0.1.1",
    "chrome": "19",
    "chrome-android": "25",
    "deno": "1.0",
    "edge": "12",
    "electron": "0.20",
    "firefox": "15",
    "firefox-android": "15",
    "hermes": "0.1",
    "ios": "9.0",
    "node": "0.7.3",
    "oculus": "3.0",
    "opera": "15",
    "opera-android": "15",
    "opera_mobile": "15",
    "quest": "3.0",
    "react-native": "0.69",
    "rhino": "1.7.13",
    "safari": "9.0",
    "samsung": "1.5"
  },
  "es.number.is-safe-integer": {
    "android": "37",
    "bun": "0.1.1",
    "chrome": "34",
    "chrome-android": "34",
    "deno": "1.0",
    "edge": "12",
    "electron": "0.20",
    "firefox": "32",
    "firefox-android": "32",
    "hermes": "0.1",
    "ios": "9.0",
    "node": "0.11.13",
    "oculus": "3.0",
    "opera": "21",
    "opera-android": "21",
    "opera_mobile": "21",
    "quest": "3.0",
    "react-native": "0.69",
    "rhino": "1.7.13",
    "safari": "9.0",
    "samsung": "2.0"
  },
  "es.number.max-safe-integer": {
    "android": "37",
    "bun": "0.1.1",
    "chrome": "34",
    "chrome-android": "34",
    "deno": "1.0",
    "edge": "12",
    "electron": "0.20",
    "firefox": "31",
    "firefox-android": "31",
    "hermes": "0.1",
    "ios": "9.0",
    "node": "0.11.13",
    "oculus": "3.0",
    "opera": "21",
    "opera-android": "21",
    "opera_mobile": "21",
    "quest": "3.0",
    "react-native": "0.69",
    "rhino": "1.7.13",
    "safari": "9.0",
    "samsung": "2.0"
  },
  "es.number.min-safe-integer": {
    "android": "37",
    "bun": "0.1.1",
    "chrome": "34",
    "chrome-android": "34",
    "deno": "1.0",
    "edge": "12",
    "electron": "0.20",
    "firefox": "31",
    "firefox-android": "31",
    "hermes": "0.1",
    "ios": "9.0",
    "node": "0.11.13",
    "oculus": "3.0",
    "opera": "21",
    "opera-android": "21",
    "opera_mobile": "21",
    "quest": "3.0",
    "react-native": "0.69",
    "rhino": "1.7.13",
    "safari": "9.0",
    "samsung": "2.0"
  },
  "es.number.parse-float": {
    "android": "37",
    "bun": "0.1.1",
    "chrome": "35",
    "chrome-android": "35",
    "deno": "1.0",
    "edge": "79",
    "electron": "0.20",
    "firefox": "39",
    "firefox-android": "39",
    "hermes": "0.1",
    "ios": "11.0",
    "node": "0.11.13",
    "oculus": "3.0",
    "opera": "22",
    "opera-android": "22",
    "opera_mobile": "22",
    "quest": "3.0",
    "react-native": "0.69",
    "rhino": "1.7.14",
    "safari": "11.0",
    "samsung": "3.0"
  },
  "es.number.parse-int": {
    "android": "37",
    "bun": "0.1.1",
    "chrome": "35",
    "chrome-android": "35",
    "deno": "1.0",
    "edge": "79",
    "electron": "0.20",
    "firefox": "39",
    "firefox-android": "39",
    "hermes": "0.1",
    "ios": "9.0",
    "node": "0.11.13",
    "oculus": "3.0",
    "opera": "22",
    "opera-android": "22",
    "opera_mobile": "22",
    "quest": "3.0",
    "react-native": "0.69",
    "rhino": "1.7.14",
    "safari": "9.0",
    "samsung": "3.0"
  },
  "es.number.to-exponential": {
    "android": "51",
    "bun": "0.1.1",
    "chrome": "51",
    "chrome-android": "51",
    "deno": "1.0",
    "edge": "18",
    "electron": "1.2",
    "firefox": "87",
    "firefox-android": "87",
    "hermes": "0.1",
    "ios": "11.0",
    "node": "6.5",
    "oculus": "3.0",
    "opera": "38",
    "opera-android": "38",
    "opera_mobile": "38",
    "quest": "3.0",
    "react-native": "0.69",
    "rhino": "1.7.14",
    "safari": "11",
    "samsung": "5.0"
  },
  "es.number.to-fixed": {
    "android": "4.4",
    "bun": "0.1.1",
    "chrome": "26",
    "chrome-android": "26",
    "deno": "1.0",
    "edge": "79",
    "electron": "0.20",
    "firefox": "4",
    "firefox-android": "4",
    "hermes": "0.1",
    "ios": "8.0",
    "node": "0.11.0",
    "oculus": "3.0",
    "opera": "15",
    "opera-android": "15",
    "opera_mobile": "15",
    "quest": "3.0",
    "react-native": "0.69",
    "rhino": "1.7.13",
    "safari": "7.1",
    "samsung": "1.5"
  },
  "es.number.to-precision": {
    "android": "4.4",
    "bun": "0.1.1",
    "chrome": "26",
    "chrome-android": "26",
    "deno": "1.0",
    "edge": "12",
    "electron": "0.20",
    "firefox": "4",
    "firefox-android": "4",
    "hermes": "0.1",
    "ie": "8",
    "ios": "8.0",
    "node": "0.11.0",
    "oculus": "3.0",
    "opera": "15",
    "opera-android": "15",
    "opera_mobile": "15",
    "quest": "3.0",
    "react-native": "0.69",
    "rhino": "1.7.13",
    "safari": "7.1",
    "samsung": "1.5"
  },
  "es.object.assign": {
    "android": "49",
    "bun": "0.1.1",
    "chrome": "49",
    "chrome-android": "49",
    "deno": "1.0",
    "edge": "79",
    "electron": "0.37",
    "firefox": "36",
    "firefox-android": "36",
    "hermes": "0.4",
    "ios": "9.0",
    "node": "6.0",
    "oculus": "3.0",
    "opera": "36",
    "opera-android": "36",
    "opera_mobile": "36",
    "quest": "3.0",
    "react-native": "0.69",
    "safari": "9.0",
    "samsung": "5.0"
  },
  "es.object.create": {
    "android": "3.0",
    "bun": "0.1.1",
    "chrome": "5",
    "chrome-android": "18",
    "deno": "1.0",
    "edge": "12",
    "electron": "0.20",
    "firefox": "4",
    "firefox-android": "4",
    "hermes": "0.1",
    "ie": "9",
    "ios": "3.0",
    "node": "0.1.27",
    "oculus": "3.0",
    "opera": "12",
    "opera-android": "12",
    "opera_mobile": "12",
    "phantom": "1.9",
    "quest": "3.0",
    "react-native": "0.69",
    "rhino": "1.7.13",
    "safari": "4.0",
    "samsung": "1.0"
  },
  "es.object.define-getter": {
    "android": "62",
    "bun": "0.1.1",
    "chrome": "62",
    "chrome-android": "62",
    "deno": "1.0",
    "edge": "16",
    "electron": "3.0",
    "firefox": "48",
    "firefox-android": "48",
    "hermes": "0.1",
    "ios": "8.0",
    "node": "8.10",
    "oculus": "5.0",
    "opera": "49",
    "opera-android": "46",
    "opera_mobile": "46",
    "quest": "5.0",
    "react-native": "0.69",
    "rhino": "1.7.13",
    "safari": "7.1",
    "samsung": "8.0"
  },
  "es.object.define-properties": {
    "android": "37",
    "bun": "0.1.1",
    "chrome": "37",
    "chrome-android": "37",
    "deno": "1.0",
    "edge": "12",
    "electron": "0.20",
    "firefox": "4",
    "firefox-android": "4",
    "hermes": "0.1",
    "ie": "9",
    "ios": "5.0",
    "node": "0.11.15",
    "oculus": "3.0",
    "opera": "12",
    "opera-android": "12",
    "opera_mobile": "12",
    "phantom": "2.0",
    "quest": "3.0",
    "react-native": "0.69",
    "rhino": "1.7.13",
    "safari": "5.1",
    "samsung": "3.0"
  },
  "es.object.define-property": {
    "android": "37",
    "bun": "0.1.1",
    "chrome": "37",
    "chrome-android": "37",
    "deno": "1.0",
    "edge": "12",
    "electron": "0.20",
    "firefox": "4",
    "firefox-android": "4",
    "hermes": "0.1",
    "ie": "9",
    "ios": "5.0",
    "node": "0.11.15",
    "oculus": "3.0",
    "opera": "12",
    "opera-android": "12",
    "opera_mobile": "12",
    "phantom": "2.0",
    "quest": "3.0",
    "react-native": "0.69",
    "rhino": "1.7.13",
    "safari": "5.1",
    "samsung": "3.0"
  },
  "es.object.define-setter": {
    "android": "62",
    "bun": "0.1.1",
    "chrome": "62",
    "chrome-android": "62",
    "deno": "1.0",
    "edge": "16",
    "electron": "3.0",
    "firefox": "48",
    "firefox-android": "48",
    "hermes": "0.1",
    "ios": "8.0",
    "node": "8.10",
    "oculus": "5.0",
    "opera": "49",
    "opera-android": "46",
    "opera_mobile": "46",
    "quest": "5.0",
    "react-native": "0.69",
    "rhino": "1.7.13",
    "safari": "7.1",
    "samsung": "8.0"
  },
  "es.object.entries": {
    "android": "54",
    "bun": "0.1.1",
    "chrome": "54",
    "chrome-android": "54",
    "deno": "1.0",
    "edge": "14",
    "electron": "1.4",
    "firefox": "47",
    "firefox-android": "47",
    "hermes": "0.1",
    "ios": "10.3",
    "node": "7.0",
    "oculus": "3.0",
    "opera": "41",
    "opera-android": "41",
    "opera_mobile": "41",
    "quest": "3.0",
    "react-native": "0.69",
    "rhino": "1.7.14",
    "safari": "10.1",
    "samsung": "6.0"
  },
  "es.object.freeze": {
    "android": "44",
    "bun": "0.1.1",
    "chrome": "44",
    "chrome-android": "44",
    "deno": "1.0",
    "edge": "13",
    "electron": "0.30",
    "firefox": "35",
    "firefox-android": "35",
    "hermes": "0.1",
    "ios": "9.0",
    "node": "3.0",
    "oculus": "3.0",
    "opera": "31",
    "opera-android": "31",
    "opera_mobile": "31",
    "quest": "3.0",
    "react-native": "0.69",
    "rhino": "1.7.13",
    "safari": "9.0",
    "samsung": "4.0"
  },
  "es.object.from-entries": {
    "android": "73",
    "bun": "0.1.1",
    "chrome": "73",
    "chrome-android": "73",
    "deno": "1.0",
    "edge": "79",
    "electron": "5.0",
    "firefox": "63",
    "firefox-android": "63",
    "hermes": "0.4",
    "ios": "12.2",
    "node": "12.0",
    "oculus": "6.0",
    "opera": "60",
    "opera-android": "52",
    "opera_mobile": "52",
    "quest": "6.0",
    "react-native": "0.69",
    "rhino": "1.7.14",
    "safari": "12.1",
    "samsung": "11.0"
  },
  "es.object.get-own-property-descriptor": {
    "android": "44",
    "bun": "0.1.1",
    "chrome": "44",
    "chrome-android": "44",
    "deno": "1.0",
    "edge": "13",
    "electron": "0.30",
    "firefox": "35",
    "firefox-android": "35",
    "hermes": "0.1",
    "ios": "9.0",
    "node": "3.0",
    "oculus": "3.0",
    "opera": "31",
    "opera-android": "31",
    "opera_mobile": "31",
    "quest": "3.0",
    "react-native": "0.69",
    "rhino": "1.7.13",
    "safari": "9.0",
    "samsung": "4.0"
  },
  "es.object.get-own-property-descriptors": {
    "android": "54",
    "bun": "0.1.1",
    "chrome": "54",
    "chrome-android": "54",
    "deno": "1.0",
    "edge": "15",
    "electron": "1.4",
    "firefox": "50",
    "firefox-android": "50",
    "hermes": "0.6",
    "ios": "10.0",
    "node": "7.0",
    "oculus": "3.0",
    "opera": "41",
    "opera-android": "41",
    "opera_mobile": "41",
    "quest": "3.0",
    "react-native": "0.69",
    "rhino": "1.7.15",
    "safari": "10.0",
    "samsung": "6.0"
  },
  "es.object.get-own-property-names": {
    "android": "40",
    "bun": "0.1.1",
    "chrome": "40",
    "chrome-android": "40",
    "deno": "1.0",
    "edge": "13",
    "electron": "0.21",
    "firefox": "34",
    "firefox-android": "34",
    "hermes": "0.1",
    "ios": "9.0",
    "node": "1.0",
    "oculus": "3.0",
    "opera": "27",
    "opera-android": "27",
    "opera_mobile": "27",
    "quest": "3.0",
    "react-native": "0.69",
    "rhino": "1.7.13",
    "safari": "9.0",
    "samsung": "3.4"
  },
  "es.object.get-prototype-of": {
    "android": "44",
    "bun": "0.1.1",
    "chrome": "44",
    "chrome-android": "44",
    "deno": "1.0",
    "edge": "13",
    "electron": "0.30",
    "firefox": "35",
    "firefox-android": "35",
    "hermes": "0.1",
    "ios": "9.0",
    "node": "3.0",
    "oculus": "3.0",
    "opera": "31",
    "opera-android": "31",
    "opera_mobile": "31",
    "quest": "3.0",
    "react-native": "0.69",
    "rhino": "1.7.13",
    "safari": "9.0",
    "samsung": "4.0"
  },
  "es.object.group-by": {
    "android": "117",
    "bun": "1.1.2",
    "chrome": "117",
    "chrome-android": "117",
    "deno": "1.37",
    "edge": "117",
    "electron": "27.0",
    "firefox": "119",
    "firefox-android": "119",
    "ios": "18.0",
    "node": "21.0",
    "oculus": "30.0",
    "opera": "103",
    "opera-android": "78",
    "opera_mobile": "78",
    "quest": "30.0",
    "rhino": "1.8.0",
    "safari": "18.0",
    "samsung": "24.0"
  },
  "es.object.has-own": {
    "android": "93",
    "bun": "0.1.1",
    "chrome": "93",
    "chrome-android": "93",
    "deno": "1.13",
    "edge": "93",
    "electron": "14.0",
    "firefox": "92",
    "firefox-android": "92",
    "hermes": "0.10",
    "ios": "15.4",
    "node": "16.9",
    "oculus": "17.0",
    "opera": "79",
    "opera-android": "66",
    "opera_mobile": "66",
    "quest": "17.0",
    "react-native": "0.69",
    "rhino": "1.7.15",
    "safari": "15.4",
    "samsung": "17.0"
  },
  "es.object.is": {
    "android": "4.1",
    "bun": "0.1.1",
    "chrome": "19",
    "chrome-android": "25",
    "deno": "1.0",
    "edge": "12",
    "electron": "0.20",
    "firefox": "22",
    "firefox-android": "22",
    "hermes": "0.1",
    "ios": "9.0",
    "node": "0.7.3",
    "oculus": "3.0",
    "opera": "15",
    "opera-android": "15",
    "opera_mobile": "15",
    "quest": "3.0",
    "react-native": "0.69",
    "rhino": "1.7.13",
    "safari": "9.0",
    "samsung": "1.5"
  },
  "es.object.is-extensible": {
    "android": "44",
    "bun": "0.1.1",
    "chrome": "44",
    "chrome-android": "44",
    "deno": "1.0",
    "edge": "13",
    "electron": "0.30",
    "firefox": "35",
    "firefox-android": "35",
    "hermes": "0.1",
    "ios": "9.0",
    "node": "3.0",
    "oculus": "3.0",
    "opera": "31",
    "opera-android": "31",
    "opera_mobile": "31",
    "quest": "3.0",
    "react-native": "0.69",
    "rhino": "1.7.13",
    "safari": "9.0",
    "samsung": "4.0"
  },
  "es.object.is-frozen": {
    "android": "44",
    "bun": "0.1.1",
    "chrome": "44",
    "chrome-android": "44",
    "deno": "1.0",
    "edge": "13",
    "electron": "0.30",
    "firefox": "35",
    "firefox-android": "35",
    "hermes": "0.1",
    "ios": "9.0",
    "node": "3.0",
    "oculus": "3.0",
    "opera": "31",
    "opera-android": "31",
    "opera_mobile": "31",
    "quest": "3.0",
    "react-native": "0.69",
    "rhino": "1.7.13",
    "safari": "9.0",
    "samsung": "4.0"
  },
  "es.object.is-sealed": {
    "android": "44",
    "bun": "0.1.1",
    "chrome": "44",
    "chrome-android": "44",
    "deno": "1.0",
    "edge": "13",
    "electron": "0.30",
    "firefox": "35",
    "firefox-android": "35",
    "hermes": "0.1",
    "ios": "9.0",
    "node": "3.0",
    "oculus": "3.0",
    "opera": "31",
    "opera-android": "31",
    "opera_mobile": "31",
    "quest": "3.0",
    "react-native": "0.69",
    "rhino": "1.7.13",
    "safari": "9.0",
    "samsung": "4.0"
  },
  "es.object.keys": {
    "android": "40",
    "bun": "0.1.1",
    "chrome": "40",
    "chrome-android": "40",
    "deno": "1.0",
    "edge": "13",
    "electron": "0.21",
    "firefox": "35",
    "firefox-android": "35",
    "hermes": "0.1",
    "ios": "9.0",
    "node": "1.0",
    "oculus": "3.0",
    "opera": "27",
    "opera-android": "27",
    "opera_mobile": "27",
    "quest": "3.0",
    "react-native": "0.69",
    "rhino": "1.7.13",
    "safari": "9.0",
    "samsung": "3.4"
  },
  "es.object.lookup-getter": {
    "android": "62",
    "bun": "0.1.1",
    "chrome": "62",
    "chrome-android": "62",
    "deno": "1.0",
    "edge": "16",
    "electron": "3.0",
    "firefox": "48",
    "firefox-android": "48",
    "hermes": "0.1",
    "ios": "8.0",
    "node": "8.10",
    "oculus": "5.0",
    "opera": "49",
    "opera-android": "46",
    "opera_mobile": "46",
    "quest": "5.0",
    "react-native": "0.69",
    "rhino": "1.7.13",
    "safari": "7.1",
    "samsung": "8.0"
  },
  "es.object.lookup-setter": {
    "android": "62",
    "bun": "0.1.1",
    "chrome": "62",
    "chrome-android": "62",
    "deno": "1.0",
    "edge": "16",
    "electron": "3.0",
    "firefox": "48",
    "firefox-android": "48",
    "hermes": "0.1",
    "ios": "8.0",
    "node": "8.10",
    "oculus": "5.0",
    "opera": "49",
    "opera-android": "46",
    "opera_mobile": "46",
    "quest": "5.0",
    "react-native": "0.69",
    "rhino": "1.7.13",
    "safari": "7.1",
    "samsung": "8.0"
  },
  "es.object.prevent-extensions": {
    "android": "44",
    "bun": "0.1.1",
    "chrome": "44",
    "chrome-android": "44",
    "deno": "1.0",
    "edge": "13",
    "electron": "0.30",
    "firefox": "35",
    "firefox-android": "35",
    "hermes": "0.1",
    "ios": "9.0",
    "node": "3.0",
    "oculus": "3.0",
    "opera": "31",
    "opera-android": "31",
    "opera_mobile": "31",
    "quest": "3.0",
    "react-native": "0.69",
    "rhino": "1.7.13",
    "safari": "9.0",
    "samsung": "4.0"
  },
  "es.object.proto": {
    "android": "3.0",
    "bun": "0.1.1",
    "chrome": "5",
    "chrome-android": "18",
    "edge": "12",
    "electron": "0.20",
    "firefox": "2",
    "firefox-android": "4",
    "hermes": "0.1",
    "ie": "11",
    "ios": "2.0",
    "node": "0.1.27",
    "oculus": "3.0",
    "opera": "10.50",
    "opera-android": "10.50",
    "opera_mobile": "10.50",
    "phantom": "1.9",
    "quest": "3.0",
    "react-native": "0.69",
    "safari": "3.1",
    "samsung": "1.0"
  },
  "es.object.seal": {
    "android": "44",
    "bun": "0.1.1",
    "chrome": "44",
    "chrome-android": "44",
    "deno": "1.0",
    "edge": "13",
    "electron": "0.30",
    "firefox": "35",
    "firefox-android": "35",
    "hermes": "0.1",
    "ios": "9.0",
    "node": "3.0",
    "oculus": "3.0",
    "opera": "31",
    "opera-android": "31",
    "opera_mobile": "31",
    "quest": "3.0",
    "react-native": "0.69",
    "rhino": "1.7.13",
    "safari": "9.0",
    "samsung": "4.0"
  },
  "es.object.set-prototype-of": {
    "android": "37",
    "bun": "0.1.1",
    "chrome": "34",
    "chrome-android": "34",
    "deno": "1.0",
    "edge": "12",
    "electron": "0.20",
    "firefox": "31",
    "firefox-android": "31",
    "hermes": "0.1",
    "ie": "11",
    "ios": "9.0",
    "node": "0.11.13",
    "oculus": "3.0",
    "opera": "21",
    "opera-android": "21",
    "opera_mobile": "21",
    "quest": "3.0",
    "react-native": "0.69",
    "rhino": "1.7.13",
    "safari": "9.0",
    "samsung": "2.0"
  },
  "es.object.to-string": {
    "android": "49",
    "bun": "0.1.1",
    "chrome": "49",
    "chrome-android": "49",
    "deno": "1.0",
    "edge": "15",
    "electron": "0.37",
    "firefox": "51",
    "firefox-android": "51",
    "hermes": "0.1",
    "ios": "10.0",
    "node": "6.0",
    "oculus": "3.0",
    "opera": "36",
    "opera-android": "36",
    "opera_mobile": "36",
    "quest": "3.0",
    "react-native": "0.69",
    "rhino": "1.8.0",
    "safari": "10.0",
    "samsung": "5.0"
  },
  "es.object.values": {
    "android": "54",
    "bun": "0.1.1",
    "chrome": "54",
    "chrome-android": "54",
    "deno": "1.0",
    "edge": "14",
    "electron": "1.4",
    "firefox": "47",
    "firefox-android": "47",
    "hermes": "0.1",
    "ios": "10.3",
    "node": "7.0",
    "oculus": "3.0",
    "opera": "41",
    "opera-android": "41",
    "opera_mobile": "41",
    "quest": "3.0",
    "react-native": "0.69",
    "rhino": "1.7.14",
    "safari": "10.1",
    "samsung": "6.0"
  },
  "es.parse-float": {
    "android": "37",
    "bun": "0.1.1",
    "chrome": "35",
    "chrome-android": "35",
    "deno": "1.0",
    "edge": "74",
    "electron": "0.20",
    "firefox": "8",
    "firefox-android": "8",
    "hermes": "0.1",
    "ie": "8",
    "ios": "8.0",
    "node": "0.11.13",
    "oculus": "3.0",
    "opera": "22",
    "opera-android": "22",
    "opera_mobile": "22",
    "quest": "3.0",
    "react-native": "0.69",
    "rhino": "1.7.13",
    "safari": "7.1",
    "samsung": "3.0"
  },
  "es.parse-int": {
    "android": "37",
    "bun": "0.1.1",
    "chrome": "35",
    "chrome-android": "35",
    "deno": "1.0",
    "edge": "74",
    "electron": "0.20",
    "firefox": "21",
    "firefox-android": "21",
    "hermes": "0.1",
    "ie": "9",
    "ios": "8.0",
    "node": "0.11.13",
    "oculus": "3.0",
    "opera": "22",
    "opera-android": "22",
    "opera_mobile": "22",
    "quest": "3.0",
    "react-native": "0.69",
    "rhino": "1.7.13",
    "safari": "7.1",
    "samsung": "3.0"
  },
  "es.promise": {
    "android": "67",
    "bun": "0.1.1",
    "chrome": "67",
    "chrome-android": "67",
    "deno": "1.24",
    "edge": "79",
    "electron": "4.0",
    "firefox": "69",
    "firefox-android": "69",
    "ios": "11.0",
    "node": "10.4",
    "oculus": "6.0",
    "opera": "54",
    "opera-android": "48",
    "opera_mobile": "48",
    "quest": "6.0",
    "rhino": "1.7.14",
    "safari": "11.0",
    "samsung": "9.0"
  },
  "es.promise.all-settled": {
    "android": "76",
    "bun": "0.1.1",
    "chrome": "76",
    "chrome-android": "76",
    "deno": "1.24",
    "edge": "79",
    "electron": "6.0",
    "firefox": "71",
    "firefox-android": "71",
    "ios": "13.0",
    "node": "12.9",
    "oculus": "7.0",
    "opera": "63",
    "opera-android": "54",
    "opera_mobile": "54",
    "quest": "7.0",
    "rhino": "1.7.15",
    "safari": "13",
    "samsung": "12.0"
  },
  "es.promise.any": {
    "android": "85",
    "bun": "0.1.1",
    "chrome": "85",
    "chrome-android": "85",
    "deno": "1.24",
    "edge": "85",
    "electron": "10.0",
    "firefox": "79",
    "firefox-android": "79",
    "ios": "14.0",
    "node": "15.0",
    "oculus": "12.0",
    "opera": "71",
    "opera-android": "60",
    "opera_mobile": "60",
    "quest": "12.0",
    "rhino": "1.8.0",
    "safari": "14.0",
    "samsung": "14.0"
  },
  "es.promise.finally": {
    "android": "67",
    "bun": "0.1.1",
    "chrome": "67",
    "chrome-android": "67",
    "deno": "1.24",
    "edge": "79",
    "electron": "4.0",
    "firefox": "69",
    "firefox-android": "69",
    "ios": "13.2.3",
    "node": "10.4",
    "oculus": "6.0",
    "opera": "54",
    "opera-android": "48",
    "opera_mobile": "48",
    "quest": "6.0",
    "rhino": "1.7.14",
    "safari": "13.0.3",
    "samsung": "9.0"
  },
  "es.promise.try": {
    "android": "128",
    "bun": "1.1.22",
    "chrome": "128",
    "chrome-android": "128",
    "deno": "1.46",
    "edge": "128",
    "electron": "32.0",
    "firefox": "134",
    "firefox-android": "134",
    "ios": "18.2",
    "node": "23.0",
    "oculus": "35.0",
    "opera": "114",
    "opera-android": "85",
    "opera_mobile": "85",
    "quest": "35.0",
    "safari": "18.2",
    "samsung": "28.0"
  },
  "es.promise.with-resolvers": {
    "android": "119",
    "bun": "0.7.1",
    "chrome": "119",
    "chrome-android": "119",
    "deno": "1.38",
    "edge": "119",
    "electron": "28.0",
    "firefox": "121",
    "firefox-android": "121",
    "ios": "17.4",
    "node": "22.0",
    "oculus": "31.0",
    "opera": "105",
    "opera-android": "79",
    "opera_mobile": "79",
    "quest": "31.0",
    "safari": "17.4",
    "samsung": "25.0"
  },
  "es.array.from-async": {
    "android": "121",
    "bun": "1.1.2",
    "chrome": "121",
    "chrome-android": "121",
    "deno": "1.38",
    "edge": "121",
    "electron": "29.0",
    "firefox": "115",
    "firefox-android": "115",
    "ios": "18.0",
    "node": "22.0",
    "oculus": "32.0",
    "opera": "107",
    "opera-android": "81",
    "opera_mobile": "81",
    "quest": "32.0",
    "safari": "18.0",
    "samsung": "25.0"
  },
  "es.async-disposable-stack.constructor": {
    "android": "136",
    "chrome": "136",
    "chrome-android": "136",
    "deno": "2.3.2",
    "edge": "136",
    "electron": "36.0",
    "firefox": "141",
    "firefox-android": "141",
    "node": "24.0",
    "opera": "121",
    "opera-android": "90",
    "opera_mobile": "90"
  },
  "es.async-iterator.async-dispose": {},
  "es.reflect.apply": {
    "android": "49",
    "bun": "0.1.1",
    "chrome": "49",
    "chrome-android": "49",
    "deno": "1.0",
    "edge": "15",
    "electron": "0.37",
    "firefox": "42",
    "firefox-android": "42",
    "hermes": "0.7",
    "ios": "10.0",
    "node": "6.0",
    "oculus": "3.0",
    "opera": "36",
    "opera-android": "36",
    "opera_mobile": "36",
    "quest": "3.0",
    "react-native": "0.69",
    "rhino": "1.8.0",
    "safari": "10.0",
    "samsung": "5.0"
  },
  "es.reflect.construct": {
    "android": "49",
    "bun": "0.1.1",
    "chrome": "49",
    "chrome-android": "49",
    "deno": "1.0",
    "edge": "15",
    "electron": "0.37",
    "firefox": "44",
    "firefox-android": "44",
    "hermes": "0.7",
    "ios": "10.0",
    "node": "6.0",
    "oculus": "3.0",
    "opera": "36",
    "opera-android": "36",
    "opera_mobile": "36",
    "quest": "3.0",
    "react-native": "0.69",
    "safari": "10.0",
    "samsung": "5.0"
  },
  "es.reflect.define-property": {
    "android": "49",
    "bun": "0.1.1",
    "chrome": "49",
    "chrome-android": "49",
    "deno": "1.0",
    "edge": "13",
    "electron": "0.37",
    "firefox": "42",
    "firefox-android": "42",
    "hermes": "0.7",
    "ios": "10.0",
    "node": "6.0",
    "oculus": "3.0",
    "opera": "36",
    "opera-android": "36",
    "opera_mobile": "36",
    "quest": "3.0",
    "react-native": "0.69",
    "rhino": "1.8.0",
    "safari": "10.0",
    "samsung": "5.0"
  },
  "es.reflect.delete-property": {
    "android": "49",
    "bun": "0.1.1",
    "chrome": "49",
    "chrome-android": "49",
    "deno": "1.0",
    "edge": "12",
    "electron": "0.37",
    "firefox": "42",
    "firefox-android": "42",
    "hermes": "0.7",
    "ios": "10.0",
    "node": "6.0",
    "oculus": "3.0",
    "opera": "36",
    "opera-android": "36",
    "opera_mobile": "36",
    "quest": "3.0",
    "react-native": "0.69",
    "rhino": "1.8.0",
    "safari": "10.0",
    "samsung": "5.0"
  },
  "es.reflect.get": {
    "android": "49",
    "bun": "0.1.1",
    "chrome": "49",
    "chrome-android": "49",
    "deno": "1.0",
    "edge": "12",
    "electron": "0.37",
    "firefox": "42",
    "firefox-android": "42",
    "hermes": "0.7",
    "ios": "10.0",
    "node": "6.0",
    "oculus": "3.0",
    "opera": "36",
    "opera-android": "36",
    "opera_mobile": "36",
    "quest": "3.0",
    "react-native": "0.69",
    "rhino": "1.8.0",
    "safari": "10.0",
    "samsung": "5.0"
  },
  "es.reflect.get-own-property-descriptor": {
    "android": "49",
    "bun": "0.1.1",
    "chrome": "49",
    "chrome-android": "49",
    "deno": "1.0",
    "edge": "12",
    "electron": "0.37",
    "firefox": "42",
    "firefox-android": "42",
    "hermes": "0.7",
    "ios": "10.0",
    "node": "6.0",
    "oculus": "3.0",
    "opera": "36",
    "opera-android": "36",
    "opera_mobile": "36",
    "quest": "3.0",
    "react-native": "0.69",
    "rhino": "1.8.0",
    "safari": "10.0",
    "samsung": "5.0"
  },
  "es.reflect.get-prototype-of": {
    "android": "49",
    "bun": "0.1.1",
    "chrome": "49",
    "chrome-android": "49",
    "deno": "1.0",
    "edge": "12",
    "electron": "0.37",
    "firefox": "42",
    "firefox-android": "42",
    "hermes": "0.7",
    "ios": "10.0",
    "node": "6.0",
    "oculus": "3.0",
    "opera": "36",
    "opera-android": "36",
    "opera_mobile": "36",
    "quest": "3.0",
    "react-native": "0.69",
    "rhino": "1.8.0",
    "safari": "10.0",
    "samsung": "5.0"
  },
  "es.reflect.has": {
    "android": "49",
    "bun": "0.1.1",
    "chrome": "49",
    "chrome-android": "49",
    "deno": "1.0",
    "edge": "12",
    "electron": "0.37",
    "firefox": "42",
    "firefox-android": "42",
    "hermes": "0.7",
    "ios": "10.0",
    "node": "6.0",
    "oculus": "3.0",
    "opera": "36",
    "opera-android": "36",
    "opera_mobile": "36",
    "quest": "3.0",
    "react-native": "0.69",
    "rhino": "1.8.0",
    "safari": "10.0",
    "samsung": "5.0"
  },
  "es.reflect.is-extensible": {
    "android": "49",
    "bun": "0.1.1",
    "chrome": "49",
    "chrome-android": "49",
    "deno": "1.0",
    "edge": "12",
    "electron": "0.37",
    "firefox": "42",
    "firefox-android": "42",
    "hermes": "0.7",
    "ios": "10.0",
    "node": "6.0",
    "oculus": "3.0",
    "opera": "36",
    "opera-android": "36",
    "opera_mobile": "36",
    "quest": "3.0",
    "react-native": "0.69",
    "rhino": "1.8.0",
    "safari": "10.0",
    "samsung": "5.0"
  },
  "es.reflect.own-keys": {
    "android": "49",
    "bun": "0.1.1",
    "chrome": "49",
    "chrome-android": "49",
    "deno": "1.0",
    "edge": "12",
    "electron": "0.37",
    "firefox": "42",
    "firefox-android": "42",
    "hermes": "0.7",
    "ios": "10.0",
    "node": "6.0",
    "oculus": "3.0",
    "opera": "36",
    "opera-android": "36",
    "opera_mobile": "36",
    "quest": "3.0",
    "react-native": "0.69",
    "rhino": "1.8.0",
    "safari": "10.0",
    "samsung": "5.0"
  },
  "es.reflect.prevent-extensions": {
    "android": "49",
    "bun": "0.1.1",
    "chrome": "49",
    "chrome-android": "49",
    "deno": "1.0",
    "edge": "12",
    "electron": "0.37",
    "firefox": "42",
    "firefox-android": "42",
    "hermes": "0.7",
    "ios": "10.0",
    "node": "6.0",
    "oculus": "3.0",
    "opera": "36",
    "opera-android": "36",
    "opera_mobile": "36",
    "quest": "3.0",
    "react-native": "0.69",
    "rhino": "1.8.0",
    "safari": "10.0",
    "samsung": "5.0"
  },
  "es.reflect.set": {
    "android": "49",
    "bun": "0.1.1",
    "chrome": "49",
    "chrome-android": "49",
    "deno": "1.0",
    "edge": "79",
    "electron": "0.37",
    "firefox": "42",
    "firefox-android": "42",
    "hermes": "0.7",
    "ios": "10.0",
    "node": "6.0",
    "oculus": "3.0",
    "opera": "36",
    "opera-android": "36",
    "opera_mobile": "36",
    "quest": "3.0",
    "react-native": "0.69",
    "safari": "10.0",
    "samsung": "5.0"
  },
  "es.reflect.set-prototype-of": {
    "android": "49",
    "bun": "0.1.1",
    "chrome": "49",
    "chrome-android": "49",
    "deno": "1.0",
    "edge": "12",
    "electron": "0.37",
    "firefox": "42",
    "firefox-android": "42",
    "hermes": "0.7",
    "ios": "10.0",
    "node": "6.0",
    "oculus": "3.0",
    "opera": "36",
    "opera-android": "36",
    "opera_mobile": "36",
    "quest": "3.0",
    "react-native": "0.69",
    "rhino": "1.8.0",
    "safari": "10.0",
    "samsung": "5.0"
  },
  "es.reflect.to-string-tag": {
    "android": "86",
    "bun": "0.1.1",
    "chrome": "86",
    "chrome-android": "86",
    "deno": "1.3",
    "edge": "86",
    "electron": "11.0",
    "firefox": "82",
    "firefox-android": "82",
    "hermes": "0.7",
    "ios": "14.0",
    "node": "15.0",
    "oculus": "12.0",
    "opera": "72",
    "opera-android": "61",
    "opera_mobile": "61",
    "quest": "12.0",
    "react-native": "0.69",
    "rhino": "1.8.0",
    "safari": "14.0",
    "samsung": "14.0"
  },
  "es.regexp.constructor": {
    "android": "64",
    "bun": "0.1.1",
    "chrome": "64",
    "chrome-android": "64",
    "deno": "1.0",
    "edge": "79",
    "electron": "3.0",
    "firefox": "78",
    "firefox-android": "78",
    "ios": "11.3",
    "node": "10.0",
    "oculus": "5.0",
    "opera": "51",
    "opera-android": "47",
    "opera_mobile": "47",
    "quest": "5.0",
    "safari": "11.1",
    "samsung": "9.0"
  },
  "es.regexp.escape": {
    "android": "136",
    "bun": "1.1.22",
    "chrome": "136",
    "chrome-android": "136",
    "deno": "2.3.2",
    "edge": "136",
    "electron": "36.0",
    "firefox": "134",
    "firefox-android": "134",
    "ios": "18.2",
    "node": "24.0",
    "opera": "121",
    "opera-android": "90",
    "opera_mobile": "90",
    "safari": "18.2"
  },
  "es.regexp.dot-all": {
    "android": "62",
    "bun": "0.1.1",
    "chrome": "62",
    "chrome-android": "62",
    "deno": "1.0",
    "edge": "79",
    "electron": "3.0",
    "firefox": "78",
    "firefox-android": "78",
    "hermes": "0.4",
    "ios": "11.3",
    "node": "8.10",
    "oculus": "5.0",
    "opera": "49",
    "opera-android": "46",
    "opera_mobile": "46",
    "quest": "5.0",
    "react-native": "0.69",
    "rhino": "1.7.15",
    "safari": "11.1",
    "samsung": "8.0"
  },
  "es.regexp.exec": {
    "android": "64",
    "bun": "0.1.1",
    "chrome": "64",
    "chrome-android": "64",
    "deno": "1.0",
    "edge": "79",
    "electron": "3.0",
    "firefox": "78",
    "firefox-android": "78",
    "hermes": "0.13",
    "ios": "11.3",
    "node": "10.0",
    "oculus": "5.0",
    "opera": "51",
    "opera-android": "47",
    "opera_mobile": "47",
    "quest": "5.0",
    "react-native": "0.71",
    "safari": "11.1",
    "samsung": "9.0"
  },
  "es.regexp.flags": {
    "android": "111",
    "bun": "0.1.1",
    "chrome": "111",
    "chrome-android": "111",
    "deno": "1.32",
    "edge": "111",
    "electron": "24.0",
    "firefox": "78",
    "firefox-android": "78",
    "hermes": "0.4",
    "ios": "11.3",
    "node": "20.0",
    "oculus": "27.0",
    "opera": "97",
    "opera-android": "75",
    "opera_mobile": "75",
    "quest": "27.0",
    "react-native": "0.69",
    "safari": "11.1",
    "samsung": "22.0"
  },
  "es.regexp.sticky": {
    "android": "49",
    "bun": "0.1.1",
    "chrome": "49",
    "chrome-android": "49",
    "deno": "1.0",
    "edge": "13",
    "electron": "0.37",
    "firefox": "3",
    "firefox-android": "4",
    "hermes": "0.3",
    "ios": "10.0",
    "node": "6.0",
    "oculus": "3.0",
    "opera": "36",
    "opera-android": "36",
    "opera_mobile": "36",
    "quest": "3.0",
    "react-native": "0.69",
    "rhino": "1.7.15",
    "safari": "10.0",
    "samsung": "5.0"
  },
  "es.regexp.test": {
    "android": "51",
    "bun": "0.1.1",
    "chrome": "51",
    "chrome-android": "51",
    "deno": "1.0",
    "edge": "79",
    "electron": "1.2",
    "firefox": "46",
    "firefox-android": "46",
    "ios": "10.0",
    "node": "6.5",
    "oculus": "3.0",
    "opera": "38",
    "opera-android": "38",
    "opera_mobile": "38",
    "quest": "3.0",
    "safari": "10.0",
    "samsung": "5.0"
  },
  "es.regexp.to-string": {
    "android": "50",
    "bun": "0.1.1",
    "chrome": "50",
    "chrome-android": "50",
    "deno": "1.0",
    "edge": "79",
    "electron": "1.1",
    "firefox": "46",
    "firefox-android": "46",
    "hermes": "0.1",
    "ios": "10.0",
    "node": "6.0",
    "oculus": "3.0",
    "opera": "37",
    "opera-android": "37",
    "opera_mobile": "37",
    "quest": "3.0",
    "react-native": "0.69",
    "rhino": "1.7.15",
    "safari": "10.0",
    "samsung": "5.0"
  },
  "es.set": {
    "android": "51",
    "bun": "0.1.1",
    "chrome": "51",
    "chrome-android": "51",
    "deno": "1.0",
    "edge": "15",
    "electron": "1.2",
    "firefox": "53",
    "firefox-android": "53",
    "hermes": "0.13",
    "ios": "10.0",
    "node": "6.5",
    "oculus": "3.0",
    "opera": "38",
    "opera-android": "38",
    "opera_mobile": "38",
    "quest": "3.0",
    "react-native": "0.73",
    "rhino": "1.7.13",
    "safari": "10.0",
    "samsung": "5.0"
  },
  "es.set.difference.v2": {
    "android": "128",
    "bun": "1.2.5",
    "chrome": "128",
    "chrome-android": "128",
    "deno": "1.46",
    "edge": "128",
    "electron": "32.0",
    "firefox": "127",
    "firefox-android": "127",
    "node": "22.10",
    "oculus": "35.0",
    "opera": "114",
    "opera-android": "85",
    "opera_mobile": "85",
    "quest": "35.0",
    "samsung": "28.0"
  },
  "es.set.intersection.v2": {
    "android": "128",
    "bun": "1.1.1",
    "chrome": "128",
    "chrome-android": "128",
    "deno": "1.46",
    "edge": "128",
    "electron": "32.0",
    "firefox": "127",
    "firefox-android": "127",
    "ios": "18.0",
    "node": "22.10",
    "oculus": "35.0",
    "opera": "114",
    "opera-android": "85",
    "opera_mobile": "85",
    "quest": "35.0",
    "safari": "18.0",
    "samsung": "28.0"
  },
  "es.set.is-disjoint-from.v2": {
    "android": "128",
    "bun": "1.1.1",
    "chrome": "128",
    "chrome-android": "128",
    "deno": "1.46",
    "edge": "128",
    "electron": "32.0",
    "firefox": "127",
    "firefox-android": "127",
    "ios": "18.0",
    "node": "22.10",
    "oculus": "35.0",
    "opera": "114",
    "opera-android": "85",
    "opera_mobile": "85",
    "quest": "35.0",
    "safari": "18.0",
    "samsung": "28.0"
  },
  "es.set.is-subset-of.v2": {
    "android": "128",
    "bun": "1.1.1",
    "chrome": "128",
    "chrome-android": "128",
    "deno": "1.46",
    "edge": "128",
    "electron": "32.0",
    "firefox": "127",
    "firefox-android": "127",
    "ios": "18.0",
    "node": "22.10",
    "oculus": "35.0",
    "opera": "114",
    "opera-android": "85",
    "opera_mobile": "85",
    "quest": "35.0",
    "safari": "18.0",
    "samsung": "28.0"
  },
  "es.set.is-superset-of.v2": {
    "android": "128",
    "bun": "1.1.1",
    "chrome": "128",
    "chrome-android": "128",
    "deno": "1.46",
    "edge": "128",
    "electron": "32.0",
    "firefox": "127",
    "firefox-android": "127",
    "ios": "18.0",
    "node": "22.10",
    "oculus": "35.0",
    "opera": "114",
    "opera-android": "85",
    "opera_mobile": "85",
    "quest": "35.0",
    "safari": "18.0",
    "samsung": "28.0"
  },
  "es.set.symmetric-difference.v2": {
    "android": "123",
    "bun": "1.2.5",
    "chrome": "123",
    "chrome-android": "123",
    "deno": "1.41.3",
    "edge": "123",
    "electron": "30.0",
    "firefox": "127",
    "firefox-android": "127",
    "node": "22.0",
    "oculus": "33.0",
    "opera": "109",
    "opera-android": "82",
    "opera_mobile": "82",
    "quest": "33.0",
    "samsung": "27.0"
  },
  "es.set.union.v2": {
    "android": "123",
    "bun": "1.2.5",
    "chrome": "123",
    "chrome-android": "123",
    "deno": "1.41.3",
    "edge": "123",
    "electron": "30.0",
    "firefox": "127",
    "firefox-android": "127",
    "node": "22.0",
    "oculus": "33.0",
    "opera": "109",
    "opera-android": "82",
    "opera_mobile": "82",
    "quest": "33.0",
    "samsung": "27.0"
  },
  "es.string.at-alternative": {
    "android": "92",
    "bun": "0.1.1",
    "chrome": "92",
    "chrome-android": "92",
    "deno": "1.12",
    "edge": "92",
    "electron": "14.0",
    "firefox": "90",
    "firefox-android": "90",
    "hermes": "0.13",
    "ios": "15.4",
    "node": "16.6",
    "oculus": "17.0",
    "opera": "78",
    "opera-android": "65",
    "opera_mobile": "65",
    "quest": "17.0",
    "react-native": "0.71",
    "safari": "15.4",
    "samsung": "16.0"
  },
  "es.string.code-point-at": {
    "android": "41",
    "bun": "0.1.1",
    "chrome": "41",
    "chrome-android": "41",
    "deno": "1.0",
    "edge": "13",
    "electron": "0.21",
    "firefox": "29",
    "firefox-android": "29",
    "hermes": "0.1",
    "ios": "9.0",
    "node": "1.0",
    "oculus": "3.0",
    "opera": "28",
    "opera-android": "28",
    "opera_mobile": "28",
    "quest": "3.0",
    "react-native": "0.69",
    "rhino": "1.7.13",
    "safari": "9.0",
    "samsung": "3.4"
  },
  "es.string.ends-with": {
    "android": "51",
    "bun": "0.1.1",
    "chrome": "51",
    "chrome-android": "51",
    "deno": "1.0",
    "edge": "79",
    "electron": "1.2",
    "firefox": "40",
    "firefox-android": "40",
    "hermes": "0.1",
    "ios": "10.0",
    "node": "6.5",
    "oculus": "3.0",
    "opera": "38",
    "opera-android": "38",
    "opera_mobile": "38",
    "quest": "3.0",
    "react-native": "0.69",
    "rhino": "1.7.15",
    "safari": "10.0",
    "samsung": "5.0"
  },
  "es.string.from-code-point": {
    "android": "41",
    "bun": "0.1.1",
    "chrome": "41",
    "chrome-android": "41",
    "deno": "1.0",
    "edge": "13",
    "electron": "0.21",
    "firefox": "29",
    "firefox-android": "29",
    "hermes": "0.1",
    "ios": "9.0",
    "node": "1.0",
    "oculus": "3.0",
    "opera": "28",
    "opera-android": "28",
    "opera_mobile": "28",
    "quest": "3.0",
    "react-native": "0.69",
    "rhino": "1.7.13",
    "safari": "9.0",
    "samsung": "3.4"
  },
  "es.string.includes": {
    "android": "51",
    "bun": "0.1.1",
    "chrome": "51",
    "chrome-android": "51",
    "deno": "1.0",
    "edge": "79",
    "electron": "1.2",
    "firefox": "40",
    "firefox-android": "40",
    "hermes": "0.1",
    "ios": "10.0",
    "node": "6.5",
    "oculus": "3.0",
    "opera": "38",
    "opera-android": "38",
    "opera_mobile": "38",
    "quest": "3.0",
    "react-native": "0.69",
    "rhino": "1.7.15",
    "safari": "10.0",
    "samsung": "5.0"
  },
  "es.string.is-well-formed": {
    "android": "111",
    "bun": "0.4.0",
    "chrome": "111",
    "chrome-android": "111",
    "deno": "1.32",
    "edge": "111",
    "electron": "24.0",
    "firefox": "119",
    "firefox-android": "119",
    "ios": "16.4",
    "node": "20.0",
    "oculus": "27.0",
    "opera": "97",
    "opera-android": "75",
    "opera_mobile": "75",
    "quest": "27.0",
    "rhino": "1.8.0",
    "safari": "16.4",
    "samsung": "22.0"
  },
  "es.string.iterator": {
    "android": "41",
    "bun": "0.1.1",
    "chrome": "41",
    "chrome-android": "41",
    "deno": "1.0",
    "edge": "13",
    "electron": "0.21",
    "firefox": "36",
    "firefox-android": "36",
    "hermes": "0.1",
    "ios": "9.0",
    "node": "1.0",
    "oculus": "3.0",
    "opera": "28",
    "opera-android": "28",
    "opera_mobile": "28",
    "quest": "3.0",
    "react-native": "0.69",
    "rhino": "1.7.13",
    "safari": "9.0",
    "samsung": "3.4"
  },
  "es.string.match": {
    "android": "51",
    "bun": "0.1.1",
    "chrome": "51",
    "chrome-android": "51",
    "deno": "1.0",
    "edge": "79",
    "electron": "1.2",
    "firefox": "49",
    "firefox-android": "49",
    "hermes": "0.1",
    "ios": "10.0",
    "node": "6.5",
    "oculus": "3.0",
    "opera": "38",
    "opera-android": "38",
    "opera_mobile": "38",
    "quest": "3.0",
    "react-native": "0.69",
    "safari": "10.0",
    "samsung": "5.0"
  },
  "es.string.match-all": {
    "android": "80",
    "bun": "0.1.1",
    "chrome": "80",
    "chrome-android": "80",
    "deno": "1.0",
    "edge": "80",
    "electron": "8.0",
    "firefox": "73",
    "firefox-android": "73",
    "hermes": "0.6",
    "ios": "13.4",
    "node": "14.0",
    "oculus": "9.0",
    "opera": "67",
    "opera-android": "57",
    "opera_mobile": "57",
    "quest": "9.0",
    "react-native": "0.69",
    "rhino": "1.8.0",
    "safari": "13.1",
    "samsung": "13.0"
  },
  "es.string.pad-end": {
    "android": "57",
    "bun": "0.1.1",
    "chrome": "57",
    "chrome-android": "57",
    "deno": "1.0",
    "edge": "15",
    "electron": "1.7",
    "firefox": "48",
    "firefox-android": "48",
    "hermes": "0.1",
    "ios": "11.0",
    "node": "8.0",
    "oculus": "3.0",
    "opera": "44",
    "opera-android": "43",
    "opera_mobile": "43",
    "quest": "3.0",
    "react-native": "0.69",
    "rhino": "1.7.13",
    "safari": "11.0",
    "samsung": "7.0"
  },
  "es.string.pad-start": {
    "android": "57",
    "bun": "0.1.1",
    "chrome": "57",
    "chrome-android": "57",
    "deno": "1.0",
    "edge": "15",
    "electron": "1.7",
    "firefox": "48",
    "firefox-android": "48",
    "hermes": "0.1",
    "ios": "11.0",
    "node": "8.0",
    "oculus": "3.0",
    "opera": "44",
    "opera-android": "43",
    "opera_mobile": "43",
    "quest": "3.0",
    "react-native": "0.69",
    "rhino": "1.7.13",
    "safari": "11.0",
    "samsung": "7.0"
  },
  "es.string.raw": {
    "android": "41",
    "bun": "0.1.1",
    "chrome": "41",
    "chrome-android": "41",
    "deno": "1.0",
    "edge": "13",
    "electron": "0.21",
    "firefox": "34",
    "firefox-android": "34",
    "hermes": "0.1",
    "ios": "9.0",
    "node": "1.0",
    "oculus": "3.0",
    "opera": "28",
    "opera-android": "28",
    "opera_mobile": "28",
    "quest": "3.0",
    "react-native": "0.69",
    "rhino": "1.7.14",
    "safari": "9.0",
    "samsung": "3.4"
  },
  "es.string.repeat": {
    "android": "41",
    "bun": "0.1.1",
    "chrome": "41",
    "chrome-android": "41",
    "deno": "1.0",
    "edge": "13",
    "electron": "0.21",
    "firefox": "24",
    "firefox-android": "24",
    "hermes": "0.1",
    "ios": "9.0",
    "node": "1.0",
    "oculus": "3.0",
    "opera": "28",
    "opera-android": "28",
    "opera_mobile": "28",
    "quest": "3.0",
    "react-native": "0.69",
    "rhino": "1.7.13",
    "safari": "9.0",
    "samsung": "3.4"
  },
  "es.string.replace": {
    "android": "64",
    "bun": "0.1.1",
    "chrome": "64",
    "chrome-android": "64",
    "deno": "1.0",
    "edge": "79",
    "electron": "3.0",
    "firefox": "78",
    "firefox-android": "78",
    "hermes": "0.13",
    "ios": "14.0",
    "node": "10.0",
    "oculus": "5.0",
    "opera": "51",
    "opera-android": "47",
    "opera_mobile": "47",
    "quest": "5.0",
    "react-native": "0.71",
    "safari": "14.0",
    "samsung": "9.0"
  },
  "es.string.replace-all": {
    "android": "85",
    "bun": "0.1.1",
    "chrome": "85",
    "chrome-android": "85",
    "deno": "1.2",
    "edge": "85",
    "electron": "10.0",
    "firefox": "77",
    "firefox-android": "77",
    "hermes": "0.7",
    "ios": "13.4",
    "node": "15.0",
    "oculus": "12.0",
    "opera": "71",
    "opera-android": "60",
    "opera_mobile": "60",
    "quest": "12.0",
    "react-native": "0.69",
    "rhino": "1.7.15",
    "safari": "13.1",
    "samsung": "14.0"
  },
  "es.string.search": {
    "android": "51",
    "bun": "0.1.1",
    "chrome": "51",
    "chrome-android": "51",
    "deno": "1.0",
    "edge": "79",
    "electron": "1.2",
    "firefox": "49",
    "firefox-android": "49",
    "hermes": "0.1",
    "ios": "10.0",
    "node": "6.5",
    "oculus": "3.0",
    "opera": "38",
    "opera-android": "38",
    "opera_mobile": "38",
    "quest": "3.0",
    "react-native": "0.69",
    "safari": "10.0",
    "samsung": "5.0"
  },
  "es.string.split": {
    "android": "54",
    "bun": "0.1.1",
    "chrome": "54",
    "chrome-android": "54",
    "deno": "1.0",
    "edge": "79",
    "electron": "1.4",
    "firefox": "49",
    "firefox-android": "49",
    "ios": "10.0",
    "node": "7.0",
    "oculus": "3.0",
    "opera": "41",
    "opera-android": "41",
    "opera_mobile": "41",
    "quest": "3.0",
    "safari": "10.0",
    "samsung": "6.0"
  },
  "es.string.starts-with": {
    "android": "51",
    "bun": "0.1.1",
    "chrome": "51",
    "chrome-android": "51",
    "deno": "1.0",
    "edge": "79",
    "electron": "1.2",
    "firefox": "40",
    "firefox-android": "40",
    "hermes": "0.1",
    "ios": "10.0",
    "node": "6.5",
    "oculus": "3.0",
    "opera": "38",
    "opera-android": "38",
    "opera_mobile": "38",
    "quest": "3.0",
    "react-native": "0.69",
    "rhino": "1.7.15",
    "safari": "10.0",
    "samsung": "5.0"
  },
  "es.string.substr": {
    "android": "3.0",
    "bun": "0.1.1",
    "chrome": "1",
    "chrome-android": "18",
    "deno": "1.0",
    "edge": "12",
    "electron": "0.20",
    "firefox": "1",
    "firefox-android": "4",
    "hermes": "0.1",
    "ie": "9",
    "ios": "1.0",
    "node": "0.0.3",
    "oculus": "3.0",
    "opera": "4",
    "opera-android": "4",
    "opera_mobile": "4",
    "phantom": "1.9",
    "quest": "3.0",
    "react-native": "0.69",
    "rhino": "1.7.13",
    "safari": "1",
    "samsung": "1.0"
  },
  "es.string.to-well-formed": {
    "android": "111",
    "bun": "0.5.7",
    "chrome": "111",
    "chrome-android": "111",
    "deno": "1.32",
    "edge": "111",
    "electron": "24.0",
    "firefox": "119",
    "firefox-android": "119",
    "ios": "16.4",
    "node": "20.0",
    "oculus": "27.0",
    "opera": "97",
    "opera-android": "75",
    "opera_mobile": "75",
    "quest": "27.0",
    "rhino": "1.8.0",
    "safari": "16.4",
    "samsung": "22.0"
  },
  "es.string.trim": {
    "android": "59",
    "bun": "0.1.1",
    "chrome": "59",
    "chrome-android": "59",
    "deno": "1.0",
    "edge": "15",
    "electron": "1.8",
    "firefox": "52",
    "firefox-android": "52",
    "hermes": "0.1",
    "ios": "12.2",
    "node": "8.3",
    "oculus": "4.0",
    "opera": "46",
    "opera-android": "43",
    "opera_mobile": "43",
    "quest": "4.0",
    "react-native": "0.69",
    "rhino": "1.8.0",
    "safari": "12.1",
    "samsung": "7.0"
  },
  "es.string.trim-end": {
    "android": "66",
    "bun": "0.1.1",
    "chrome": "66",
    "chrome-android": "66",
    "deno": "1.0",
    "edge": "79",
    "electron": "3.0",
    "firefox": "61",
    "firefox-android": "61",
    "hermes": "0.3",
    "ios": "12.2",
    "node": "10.0",
    "oculus": "5.0",
    "opera": "53",
    "opera-android": "47",
    "opera_mobile": "47",
    "quest": "5.0",
    "react-native": "0.69",
    "safari": "12.1",
    "samsung": "9.0"
  },
  "es.string.trim-start": {
    "android": "66",
    "bun": "0.1.1",
    "chrome": "66",
    "chrome-android": "66",
    "deno": "1.0",
    "edge": "79",
    "electron": "3.0",
    "firefox": "61",
    "firefox-android": "61",
    "hermes": "0.3",
    "ios": "12.0",
    "node": "10.0",
    "oculus": "5.0",
    "opera": "53",
    "opera-android": "47",
    "opera_mobile": "47",
    "quest": "5.0",
    "react-native": "0.69",
    "safari": "12.0",
    "samsung": "9.0"
  },
  "es.string.anchor": {
    "android": "3.0",
    "bun": "0.1.1",
    "chrome": "5",
    "chrome-android": "18",
    "deno": "1.0",
    "edge": "12",
    "electron": "0.20",
    "firefox": "17",
    "firefox-android": "17",
    "ios": "6.0",
    "node": "0.1.27",
    "oculus": "3.0",
    "opera": "15",
    "opera-android": "15",
    "opera_mobile": "15",
    "phantom": "2.0",
    "quest": "3.0",
    "rhino": "1.7.14",
    "safari": "6.0",
    "samsung": "1.0"
  },
  "es.string.big": {
    "android": "3.0",
    "bun": "0.1.1",
    "chrome": "5",
    "chrome-android": "18",
    "deno": "1.0",
    "edge": "12",
    "electron": "0.20",
    "firefox": "2",
    "firefox-android": "4",
    "ios": "2.0",
    "node": "0.1.27",
    "oculus": "3.0",
    "opera": "10.50",
    "opera-android": "10.50",
    "opera_mobile": "10.50",
    "phantom": "1.9",
    "quest": "3.0",
    "rhino": "1.7.13",
    "safari": "3.1",
    "samsung": "1.0"
  },
  "es.string.blink": {
    "android": "3.0",
    "bun": "0.1.1",
    "chrome": "5",
    "chrome-android": "18",
    "deno": "1.0",
    "edge": "12",
    "electron": "0.20",
    "firefox": "2",
    "firefox-android": "4",
    "ios": "2.0",
    "node": "0.1.27",
    "oculus": "3.0",
    "opera": "10.50",
    "opera-android": "10.50",
    "opera_mobile": "10.50",
    "phantom": "1.9",
    "quest": "3.0",
    "rhino": "1.7.13",
    "safari": "3.1",
    "samsung": "1.0"
  },
  "es.string.bold": {
    "android": "3.0",
    "bun": "0.1.1",
    "chrome": "5",
    "chrome-android": "18",
    "deno": "1.0",
    "edge": "12",
    "electron": "0.20",
    "firefox": "2",
    "firefox-android": "4",
    "ios": "2.0",
    "node": "0.1.27",
    "oculus": "3.0",
    "opera": "10.50",
    "opera-android": "10.50",
    "opera_mobile": "10.50",
    "phantom": "1.9",
    "quest": "3.0",
    "rhino": "1.7.13",
    "safari": "3.1",
    "samsung": "1.0"
  },
  "es.string.fixed": {
    "android": "3.0",
    "bun": "0.1.1",
    "chrome": "5",
    "chrome-android": "18",
    "deno": "1.0",
    "edge": "12",
    "electron": "0.20",
    "firefox": "2",
    "firefox-android": "4",
    "ios": "2.0",
    "node": "0.1.27",
    "oculus": "3.0",
    "opera": "10.50",
    "opera-android": "10.50",
    "opera_mobile": "10.50",
    "phantom": "1.9",
    "quest": "3.0",
    "rhino": "1.7.13",
    "safari": "3.1",
    "samsung": "1.0"
  },
  "es.string.fontcolor": {
    "android": "3.0",
    "bun": "0.1.1",
    "chrome": "5",
    "chrome-android": "18",
    "deno": "1.0",
    "edge": "12",
    "electron": "0.20",
    "firefox": "17",
    "firefox-android": "17",
    "ios": "6.0",
    "node": "0.1.27",
    "oculus": "3.0",
    "opera": "15",
    "opera-android": "15",
    "opera_mobile": "15",
    "phantom": "2.0",
    "quest": "3.0",
    "rhino": "1.7.14",
    "safari": "6.0",
    "samsung": "1.0"
  },
  "es.string.fontsize": {
    "android": "3.0",
    "bun": "0.1.1",
    "chrome": "5",
    "chrome-android": "18",
    "deno": "1.0",
    "edge": "12",
    "electron": "0.20",
    "firefox": "17",
    "firefox-android": "17",
    "ios": "6.0",
    "node": "0.1.27",
    "oculus": "3.0",
    "opera": "15",
    "opera-android": "15",
    "opera_mobile": "15",
    "phantom": "2.0",
    "quest": "3.0",
    "rhino": "1.7.14",
    "safari": "6.0",
    "samsung": "1.0"
  },
  "es.string.italics": {
    "android": "3.0",
    "bun": "0.1.1",
    "chrome": "5",
    "chrome-android": "18",
    "deno": "1.0",
    "edge": "12",
    "electron": "0.20",
    "firefox": "2",
    "firefox-android": "4",
    "ios": "2.0",
    "node": "0.1.27",
    "oculus": "3.0",
    "opera": "10.50",
    "opera-android": "10.50",
    "opera_mobile": "10.50",
    "phantom": "1.9",
    "quest": "3.0",
    "rhino": "1.7.13",
    "safari": "3.1",
    "samsung": "1.0"
  },
  "es.string.link": {
    "android": "3.0",
    "bun": "0.1.1",
    "chrome": "5",
    "chrome-android": "18",
    "deno": "1.0",
    "edge": "12",
    "electron": "0.20",
    "firefox": "17",
    "firefox-android": "17",
    "ios": "6.0",
    "node": "0.1.27",
    "oculus": "3.0",
    "opera": "15",
    "opera-android": "15",
    "opera_mobile": "15",
    "phantom": "2.0",
    "quest": "3.0",
    "rhino": "1.7.14",
    "safari": "6.0",
    "samsung": "1.0"
  },
  "es.string.small": {
    "android": "3.0",
    "bun": "0.1.1",
    "chrome": "5",
    "chrome-android": "18",
    "deno": "1.0",
    "edge": "12",
    "electron": "0.20",
    "firefox": "2",
    "firefox-android": "4",
    "ios": "2.0",
    "node": "0.1.27",
    "oculus": "3.0",
    "opera": "10.50",
    "opera-android": "10.50",
    "opera_mobile": "10.50",
    "phantom": "1.9",
    "quest": "3.0",
    "rhino": "1.7.13",
    "safari": "3.1",
    "samsung": "1.0"
  },
  "es.string.strike": {
    "android": "3.0",
    "bun": "0.1.1",
    "chrome": "5",
    "chrome-android": "18",
    "deno": "1.0",
    "edge": "12",
    "electron": "0.20",
    "firefox": "2",
    "firefox-android": "4",
    "ios": "2.0",
    "node": "0.1.27",
    "oculus": "3.0",
    "opera": "10.50",
    "opera-android": "10.50",
    "opera_mobile": "10.50",
    "phantom": "1.9",
    "quest": "3.0",
    "rhino": "1.7.13",
    "safari": "3.1",
    "samsung": "1.0"
  },
  "es.string.sub": {
    "android": "3.0",
    "bun": "0.1.1",
    "chrome": "5",
    "chrome-android": "18",
    "deno": "1.0",
    "edge": "12",
    "electron": "0.20",
    "firefox": "2",
    "firefox-android": "4",
    "ios": "2.0",
    "node": "0.1.27",
    "oculus": "3.0",
    "opera": "10.50",
    "opera-android": "10.50",
    "opera_mobile": "10.50",
    "phantom": "1.9",
    "quest": "3.0",
    "rhino": "1.7.13",
    "safari": "3.1",
    "samsung": "1.0"
  },
  "es.string.sup": {
    "android": "3.0",
    "bun": "0.1.1",
    "chrome": "5",
    "chrome-android": "18",
    "deno": "1.0",
    "edge": "12",
    "electron": "0.20",
    "firefox": "2",
    "firefox-android": "4",
    "ios": "2.0",
    "node": "0.1.27",
    "oculus": "3.0",
    "opera": "10.50",
    "opera-android": "10.50",
    "opera_mobile": "10.50",
    "phantom": "1.9",
    "quest": "3.0",
    "rhino": "1.7.13",
    "safari": "3.1",
    "samsung": "1.0"
  },
  "es.typed-array.float32-array": {
    "android": "54",
    "bun": "0.1.1",
    "chrome": "54",
    "chrome-android": "54",
    "deno": "1.0",
    "edge": "15",
    "electron": "1.4",
    "firefox": "55",
    "firefox-android": "55",
    "ios": "14.0",
    "node": "7.0",
    "oculus": "3.0",
    "opera": "41",
    "opera-android": "41",
    "opera_mobile": "41",
    "quest": "3.0",
    "safari": "14.0",
    "samsung": "6.0"
  },
  "es.typed-array.float64-array": {
    "android": "54",
    "bun": "0.1.1",
    "chrome": "54",
    "chrome-android": "54",
    "deno": "1.0",
    "edge": "15",
    "electron": "1.4",
    "firefox": "55",
    "firefox-android": "55",
    "ios": "14.0",
    "node": "7.0",
    "oculus": "3.0",
    "opera": "41",
    "opera-android": "41",
    "opera_mobile": "41",
    "quest": "3.0",
    "safari": "14.0",
    "samsung": "6.0"
  },
  "es.typed-array.int8-array": {
    "android": "54",
    "bun": "0.1.1",
    "chrome": "54",
    "chrome-android": "54",
    "deno": "1.0",
    "edge": "15",
    "electron": "1.4",
    "firefox": "55",
    "firefox-android": "55",
    "ios": "14.0",
    "node": "7.0",
    "oculus": "3.0",
    "opera": "41",
    "opera-android": "41",
    "opera_mobile": "41",
    "quest": "3.0",
    "safari": "14.0",
    "samsung": "6.0"
  },
  "es.typed-array.int16-array": {
    "android": "54",
    "bun": "0.1.1",
    "chrome": "54",
    "chrome-android": "54",
    "deno": "1.0",
    "edge": "15",
    "electron": "1.4",
    "firefox": "55",
    "firefox-android": "55",
    "ios": "14.0",
    "node": "7.0",
    "oculus": "3.0",
    "opera": "41",
    "opera-android": "41",
    "opera_mobile": "41",
    "quest": "3.0",
    "safari": "14.0",
    "samsung": "6.0"
  },
  "es.typed-array.int32-array": {
    "android": "54",
    "bun": "0.1.1",
    "chrome": "54",
    "chrome-android": "54",
    "deno": "1.0",
    "edge": "15",
    "electron": "1.4",
    "firefox": "55",
    "firefox-android": "55",
    "ios": "14.0",
    "node": "7.0",
    "oculus": "3.0",
    "opera": "41",
    "opera-android": "41",
    "opera_mobile": "41",
    "quest": "3.0",
    "safari": "14.0",
    "samsung": "6.0"
  },
  "es.typed-array.uint8-array": {
    "android": "54",
    "bun": "0.1.1",
    "chrome": "54",
    "chrome-android": "54",
    "deno": "1.0",
    "edge": "15",
    "electron": "1.4",
    "firefox": "55",
    "firefox-android": "55",
    "ios": "14.0",
    "node": "7.0",
    "oculus": "3.0",
    "opera": "41",
    "opera-android": "41",
    "opera_mobile": "41",
    "quest": "3.0",
    "safari": "14.0",
    "samsung": "6.0"
  },
  "es.typed-array.uint8-clamped-array": {
    "android": "54",
    "bun": "0.1.1",
    "chrome": "54",
    "chrome-android": "54",
    "deno": "1.0",
    "edge": "15",
    "electron": "1.4",
    "firefox": "55",
    "firefox-android": "55",
    "ios": "14.0",
    "node": "7.0",
    "oculus": "3.0",
    "opera": "41",
    "opera-android": "41",
    "opera_mobile": "41",
    "quest": "3.0",
    "safari": "14.0",
    "samsung": "6.0"
  },
  "es.typed-array.uint16-array": {
    "android": "54",
    "bun": "0.1.1",
    "chrome": "54",
    "chrome-android": "54",
    "deno": "1.0",
    "edge": "15",
    "electron": "1.4",
    "firefox": "55",
    "firefox-android": "55",
    "ios": "14.0",
    "node": "7.0",
    "oculus": "3.0",
    "opera": "41",
    "opera-android": "41",
    "opera_mobile": "41",
    "quest": "3.0",
    "safari": "14.0",
    "samsung": "6.0"
  },
  "es.typed-array.uint32-array": {
    "android": "54",
    "bun": "0.1.1",
    "chrome": "54",
    "chrome-android": "54",
    "deno": "1.0",
    "edge": "15",
    "electron": "1.4",
    "firefox": "55",
    "firefox-android": "55",
    "ios": "14.0",
    "node": "7.0",
    "oculus": "3.0",
    "opera": "41",
    "opera-android": "41",
    "opera_mobile": "41",
    "quest": "3.0",
    "safari": "14.0",
    "samsung": "6.0"
  },
  "es.typed-array.at": {
    "android": "92",
    "bun": "0.1.1",
    "chrome": "92",
    "chrome-android": "92",
    "deno": "1.12",
    "edge": "92",
    "electron": "14.0",
    "firefox": "90",
    "firefox-android": "90",
    "hermes": "0.13",
    "ios": "15.4",
    "node": "16.6",
    "oculus": "17.0",
    "opera": "78",
    "opera-android": "65",
    "opera_mobile": "65",
    "quest": "17.0",
    "react-native": "0.71",
    "rhino": "1.7.15",
    "safari": "15.4",
    "samsung": "16.0"
  },
  "es.typed-array.copy-within": {
    "android": "45",
    "bun": "0.1.1",
    "chrome": "45",
    "chrome-android": "45",
    "deno": "1.0",
    "edge": "13",
    "electron": "0.31",
    "firefox": "34",
    "firefox-android": "34",
    "hermes": "0.1",
    "ios": "10.0",
    "node": "4.0",
    "oculus": "3.0",
    "opera": "32",
    "opera-android": "32",
    "opera_mobile": "32",
    "quest": "3.0",
    "react-native": "0.69",
    "safari": "10.0",
    "samsung": "5.0"
  },
  "es.typed-array.every": {
    "android": "45",
    "bun": "0.1.1",
    "chrome": "45",
    "chrome-android": "45",
    "deno": "1.0",
    "edge": "13",
    "electron": "0.31",
    "firefox": "37",
    "firefox-android": "37",
    "hermes": "0.1",
    "ios": "10.0",
    "node": "4.0",
    "oculus": "3.0",
    "opera": "32",
    "opera-android": "32",
    "opera_mobile": "32",
    "quest": "3.0",
    "react-native": "0.69",
    "safari": "10.0",
    "samsung": "5.0"
  },
  "es.typed-array.fill": {
    "android": "58",
    "bun": "0.1.1",
    "chrome": "58",
    "chrome-android": "58",
    "deno": "1.0",
    "edge": "79",
    "electron": "1.7",
    "firefox": "55",
    "firefox-android": "55",
    "hermes": "0.1",
    "ios": "14.5",
    "node": "8.0",
    "oculus": "4.0",
    "opera": "45",
    "opera-android": "43",
    "opera_mobile": "43",
    "quest": "4.0",
    "react-native": "0.69",
    "safari": "14.1",
    "samsung": "7.0"
  },
  "es.typed-array.filter": {
    "android": "45",
    "bun": "0.1.1",
    "chrome": "45",
    "chrome-android": "45",
    "deno": "1.0",
    "edge": "13",
    "electron": "0.31",
    "firefox": "38",
    "firefox-android": "38",
    "hermes": "0.1",
    "ios": "10.0",
    "node": "4.0",
    "oculus": "3.0",
    "opera": "32",
    "opera-android": "32",
    "opera_mobile": "32",
    "quest": "3.0",
    "react-native": "0.69",
    "safari": "10.0",
    "samsung": "5.0"
  },
  "es.typed-array.find": {
    "android": "45",
    "bun": "0.1.1",
    "chrome": "45",
    "chrome-android": "45",
    "deno": "1.0",
    "edge": "13",
    "electron": "0.31",
    "firefox": "37",
    "firefox-android": "37",
    "hermes": "0.1",
    "ios": "10.0",
    "node": "4.0",
    "oculus": "3.0",
    "opera": "32",
    "opera-android": "32",
    "opera_mobile": "32",
    "quest": "3.0",
    "react-native": "0.69",
    "safari": "10.0",
    "samsung": "5.0"
  },
  "es.typed-array.find-index": {
    "android": "45",
    "bun": "0.1.1",
    "chrome": "45",
    "chrome-android": "45",
    "deno": "1.0",
    "edge": "13",
    "electron": "0.31",
    "firefox": "37",
    "firefox-android": "37",
    "hermes": "0.1",
    "ios": "10.0",
    "node": "4.0",
    "oculus": "3.0",
    "opera": "32",
    "opera-android": "32",
    "opera_mobile": "32",
    "quest": "3.0",
    "react-native": "0.69",
    "safari": "10.0",
    "samsung": "5.0"
  },
  "es.typed-array.find-last": {
    "android": "97",
    "bun": "0.1.1",
    "chrome": "97",
    "chrome-android": "97",
    "deno": "1.16",
    "edge": "97",
    "electron": "17.0",
    "firefox": "104",
    "firefox-android": "104",
    "hermes": "0.11",
    "ios": "15.4",
    "node": "18.0",
    "oculus": "20.0",
    "opera": "83",
    "opera-android": "68",
    "opera_mobile": "68",
    "quest": "20.0",
    "react-native": "0.69",
    "rhino": "1.8.0",
    "safari": "15.4",
    "samsung": "18.0"
  },
  "es.typed-array.find-last-index": {
    "android": "97",
    "bun": "0.1.1",
    "chrome": "97",
    "chrome-android": "97",
    "deno": "1.16",
    "edge": "97",
    "electron": "17.0",
    "firefox": "104",
    "firefox-android": "104",
    "hermes": "0.11",
    "ios": "15.4",
    "node": "18.0",
    "oculus": "20.0",
    "opera": "83",
    "opera-android": "68",
    "opera_mobile": "68",
    "quest": "20.0",
    "react-native": "0.69",
    "rhino": "1.8.0",
    "safari": "15.4",
    "samsung": "18.0"
  },
  "es.typed-array.for-each": {
    "android": "45",
    "bun": "0.1.1",
    "chrome": "45",
    "chrome-android": "45",
    "deno": "1.0",
    "edge": "13",
    "electron": "0.31",
    "firefox": "38",
    "firefox-android": "38",
    "hermes": "0.1",
    "ios": "10.0",
    "node": "4.0",
    "oculus": "3.0",
    "opera": "32",
    "opera-android": "32",
    "opera_mobile": "32",
    "quest": "3.0",
    "react-native": "0.69",
    "safari": "10.0",
    "samsung": "5.0"
  },
  "es.typed-array.from": {
    "android": "54",
    "bun": "0.1.1",
    "chrome": "54",
    "chrome-android": "54",
    "deno": "1.0",
    "edge": "15",
    "electron": "1.4",
    "firefox": "55",
    "firefox-android": "55",
    "ios": "14.0",
    "node": "7.0",
    "oculus": "3.0",
    "opera": "41",
    "opera-android": "41",
    "opera_mobile": "41",
    "quest": "3.0",
    "safari": "14.0",
    "samsung": "6.0"
  },
  "es.typed-array.includes": {
    "android": "49",
    "bun": "0.1.1",
    "chrome": "49",
    "chrome-android": "49",
    "deno": "1.0",
    "edge": "14",
    "electron": "0.37",
    "firefox": "43",
    "firefox-android": "43",
    "hermes": "0.1",
    "ios": "10.0",
    "node": "6.0",
    "oculus": "3.0",
    "opera": "36",
    "opera-android": "36",
    "opera_mobile": "36",
    "quest": "3.0",
    "react-native": "0.69",
    "safari": "10.0",
    "samsung": "5.0"
  },
  "es.typed-array.index-of": {
    "android": "45",
    "bun": "0.1.1",
    "chrome": "45",
    "chrome-android": "45",
    "deno": "1.0",
    "edge": "13",
    "electron": "0.31",
    "firefox": "37",
    "firefox-android": "37",
    "hermes": "0.1",
    "ios": "10.0",
    "node": "4.0",
    "oculus": "3.0",
    "opera": "32",
    "opera-android": "32",
    "opera_mobile": "32",
    "quest": "3.0",
    "react-native": "0.69",
    "safari": "10.0",
    "samsung": "5.0"
  },
  "es.typed-array.iterator": {
    "android": "51",
    "bun": "0.1.1",
    "chrome": "51",
    "chrome-android": "51",
    "deno": "1.0",
    "edge": "13",
    "electron": "1.2",
    "firefox": "37",
    "firefox-android": "37",
    "hermes": "0.1",
    "ios": "10.0",
    "node": "6.5",
    "oculus": "3.0",
    "opera": "38",
    "opera-android": "38",
    "opera_mobile": "38",
    "quest": "3.0",
    "react-native": "0.69",
    "safari": "10.0",
    "samsung": "5.0"
  },
  "es.typed-array.join": {
    "android": "45",
    "bun": "0.1.1",
    "chrome": "45",
    "chrome-android": "45",
    "deno": "1.0",
    "edge": "13",
    "electron": "0.31",
    "firefox": "37",
    "firefox-android": "37",
    "hermes": "0.1",
    "ios": "10.0",
    "node": "4.0",
    "oculus": "3.0",
    "opera": "32",
    "opera-android": "32",
    "opera_mobile": "32",
    "quest": "3.0",
    "react-native": "0.69",
    "safari": "10.0",
    "samsung": "5.0"
  },
  "es.typed-array.last-index-of": {
    "android": "45",
    "bun": "0.1.1",
    "chrome": "45",
    "chrome-android": "45",
    "deno": "1.0",
    "edge": "13",
    "electron": "0.31",
    "firefox": "37",
    "firefox-android": "37",
    "hermes": "0.1",
    "ios": "10.0",
    "node": "4.0",
    "oculus": "3.0",
    "opera": "32",
    "opera-android": "32",
    "opera_mobile": "32",
    "quest": "3.0",
    "react-native": "0.69",
    "safari": "10.0",
    "samsung": "5.0"
  },
  "es.typed-array.map": {
    "android": "45",
    "bun": "0.1.1",
    "chrome": "45",
    "chrome-android": "45",
    "deno": "1.0",
    "edge": "13",
    "electron": "0.31",
    "firefox": "38",
    "firefox-android": "38",
    "hermes": "0.1",
    "ios": "10.0",
    "node": "4.0",
    "oculus": "3.0",
    "opera": "32",
    "opera-android": "32",
    "opera_mobile": "32",
    "quest": "3.0",
    "react-native": "0.69",
    "safari": "10.0",
    "samsung": "5.0"
  },
  "es.typed-array.of": {
    "android": "54",
    "bun": "0.1.1",
    "chrome": "54",
    "chrome-android": "54",
    "deno": "1.0",
    "edge": "15",
    "electron": "1.4",
    "firefox": "55",
    "firefox-android": "55",
    "ios": "14.0",
    "node": "7.0",
    "oculus": "3.0",
    "opera": "41",
    "opera-android": "41",
    "opera_mobile": "41",
    "quest": "3.0",
    "safari": "14.0",
    "samsung": "6.0"
  },
  "es.typed-array.reduce": {
    "android": "45",
    "bun": "0.1.1",
    "chrome": "45",
    "chrome-android": "45",
    "deno": "1.0",
    "edge": "13",
    "electron": "0.31",
    "firefox": "37",
    "firefox-android": "37",
    "hermes": "0.1",
    "ios": "10.0",
    "node": "4.0",
    "oculus": "3.0",
    "opera": "32",
    "opera-android": "32",
    "opera_mobile": "32",
    "quest": "3.0",
    "react-native": "0.69",
    "safari": "10.0",
    "samsung": "5.0"
  },
  "es.typed-array.reduce-right": {
    "android": "45",
    "bun": "0.1.1",
    "chrome": "45",
    "chrome-android": "45",
    "deno": "1.0",
    "edge": "13",
    "electron": "0.31",
    "firefox": "37",
    "firefox-android": "37",
    "hermes": "0.1",
    "ios": "10.0",
    "node": "4.0",
    "oculus": "3.0",
    "opera": "32",
    "opera-android": "32",
    "opera_mobile": "32",
    "quest": "3.0",
    "react-native": "0.69",
    "safari": "10.0",
    "samsung": "5.0"
  },
  "es.typed-array.reverse": {
    "android": "45",
    "bun": "0.1.1",
    "chrome": "45",
    "chrome-android": "45",
    "deno": "1.0",
    "edge": "13",
    "electron": "0.31",
    "firefox": "37",
    "firefox-android": "37",
    "hermes": "0.1",
    "ios": "10.0",
    "node": "4.0",
    "oculus": "3.0",
    "opera": "32",
    "opera-android": "32",
    "opera_mobile": "32",
    "quest": "3.0",
    "react-native": "0.69",
    "safari": "10.0",
    "samsung": "5.0"
  },
  "es.typed-array.set": {
    "android": "95",
    "bun": "0.1.1",
    "chrome": "95",
    "chrome-android": "95",
    "deno": "1.15",
    "edge": "95",
    "electron": "16.0",
    "firefox": "54",
    "firefox-android": "54",
    "hermes": "0.1",
    "ios": "14.5",
    "node": "17.0",
    "oculus": "18.0",
    "opera": "81",
    "opera-android": "67",
    "opera_mobile": "67",
    "quest": "18.0",
    "react-native": "0.69",
    "safari": "14.1",
    "samsung": "17.0"
  },
  "es.typed-array.slice": {
    "android": "45",
    "bun": "0.1.1",
    "chrome": "45",
    "chrome-android": "45",
    "deno": "1.0",
    "edge": "13",
    "electron": "0.31",
    "firefox": "38",
    "firefox-android": "38",
    "hermes": "0.1",
    "ios": "10.0",
    "node": "4.0",
    "oculus": "3.0",
    "opera": "32",
    "opera-android": "32",
    "opera_mobile": "32",
    "quest": "3.0",
    "react-native": "0.69",
    "safari": "10.0",
    "samsung": "5.0"
  },
  "es.typed-array.some": {
    "android": "45",
    "bun": "0.1.1",
    "chrome": "45",
    "chrome-android": "45",
    "deno": "1.0",
    "edge": "13",
    "electron": "0.31",
    "firefox": "37",
    "firefox-android": "37",
    "hermes": "0.1",
    "ios": "10.0",
    "node": "4.0",
    "oculus": "3.0",
    "opera": "32",
    "opera-android": "32",
    "opera_mobile": "32",
    "quest": "3.0",
    "react-native": "0.69",
    "safari": "10.0",
    "samsung": "5.0"
  },
  "es.typed-array.sort": {
    "android": "74",
    "bun": "0.1.1",
    "chrome": "74",
    "chrome-android": "74",
    "deno": "1.0",
    "edge": "79",
    "electron": "6.0",
    "firefox": "67",
    "firefox-android": "67",
    "hermes": "0.10",
    "ios": "14.5",
    "node": "12.0",
    "oculus": "6.0",
    "opera": "61",
    "opera-android": "53",
    "opera_mobile": "53",
    "quest": "6.0",
    "react-native": "0.69",
    "safari": "14.1",
    "samsung": "11.0"
  },
  "es.typed-array.subarray": {
    "android": "4.4",
    "bun": "0.1.1",
    "chrome": "26",
    "chrome-android": "26",
    "deno": "1.0",
    "edge": "13",
    "electron": "0.20",
    "firefox": "15",
    "firefox-android": "15",
    "hermes": "0.1",
    "ios": "8.0",
    "node": "0.11.0",
    "oculus": "3.0",
    "opera": "15",
    "opera-android": "15",
    "opera_mobile": "15",
    "quest": "3.0",
    "react-native": "0.69",
    "safari": "7.1",
    "samsung": "1.5"
  },
  "es.typed-array.to-locale-string": {
    "android": "45",
    "bun": "0.1.1",
    "chrome": "45",
    "chrome-android": "45",
    "deno": "1.0",
    "edge": "79",
    "electron": "0.31",
    "firefox": "51",
    "firefox-android": "51",
    "hermes": "0.1",
    "ios": "10.0",
    "node": "4.0",
    "oculus": "3.0",
    "opera": "32",
    "opera-android": "32",
    "opera_mobile": "32",
    "quest": "3.0",
    "react-native": "0.69",
    "safari": "10.0",
    "samsung": "5.0"
  },
  "es.typed-array.to-reversed": {
    "android": "110",
    "bun": "0.1.1",
    "chrome": "110",
    "chrome-android": "110",
    "deno": "1.27",
    "edge": "110",
    "electron": "23.0",
    "firefox": "115",
    "firefox-android": "115",
    "ios": "16.0",
    "node": "20.0",
    "oculus": "26.0",
    "opera": "96",
    "opera-android": "74",
    "opera_mobile": "74",
    "quest": "26.0",
    "rhino": "1.8.0",
    "safari": "16.0",
    "samsung": "21.0"
  },
  "es.typed-array.to-sorted": {
    "android": "110",
    "bun": "0.1.1",
    "chrome": "110",
    "chrome-android": "110",
    "deno": "1.27",
    "edge": "110",
    "electron": "23.0",
    "firefox": "115",
    "firefox-android": "115",
    "ios": "16.0",
    "node": "20.0",
    "oculus": "26.0",
    "opera": "96",
    "opera-android": "74",
    "opera_mobile": "74",
    "quest": "26.0",
    "rhino": "1.8.0",
    "safari": "16.0",
    "samsung": "21.0"
  },
  "es.typed-array.to-string": {
    "android": "51",
    "bun": "0.1.1",
    "chrome": "51",
    "chrome-android": "51",
    "deno": "1.0",
    "edge": "13",
    "electron": "1.2",
    "firefox": "51",
    "firefox-android": "51",
    "hermes": "0.1",
    "ios": "10.0",
    "node": "6.5",
    "oculus": "3.0",
    "opera": "38",
    "opera-android": "38",
    "opera_mobile": "38",
    "quest": "3.0",
    "react-native": "0.69",
    "safari": "10.0",
    "samsung": "5.0"
  },
  "es.typed-array.with": {
    "android": "110",
    "chrome": "110",
    "chrome-android": "110",
    "deno": "1.27",
    "edge": "110",
    "electron": "23.0",
    "firefox": "115",
    "firefox-android": "115",
    "node": "20.0",
    "oculus": "26.0",
    "opera": "96",
    "opera-android": "74",
    "opera_mobile": "74",
    "quest": "26.0",
    "rhino": "1.8.0",
    "samsung": "21.0"
  },
  "es.unescape": {
    "android": "3.0",
    "bun": "0.1.1",
    "chrome": "1",
    "chrome-android": "18",
    "deno": "1.0",
    "edge": "12",
    "electron": "0.20",
    "firefox": "1",
    "firefox-android": "4",
    "hermes": "0.1",
    "ie": "3",
    "ios": "1.0",
    "node": "0.0.3",
    "oculus": "3.0",
    "opera": "3",
    "opera-android": "3",
    "opera_mobile": "3",
    "phantom": "1.9",
    "quest": "3.0",
    "react-native": "0.69",
    "rhino": "1.7.13",
    "safari": "1",
    "samsung": "1.0"
  },
  "es.weak-map": {
    "android": "51",
    "bun": "0.1.1",
    "chrome": "51",
    "chrome-android": "51",
    "deno": "1.0",
    "edge": "79",
    "electron": "1.2",
    "firefox": "53",
    "firefox-android": "53",
    "hermes": "0.13",
    "ios": "10.0",
    "node": "6.5",
    "oculus": "3.0",
    "opera": "38",
    "opera-android": "38",
    "opera_mobile": "38",
    "quest": "3.0",
    "react-native": "0.73",
    "rhino": "1.7.13",
    "safari": "10.0",
    "samsung": "5.0"
  },
  "es.weak-set": {
    "android": "51",
    "bun": "0.1.1",
    "chrome": "51",
    "chrome-android": "51",
    "deno": "1.0",
    "edge": "15",
    "electron": "1.2",
    "firefox": "53",
    "firefox-android": "53",
    "hermes": "0.13",
    "ios": "10.0",
    "node": "6.5",
    "oculus": "3.0",
    "opera": "38",
    "opera-android": "38",
    "opera_mobile": "38",
    "quest": "3.0",
    "react-native": "0.73",
    "rhino": "1.7.13",
    "safari": "10.0",
    "samsung": "5.0"
  },
  "esnext.aggregate-error": {
    "android": "85",
    "bun": "0.1.1",
    "chrome": "85",
    "chrome-android": "85",
    "deno": "1.2",
    "edge": "85",
    "electron": "10.0",
    "firefox": "79",
    "firefox-android": "79",
    "hermes": "0.13",
    "ios": "14.0",
    "node": "15.0",
    "oculus": "12.0",
    "opera": "71",
    "opera-android": "60",
    "opera_mobile": "60",
    "quest": "12.0",
    "react-native": "0.72",
    "rhino": "1.8.0",
    "safari": "14.0",
    "samsung": "14.0"
  },
  "esnext.suppressed-error.constructor": {
    "android": "136",
    "bun": "1.2.15",
    "chrome": "136",
    "chrome-android": "136",
    "deno": "2.2.10",
    "edge": "136",
    "electron": "36.0",
    "node": "24.0",
    "opera": "121",
    "opera-android": "90",
    "opera_mobile": "90"
  },
  "esnext.array.from-async": {
    "android": "121",
    "bun": "1.1.2",
    "chrome": "121",
    "chrome-android": "121",
    "deno": "1.38",
    "edge": "121",
    "electron": "29.0",
    "firefox": "115",
    "firefox-android": "115",
    "ios": "18.0",
    "node": "22.0",
    "oculus": "32.0",
    "opera": "107",
    "opera-android": "81",
    "opera_mobile": "81",
    "quest": "32.0",
    "safari": "18.0",
    "samsung": "25.0"
  },
  "esnext.array.at": {
    "android": "92",
    "bun": "0.1.1",
    "chrome": "92",
    "chrome-android": "92",
    "deno": "1.12",
    "edge": "92",
    "electron": "14.0",
    "firefox": "90",
    "firefox-android": "90",
    "hermes": "0.13",
    "ios": "15.4",
    "node": "16.6",
    "oculus": "17.0",
    "opera": "78",
    "opera-android": "65",
    "opera_mobile": "65",
    "quest": "17.0",
    "react-native": "0.71",
    "rhino": "1.7.15",
    "safari": "15.4",
    "samsung": "16.0"
  },
  "esnext.array.filter-out": {},
  "esnext.array.filter-reject": {},
  "esnext.array.find-last": {
    "android": "97",
    "bun": "0.1.1",
    "chrome": "97",
    "chrome-android": "97",
    "deno": "1.16",
    "edge": "97",
    "electron": "17.0",
    "firefox": "104",
    "firefox-android": "104",
    "hermes": "0.11",
    "ios": "15.4",
    "node": "18.0",
    "oculus": "20.0",
    "opera": "83",
    "opera-android": "68",
    "opera_mobile": "68",
    "quest": "20.0",
    "react-native": "0.69",
    "rhino": "1.8.0",
    "safari": "15.4",
    "samsung": "18.0"
  },
  "esnext.array.find-last-index": {
    "android": "97",
    "bun": "0.1.1",
    "chrome": "97",
    "chrome-android": "97",
    "deno": "1.16",
    "edge": "97",
    "electron": "17.0",
    "firefox": "104",
    "firefox-android": "104",
    "hermes": "0.11",
    "ios": "15.4",
    "node": "18.0",
    "oculus": "20.0",
    "opera": "83",
    "opera-android": "68",
    "opera_mobile": "68",
    "quest": "20.0",
    "react-native": "0.69",
    "rhino": "1.8.0",
    "safari": "15.4",
    "samsung": "18.0"
  },
  "esnext.array.group": {},
  "esnext.array.group-by": {},
  "esnext.array.group-by-to-map": {},
  "esnext.array.group-to-map": {},
  "esnext.array.is-template-object": {},
  "esnext.array.last-index": {},
  "esnext.array.last-item": {},
  "esnext.array.to-reversed": {
    "android": "110",
    "bun": "0.1.1",
    "chrome": "110",
    "chrome-android": "110",
    "deno": "1.27",
    "edge": "110",
    "electron": "23.0",
    "firefox": "115",
    "firefox-android": "115",
    "hermes": "0.13",
    "ios": "16.0",
    "node": "20.0",
    "oculus": "26.0",
    "opera": "96",
    "opera-android": "74",
    "opera_mobile": "74",
    "quest": "26.0",
    "react-native": "0.74",
    "rhino": "1.8.0",
    "safari": "16.0",
    "samsung": "21.0"
  },
  "esnext.array.to-sorted": {
    "android": "110",
    "bun": "0.1.1",
    "chrome": "110",
    "chrome-android": "110",
    "deno": "1.27",
    "edge": "110",
    "electron": "23.0",
    "firefox": "115",
    "firefox-android": "115",
    "ios": "16.0",
    "node": "20.0",
    "oculus": "26.0",
    "opera": "96",
    "opera-android": "74",
    "opera_mobile": "74",
    "quest": "26.0",
    "rhino": "1.8.0",
    "safari": "16.0",
    "samsung": "21.0"
  },
  "esnext.array.to-spliced": {
    "android": "110",
    "bun": "0.1.1",
    "chrome": "110",
    "chrome-android": "110",
    "deno": "1.27",
    "edge": "110",
    "electron": "23.0",
    "firefox": "115",
    "firefox-android": "115",
    "hermes": "0.13",
    "ios": "16.0",
    "node": "20.0",
    "oculus": "26.0",
    "opera": "96",
    "opera-android": "74",
    "opera_mobile": "74",
    "quest": "26.0",
    "react-native": "0.74",
    "rhino": "1.8.0",
    "safari": "16.0",
    "samsung": "21.0"
  },
  "esnext.array.unique-by": {},
  "esnext.array.with": {
    "android": "110",
    "bun": "0.1.1",
    "chrome": "110",
    "chrome-android": "110",
    "deno": "1.27",
    "edge": "110",
    "electron": "23.0",
    "firefox": "140",
    "firefox-android": "140",
    "hermes": "0.13",
    "ios": "16.0",
    "node": "20.0",
    "oculus": "26.0",
    "opera": "96",
    "opera-android": "74",
    "opera_mobile": "74",
    "quest": "26.0",
    "react-native": "0.74",
    "rhino": "1.8.0",
    "safari": "16.0",
    "samsung": "21.0"
  },
  "esnext.array-buffer.detached": {
    "android": "114",
    "bun": "1.0.19",
    "chrome": "114",
    "chrome-android": "114",
    "deno": "1.33",
    "edge": "114",
    "electron": "25.0",
    "firefox": "122",
    "firefox-android": "122",
    "ios": "17.4",
    "node": "21.0",
    "oculus": "28.0",
    "opera": "100",
    "opera-android": "76",
    "opera_mobile": "76",
    "quest": "28.0",
    "safari": "17.4",
    "samsung": "23.0"
  },
  "esnext.array-buffer.transfer": {
    "android": "114",
    "bun": "1.0.19",
    "chrome": "114",
    "chrome-android": "114",
    "deno": "1.33",
    "edge": "114",
    "electron": "25.0",
    "firefox": "122",
    "firefox-android": "122",
    "ios": "17.4",
    "node": "21.0",
    "oculus": "28.0",
    "opera": "100",
    "opera-android": "76",
    "opera_mobile": "76",
    "quest": "28.0",
    "safari": "17.4",
    "samsung": "23.0"
  },
  "esnext.array-buffer.transfer-to-fixed-length": {
    "android": "114",
    "bun": "1.0.19",
    "chrome": "114",
    "chrome-android": "114",
    "deno": "1.33",
    "edge": "114",
    "electron": "25.0",
    "firefox": "122",
    "firefox-android": "122",
    "ios": "17.4",
    "node": "21.0",
    "oculus": "28.0",
    "opera": "100",
    "opera-android": "76",
    "opera_mobile": "76",
    "quest": "28.0",
    "safari": "17.4",
    "samsung": "23.0"
  },
  "esnext.async-disposable-stack.constructor": {
    "android": "136",
    "chrome": "136",
    "chrome-android": "136",
    "deno": "2.3.2",
    "edge": "136",
    "electron": "36.0",
    "firefox": "141",
    "firefox-android": "141",
    "node": "24.0",
    "opera": "121",
    "opera-android": "90",
    "opera_mobile": "90"
  },
  "esnext.async-iterator.constructor": {},
  "esnext.async-iterator.as-indexed-pairs": {},
  "esnext.async-iterator.async-dispose": {},
  "esnext.async-iterator.drop": {},
  "esnext.async-iterator.every": {},
  "esnext.async-iterator.filter": {},
  "esnext.async-iterator.find": {},
  "esnext.async-iterator.flat-map": {},
  "esnext.async-iterator.for-each": {},
  "esnext.async-iterator.from": {},
  "esnext.async-iterator.indexed": {},
  "esnext.async-iterator.map": {},
  "esnext.async-iterator.reduce": {},
  "esnext.async-iterator.some": {},
  "esnext.async-iterator.take": {},
  "esnext.async-iterator.to-array": {},
  "esnext.bigint.range": {},
  "esnext.composite-key": {},
  "esnext.composite-symbol": {},
  "esnext.data-view.get-float16": {
    "android": "135",
    "bun": "1.1.23",
    "chrome": "135",
    "chrome-android": "135",
    "deno": "1.43",
    "edge": "135",
    "electron": "36.0",
    "firefox": "129",
    "firefox-android": "129",
    "ios": "18.2",
    "node": "24.0",
    "opera": "120",
    "opera-android": "89",
    "opera_mobile": "89",
    "safari": "18.2"
  },
  "esnext.data-view.get-uint8-clamped": {},
  "esnext.data-view.set-float16": {
    "android": "135",
    "bun": "1.1.23",
    "chrome": "135",
    "chrome-android": "135",
    "deno": "1.43",
    "edge": "135",
    "electron": "36.0",
    "firefox": "129",
    "firefox-android": "129",
    "ios": "18.2",
    "node": "24.0",
    "opera": "120",
    "opera-android": "89",
    "opera_mobile": "89",
    "safari": "18.2"
  },
  "esnext.data-view.set-uint8-clamped": {},
  "esnext.disposable-stack.constructor": {
    "android": "136",
    "chrome": "136",
    "chrome-android": "136",
    "deno": "2.2.10",
    "edge": "136",
    "electron": "36.0",
    "firefox": "141",
    "firefox-android": "141",
    "node": "24.0",
    "opera": "121",
    "opera-android": "90",
    "opera_mobile": "90"
  },
  "esnext.error.is-error": {
    "android": "134",
    "chrome": "134",
    "chrome-android": "134",
    "deno": "2.2",
    "edge": "134",
    "electron": "35.0",
    "firefox": "138",
    "firefox-android": "138",
    "node": "24.0",
    "opera": "119",
    "opera-android": "88",
    "opera_mobile": "88"
  },
  "esnext.function.demethodize": {},
  "esnext.function.is-callable": {},
  "esnext.function.is-constructor": {},
  "esnext.function.metadata": {},
  "esnext.function.un-this": {},
  "esnext.global-this": {
    "android": "71",
    "bun": "0.1.1",
    "chrome": "71",
    "chrome-android": "71",
    "deno": "1.0",
    "edge": "79",
    "electron": "5.0",
    "firefox": "65",
    "firefox-android": "65",
    "hermes": "0.2",
    "ios": "12.2",
    "node": "12.0",
    "oculus": "6.0",
    "opera": "58",
    "opera-android": "50",
    "opera_mobile": "50",
    "quest": "6.0",
    "react-native": "0.69",
    "rhino": "1.7.14",
    "safari": "12.1",
    "samsung": "10.0"
  },
  "esnext.iterator.constructor": {
    "android": "122",
    "bun": "1.1.31",
    "chrome": "122",
    "chrome-android": "122",
    "deno": "1.38.1",
    "edge": "122",
    "electron": "29.0",
    "firefox": "131",
    "firefox-android": "131",
    "ios": "18.4",
    "node": "22.0",
    "oculus": "32.0",
    "opera": "108",
    "opera-android": "81",
    "opera_mobile": "81",
    "quest": "32.0",
    "safari": "18.4",
    "samsung": "26.0"
  },
  "esnext.iterator.as-indexed-pairs": {},
  "esnext.iterator.chunks": {},
  "esnext.iterator.concat": {},
  "esnext.iterator.dispose": {
    "android": "136",
    "chrome": "136",
    "chrome-android": "136",
    "deno": "2.2.10",
    "edge": "136",
    "electron": "36.0",
    "firefox": "135",
    "firefox-android": "135",
    "node": "24.0",
    "opera": "121",
    "opera-android": "90",
    "opera_mobile": "90"
  },
  "esnext.iterator.drop": {
    "android": "135",
    "bun": "1.2.11",
    "chrome": "135",
    "chrome-android": "135",
    "deno": "2.2.5",
    "edge": "135",
    "electron": "36.0",
    "firefox": "141",
    "firefox-android": "141",
    "node": "24.0",
    "opera": "120",
    "opera-android": "89",
    "opera_mobile": "89"
  },
  "esnext.iterator.every": {
    "android": "135",
    "bun": "1.2.4",
    "chrome": "135",
    "chrome-android": "135",
    "deno": "2.2.5",
    "edge": "135",
    "electron": "36.0",
    "firefox": "141",
    "firefox-android": "141",
    "node": "24.0",
    "opera": "120",
    "opera-android": "89",
    "opera_mobile": "89"
  },
  "esnext.iterator.filter": {
    "android": "135",
    "bun": "1.2.4",
    "chrome": "135",
    "chrome-android": "135",
    "deno": "2.2.5",
    "edge": "135",
    "electron": "36.0",
    "firefox": "141",
    "firefox-android": "141",
    "node": "24.0",
    "opera": "120",
    "opera-android": "89",
    "opera_mobile": "89"
  },
  "esnext.iterator.find": {
    "android": "135",
    "bun": "1.2.4",
    "chrome": "135",
    "chrome-android": "135",
    "deno": "2.2.5",
    "edge": "135",
    "electron": "36.0",
    "firefox": "141",
    "firefox-android": "141",
    "node": "24.0",
    "opera": "120",
    "opera-android": "89",
    "opera_mobile": "89"
  },
  "esnext.iterator.flat-map": {
    "android": "135",
    "bun": "1.2.4",
    "chrome": "135",
    "chrome-android": "135",
    "deno": "2.2.5",
    "edge": "135",
    "electron": "36.0",
    "firefox": "141",
    "firefox-android": "141",
    "node": "24.0",
    "opera": "120",
    "opera-android": "89",
    "opera_mobile": "89"
  },
  "esnext.iterator.for-each": {
    "android": "135",
    "bun": "1.2.4",
    "chrome": "135",
    "chrome-android": "135",
    "deno": "2.2.5",
    "edge": "135",
    "electron": "36.0",
    "firefox": "141",
    "firefox-android": "141",
    "node": "24.0",
    "opera": "120",
    "opera-android": "89",
    "opera_mobile": "89"
  },
  "esnext.iterator.from": {
    "android": "122",
    "bun": "1.2.5",
    "chrome": "122",
    "chrome-android": "122",
    "deno": "1.38.1",
    "edge": "122",
    "electron": "29.0",
    "firefox": "131",
    "firefox-android": "131",
    "node": "22.0",
    "oculus": "32.0",
    "opera": "108",
    "opera-android": "81",
    "opera_mobile": "81",
    "quest": "32.0",
    "samsung": "26.0"
  },
  "esnext.iterator.indexed": {},
  "esnext.iterator.map": {
    "android": "135",
    "bun": "1.2.4",
    "chrome": "135",
    "chrome-android": "135",
    "deno": "2.2.5",
    "edge": "135",
    "electron": "36.0",
    "firefox": "141",
    "firefox-android": "141",
    "node": "24.0",
    "opera": "120",
    "opera-android": "89",
    "opera_mobile": "89"
  },
  "esnext.iterator.range": {},
  "esnext.iterator.reduce": {
    "android": "135",
    "bun": "1.2.11",
    "chrome": "135",
    "chrome-android": "135",
    "deno": "2.2.5",
    "edge": "135",
    "electron": "36.0",
    "firefox": "141",
    "firefox-android": "141",
    "node": "24.0",
    "opera": "120",
    "opera-android": "89",
    "opera_mobile": "89"
  },
  "esnext.iterator.some": {
    "android": "135",
    "bun": "1.2.4",
    "chrome": "135",
    "chrome-android": "135",
    "deno": "2.2.5",
    "edge": "135",
    "electron": "36.0",
    "firefox": "141",
    "firefox-android": "141",
    "node": "24.0",
    "opera": "120",
    "opera-android": "89",
    "opera_mobile": "89"
  },
  "esnext.iterator.take": {
    "android": "135",
    "bun": "1.2.11",
    "chrome": "135",
    "chrome-android": "135",
    "deno": "2.2.5",
    "edge": "135",
    "electron": "36.0",
    "firefox": "141",
    "firefox-android": "141",
    "node": "24.0",
    "opera": "120",
    "opera-android": "89",
    "opera_mobile": "89"
  },
  "esnext.iterator.to-array": {
    "android": "122",
    "bun": "1.1.31",
    "chrome": "122",
    "chrome-android": "122",
    "deno": "1.38.1",
    "edge": "122",
    "electron": "29.0",
    "firefox": "131",
    "firefox-android": "131",
    "ios": "18.4",
    "node": "22.0",
    "oculus": "32.0",
    "opera": "108",
    "opera-android": "81",
    "opera_mobile": "81",
    "quest": "32.0",
    "safari": "18.4",
    "samsung": "26.0"
  },
  "esnext.iterator.to-async": {},
  "esnext.iterator.windows": {},
  "esnext.iterator.zip": {},
  "esnext.iterator.zip-keyed": {},
  "esnext.json.is-raw-json": {
    "android": "114",
    "bun": "1.1.43",
    "chrome": "114",
    "chrome-android": "114",
    "deno": "1.33",
    "edge": "114",
    "electron": "25.0",
    "firefox": "135",
    "firefox-android": "135",
    "ios": "18.4",
    "node": "21.0",
    "oculus": "28.0",
    "opera": "100",
    "opera-android": "76",
    "opera_mobile": "76",
    "quest": "28.0",
    "safari": "18.4",
    "samsung": "23.0"
  },
  "esnext.json.parse": {
    "android": "114",
    "bun": "1.1.43",
    "chrome": "114",
    "chrome-android": "114",
    "deno": "1.33",
    "edge": "114",
    "electron": "25.0",
    "firefox": "135",
    "firefox-android": "135",
    "ios": "18.4",
    "node": "21.0",
    "oculus": "28.0",
    "opera": "100",
    "opera-android": "76",
    "opera_mobile": "76",
    "quest": "28.0",
    "safari": "18.4",
    "samsung": "23.0"
  },
  "esnext.json.raw-json": {
    "android": "114",
    "bun": "1.1.43",
    "chrome": "114",
    "chrome-android": "114",
    "deno": "1.33",
    "edge": "114",
    "electron": "25.0",
    "firefox": "135",
    "firefox-android": "135",
    "ios": "18.4",
    "node": "21.0",
    "oculus": "28.0",
    "opera": "100",
    "opera-android": "76",
    "opera_mobile": "76",
    "quest": "28.0",
    "safari": "18.4",
    "samsung": "23.0"
  },
  "esnext.map.delete-all": {},
  "esnext.map.emplace": {},
  "esnext.map.every": {},
  "esnext.map.filter": {},
  "esnext.map.find": {},
  "esnext.map.find-key": {},
  "esnext.map.from": {},
  "esnext.map.get-or-insert": {},
  "esnext.map.get-or-insert-computed": {},
  "esnext.map.group-by": {
    "android": "117",
    "bun": "1.1.2",
    "chrome": "117",
    "chrome-android": "117",
    "deno": "1.37",
    "edge": "117",
    "electron": "27.0",
    "firefox": "119",
    "firefox-android": "119",
    "ios": "18.0",
    "node": "21.0",
    "oculus": "30.0",
    "opera": "103",
    "opera-android": "78",
    "opera_mobile": "78",
    "quest": "30.0",
    "rhino": "1.8.0",
    "safari": "18.0",
    "samsung": "24.0"
  },
  "esnext.map.includes": {},
  "esnext.map.key-by": {},
  "esnext.map.key-of": {},
  "esnext.map.map-keys": {},
  "esnext.map.map-values": {},
  "esnext.map.merge": {},
  "esnext.map.of": {},
  "esnext.map.reduce": {},
  "esnext.map.some": {},
  "esnext.map.update": {},
  "esnext.map.update-or-insert": {},
  "esnext.map.upsert": {},
  "esnext.math.clamp": {},
  "esnext.math.deg-per-rad": {},
  "esnext.math.degrees": {},
  "esnext.math.fscale": {},
  "esnext.math.f16round": {
    "android": "135",
    "bun": "1.1.23",
    "chrome": "135",
    "chrome-android": "135",
    "deno": "1.43",
    "edge": "135",
    "electron": "36.0",
    "firefox": "129",
    "firefox-android": "129",
    "ios": "18.2",
    "node": "24.0",
    "opera": "120",
    "opera-android": "89",
    "opera_mobile": "89",
    "safari": "18.2"
  },
  "esnext.math.iaddh": {},
  "esnext.math.imulh": {},
  "esnext.math.isubh": {},
  "esnext.math.rad-per-deg": {},
  "esnext.math.radians": {},
  "esnext.math.scale": {},
  "esnext.math.seeded-prng": {},
  "esnext.math.signbit": {},
  "esnext.math.sum-precise": {
    "firefox": "137",
    "firefox-android": "137"
  },
  "esnext.math.umulh": {},
  "esnext.number.clamp": {},
  "esnext.number.from-string": {},
  "esnext.number.range": {},
  "esnext.object.has-own": {
    "android": "93",
    "bun": "0.1.1",
    "chrome": "93",
    "chrome-android": "93",
    "deno": "1.13",
    "edge": "93",
    "electron": "14.0",
    "firefox": "92",
    "firefox-android": "92",
    "hermes": "0.10",
    "ios": "15.4",
    "node": "16.9",
    "oculus": "17.0",
    "opera": "79",
    "opera-android": "66",
    "opera_mobile": "66",
    "quest": "17.0",
    "react-native": "0.69",
    "rhino": "1.7.15",
    "safari": "15.4",
    "samsung": "17.0"
  },
  "esnext.object.iterate-entries": {},
  "esnext.object.iterate-keys": {},
  "esnext.object.iterate-values": {},
  "esnext.object.group-by": {
    "android": "117",
    "bun": "1.1.2",
    "chrome": "117",
    "chrome-android": "117",
    "deno": "1.37",
    "edge": "117",
    "electron": "27.0",
    "firefox": "119",
    "firefox-android": "119",
    "ios": "18.0",
    "node": "21.0",
    "oculus": "30.0",
    "opera": "103",
    "opera-android": "78",
    "opera_mobile": "78",
    "quest": "30.0",
    "rhino": "1.8.0",
    "safari": "18.0",
    "samsung": "24.0"
  },
  "esnext.observable": {},
  "esnext.promise.all-settled": {
    "android": "76",
    "bun": "0.1.1",
    "chrome": "76",
    "chrome-android": "76",
    "deno": "1.24",
    "edge": "79",
    "electron": "6.0",
    "firefox": "71",
    "firefox-android": "71",
    "ios": "13.0",
    "node": "12.9",
    "oculus": "7.0",
    "opera": "63",
    "opera-android": "54",
    "opera_mobile": "54",
    "quest": "7.0",
    "rhino": "1.7.15",
    "safari": "13",
    "samsung": "12.0"
  },
  "esnext.promise.any": {
    "android": "85",
    "bun": "0.1.1",
    "chrome": "85",
    "chrome-android": "85",
    "deno": "1.24",
    "edge": "85",
    "electron": "10.0",
    "firefox": "79",
    "firefox-android": "79",
    "ios": "14.0",
    "node": "15.0",
    "oculus": "12.0",
    "opera": "71",
    "opera-android": "60",
    "opera_mobile": "60",
    "quest": "12.0",
    "rhino": "1.8.0",
    "safari": "14.0",
    "samsung": "14.0"
  },
  "esnext.promise.try": {
    "android": "128",
    "bun": "1.1.22",
    "chrome": "128",
    "chrome-android": "128",
    "deno": "1.46",
    "edge": "128",
    "electron": "32.0",
    "firefox": "134",
    "firefox-android": "134",
    "ios": "18.2",
    "node": "23.0",
    "oculus": "35.0",
    "opera": "114",
    "opera-android": "85",
    "opera_mobile": "85",
    "quest": "35.0",
    "safari": "18.2",
    "samsung": "28.0"
  },
  "esnext.promise.with-resolvers": {
    "android": "119",
    "bun": "0.7.1",
    "chrome": "119",
    "chrome-android": "119",
    "deno": "1.38",
    "edge": "119",
    "electron": "28.0",
    "firefox": "121",
    "firefox-android": "121",
    "ios": "17.4",
    "node": "22.0",
    "oculus": "31.0",
    "opera": "105",
    "opera-android": "79",
    "opera_mobile": "79",
    "quest": "31.0",
    "safari": "17.4",
    "samsung": "25.0"
  },
  "esnext.reflect.define-metadata": {},
  "esnext.reflect.delete-metadata": {},
  "esnext.reflect.get-metadata": {},
  "esnext.reflect.get-metadata-keys": {},
  "esnext.reflect.get-own-metadata": {},
  "esnext.reflect.get-own-metadata-keys": {},
  "esnext.reflect.has-metadata": {},
  "esnext.reflect.has-own-metadata": {},
  "esnext.reflect.metadata": {},
  "esnext.regexp.escape": {
    "android": "136",
    "bun": "1.1.22",
    "chrome": "136",
    "chrome-android": "136",
    "deno": "2.3.2",
    "edge": "136",
    "electron": "36.0",
    "firefox": "134",
    "firefox-android": "134",
    "ios": "18.2",
    "node": "24.0",
    "opera": "121",
    "opera-android": "90",
    "opera_mobile": "90",
    "safari": "18.2"
  },
  "esnext.set.add-all": {},
  "esnext.set.delete-all": {},
  "esnext.set.difference.v2": {
    "android": "128",
    "bun": "1.2.5",
    "chrome": "128",
    "chrome-android": "128",
    "deno": "1.46",
    "edge": "128",
    "electron": "32.0",
    "firefox": "127",
    "firefox-android": "127",
    "node": "22.10",
    "oculus": "35.0",
    "opera": "114",
    "opera-android": "85",
    "opera_mobile": "85",
    "quest": "35.0",
    "samsung": "28.0"
  },
  "esnext.set.difference": {},
  "esnext.set.every": {},
  "esnext.set.filter": {},
  "esnext.set.find": {},
  "esnext.set.from": {},
  "esnext.set.intersection.v2": {
    "android": "128",
    "bun": "1.1.1",
    "chrome": "128",
    "chrome-android": "128",
    "deno": "1.46",
    "edge": "128",
    "electron": "32.0",
    "firefox": "127",
    "firefox-android": "127",
    "ios": "18.0",
    "node": "22.10",
    "oculus": "35.0",
    "opera": "114",
    "opera-android": "85",
    "opera_mobile": "85",
    "quest": "35.0",
    "safari": "18.0",
    "samsung": "28.0"
  },
  "esnext.set.intersection": {},
  "esnext.set.is-disjoint-from.v2": {
    "android": "128",
    "bun": "1.1.1",
    "chrome": "128",
    "chrome-android": "128",
    "deno": "1.46",
    "edge": "128",
    "electron": "32.0",
    "firefox": "127",
    "firefox-android": "127",
    "ios": "18.0",
    "node": "22.10",
    "oculus": "35.0",
    "opera": "114",
    "opera-android": "85",
    "opera_mobile": "85",
    "quest": "35.0",
    "safari": "18.0",
    "samsung": "28.0"
  },
  "esnext.set.is-disjoint-from": {},
  "esnext.set.is-subset-of.v2": {
    "android": "128",
    "bun": "1.1.1",
    "chrome": "128",
    "chrome-android": "128",
    "deno": "1.46",
    "edge": "128",
    "electron": "32.0",
    "firefox": "127",
    "firefox-android": "127",
    "ios": "18.0",
    "node": "22.10",
    "oculus": "35.0",
    "opera": "114",
    "opera-android": "85",
    "opera_mobile": "85",
    "quest": "35.0",
    "safari": "18.0",
    "samsung": "28.0"
  },
  "esnext.set.is-subset-of": {},
  "esnext.set.is-superset-of.v2": {
    "android": "128",
    "bun": "1.1.1",
    "chrome": "128",
    "chrome-android": "128",
    "deno": "1.46",
    "edge": "128",
    "electron": "32.0",
    "firefox": "127",
    "firefox-android": "127",
    "ios": "18.0",
    "node": "22.10",
    "oculus": "35.0",
    "opera": "114",
    "opera-android": "85",
    "opera_mobile": "85",
    "quest": "35.0",
    "safari": "18.0",
    "samsung": "28.0"
  },
  "esnext.set.is-superset-of": {},
  "esnext.set.join": {},
  "esnext.set.map": {},
  "esnext.set.of": {},
  "esnext.set.reduce": {},
  "esnext.set.some": {},
  "esnext.set.symmetric-difference.v2": {
    "android": "123",
    "bun": "1.2.5",
    "chrome": "123",
    "chrome-android": "123",
    "deno": "1.41.3",
    "edge": "123",
    "electron": "30.0",
    "firefox": "127",
    "firefox-android": "127",
    "node": "22.0",
    "oculus": "33.0",
    "opera": "109",
    "opera-android": "82",
    "opera_mobile": "82",
    "quest": "33.0",
    "samsung": "27.0"
  },
  "esnext.set.symmetric-difference": {},
  "esnext.set.union.v2": {
    "android": "123",
    "bun": "1.2.5",
    "chrome": "123",
    "chrome-android": "123",
    "deno": "1.41.3",
    "edge": "123",
    "electron": "30.0",
    "firefox": "127",
    "firefox-android": "127",
    "node": "22.0",
    "oculus": "33.0",
    "opera": "109",
    "opera-android": "82",
    "opera_mobile": "82",
    "quest": "33.0",
    "samsung": "27.0"
  },
  "esnext.set.union": {},
  "esnext.string.at": {},
  "esnext.string.cooked": {},
  "esnext.string.code-points": {},
  "esnext.string.dedent": {},
  "esnext.string.is-well-formed": {
    "android": "111",
    "bun": "0.4.0",
    "chrome": "111",
    "chrome-android": "111",
    "deno": "1.32",
    "edge": "111",
    "electron": "24.0",
    "firefox": "119",
    "firefox-android": "119",
    "ios": "16.4",
    "node": "20.0",
    "oculus": "27.0",
    "opera": "97",
    "opera-android": "75",
    "opera_mobile": "75",
    "quest": "27.0",
    "rhino": "1.8.0",
    "safari": "16.4",
    "samsung": "22.0"
  },
  "esnext.string.match-all": {
    "android": "80",
    "bun": "0.1.1",
    "chrome": "80",
    "chrome-android": "80",
    "deno": "1.0",
    "edge": "80",
    "electron": "8.0",
    "firefox": "73",
    "firefox-android": "73",
    "hermes": "0.6",
    "ios": "13.4",
    "node": "14.0",
    "oculus": "9.0",
    "opera": "67",
    "opera-android": "57",
    "opera_mobile": "57",
    "quest": "9.0",
    "react-native": "0.69",
    "rhino": "1.8.0",
    "safari": "13.1",
    "samsung": "13.0"
  },
  "esnext.string.replace-all": {
    "android": "85",
    "bun": "0.1.1",
    "chrome": "85",
    "chrome-android": "85",
    "deno": "1.2",
    "edge": "85",
    "electron": "10.0",
    "firefox": "77",
    "firefox-android": "77",
    "hermes": "0.7",
    "ios": "13.4",
    "node": "15.0",
    "oculus": "12.0",
    "opera": "71",
    "opera-android": "60",
    "opera_mobile": "60",
    "quest": "12.0",
    "react-native": "0.69",
    "rhino": "1.7.15",
    "safari": "13.1",
    "samsung": "14.0"
  },
  "esnext.string.to-well-formed": {
    "android": "111",
    "bun": "0.5.7",
    "chrome": "111",
    "chrome-android": "111",
    "deno": "1.32",
    "edge": "111",
    "electron": "24.0",
    "firefox": "119",
    "firefox-android": "119",
    "ios": "16.4",
    "node": "20.0",
    "oculus": "27.0",
    "opera": "97",
    "opera-android": "75",
    "opera_mobile": "75",
    "quest": "27.0",
    "rhino": "1.8.0",
    "safari": "16.4",
    "samsung": "22.0"
  },
  "esnext.symbol.async-dispose": {
    "android": "127",
    "bun": "1.0.23",
    "chrome": "127",
    "chrome-android": "127",
    "deno": "1.38",
    "edge": "127",
    "electron": "32.0",
    "firefox": "135",
    "firefox-android": "135",
    "node": "20.5.0",
    "oculus": "35.0",
    "opera": "113",
    "opera-android": "84",
    "opera_mobile": "84",
    "quest": "35.0",
    "samsung": "28.0"
  },
  "esnext.symbol.custom-matcher": {},
  "esnext.symbol.dispose": {
    "android": "125",
    "bun": "1.0.23",
    "chrome": "125",
    "chrome-android": "125",
    "deno": "1.38",
    "edge": "125",
    "electron": "31.0",
    "firefox": "135",
    "firefox-android": "135",
    "node": "20.5.0",
    "oculus": "34.0",
    "opera": "111",
    "opera-android": "83",
    "opera_mobile": "83",
    "quest": "34.0",
    "samsung": "27.0"
  },
  "esnext.symbol.is-registered-symbol": {},
  "esnext.symbol.is-registered": {},
  "esnext.symbol.is-well-known-symbol": {},
  "esnext.symbol.is-well-known": {},
  "esnext.symbol.matcher": {},
  "esnext.symbol.metadata": {
    "deno": "1.40.4"
  },
  "esnext.symbol.metadata-key": {},
  "esnext.symbol.observable": {},
  "esnext.symbol.pattern-match": {},
  "esnext.symbol.replace-all": {},
  "esnext.typed-array.from-async": {},
  "esnext.typed-array.at": {
    "android": "92",
    "bun": "0.1.1",
    "chrome": "92",
    "chrome-android": "92",
    "deno": "1.12",
    "edge": "92",
    "electron": "14.0",
    "firefox": "90",
    "firefox-android": "90",
    "hermes": "0.13",
    "ios": "15.4",
    "node": "16.6",
    "oculus": "17.0",
    "opera": "78",
    "opera-android": "65",
    "opera_mobile": "65",
    "quest": "17.0",
    "react-native": "0.71",
    "rhino": "1.7.15",
    "safari": "15.4",
    "samsung": "16.0"
  },
  "esnext.typed-array.filter-out": {},
  "esnext.typed-array.filter-reject": {},
  "esnext.typed-array.find-last": {
    "android": "97",
    "bun": "0.1.1",
    "chrome": "97",
    "chrome-android": "97",
    "deno": "1.16",
    "edge": "97",
    "electron": "17.0",
    "firefox": "104",
    "firefox-android": "104",
    "hermes": "0.11",
    "ios": "15.4",
    "node": "18.0",
    "oculus": "20.0",
    "opera": "83",
    "opera-android": "68",
    "opera_mobile": "68",
    "quest": "20.0",
    "react-native": "0.69",
    "rhino": "1.8.0",
    "safari": "15.4",
    "samsung": "18.0"
  },
  "esnext.typed-array.find-last-index": {
    "android": "97",
    "bun": "0.1.1",
    "chrome": "97",
    "chrome-android": "97",
    "deno": "1.16",
    "edge": "97",
    "electron": "17.0",
    "firefox": "104",
    "firefox-android": "104",
    "hermes": "0.11",
    "ios": "15.4",
    "node": "18.0",
    "oculus": "20.0",
    "opera": "83",
    "opera-android": "68",
    "opera_mobile": "68",
    "quest": "20.0",
    "react-native": "0.69",
    "rhino": "1.8.0",
    "safari": "15.4",
    "samsung": "18.0"
  },
  "esnext.typed-array.group-by": {},
  "esnext.typed-array.to-reversed": {
    "android": "110",
    "bun": "0.1.1",
    "chrome": "110",
    "chrome-android": "110",
    "deno": "1.27",
    "edge": "110",
    "electron": "23.0",
    "firefox": "115",
    "firefox-android": "115",
    "ios": "16.0",
    "node": "20.0",
    "oculus": "26.0",
    "opera": "96",
    "opera-android": "74",
    "opera_mobile": "74",
    "quest": "26.0",
    "rhino": "1.8.0",
    "safari": "16.0",
    "samsung": "21.0"
  },
  "esnext.typed-array.to-sorted": {
    "android": "110",
    "bun": "0.1.1",
    "chrome": "110",
    "chrome-android": "110",
    "deno": "1.27",
    "edge": "110",
    "electron": "23.0",
    "firefox": "115",
    "firefox-android": "115",
    "ios": "16.0",
    "node": "20.0",
    "oculus": "26.0",
    "opera": "96",
    "opera-android": "74",
    "opera_mobile": "74",
    "quest": "26.0",
    "rhino": "1.8.0",
    "safari": "16.0",
    "samsung": "21.0"
  },
  "esnext.typed-array.to-spliced": {},
  "esnext.typed-array.unique-by": {},
  "esnext.typed-array.with": {
    "android": "110",
    "chrome": "110",
    "chrome-android": "110",
    "deno": "1.27",
    "edge": "110",
    "electron": "23.0",
    "firefox": "115",
    "firefox-android": "115",
    "node": "20.0",
    "oculus": "26.0",
    "opera": "96",
    "opera-android": "74",
    "opera_mobile": "74",
    "quest": "26.0",
    "rhino": "1.8.0",
    "samsung": "21.0"
  },
  "esnext.uint8-array.from-base64": {
    "bun": "1.1.22",
    "firefox": "133",
    "firefox-android": "133",
    "ios": "18.2",
    "safari": "18.2"
  },
  "esnext.uint8-array.from-hex": {
    "bun": "1.1.22",
    "firefox": "133",
    "firefox-android": "133",
    "ios": "18.2",
    "safari": "18.2"
  },
  "esnext.uint8-array.set-from-base64": {
    "bun": "1.1.22",
    "firefox": "133",
    "firefox-android": "133",
    "ios": "18.2",
    "safari": "18.2"
  },
  "esnext.uint8-array.set-from-hex": {
    "bun": "1.1.22",
    "firefox": "133",
    "firefox-android": "133",
    "ios": "18.2",
    "safari": "18.2"
  },
  "esnext.uint8-array.to-base64": {
    "bun": "1.1.22",
    "firefox": "133",
    "firefox-android": "133",
    "ios": "18.2",
    "safari": "18.2"
  },
  "esnext.uint8-array.to-hex": {
    "bun": "1.1.22",
    "firefox": "133",
    "firefox-android": "133",
    "ios": "18.2",
    "safari": "18.2"
  },
  "esnext.weak-map.delete-all": {},
  "esnext.weak-map.from": {},
  "esnext.weak-map.of": {},
  "esnext.weak-map.emplace": {},
  "esnext.weak-map.get-or-insert": {},
  "esnext.weak-map.get-or-insert-computed": {},
  "esnext.weak-map.upsert": {},
  "esnext.weak-set.add-all": {},
  "esnext.weak-set.delete-all": {},
  "esnext.weak-set.from": {},
  "esnext.weak-set.of": {},
  "web.atob": {
    "android": "37",
    "bun": "0.1.1",
    "chrome": "34",
    "chrome-android": "34",
    "deno": "1.0",
    "edge": "16",
    "electron": "0.20",
    "firefox": "27",
    "firefox-android": "27",
    "hermes": "0.13",
    "ios": "10.3",
    "node": "18.0",
    "oculus": "3.0",
    "opera": "10.5",
    "opera-android": "10.5",
    "opera_mobile": "10.5",
    "quest": "3.0",
    "react-native": "0.74",
    "safari": "10.1",
    "samsung": "2.0"
  },
  "web.btoa": {
    "android": "3.0",
    "bun": "0.1.1",
    "chrome": "4",
    "chrome-android": "18",
    "deno": "1.0",
    "edge": "16",
    "electron": "0.20",
    "firefox": "27",
    "firefox-android": "27",
    "ios": "1.0",
    "node": "17.5",
    "oculus": "3.0",
    "opera": "10.5",
    "opera-android": "10.5",
    "opera_mobile": "10.5",
    "phantom": "1.9",
    "quest": "3.0",
    "safari": "3.0",
    "samsung": "1.0"
  },
  "web.dom-collections.for-each": {
    "android": "58",
    "bun": "0.1.1",
    "chrome": "58",
    "chrome-android": "58",
    "deno": "1.0",
    "edge": "16",
    "electron": "1.7",
    "firefox": "50",
    "firefox-android": "50",
    "hermes": "0.1",
    "ios": "10.0",
    "node": "0.0.1",
    "oculus": "4.0",
    "opera": "45",
    "opera-android": "43",
    "opera_mobile": "43",
    "quest": "4.0",
    "react-native": "0.69",
    "rhino": "1.7.13",
    "safari": "10.0",
    "samsung": "7.0"
  },
  "web.dom-collections.iterator": {
    "android": "66",
    "bun": "0.1.1",
    "chrome": "66",
    "chrome-android": "66",
    "deno": "1.0",
    "edge": "79",
    "electron": "3.0",
    "firefox": "60",
    "firefox-android": "60",
    "hermes": "0.1",
    "ios": "13.4",
    "node": "0.0.1",
    "oculus": "5.0",
    "opera": "53",
    "opera-android": "47",
    "opera_mobile": "47",
    "quest": "5.0",
    "react-native": "0.69",
    "rhino": "1.7.13",
    "safari": "13.1",
    "samsung": "9.0"
  },
  "web.dom-exception.constructor": {
    "android": "46",
    "bun": "0.1.1",
    "chrome": "46",
    "chrome-android": "46",
    "deno": "1.7",
    "edge": "79",
    "electron": "0.36",
    "firefox": "37",
    "firefox-android": "37",
    "ios": "11.3",
    "node": "17.0",
    "oculus": "3.0",
    "opera": "33",
    "opera-android": "33",
    "opera_mobile": "33",
    "quest": "3.0",
    "safari": "11.1",
    "samsung": "5.0"
  },
  "web.dom-exception.stack": {
    "deno": "1.15",
    "firefox": "37",
    "firefox-android": "37",
    "node": "17.0"
  },
  "web.dom-exception.to-string-tag": {
    "android": "49",
    "bun": "0.1.1",
    "chrome": "49",
    "chrome-android": "49",
    "deno": "1.7",
    "edge": "79",
    "electron": "0.37",
    "firefox": "51",
    "firefox-android": "51",
    "ios": "11.3",
    "node": "17.0",
    "oculus": "3.0",
    "opera": "36",
    "opera-android": "36",
    "opera_mobile": "36",
    "quest": "3.0",
    "safari": "11.1",
    "samsung": "5.0"
  },
  "web.immediate": {
    "bun": "0.4.0",
    "ie": "10",
    "node": "0.9.1"
  },
  "web.queue-microtask": {
    "android": "71",
    "chrome": "71",
    "chrome-android": "71",
    "deno": "1.0",
    "edge": "79",
    "electron": "5.0",
    "firefox": "69",
    "firefox-android": "69",
    "ios": "12.2",
    "node": "12.0",
    "oculus": "6.0",
    "opera": "58",
    "opera-android": "50",
    "opera_mobile": "50",
    "quest": "6.0",
    "safari": "12.1",
    "samsung": "10.0"
  },
  "web.self": {
    "android": "86",
    "bun": "1.0.22",
    "chrome": "86",
    "chrome-android": "86",
    "deno": "1.46.0",
    "edge": "86",
    "electron": "11.0",
    "firefox": "31",
    "firefox-android": "31",
    "ios": "10.0",
    "oculus": "12.0",
    "opera": "72",
    "opera-android": "61",
    "opera_mobile": "61",
    "quest": "12.0",
    "safari": "10",
    "samsung": "14.0"
  },
  "web.structured-clone": {},
  "web.timers": {
    "android": "1.5",
    "bun": "0.4.0",
    "chrome": "1",
    "chrome-android": "18",
    "deno": "1.0",
    "edge": "12",
    "electron": "0.20",
    "firefox": "1",
    "firefox-android": "4",
    "hermes": "0.1",
    "ie": "10",
    "ios": "1.0",
    "node": "0.0.1",
    "oculus": "3.0",
    "opera": "7",
    "opera-android": "7",
    "opera_mobile": "7",
    "phantom": "1.9",
    "quest": "3.0",
    "react-native": "0.69",
    "rhino": "1.7.13",
    "safari": "1.0",
    "samsung": "1.0"
  },
  "web.url": {
    "android": "67",
    "bun": "0.1.1",
    "chrome": "67",
    "chrome-android": "67",
    "deno": "1.0",
    "edge": "79",
    "electron": "4.0",
    "firefox": "57",
    "firefox-android": "57",
    "ios": "14.0",
    "node": "10.0",
    "oculus": "6.0",
    "opera": "54",
    "opera-android": "48",
    "opera_mobile": "48",
    "quest": "6.0",
    "safari": "14.0",
    "samsung": "9.0"
  },
  "web.url.can-parse": {
    "android": "120",
    "bun": "1.1.0",
    "chrome": "120",
    "chrome-android": "120",
    "deno": "1.33.2",
    "edge": "120",
    "electron": "28.0",
    "firefox": "115",
    "firefox-android": "115",
    "ios": "17.0",
    "node": "20.1",
    "oculus": "31.0",
    "opera": "106",
    "opera-android": "80",
    "opera_mobile": "80",
    "quest": "31.0",
    "safari": "17.0",
    "samsung": "25.0"
  },
  "web.url.parse": {
    "android": "126",
    "bun": "1.1.4",
    "chrome": "126",
    "chrome-android": "126",
    "deno": "1.43",
    "edge": "126",
    "electron": "31.0",
    "firefox": "126",
    "firefox-android": "126",
    "ios": "18.0",
    "node": "22.1",
    "oculus": "34.0",
    "opera": "112",
    "opera-android": "83",
    "opera_mobile": "83",
    "quest": "34.0",
    "safari": "18.0",
    "samsung": "28.0"
  },
  "web.url.to-json": {
    "android": "71",
    "bun": "0.1.1",
    "chrome": "71",
    "chrome-android": "71",
    "deno": "1.0",
    "edge": "79",
    "electron": "5.0",
    "firefox": "57",
    "firefox-android": "57",
    "ios": "14.0",
    "node": "10.0",
    "oculus": "6.0",
    "opera": "58",
    "opera-android": "50",
    "opera_mobile": "50",
    "quest": "6.0",
    "safari": "14.0",
    "samsung": "10.0"
  },
  "web.url-search-params": {
    "android": "67",
    "bun": "0.1.1",
    "chrome": "67",
    "chrome-android": "67",
    "deno": "1.0",
    "edge": "79",
    "electron": "4.0",
    "firefox": "57",
    "firefox-android": "57",
    "ios": "14.0",
    "node": "10.0",
    "oculus": "6.0",
    "opera": "54",
    "opera-android": "48",
    "opera_mobile": "48",
    "quest": "6.0",
    "safari": "14.0",
    "samsung": "9.0"
  },
  "web.url-search-params.delete": {
    "android": "118",
    "bun": "1.0.31",
    "chrome": "118",
    "chrome-android": "118",
    "deno": "1.35",
    "edge": "118",
    "electron": "27.0",
    "firefox": "115",
    "firefox-android": "115",
    "ios": "17.0",
    "node": "20.2",
    "oculus": "30.0",
    "opera": "104",
    "opera-android": "79",
    "opera_mobile": "79",
    "quest": "30.0",
    "safari": "17.0",
    "samsung": "25.0"
  },
  "web.url-search-params.has": {
    "android": "118",
    "bun": "1.0.31",
    "chrome": "118",
    "chrome-android": "118",
    "deno": "1.35",
    "edge": "118",
    "electron": "27.0",
    "firefox": "115",
    "firefox-android": "115",
    "ios": "17.0",
    "node": "20.2",
    "oculus": "30.0",
    "opera": "104",
    "opera-android": "79",
    "opera_mobile": "79",
    "quest": "30.0",
    "safari": "17.0",
    "samsung": "25.0"
  },
  "web.url-search-params.size": {
    "android": "113",
    "bun": "1.0.2",
    "chrome": "113",
    "chrome-android": "113",
    "deno": "1.32",
    "edge": "113",
    "electron": "25.0",
    "firefox": "112",
    "firefox-android": "112",
    "ios": "17.0",
    "node": "19.8",
    "oculus": "28.0",
    "opera": "99",
    "opera-android": "76",
    "opera_mobile": "76",
    "quest": "28.0",
    "safari": "17.0",
    "samsung": "23.0"
  }
}


---

