File name: code-backups\code-bundle-44.txt

Code:
File name: node_modules\core-js-compat\external.json

Code:
{
  "modules": {
    "android": "61",
    "bun": "0.1.1",
    "chrome": "61",
    "chrome-android": "61",
    "deno": "1.0",
    "edge": "16",
    "firefox": "60",
    "firefox-android": "60",
    "ios": "10.3",
    "node": "13.2",
    "oculus": "4.0",
    "opera": "48",
    "opera-android": "45",
    "opera_mobile": "45",
    "quest": "4.0",
    "safari": "10.1",
    "samsung": "8.0"
  }
}


---

File name: node_modules\core-js-compat\get-modules-list-for-target-version.d.ts

Code:
import type { ModuleName, TargetVersion } from "./shared";

declare function getModulesListForTargetVersion(version: TargetVersion): readonly ModuleName[];

export = getModulesListForTargetVersion;


---

File name: node_modules\core-js-compat\get-modules-list-for-target-version.js

Code:
'use strict';
const { compare, intersection, semver } = require('./helpers');
const modulesByVersions = require('./modules-by-versions');
const modules = require('./modules');

module.exports = function (raw) {
  const corejs = semver(raw);
  if (corejs.major !== 3) {
    throw new RangeError('This version of `core-js-compat` works only with `core-js@3`.');
  }
  const result = [];
  for (const version of Object.keys(modulesByVersions)) {
    if (compare(version, '<=', corejs)) {
      result.push(...modulesByVersions[version]);
    }
  }
  return intersection(result, modules);
};


---

File name: node_modules\core-js-compat\helpers.js

Code:
'use strict';
// eslint-disable-next-line es/no-object-hasown -- safe
const has = Object.hasOwn || Function.call.bind({}.hasOwnProperty);

const VERSION_PATTERN = /(\d+)(?:\.(\d+))?(?:\.(\d+))?/;

class SemVer {
  constructor(input) {
    const match = VERSION_PATTERN.exec(input);
    if (!match) throw new TypeError(`Invalid version: ${ input }`);
    const [, $major, $minor, $patch] = match;
    this.major = +$major;
    this.minor = $minor ? +$minor : 0;
    this.patch = $patch ? +$patch : 0;
  }
  toString() {
    return `${ this.major }.${ this.minor }.${ this.patch }`;
  }
}

function semver(input) {
  return input instanceof SemVer ? input : new SemVer(input);
}

function compare($a, operator, $b) {
  const a = semver($a);
  const b = semver($b);
  for (const component of ['major', 'minor', 'patch']) {
    if (a[component] < b[component]) return operator === '<' || operator === '<=' || operator === '!=';
    if (a[component] > b[component]) return operator === '>' || operator === '>=' || operator === '!=';
  } return operator === '==' || operator === '<=' || operator === '>=';
}

function filterOutStabilizedProposals(modules) {
  const modulesSet = new Set(modules);

  for (const $module of modulesSet) {
    if ($module.startsWith('esnext.') && modulesSet.has($module.replace(/^esnext\./, 'es.'))) {
      modulesSet.delete($module);
    }
  }

  return [...modulesSet];
}

function intersection(list, order) {
  const set = list instanceof Set ? list : new Set(list);
  return order.filter(name => set.has(name));
}

function sortObjectByKey(object, fn) {
  return Object.keys(object).sort(fn).reduce((memo, key) => {
    memo[key] = object[key];
    return memo;
  }, {});
}

module.exports = {
  compare,
  filterOutStabilizedProposals,
  has,
  intersection,
  semver,
  sortObjectByKey,
};


---

File name: node_modules\core-js-compat\index.d.ts

Code:
import type compat from './compat'
import type getModulesListForTargetVersion from './get-modules-list-for-target-version';
import type { ModuleName, Target, TargetVersion } from './shared'

type CompatData = {
  [module: ModuleName]: {
    [target in Target]?: TargetVersion
  }
};

declare const ExportedCompatObject: typeof compat & {
  compat: typeof compat,

  /** The subset of modules which available in the passed `core-js` version */
  getModulesListForTargetVersion: typeof getModulesListForTargetVersion,

  /** Full list compatibility data */
  data: CompatData,

  /** map of modules by `core-js` entry points */
  entries: {[entry_point: string]: readonly ModuleName[]},

  /** Full list of modules */
  modules: readonly ModuleName[]
}

export = ExportedCompatObject


---

File name: node_modules\core-js-compat\index.js

Code:
'use strict';
const compat = require('./compat');
const data = require('./data');
const entries = require('./entries');
const getModulesListForTargetVersion = require('./get-modules-list-for-target-version');
const modules = require('./modules');

module.exports = Object.assign(compat, {
  compat,
  data,
  entries,
  getModulesListForTargetVersion,
  modules,
});


---

File name: node_modules\core-js-compat\modules-by-versions.json

Code:
{
  "3.0": [
    "es.symbol",
    "es.symbol.description",
    "es.symbol.async-iterator",
    "es.symbol.has-instance",
    "es.symbol.is-concat-spreadable",
    "es.symbol.iterator",
    "es.symbol.match",
    "es.symbol.replace",
    "es.symbol.search",
    "es.symbol.species",
    "es.symbol.split",
    "es.symbol.to-primitive",
    "es.symbol.to-string-tag",
    "es.symbol.unscopables",
    "es.array.concat",
    "es.array.copy-within",
    "es.array.every",
    "es.array.fill",
    "es.array.filter",
    "es.array.find",
    "es.array.find-index",
    "es.array.flat",
    "es.array.flat-map",
    "es.array.for-each",
    "es.array.from",
    "es.array.includes",
    "es.array.index-of",
    "es.array.is-array",
    "es.array.iterator",
    "es.array.join",
    "es.array.last-index-of",
    "es.array.map",
    "es.array.of",
    "es.array.reduce",
    "es.array.reduce-right",
    "es.array.reverse",
    "es.array.slice",
    "es.array.some",
    "es.array.sort",
    "es.array.species",
    "es.array.splice",
    "es.array.unscopables.flat",
    "es.array.unscopables.flat-map",
    "es.array-buffer.constructor",
    "es.array-buffer.is-view",
    "es.array-buffer.slice",
    "es.data-view",
    "es.date.now",
    "es.date.to-iso-string",
    "es.date.to-json",
    "es.date.to-primitive",
    "es.date.to-string",
    "es.function.bind",
    "es.function.has-instance",
    "es.function.name",
    "es.json.to-string-tag",
    "es.map",
    "es.math.acosh",
    "es.math.asinh",
    "es.math.atanh",
    "es.math.cbrt",
    "es.math.clz32",
    "es.math.cosh",
    "es.math.expm1",
    "es.math.fround",
    "es.math.hypot",
    "es.math.imul",
    "es.math.log10",
    "es.math.log1p",
    "es.math.log2",
    "es.math.sign",
    "es.math.sinh",
    "es.math.tanh",
    "es.math.to-string-tag",
    "es.math.trunc",
    "es.number.constructor",
    "es.number.epsilon",
    "es.number.is-finite",
    "es.number.is-integer",
    "es.number.is-nan",
    "es.number.is-safe-integer",
    "es.number.max-safe-integer",
    "es.number.min-safe-integer",
    "es.number.parse-float",
    "es.number.parse-int",
    "es.number.to-fixed",
    "es.number.to-precision",
    "es.object.assign",
    "es.object.create",
    "es.object.define-getter",
    "es.object.define-properties",
    "es.object.define-property",
    "es.object.define-setter",
    "es.object.entries",
    "es.object.freeze",
    "es.object.from-entries",
    "es.object.get-own-property-descriptor",
    "es.object.get-own-property-descriptors",
    "es.object.get-own-property-names",
    "es.object.get-prototype-of",
    "es.object.is",
    "es.object.is-extensible",
    "es.object.is-frozen",
    "es.object.is-sealed",
    "es.object.keys",
    "es.object.lookup-getter",
    "es.object.lookup-setter",
    "es.object.prevent-extensions",
    "es.object.seal",
    "es.object.set-prototype-of",
    "es.object.to-string",
    "es.object.values",
    "es.parse-float",
    "es.parse-int",
    "es.promise",
    "es.promise.finally",
    "es.reflect.apply",
    "es.reflect.construct",
    "es.reflect.define-property",
    "es.reflect.delete-property",
    "es.reflect.get",
    "es.reflect.get-own-property-descriptor",
    "es.reflect.get-prototype-of",
    "es.reflect.has",
    "es.reflect.is-extensible",
    "es.reflect.own-keys",
    "es.reflect.prevent-extensions",
    "es.reflect.set",
    "es.reflect.set-prototype-of",
    "es.regexp.constructor",
    "es.regexp.exec",
    "es.regexp.flags",
    "es.regexp.to-string",
    "es.set",
    "es.string.code-point-at",
    "es.string.ends-with",
    "es.string.from-code-point",
    "es.string.includes",
    "es.string.iterator",
    "es.string.match",
    "es.string.pad-end",
    "es.string.pad-start",
    "es.string.raw",
    "es.string.repeat",
    "es.string.replace",
    "es.string.search",
    "es.string.split",
    "es.string.starts-with",
    "es.string.trim",
    "es.string.trim-end",
    "es.string.trim-start",
    "es.string.anchor",
    "es.string.big",
    "es.string.blink",
    "es.string.bold",
    "es.string.fixed",
    "es.string.fontcolor",
    "es.string.fontsize",
    "es.string.italics",
    "es.string.link",
    "es.string.small",
    "es.string.strike",
    "es.string.sub",
    "es.string.sup",
    "es.typed-array.float32-array",
    "es.typed-array.float64-array",
    "es.typed-array.int8-array",
    "es.typed-array.int16-array",
    "es.typed-array.int32-array",
    "es.typed-array.uint8-array",
    "es.typed-array.uint8-clamped-array",
    "es.typed-array.uint16-array",
    "es.typed-array.uint32-array",
    "es.typed-array.copy-within",
    "es.typed-array.every",
    "es.typed-array.fill",
    "es.typed-array.filter",
    "es.typed-array.find",
    "es.typed-array.find-index",
    "es.typed-array.for-each",
    "es.typed-array.from",
    "es.typed-array.includes",
    "es.typed-array.index-of",
    "es.typed-array.iterator",
    "es.typed-array.join",
    "es.typed-array.last-index-of",
    "es.typed-array.map",
    "es.typed-array.of",
    "es.typed-array.reduce",
    "es.typed-array.reduce-right",
    "es.typed-array.reverse",
    "es.typed-array.set",
    "es.typed-array.slice",
    "es.typed-array.some",
    "es.typed-array.sort",
    "es.typed-array.subarray",
    "es.typed-array.to-locale-string",
    "es.typed-array.to-string",
    "es.weak-map",
    "es.weak-set",
    "esnext.aggregate-error",
    "esnext.array.last-index",
    "esnext.array.last-item",
    "esnext.composite-key",
    "esnext.composite-symbol",
    "esnext.global-this",
    "esnext.map.delete-all",
    "esnext.map.every",
    "esnext.map.filter",
    "esnext.map.find",
    "esnext.map.find-key",
    "esnext.map.from",
    "esnext.map.group-by",
    "esnext.map.includes",
    "esnext.map.key-by",
    "esnext.map.key-of",
    "esnext.map.map-keys",
    "esnext.map.map-values",
    "esnext.map.merge",
    "esnext.map.of",
    "esnext.map.reduce",
    "esnext.map.some",
    "esnext.map.update",
    "esnext.math.clamp",
    "esnext.math.deg-per-rad",
    "esnext.math.degrees",
    "esnext.math.fscale",
    "esnext.math.iaddh",
    "esnext.math.imulh",
    "esnext.math.isubh",
    "esnext.math.rad-per-deg",
    "esnext.math.radians",
    "esnext.math.scale",
    "esnext.math.seeded-prng",
    "esnext.math.signbit",
    "esnext.math.umulh",
    "esnext.number.from-string",
    "esnext.observable",
    "esnext.promise.all-settled",
    "esnext.promise.any",
    "esnext.promise.try",
    "esnext.reflect.define-metadata",
    "esnext.reflect.delete-metadata",
    "esnext.reflect.get-metadata",
    "esnext.reflect.get-metadata-keys",
    "esnext.reflect.get-own-metadata",
    "esnext.reflect.get-own-metadata-keys",
    "esnext.reflect.has-metadata",
    "esnext.reflect.has-own-metadata",
    "esnext.reflect.metadata",
    "esnext.set.add-all",
    "esnext.set.delete-all",
    "esnext.set.difference",
    "esnext.set.every",
    "esnext.set.filter",
    "esnext.set.find",
    "esnext.set.from",
    "esnext.set.intersection",
    "esnext.set.is-disjoint-from",
    "esnext.set.is-subset-of",
    "esnext.set.is-superset-of",
    "esnext.set.join",
    "esnext.set.map",
    "esnext.set.of",
    "esnext.set.reduce",
    "esnext.set.some",
    "esnext.set.symmetric-difference",
    "esnext.set.union",
    "esnext.string.at",
    "esnext.string.code-points",
    "esnext.string.match-all",
    "esnext.string.replace-all",
    "esnext.symbol.dispose",
    "esnext.symbol.observable",
    "esnext.symbol.pattern-match",
    "esnext.weak-map.delete-all",
    "esnext.weak-map.from",
    "esnext.weak-map.of",
    "esnext.weak-set.add-all",
    "esnext.weak-set.delete-all",
    "esnext.weak-set.from",
    "esnext.weak-set.of",
    "web.dom-collections.for-each",
    "web.dom-collections.iterator",
    "web.immediate",
    "web.queue-microtask",
    "web.timers",
    "web.url",
    "web.url.to-json",
    "web.url-search-params"
  ],
  "3.1": [
    "es.string.match-all",
    "es.symbol.match-all",
    "esnext.symbol.replace-all"
  ],
  "3.2": [
    "es.promise.all-settled",
    "esnext.array.is-template-object",
    "esnext.map.update-or-insert",
    "esnext.symbol.async-dispose"
  ],
  "3.3": [
    "es.global-this",
    "esnext.async-iterator.constructor",
    "esnext.async-iterator.as-indexed-pairs",
    "esnext.async-iterator.drop",
    "esnext.async-iterator.every",
    "esnext.async-iterator.filter",
    "esnext.async-iterator.find",
    "esnext.async-iterator.flat-map",
    "esnext.async-iterator.for-each",
    "esnext.async-iterator.from",
    "esnext.async-iterator.map",
    "esnext.async-iterator.reduce",
    "esnext.async-iterator.some",
    "esnext.async-iterator.take",
    "esnext.async-iterator.to-array",
    "esnext.iterator.constructor",
    "esnext.iterator.as-indexed-pairs",
    "esnext.iterator.drop",
    "esnext.iterator.every",
    "esnext.iterator.filter",
    "esnext.iterator.find",
    "esnext.iterator.flat-map",
    "esnext.iterator.for-each",
    "esnext.iterator.from",
    "esnext.iterator.map",
    "esnext.iterator.reduce",
    "esnext.iterator.some",
    "esnext.iterator.take",
    "esnext.iterator.to-array",
    "esnext.map.upsert",
    "esnext.weak-map.upsert"
  ],
  "3.4": [
    "es.json.stringify"
  ],
  "3.5": [
    "esnext.object.iterate-entries",
    "esnext.object.iterate-keys",
    "esnext.object.iterate-values"
  ],
  "3.6": [
    "es.regexp.sticky",
    "es.regexp.test"
  ],
  "3.7": [
    "es.aggregate-error",
    "es.promise.any",
    "es.reflect.to-string-tag",
    "es.string.replace-all",
    "esnext.map.emplace",
    "esnext.weak-map.emplace"
  ],
  "3.8": [
    "esnext.array.at",
    "esnext.array.filter-out",
    "esnext.array.unique-by",
    "esnext.bigint.range",
    "esnext.number.range",
    "esnext.typed-array.at",
    "esnext.typed-array.filter-out"
  ],
  "3.9": [
    "esnext.array.find-last",
    "esnext.array.find-last-index",
    "esnext.typed-array.find-last",
    "esnext.typed-array.find-last-index",
    "esnext.typed-array.unique-by"
  ],
  "3.11": [
    "esnext.object.has-own"
  ],
  "3.12": [
    "esnext.symbol.matcher",
    "esnext.symbol.metadata"
  ],
  "3.15": [
    "es.date.get-year",
    "es.date.set-year",
    "es.date.to-gmt-string",
    "es.escape",
    "es.regexp.dot-all",
    "es.string.substr",
    "es.unescape"
  ],
  "3.16": [
    "esnext.array.filter-reject",
    "esnext.array.group-by",
    "esnext.typed-array.filter-reject",
    "esnext.typed-array.group-by"
  ],
  "3.17": [
    "es.array.at",
    "es.object.has-own",
    "es.string.at-alternative",
    "es.typed-array.at"
  ],
  "3.18": [
    "esnext.array.from-async",
    "esnext.typed-array.from-async"
  ],
  "3.20": [
    "es.error.cause",
    "es.error.to-string",
    "es.aggregate-error.cause",
    "es.number.to-exponential",
    "esnext.array.group-by-to-map",
    "esnext.array.to-reversed",
    "esnext.array.to-sorted",
    "esnext.array.to-spliced",
    "esnext.array.with",
    "esnext.function.is-callable",
    "esnext.function.is-constructor",
    "esnext.function.un-this",
    "esnext.iterator.to-async",
    "esnext.string.cooked",
    "esnext.typed-array.to-reversed",
    "esnext.typed-array.to-sorted",
    "esnext.typed-array.to-spliced",
    "esnext.typed-array.with",
    "web.dom-exception.constructor",
    "web.dom-exception.stack",
    "web.dom-exception.to-string-tag",
    "web.structured-clone"
  ],
  "3.21": [
    "web.atob",
    "web.btoa"
  ],
  "3.23": [
    "es.array.find-last",
    "es.array.find-last-index",
    "es.array.push",
    "es.array.unshift",
    "es.typed-array.find-last",
    "es.typed-array.find-last-index",
    "esnext.array.group",
    "esnext.array.group-to-map",
    "esnext.symbol.metadata-key"
  ],
  "3.24": [
    "esnext.async-iterator.indexed",
    "esnext.iterator.indexed"
  ],
  "3.25": [
    "es.object.proto"
  ],
  "3.26": [
    "esnext.string.is-well-formed",
    "esnext.string.to-well-formed",
    "web.self"
  ],
  "3.27": [
    "esnext.suppressed-error.constructor",
    "esnext.async-disposable-stack.constructor",
    "esnext.async-iterator.async-dispose",
    "esnext.disposable-stack.constructor",
    "esnext.iterator.dispose",
    "esnext.set.difference.v2",
    "esnext.set.intersection.v2",
    "esnext.set.is-disjoint-from.v2",
    "esnext.set.is-subset-of.v2",
    "esnext.set.is-superset-of.v2",
    "esnext.set.symmetric-difference.v2",
    "esnext.set.union.v2",
    "esnext.string.dedent"
  ],
  "3.28": [
    "es.array.to-reversed",
    "es.array.to-sorted",
    "es.array.to-spliced",
    "es.array.with",
    "es.typed-array.to-reversed",
    "es.typed-array.to-sorted",
    "es.typed-array.with",
    "esnext.array-buffer.detached",
    "esnext.array-buffer.transfer",
    "esnext.array-buffer.transfer-to-fixed-length",
    "esnext.function.demethodize",
    "esnext.iterator.range",
    "esnext.json.is-raw-json",
    "esnext.json.parse",
    "esnext.json.raw-json",
    "esnext.symbol.is-registered",
    "esnext.symbol.is-well-known"
  ],
  "3.29": [
    "web.url-search-params.size"
  ],
  "3.30": [
    "web.url.can-parse"
  ],
  "3.31": [
    "es.string.is-well-formed",
    "es.string.to-well-formed",
    "esnext.function.metadata",
    "esnext.object.group-by",
    "esnext.promise.with-resolvers",
    "esnext.symbol.is-registered-symbol",
    "esnext.symbol.is-well-known-symbol",
    "web.url-search-params.delete",
    "web.url-search-params.has"
  ],
  "3.32": [
    "esnext.data-view.get-float16",
    "esnext.data-view.get-uint8-clamped",
    "esnext.data-view.set-float16",
    "esnext.data-view.set-uint8-clamped",
    "esnext.math.f16round"
  ],
  "3.33": [
    "esnext.regexp.escape"
  ],
  "3.34": [
    "es.map.group-by",
    "es.object.group-by",
    "es.promise.with-resolvers",
    "esnext.uint8-array.from-base64",
    "esnext.uint8-array.from-hex",
    "esnext.uint8-array.to-base64",
    "esnext.uint8-array.to-hex"
  ],
  "3.36": [
    "es.array-buffer.detached",
    "es.array-buffer.transfer",
    "es.array-buffer.transfer-to-fixed-length"
  ],
  "3.37": [
    "es.set.difference.v2",
    "es.set.intersection.v2",
    "es.set.is-disjoint-from.v2",
    "es.set.is-subset-of.v2",
    "es.set.is-superset-of.v2",
    "es.set.symmetric-difference.v2",
    "es.set.union.v2",
    "esnext.math.sum-precise",
    "esnext.symbol.custom-matcher",
    "web.url.parse"
  ],
  "3.38": [
    "esnext.uint8-array.set-from-base64",
    "esnext.uint8-array.set-from-hex"
  ],
  "3.39": [
    "es.iterator.constructor",
    "es.iterator.drop",
    "es.iterator.every",
    "es.iterator.filter",
    "es.iterator.find",
    "es.iterator.flat-map",
    "es.iterator.for-each",
    "es.iterator.from",
    "es.iterator.map",
    "es.iterator.reduce",
    "es.iterator.some",
    "es.iterator.take",
    "es.iterator.to-array",
    "es.promise.try",
    "esnext.iterator.concat",
    "esnext.map.get-or-insert",
    "esnext.map.get-or-insert-computed",
    "esnext.weak-map.get-or-insert",
    "esnext.weak-map.get-or-insert-computed"
  ],
  "3.40": [
    "esnext.error.is-error"
  ],
  "3.41": [
    "es.data-view.get-float16",
    "es.data-view.set-float16",
    "es.math.f16round",
    "es.regexp.escape"
  ],
  "3.43": [
    "es.array.from-async",
    "es.async-disposable-stack.constructor",
    "es.async-iterator.async-dispose",
    "es.disposable-stack.constructor",
    "es.error.is-error",
    "es.iterator.dispose",
    "es.suppressed-error.constructor",
    "es.symbol.async-dispose",
    "es.symbol.dispose",
    "esnext.iterator.chunks",
    "esnext.iterator.windows",
    "esnext.iterator.zip",
    "esnext.iterator.zip-keyed",
    "esnext.number.clamp"
  ]
}


---

File name: node_modules\core-js-compat\modules.json

Code:
[
  "es.symbol",
  "es.symbol.description",
  "es.symbol.async-dispose",
  "es.symbol.async-iterator",
  "es.symbol.dispose",
  "es.symbol.has-instance",
  "es.symbol.is-concat-spreadable",
  "es.symbol.iterator",
  "es.symbol.match",
  "es.symbol.match-all",
  "es.symbol.replace",
  "es.symbol.search",
  "es.symbol.species",
  "es.symbol.split",
  "es.symbol.to-primitive",
  "es.symbol.to-string-tag",
  "es.symbol.unscopables",
  "es.error.cause",
  "es.error.is-error",
  "es.error.to-string",
  "es.aggregate-error",
  "es.aggregate-error.cause",
  "es.suppressed-error.constructor",
  "es.array.at",
  "es.array.concat",
  "es.array.copy-within",
  "es.array.every",
  "es.array.fill",
  "es.array.filter",
  "es.array.find",
  "es.array.find-index",
  "es.array.find-last",
  "es.array.find-last-index",
  "es.array.flat",
  "es.array.flat-map",
  "es.array.for-each",
  "es.array.from",
  "es.array.includes",
  "es.array.index-of",
  "es.array.is-array",
  "es.array.iterator",
  "es.array.join",
  "es.array.last-index-of",
  "es.array.map",
  "es.array.of",
  "es.array.push",
  "es.array.reduce",
  "es.array.reduce-right",
  "es.array.reverse",
  "es.array.slice",
  "es.array.some",
  "es.array.sort",
  "es.array.species",
  "es.array.splice",
  "es.array.to-reversed",
  "es.array.to-sorted",
  "es.array.to-spliced",
  "es.array.unscopables.flat",
  "es.array.unscopables.flat-map",
  "es.array.unshift",
  "es.array.with",
  "es.array-buffer.constructor",
  "es.array-buffer.is-view",
  "es.array-buffer.slice",
  "es.data-view",
  "es.data-view.get-float16",
  "es.data-view.set-float16",
  "es.array-buffer.detached",
  "es.array-buffer.transfer",
  "es.array-buffer.transfer-to-fixed-length",
  "es.date.get-year",
  "es.date.now",
  "es.date.set-year",
  "es.date.to-gmt-string",
  "es.date.to-iso-string",
  "es.date.to-json",
  "es.date.to-primitive",
  "es.date.to-string",
  "es.disposable-stack.constructor",
  "es.escape",
  "es.function.bind",
  "es.function.has-instance",
  "es.function.name",
  "es.global-this",
  "es.iterator.constructor",
  "es.iterator.dispose",
  "es.iterator.drop",
  "es.iterator.every",
  "es.iterator.filter",
  "es.iterator.find",
  "es.iterator.flat-map",
  "es.iterator.for-each",
  "es.iterator.from",
  "es.iterator.map",
  "es.iterator.reduce",
  "es.iterator.some",
  "es.iterator.take",
  "es.iterator.to-array",
  "es.json.stringify",
  "es.json.to-string-tag",
  "es.map",
  "es.map.group-by",
  "es.math.acosh",
  "es.math.asinh",
  "es.math.atanh",
  "es.math.cbrt",
  "es.math.clz32",
  "es.math.cosh",
  "es.math.expm1",
  "es.math.fround",
  "es.math.f16round",
  "es.math.hypot",
  "es.math.imul",
  "es.math.log10",
  "es.math.log1p",
  "es.math.log2",
  "es.math.sign",
  "es.math.sinh",
  "es.math.tanh",
  "es.math.to-string-tag",
  "es.math.trunc",
  "es.number.constructor",
  "es.number.epsilon",
  "es.number.is-finite",
  "es.number.is-integer",
  "es.number.is-nan",
  "es.number.is-safe-integer",
  "es.number.max-safe-integer",
  "es.number.min-safe-integer",
  "es.number.parse-float",
  "es.number.parse-int",
  "es.number.to-exponential",
  "es.number.to-fixed",
  "es.number.to-precision",
  "es.object.assign",
  "es.object.create",
  "es.object.define-getter",
  "es.object.define-properties",
  "es.object.define-property",
  "es.object.define-setter",
  "es.object.entries",
  "es.object.freeze",
  "es.object.from-entries",
  "es.object.get-own-property-descriptor",
  "es.object.get-own-property-descriptors",
  "es.object.get-own-property-names",
  "es.object.get-prototype-of",
  "es.object.group-by",
  "es.object.has-own",
  "es.object.is",
  "es.object.is-extensible",
  "es.object.is-frozen",
  "es.object.is-sealed",
  "es.object.keys",
  "es.object.lookup-getter",
  "es.object.lookup-setter",
  "es.object.prevent-extensions",
  "es.object.proto",
  "es.object.seal",
  "es.object.set-prototype-of",
  "es.object.to-string",
  "es.object.values",
  "es.parse-float",
  "es.parse-int",
  "es.promise",
  "es.promise.all-settled",
  "es.promise.any",
  "es.promise.finally",
  "es.promise.try",
  "es.promise.with-resolvers",
  "es.array.from-async",
  "es.async-disposable-stack.constructor",
  "es.async-iterator.async-dispose",
  "es.reflect.apply",
  "es.reflect.construct",
  "es.reflect.define-property",
  "es.reflect.delete-property",
  "es.reflect.get",
  "es.reflect.get-own-property-descriptor",
  "es.reflect.get-prototype-of",
  "es.reflect.has",
  "es.reflect.is-extensible",
  "es.reflect.own-keys",
  "es.reflect.prevent-extensions",
  "es.reflect.set",
  "es.reflect.set-prototype-of",
  "es.reflect.to-string-tag",
  "es.regexp.constructor",
  "es.regexp.escape",
  "es.regexp.dot-all",
  "es.regexp.exec",
  "es.regexp.flags",
  "es.regexp.sticky",
  "es.regexp.test",
  "es.regexp.to-string",
  "es.set",
  "es.set.difference.v2",
  "es.set.intersection.v2",
  "es.set.is-disjoint-from.v2",
  "es.set.is-subset-of.v2",
  "es.set.is-superset-of.v2",
  "es.set.symmetric-difference.v2",
  "es.set.union.v2",
  "es.string.at-alternative",
  "es.string.code-point-at",
  "es.string.ends-with",
  "es.string.from-code-point",
  "es.string.includes",
  "es.string.is-well-formed",
  "es.string.iterator",
  "es.string.match",
  "es.string.match-all",
  "es.string.pad-end",
  "es.string.pad-start",
  "es.string.raw",
  "es.string.repeat",
  "es.string.replace",
  "es.string.replace-all",
  "es.string.search",
  "es.string.split",
  "es.string.starts-with",
  "es.string.substr",
  "es.string.to-well-formed",
  "es.string.trim",
  "es.string.trim-end",
  "es.string.trim-start",
  "es.string.anchor",
  "es.string.big",
  "es.string.blink",
  "es.string.bold",
  "es.string.fixed",
  "es.string.fontcolor",
  "es.string.fontsize",
  "es.string.italics",
  "es.string.link",
  "es.string.small",
  "es.string.strike",
  "es.string.sub",
  "es.string.sup",
  "es.typed-array.float32-array",
  "es.typed-array.float64-array",
  "es.typed-array.int8-array",
  "es.typed-array.int16-array",
  "es.typed-array.int32-array",
  "es.typed-array.uint8-array",
  "es.typed-array.uint8-clamped-array",
  "es.typed-array.uint16-array",
  "es.typed-array.uint32-array",
  "es.typed-array.at",
  "es.typed-array.copy-within",
  "es.typed-array.every",
  "es.typed-array.fill",
  "es.typed-array.filter",
  "es.typed-array.find",
  "es.typed-array.find-index",
  "es.typed-array.find-last",
  "es.typed-array.find-last-index",
  "es.typed-array.for-each",
  "es.typed-array.from",
  "es.typed-array.includes",
  "es.typed-array.index-of",
  "es.typed-array.iterator",
  "es.typed-array.join",
  "es.typed-array.last-index-of",
  "es.typed-array.map",
  "es.typed-array.of",
  "es.typed-array.reduce",
  "es.typed-array.reduce-right",
  "es.typed-array.reverse",
  "es.typed-array.set",
  "es.typed-array.slice",
  "es.typed-array.some",
  "es.typed-array.sort",
  "es.typed-array.subarray",
  "es.typed-array.to-locale-string",
  "es.typed-array.to-reversed",
  "es.typed-array.to-sorted",
  "es.typed-array.to-string",
  "es.typed-array.with",
  "es.unescape",
  "es.weak-map",
  "es.weak-set",
  "esnext.aggregate-error",
  "esnext.suppressed-error.constructor",
  "esnext.array.from-async",
  "esnext.array.at",
  "esnext.array.filter-out",
  "esnext.array.filter-reject",
  "esnext.array.find-last",
  "esnext.array.find-last-index",
  "esnext.array.group",
  "esnext.array.group-by",
  "esnext.array.group-by-to-map",
  "esnext.array.group-to-map",
  "esnext.array.is-template-object",
  "esnext.array.last-index",
  "esnext.array.last-item",
  "esnext.array.to-reversed",
  "esnext.array.to-sorted",
  "esnext.array.to-spliced",
  "esnext.array.unique-by",
  "esnext.array.with",
  "esnext.array-buffer.detached",
  "esnext.array-buffer.transfer",
  "esnext.array-buffer.transfer-to-fixed-length",
  "esnext.async-disposable-stack.constructor",
  "esnext.async-iterator.constructor",
  "esnext.async-iterator.as-indexed-pairs",
  "esnext.async-iterator.async-dispose",
  "esnext.async-iterator.drop",
  "esnext.async-iterator.every",
  "esnext.async-iterator.filter",
  "esnext.async-iterator.find",
  "esnext.async-iterator.flat-map",
  "esnext.async-iterator.for-each",
  "esnext.async-iterator.from",
  "esnext.async-iterator.indexed",
  "esnext.async-iterator.map",
  "esnext.async-iterator.reduce",
  "esnext.async-iterator.some",
  "esnext.async-iterator.take",
  "esnext.async-iterator.to-array",
  "esnext.bigint.range",
  "esnext.composite-key",
  "esnext.composite-symbol",
  "esnext.data-view.get-float16",
  "esnext.data-view.get-uint8-clamped",
  "esnext.data-view.set-float16",
  "esnext.data-view.set-uint8-clamped",
  "esnext.disposable-stack.constructor",
  "esnext.error.is-error",
  "esnext.function.demethodize",
  "esnext.function.is-callable",
  "esnext.function.is-constructor",
  "esnext.function.metadata",
  "esnext.function.un-this",
  "esnext.global-this",
  "esnext.iterator.constructor",
  "esnext.iterator.as-indexed-pairs",
  "esnext.iterator.chunks",
  "esnext.iterator.concat",
  "esnext.iterator.dispose",
  "esnext.iterator.drop",
  "esnext.iterator.every",
  "esnext.iterator.filter",
  "esnext.iterator.find",
  "esnext.iterator.flat-map",
  "esnext.iterator.for-each",
  "esnext.iterator.from",
  "esnext.iterator.indexed",
  "esnext.iterator.map",
  "esnext.iterator.range",
  "esnext.iterator.reduce",
  "esnext.iterator.some",
  "esnext.iterator.take",
  "esnext.iterator.to-array",
  "esnext.iterator.to-async",
  "esnext.iterator.windows",
  "esnext.iterator.zip",
  "esnext.iterator.zip-keyed",
  "esnext.json.is-raw-json",
  "esnext.json.parse",
  "esnext.json.raw-json",
  "esnext.map.delete-all",
  "esnext.map.emplace",
  "esnext.map.every",
  "esnext.map.filter",
  "esnext.map.find",
  "esnext.map.find-key",
  "esnext.map.from",
  "esnext.map.get-or-insert",
  "esnext.map.get-or-insert-computed",
  "esnext.map.group-by",
  "esnext.map.includes",
  "esnext.map.key-by",
  "esnext.map.key-of",
  "esnext.map.map-keys",
  "esnext.map.map-values",
  "esnext.map.merge",
  "esnext.map.of",
  "esnext.map.reduce",
  "esnext.map.some",
  "esnext.map.update",
  "esnext.map.update-or-insert",
  "esnext.map.upsert",
  "esnext.math.clamp",
  "esnext.math.deg-per-rad",
  "esnext.math.degrees",
  "esnext.math.fscale",
  "esnext.math.f16round",
  "esnext.math.iaddh",
  "esnext.math.imulh",
  "esnext.math.isubh",
  "esnext.math.rad-per-deg",
  "esnext.math.radians",
  "esnext.math.scale",
  "esnext.math.seeded-prng",
  "esnext.math.signbit",
  "esnext.math.sum-precise",
  "esnext.math.umulh",
  "esnext.number.clamp",
  "esnext.number.from-string",
  "esnext.number.range",
  "esnext.object.has-own",
  "esnext.object.iterate-entries",
  "esnext.object.iterate-keys",
  "esnext.object.iterate-values",
  "esnext.object.group-by",
  "esnext.observable",
  "esnext.promise.all-settled",
  "esnext.promise.any",
  "esnext.promise.try",
  "esnext.promise.with-resolvers",
  "esnext.reflect.define-metadata",
  "esnext.reflect.delete-metadata",
  "esnext.reflect.get-metadata",
  "esnext.reflect.get-metadata-keys",
  "esnext.reflect.get-own-metadata",
  "esnext.reflect.get-own-metadata-keys",
  "esnext.reflect.has-metadata",
  "esnext.reflect.has-own-metadata",
  "esnext.reflect.metadata",
  "esnext.regexp.escape",
  "esnext.set.add-all",
  "esnext.set.delete-all",
  "esnext.set.difference.v2",
  "esnext.set.difference",
  "esnext.set.every",
  "esnext.set.filter",
  "esnext.set.find",
  "esnext.set.from",
  "esnext.set.intersection.v2",
  "esnext.set.intersection",
  "esnext.set.is-disjoint-from.v2",
  "esnext.set.is-disjoint-from",
  "esnext.set.is-subset-of.v2",
  "esnext.set.is-subset-of",
  "esnext.set.is-superset-of.v2",
  "esnext.set.is-superset-of",
  "esnext.set.join",
  "esnext.set.map",
  "esnext.set.of",
  "esnext.set.reduce",
  "esnext.set.some",
  "esnext.set.symmetric-difference.v2",
  "esnext.set.symmetric-difference",
  "esnext.set.union.v2",
  "esnext.set.union",
  "esnext.string.at",
  "esnext.string.cooked",
  "esnext.string.code-points",
  "esnext.string.dedent",
  "esnext.string.is-well-formed",
  "esnext.string.match-all",
  "esnext.string.replace-all",
  "esnext.string.to-well-formed",
  "esnext.symbol.async-dispose",
  "esnext.symbol.custom-matcher",
  "esnext.symbol.dispose",
  "esnext.symbol.is-registered-symbol",
  "esnext.symbol.is-registered",
  "esnext.symbol.is-well-known-symbol",
  "esnext.symbol.is-well-known",
  "esnext.symbol.matcher",
  "esnext.symbol.metadata",
  "esnext.symbol.metadata-key",
  "esnext.symbol.observable",
  "esnext.symbol.pattern-match",
  "esnext.symbol.replace-all",
  "esnext.typed-array.from-async",
  "esnext.typed-array.at",
  "esnext.typed-array.filter-out",
  "esnext.typed-array.filter-reject",
  "esnext.typed-array.find-last",
  "esnext.typed-array.find-last-index",
  "esnext.typed-array.group-by",
  "esnext.typed-array.to-reversed",
  "esnext.typed-array.to-sorted",
  "esnext.typed-array.to-spliced",
  "esnext.typed-array.unique-by",
  "esnext.typed-array.with",
  "esnext.uint8-array.from-base64",
  "esnext.uint8-array.from-hex",
  "esnext.uint8-array.set-from-base64",
  "esnext.uint8-array.set-from-hex",
  "esnext.uint8-array.to-base64",
  "esnext.uint8-array.to-hex",
  "esnext.weak-map.delete-all",
  "esnext.weak-map.from",
  "esnext.weak-map.of",
  "esnext.weak-map.emplace",
  "esnext.weak-map.get-or-insert",
  "esnext.weak-map.get-or-insert-computed",
  "esnext.weak-map.upsert",
  "esnext.weak-set.add-all",
  "esnext.weak-set.delete-all",
  "esnext.weak-set.from",
  "esnext.weak-set.of",
  "web.atob",
  "web.btoa",
  "web.dom-collections.for-each",
  "web.dom-collections.iterator",
  "web.dom-exception.constructor",
  "web.dom-exception.stack",
  "web.dom-exception.to-string-tag",
  "web.immediate",
  "web.queue-microtask",
  "web.self",
  "web.structured-clone",
  "web.timers",
  "web.url",
  "web.url.can-parse",
  "web.url.parse",
  "web.url.to-json",
  "web.url-search-params",
  "web.url-search-params.delete",
  "web.url-search-params.has",
  "web.url-search-params.size"
]


---

File name: node_modules\core-js-compat\package.json

Code:
{
  "name": "core-js-compat",
  "version": "3.43.0",
  "type": "commonjs",
  "description": "core-js compat",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/zloirock/core-js.git",
    "directory": "packages/core-js-compat"
  },
  "funding": {
    "type": "opencollective",
    "url": "https://opencollective.com/core-js"
  },
  "license": "MIT",
  "author": {
    "name": "Denis Pushkarev",
    "email": "zloirock@zloirock.ru",
    "url": "http://zloirock.ru"
  },
  "sideEffects": false,
  "main": "index.js",
  "types": "index.d.ts",
  "dependencies": {
    "browserslist": "^4.25.0"
  }
}


---

File name: node_modules\core-js-compat\README.md

Code:
![logo](https://user-images.githubusercontent.com/2213682/146607186-8e13ddef-26a4-4ebf-befd-5aac9d77c090.png)

<div align="center">

[![fundraising](https://opencollective.com/core-js/all/badge.svg?label=fundraising)](https://opencollective.com/core-js) [![PRs welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](https://github.com/zloirock/core-js/blob/master/CONTRIBUTING.md) [![version](https://img.shields.io/npm/v/core-js-compat.svg)](https://www.npmjs.com/package/core-js-compat) [![core-js-compat downloads](https://img.shields.io/npm/dm/core-js-compat.svg?label=npm%20i%20core-js-compat)](https://npm-stat.com/charts.html?package=core-js&package=core-js-pure&package=core-js-compat&from=2014-11-18)

</div>

**I highly recommend reading this: [So, what's next?](https://github.com/zloirock/core-js/blob/master/docs/2023-02-14-so-whats-next.md)**
---

[`core-js-compat` package](https://github.com/zloirock/core-js/tree/master/packages/core-js-compat) contains data about the necessity of [`core-js`](https://github.com/zloirock/core-js) modules and API for getting a list of required core-js modules by browserslist query.

```js
import compat from 'core-js-compat';

const {
  list,                       // array of required modules
  targets,                    // object with targets for each module
} = compat({
  targets: '> 1%',            // browserslist query or object of minimum environment versions to support, see below
  modules: [                  // optional list / filter of modules - regex, string or an array of them:
    'core-js/actual',         // - an entry point
    'esnext.array.unique-by', // - a module name (or just a start of a module name)
    /^web\./,                 // - regex that a module name must satisfy
  ],
  exclude: [                  // optional list / filter of modules to exclude, the signature is similar to `modules` option
    'web.atob',
  ],
  version: '3.43',            // used `core-js` version, by default - the latest
  inverse: false,             // inverse of the result - shows modules that are NOT required for the target environment
});

console.log(targets);
/* =>
{
  'es.error.cause': { ios: '14.5-14.8' },
  'es.aggregate-error.cause': { ios: '14.5-14.8' },
  'es.array.at': { ios: '14.5-14.8' },
  'es.array.find-last': { firefox: '100', ios: '14.5-14.8' },
  'es.array.find-last-index': { firefox: '100', ios: '14.5-14.8' },
  'es.array.includes': { firefox: '100' },
  'es.array.push': { chrome: '100', edge: '101', ios: '14.5-14.8', safari: '15.4' },
  'es.array.unshift': { ios: '14.5-14.8', safari: '15.4' },
  'es.object.has-own': { ios: '14.5-14.8' },
  'es.regexp.flags': { chrome: '100', edge: '101' },
  'es.string.at-alternative': { ios: '14.5-14.8' },
  'es.typed-array.at': { ios: '14.5-14.8' },
  'es.typed-array.find-last': { firefox: '100', ios: '14.5-14.8' },
  'es.typed-array.find-last-index': { firefox: '100', ios: '14.5-14.8' },
  'esnext.array.group': { chrome: '100', edge: '101', firefox: '100', ios: '14.5-14.8', safari: '15.4' },
  'esnext.array.group-by': { chrome: '100', edge: '101', firefox: '100', ios: '14.5-14.8', safari: '15.4' },
  'esnext.array.group-by-to-map': { chrome: '100', edge: '101', firefox: '100', ios: '14.5-14.8', safari: '15.4' },
  'esnext.array.group-to-map': { chrome: '100', edge: '101', firefox: '100', ios: '14.5-14.8', safari: '15.4' },
  'esnext.array.to-reversed': { chrome: '100', edge: '101', firefox: '100', ios: '14.5-14.8', safari: '15.4' },
  'esnext.array.to-sorted': { chrome: '100', edge: '101', firefox: '100', ios: '14.5-14.8', safari: '15.4' },
  'esnext.array.to-spliced': { chrome: '100', edge: '101', firefox: '100', ios: '14.5-14.8', safari: '15.4' },
  'esnext.array.unique-by': { chrome: '100', edge: '101', firefox: '100', ios: '14.5-14.8', safari: '15.4' },
  'esnext.array.with': { chrome: '100', edge: '101', firefox: '100', ios: '14.5-14.8', safari: '15.4' },
  'esnext.typed-array.to-reversed': { chrome: '100', edge: '101', firefox: '100', ios: '14.5-14.8', safari: '15.4' },
  'esnext.typed-array.to-sorted': { chrome: '100', edge: '101', firefox: '100', ios: '14.5-14.8', safari: '15.4' },
  'esnext.typed-array.to-spliced': { chrome: '100', edge: '101', firefox: '100', ios: '14.5-14.8', safari: '15.4' },
  'esnext.typed-array.with': { chrome: '100', edge: '101', firefox: '100', ios: '14.5-14.8', safari: '15.4' },
  'web.dom-exception.stack': { chrome: '100', edge: '101', ios: '14.5-14.8', safari: '15.4' },
  'web.immediate': { chrome: '100', edge: '101', firefox: '100', ios: '14.5-14.8', safari: '15.4' },
  'web.structured-clone': { chrome: '100', edge: '101', firefox: '100', ios: '14.5-14.8', safari: '15.4' }
}
*/
```

### `targets` option
`targets` could be [a `browserslist` query](https://github.com/browserslist/browserslist) or a targets object that specifies minimum environment versions to support:
```js
// browserslist query:
'defaults, not IE 11, maintained node versions';
// object (sure, all those fields optional):
({
  android: '4.0',         // Android WebView version
  bun: '0.1.2',           // Bun version
  chrome: '38',           // Chrome version
  'chrome-android': '18', // Chrome for Android version
  deno: '1.12',           // Deno version
  edge: '13',             // Edge version
  electron: '5.0',        // Electron framework version
  firefox: '15',          // Firefox version
  'firefox-android': '4', // Firefox for Android version
  hermes: '0.11',         // Hermes version
  ie: '8',                // Internet Explorer version
  ios: '13.0',            // iOS Safari version
  node: 'current',        // NodeJS version, you can use 'current' for set it to currently used
  opera: '12',            // Opera version
  'opera-android': '7',   // Opera for Android version
  phantom: '1.9',         // PhantomJS headless browser version
  quest: '5.0',           // Meta Quest Browser version
  'react-native': '0.70', // React Native version (default Hermes engine)
  rhino: '1.7.13',        // Rhino engine version
  safari: '14.0',         // Safari version
  samsung: '14.0',        // Samsung Internet version
  /**
   * true option set target to minimum supporting ES Modules versions of all browsers, ignoring `browsers` target.
   * 'intersect' option intersects the `browsers` target and `browserslist`'s targets. The maximum version will be used.
   */
  esmodules: true | 'intersect',
  browsers: '> 0.25%',    // Browserslist query or object with target browsers
});
```

### Additional API:

```js
// equals of of the method from the example above
require('core-js-compat/compat')({ targets, modules, version }); // => { list: Array<ModuleName>, targets: { [ModuleName]: { [EngineName]: EngineVersion } } }
// or
require('core-js-compat').compat({ targets, modules, version }); // => { list: Array<ModuleName>, targets: { [ModuleName]: { [EngineName]: EngineVersion } } }

// full compat data:
require('core-js-compat/data'); // => { [ModuleName]: { [EngineName]: EngineVersion } }
// or
require('core-js-compat').data; // => { [ModuleName]: { [EngineName]: EngineVersion } }

// map of modules by `core-js` entry points:
require('core-js-compat/entries'); // => { [EntryPoint]: Array<ModuleName> }
// or
require('core-js-compat').entries; // => { [EntryPoint]: Array<ModuleName> }

// full list of modules:
require('core-js-compat/modules'); // => Array<ModuleName>
// or
require('core-js-compat').modules; // => Array<ModuleName>

// the subset of modules which available in the passed `core-js` version:
require('core-js-compat/get-modules-list-for-target-version')('3.43'); // => Array<ModuleName>
// or
require('core-js-compat').getModulesListForTargetVersion('3.43'); // => Array<ModuleName>
```

If you wanna help to improve this data, you could take a look at the related section of [`CONTRIBUTING.md`](https://github.com/zloirock/core-js/blob/master/CONTRIBUTING.md#how-to-update-core-js-compat-data). The visualization of compatibility data and the browser tests runner is available [here](http://zloirock.github.io/core-js/compat/), the example:

![compat-table](https://user-images.githubusercontent.com/2213682/217452234-ccdcfc5a-c7d3-40d1-ab3f-86902315b8c3.png)


---

File name: node_modules\core-js-compat\shared.d.ts

Code:
export type ModuleName = string;

export type Target =
  | 'android'
  | 'bun'
  | 'chrome'
  | 'chrome-android'
  | 'deno'
  | 'edge'
  | 'electron'
  | 'firefox'
  | 'firefox-android'
  | 'hermes'
  | 'ie'
  | 'ios'
  | 'node'
  | 'opera'
  | 'opera-android'
  | 'phantom'
  | 'quest'
  | 'react-native'
  | 'rhino'
  | 'safari'
  | 'samsung'
  /** `quest` alias */
  | 'oculus'
  /** `react-native` alias */
  | 'react'
  /** @deprecated use `opera-android` instead */
  | 'opera_mobile';

export type TargetVersion = string;


---

File name: node_modules\core-js-compat\targets-parser.js

Code:
'use strict';
const browserslist = require('browserslist');
const { compare, has } = require('./helpers');
const external = require('./external');

const aliases = new Map([
  ['and_chr', 'chrome-android'],
  ['and_ff', 'firefox-android'],
  ['ie_mob', 'ie'],
  ['ios_saf', 'ios'],
  ['oculus', 'quest'],
  ['op_mob', 'opera-android'],
  // TODO: Remove from `core-js@4`
  ['opera_mobile', 'opera-android'],
  ['react', 'react-native'],
  ['reactnative', 'react-native'],
]);

const validTargets = new Set([
  'android',
  'bun',
  'chrome',
  'chrome-android',
  'deno',
  'edge',
  'electron',
  'firefox',
  'firefox-android',
  'hermes',
  'ie',
  'ios',
  'node',
  'opera',
  'opera-android',
  'phantom',
  'quest',
  'react-native',
  'rhino',
  'safari',
  'samsung',
]);

const toLowerKeys = function (object) {
  return Object.entries(object).reduce((accumulator, [key, value]) => {
    accumulator[key.toLowerCase()] = value;
    return accumulator;
  }, {});
};

module.exports = function (targets) {
  const { browsers, esmodules, node, ...rest } = (typeof targets != 'object' || Array.isArray(targets))
    ? { browsers: targets } : toLowerKeys(targets);

  const list = Object.entries(rest);

  const normalizedESModules = esmodules === 'intersect' ? 'intersect' : !!esmodules;

  if (browsers && normalizedESModules !== true) {
    if (typeof browsers == 'string' || Array.isArray(browsers)) {
      list.push(...browserslist(browsers).map(it => it.split(' ')));
    } else {
      list.push(...Object.entries(browsers));
    }
  }
  if (normalizedESModules === true) {
    list.push(...Object.entries(external.modules));
  }
  if (node) {
    list.push(['node', node === 'current' ? process.versions.node : node]);
  }

  const normalized = list.map(([engine, version]) => {
    if (has(browserslist.aliases, engine)) {
      engine = browserslist.aliases[engine];
    }
    if (aliases.has(engine)) {
      engine = aliases.get(engine);
    }
    return [engine, String(version)];
  }).filter(([engine]) => {
    return validTargets.has(engine);
  }).sort(([a], [b]) => {
    return a < b ? -1 : a > b ? 1 : 0;
  });

  const reduced = new Map();
  const operator = normalizedESModules === 'intersect' ? '>' : '<=';
  for (const [engine, version] of normalized) {
    if (!reduced.has(engine) || compare(version, operator, reduced.get(engine))) {
      reduced.set(engine, version);
    }
  }

  return reduced;
};


---

File name: node_modules\create-jest\bin\create-jest.js

Code:
#!/usr/bin/env node
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
require('..').runCLI();


---

File name: node_modules\create-jest\build\errors.js

Code:
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.NotFoundPackageJsonError = exports.MalformedPackageJsonError = void 0;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

class NotFoundPackageJsonError extends Error {
  constructor(rootDir) {
    super(`Could not find a "package.json" file in ${rootDir}`);
    this.name = '';
    // eslint-disable-next-line @typescript-eslint/no-empty-function
    Error.captureStackTrace(this, () => {});
  }
}
exports.NotFoundPackageJsonError = NotFoundPackageJsonError;
class MalformedPackageJsonError extends Error {
  constructor(packageJsonPath) {
    super(`There is malformed json in ${packageJsonPath}`);
    this.name = '';
    // eslint-disable-next-line @typescript-eslint/no-empty-function
    Error.captureStackTrace(this, () => {});
  }
}
exports.MalformedPackageJsonError = MalformedPackageJsonError;


---

File name: node_modules\create-jest\build\generateConfigFile.js

Code:
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.default = void 0;
function _jestConfig() {
  const data = require('jest-config');
  _jestConfig = function () {
    return data;
  };
  return data;
}
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

const stringifyOption = (option, map, linePrefix = '') => {
  const description = _jestConfig().descriptions[option];
  const optionDescription =
    description != null && description.length > 0 ? `  // ${description}` : '';
  const stringifiedObject = `${option}: ${JSON.stringify(
    map[option],
    null,
    2
  )}`;
  return `${optionDescription}\n${stringifiedObject
    .split('\n')
    .map(line => `  ${linePrefix}${line}`)
    .join('\n')},`;
};
const generateConfigFile = (results, generateEsm = false) => {
  const {useTypescript, coverage, coverageProvider, clearMocks, environment} =
    results;
  const overrides = {};
  if (coverage) {
    Object.assign(overrides, {
      collectCoverage: true,
      coverageDirectory: 'coverage'
    });
  }
  if (coverageProvider === 'v8') {
    Object.assign(overrides, {
      coverageProvider: 'v8'
    });
  }
  if (environment === 'jsdom') {
    Object.assign(overrides, {
      testEnvironment: 'jsdom'
    });
  }
  if (clearMocks) {
    Object.assign(overrides, {
      clearMocks: true
    });
  }
  const overrideKeys = Object.keys(overrides);
  const properties = [];
  for (const option in _jestConfig().descriptions) {
    const opt = option;
    if (overrideKeys.includes(opt)) {
      properties.push(stringifyOption(opt, overrides));
    } else {
      properties.push(stringifyOption(opt, _jestConfig().defaults, '// '));
    }
  }
  const configHeaderMessage = `/**
 * For a detailed explanation regarding each configuration property, visit:
 * https://jestjs.io/docs/configuration
 */
`;
  const jsDeclaration = `/** @type {import('jest').Config} */
const config = {`;
  const tsDeclaration = `import type {Config} from 'jest';

const config: Config = {`;
  const cjsExport = 'module.exports = config;';
  const esmExport = 'export default config;';
  return [
    configHeaderMessage,
    useTypescript ? tsDeclaration : jsDeclaration,
    properties.join('\n\n'),
    '};\n',
    useTypescript || generateEsm ? esmExport : cjsExport,
    ''
  ].join('\n');
};
var _default = generateConfigFile;
exports.default = _default;


---

File name: node_modules\create-jest\build\index.d.ts

Code:
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

export declare function runCLI(): Promise<void>;

export declare function runCreate(rootDir?: string): Promise<void>;

export {};


---

File name: node_modules\create-jest\build\index.js

Code:
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
Object.defineProperty(exports, 'runCLI', {
  enumerable: true,
  get: function () {
    return _runCreate.runCLI;
  }
});
Object.defineProperty(exports, 'runCreate', {
  enumerable: true,
  get: function () {
    return _runCreate.runCreate;
  }
});
var _runCreate = require('./runCreate');


---

File name: node_modules\create-jest\build\modifyPackageJson.js

Code:
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.default = void 0;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

const modifyPackageJson = ({projectPackageJson, shouldModifyScripts}) => {
  if (shouldModifyScripts) {
    projectPackageJson.scripts
      ? (projectPackageJson.scripts.test = 'jest')
      : (projectPackageJson.scripts = {
          test: 'jest'
        });
  }
  delete projectPackageJson.jest;
  return `${JSON.stringify(projectPackageJson, null, 2)}\n`;
};
var _default = modifyPackageJson;
exports.default = _default;


---

File name: node_modules\create-jest\build\questions.js

Code:
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.testScriptQuestion = exports.default = void 0;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

const defaultQuestions = [
  {
    initial: false,
    message: 'Would you like to use Typescript for the configuration file?',
    name: 'useTypescript',
    type: 'confirm'
  },
  {
    choices: [
      {
        title: 'node',
        value: 'node'
      },
      {
        title: 'jsdom (browser-like)',
        value: 'jsdom'
      }
    ],
    initial: 0,
    message: 'Choose the test environment that will be used for testing',
    name: 'environment',
    type: 'select'
  },
  {
    initial: false,
    message: 'Do you want Jest to add coverage reports?',
    name: 'coverage',
    type: 'confirm'
  },
  {
    choices: [
      {
        title: 'v8',
        value: 'v8'
      },
      {
        title: 'babel',
        value: 'babel'
      }
    ],
    initial: 0,
    message: 'Which provider should be used to instrument code for coverage?',
    name: 'coverageProvider',
    type: 'select'
  },
  {
    initial: false,
    message:
      'Automatically clear mock calls, instances, contexts and results before every test?',
    name: 'clearMocks',
    type: 'confirm'
  }
];
var _default = defaultQuestions;
exports.default = _default;
const testScriptQuestion = {
  initial: true,
  message:
    'Would you like to use Jest when running "test" script in "package.json"?',
  name: 'scripts',
  type: 'confirm'
};
exports.testScriptQuestion = testScriptQuestion;


---

File name: node_modules\create-jest\build\runCreate.js

Code:
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.runCLI = runCLI;
exports.runCreate = runCreate;
function path() {
  const data = _interopRequireWildcard(require('path'));
  path = function () {
    return data;
  };
  return data;
}
function _chalk() {
  const data = _interopRequireDefault(require('chalk'));
  _chalk = function () {
    return data;
  };
  return data;
}
function _exit() {
  const data = _interopRequireDefault(require('exit'));
  _exit = function () {
    return data;
  };
  return data;
}
function fs() {
  const data = _interopRequireWildcard(require('graceful-fs'));
  fs = function () {
    return data;
  };
  return data;
}
function _prompts() {
  const data = _interopRequireDefault(require('prompts'));
  _prompts = function () {
    return data;
  };
  return data;
}
function _jestConfig() {
  const data = require('jest-config');
  _jestConfig = function () {
    return data;
  };
  return data;
}
function _jestUtil() {
  const data = require('jest-util');
  _jestUtil = function () {
    return data;
  };
  return data;
}
var _errors = require('./errors');
var _generateConfigFile = _interopRequireDefault(
  require('./generateConfigFile')
);
var _modifyPackageJson = _interopRequireDefault(require('./modifyPackageJson'));
var _questions = _interopRequireWildcard(require('./questions'));
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {default: obj};
}
function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== 'function') return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function (nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}
function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || (typeof obj !== 'object' && typeof obj !== 'function')) {
    return {default: obj};
  }
  var cache = _getRequireWildcardCache(nodeInterop);
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor =
    Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (key !== 'default' && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor
        ? Object.getOwnPropertyDescriptor(obj, key)
        : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }
  newObj.default = obj;
  if (cache) {
    cache.set(obj, newObj);
  }
  return newObj;
}
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

const {
  JEST_CONFIG_BASE_NAME,
  JEST_CONFIG_EXT_MJS,
  JEST_CONFIG_EXT_JS,
  JEST_CONFIG_EXT_TS,
  JEST_CONFIG_EXT_ORDER,
  PACKAGE_JSON
} = _jestConfig().constants;
const getConfigFilename = ext => JEST_CONFIG_BASE_NAME + ext;
async function runCLI() {
  try {
    const rootDir = process.argv[2];
    await runCreate(rootDir);
  } catch (error) {
    (0, _jestUtil().clearLine)(process.stderr);
    (0, _jestUtil().clearLine)(process.stdout);
    if (error instanceof Error && Boolean(error?.stack)) {
      console.error(_chalk().default.red(error.stack));
    } else {
      console.error(_chalk().default.red(error));
    }
    (0, _exit().default)(1);
    throw error;
  }
}
async function runCreate(rootDir = process.cwd()) {
  rootDir = (0, _jestUtil().tryRealpath)(rootDir);
  // prerequisite checks
  const projectPackageJsonPath = path().join(rootDir, PACKAGE_JSON);
  if (!fs().existsSync(projectPackageJsonPath)) {
    throw new _errors.NotFoundPackageJsonError(rootDir);
  }
  const questions = _questions.default.slice(0);
  let hasJestProperty = false;
  let projectPackageJson;
  try {
    projectPackageJson = JSON.parse(
      fs().readFileSync(projectPackageJsonPath, 'utf-8')
    );
  } catch {
    throw new _errors.MalformedPackageJsonError(projectPackageJsonPath);
  }
  if (projectPackageJson.jest) {
    hasJestProperty = true;
  }
  const existingJestConfigExt = JEST_CONFIG_EXT_ORDER.find(ext =>
    fs().existsSync(path().join(rootDir, getConfigFilename(ext)))
  );
  if (hasJestProperty || existingJestConfigExt != null) {
    const result = await (0, _prompts().default)({
      initial: true,
      message:
        'It seems that you already have a jest configuration, do you want to override it?',
      name: 'continue',
      type: 'confirm'
    });
    if (!result.continue) {
      console.log();
      console.log('Aborting...');
      return;
    }
  }

  // Add test script installation only if needed
  if (
    !projectPackageJson.scripts ||
    projectPackageJson.scripts.test !== 'jest'
  ) {
    questions.unshift(_questions.testScriptQuestion);
  }

  // Start the init process
  console.log();
  console.log(
    _chalk().default.underline(
      'The following questions will help Jest to create a suitable configuration for your project\n'
    )
  );
  let promptAborted = false;
  const results = await (0, _prompts().default)(questions, {
    onCancel: () => {
      promptAborted = true;
    }
  });
  if (promptAborted) {
    console.log();
    console.log('Aborting...');
    return;
  }

  // Determine if Jest should use JS or TS for the config file
  const jestConfigFileExt = results.useTypescript
    ? JEST_CONFIG_EXT_TS
    : projectPackageJson.type === 'module'
    ? JEST_CONFIG_EXT_MJS
    : JEST_CONFIG_EXT_JS;

  // Determine Jest config path
  const jestConfigPath =
    existingJestConfigExt != null
      ? getConfigFilename(existingJestConfigExt)
      : path().join(rootDir, getConfigFilename(jestConfigFileExt));
  const shouldModifyScripts = results.scripts;
  if (shouldModifyScripts || hasJestProperty) {
    const modifiedPackageJson = (0, _modifyPackageJson.default)({
      projectPackageJson,
      shouldModifyScripts
    });
    fs().writeFileSync(projectPackageJsonPath, modifiedPackageJson);
    console.log('');
    console.log(
      `✏️  Modified ${_chalk().default.cyan(projectPackageJsonPath)}`
    );
  }
  const generatedConfig = (0, _generateConfigFile.default)(
    results,
    projectPackageJson.type === 'module' ||
      jestConfigPath.endsWith(JEST_CONFIG_EXT_MJS)
  );
  fs().writeFileSync(jestConfigPath, generatedConfig);
  console.log('');
  console.log(
    `📝  Configuration file created at ${_chalk().default.cyan(jestConfigPath)}`
  );
}


---

File name: node_modules\create-jest\build\types.js

Code:
'use strict';


---

File name: node_modules\create-jest\package.json

Code:
{
  "name": "create-jest",
  "description": "Create a new Jest project",
  "version": "29.7.0",
  "repository": {
    "type": "git",
    "url": "https://github.com/jestjs/jest.git",
    "directory": "packages/create-jest"
  },
  "license": "MIT",
  "bin": "./bin/create-jest.js",
  "main": "./build/index.js",
  "types": "./build/index.d.ts",
  "exports": {
    ".": {
      "types": "./build/index.d.ts",
      "default": "./build/index.js"
    },
    "./package.json": "./package.json",
    "./bin/create-jest": "./bin/create-jest.js"
  },
  "dependencies": {
    "@jest/types": "^29.6.3",
    "chalk": "^4.0.0",
    "exit": "^0.1.2",
    "graceful-fs": "^4.2.9",
    "jest-config": "^29.7.0",
    "jest-util": "^29.7.0",
    "prompts": "^2.0.1"
  },
  "engines": {
    "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
  },
  "publishConfig": {
    "access": "public"
  },
  "devDependencies": {
    "@types/exit": "^0.1.30",
    "@types/graceful-fs": "^4.1.3",
    "@types/prompts": "^2.0.1"
  },
  "gitHead": "4e56991693da7cd4c3730dc3579a1dd1403ee630"
}


---

File name: node_modules\create-jest\README.md

Code:
# create-jest

> Getting started with Jest with a single command

```bash
npm init jest@latest
# Or for Yarn
yarn create jest
# Or for pnpm
pnpm create jest
```


---

File name: node_modules\cross-spawn\index.js

Code:
'use strict';

const cp = require('child_process');
const parse = require('./lib/parse');
const enoent = require('./lib/enoent');

function spawn(command, args, options) {
    // Parse the arguments
    const parsed = parse(command, args, options);

    // Spawn the child process
    const spawned = cp.spawn(parsed.command, parsed.args, parsed.options);

    // Hook into child process "exit" event to emit an error if the command
    // does not exists, see: https://github.com/IndigoUnited/node-cross-spawn/issues/16
    enoent.hookChildProcess(spawned, parsed);

    return spawned;
}

function spawnSync(command, args, options) {
    // Parse the arguments
    const parsed = parse(command, args, options);

    // Spawn the child process
    const result = cp.spawnSync(parsed.command, parsed.args, parsed.options);

    // Analyze if the command does not exist, see: https://github.com/IndigoUnited/node-cross-spawn/issues/16
    result.error = result.error || enoent.verifyENOENTSync(result.status, parsed);

    return result;
}

module.exports = spawn;
module.exports.spawn = spawn;
module.exports.sync = spawnSync;

module.exports._parse = parse;
module.exports._enoent = enoent;


---

File name: node_modules\cross-spawn\lib\enoent.js

Code:
'use strict';

const isWin = process.platform === 'win32';

function notFoundError(original, syscall) {
    return Object.assign(new Error(`${syscall} ${original.command} ENOENT`), {
        code: 'ENOENT',
        errno: 'ENOENT',
        syscall: `${syscall} ${original.command}`,
        path: original.command,
        spawnargs: original.args,
    });
}

function hookChildProcess(cp, parsed) {
    if (!isWin) {
        return;
    }

    const originalEmit = cp.emit;

    cp.emit = function (name, arg1) {
        // If emitting "exit" event and exit code is 1, we need to check if
        // the command exists and emit an "error" instead
        // See https://github.com/IndigoUnited/node-cross-spawn/issues/16
        if (name === 'exit') {
            const err = verifyENOENT(arg1, parsed);

            if (err) {
                return originalEmit.call(cp, 'error', err);
            }
        }

        return originalEmit.apply(cp, arguments); // eslint-disable-line prefer-rest-params
    };
}

function verifyENOENT(status, parsed) {
    if (isWin && status === 1 && !parsed.file) {
        return notFoundError(parsed.original, 'spawn');
    }

    return null;
}

function verifyENOENTSync(status, parsed) {
    if (isWin && status === 1 && !parsed.file) {
        return notFoundError(parsed.original, 'spawnSync');
    }

    return null;
}

module.exports = {
    hookChildProcess,
    verifyENOENT,
    verifyENOENTSync,
    notFoundError,
};


---

File name: node_modules\cross-spawn\lib\parse.js

Code:
'use strict';

const path = require('path');
const resolveCommand = require('./util/resolveCommand');
const escape = require('./util/escape');
const readShebang = require('./util/readShebang');

const isWin = process.platform === 'win32';
const isExecutableRegExp = /\.(?:com|exe)$/i;
const isCmdShimRegExp = /node_modules[\\/].bin[\\/][^\\/]+\.cmd$/i;

function detectShebang(parsed) {
    parsed.file = resolveCommand(parsed);

    const shebang = parsed.file && readShebang(parsed.file);

    if (shebang) {
        parsed.args.unshift(parsed.file);
        parsed.command = shebang;

        return resolveCommand(parsed);
    }

    return parsed.file;
}

function parseNonShell(parsed) {
    if (!isWin) {
        return parsed;
    }

    // Detect & add support for shebangs
    const commandFile = detectShebang(parsed);

    // We don't need a shell if the command filename is an executable
    const needsShell = !isExecutableRegExp.test(commandFile);

    // If a shell is required, use cmd.exe and take care of escaping everything correctly
    // Note that `forceShell` is an hidden option used only in tests
    if (parsed.options.forceShell || needsShell) {
        // Need to double escape meta chars if the command is a cmd-shim located in `node_modules/.bin/`
        // The cmd-shim simply calls execute the package bin file with NodeJS, proxying any argument
        // Because the escape of metachars with ^ gets interpreted when the cmd.exe is first called,
        // we need to double escape them
        const needsDoubleEscapeMetaChars = isCmdShimRegExp.test(commandFile);

        // Normalize posix paths into OS compatible paths (e.g.: foo/bar -> foo\bar)
        // This is necessary otherwise it will always fail with ENOENT in those cases
        parsed.command = path.normalize(parsed.command);

        // Escape command & arguments
        parsed.command = escape.command(parsed.command);
        parsed.args = parsed.args.map((arg) => escape.argument(arg, needsDoubleEscapeMetaChars));

        const shellCommand = [parsed.command].concat(parsed.args).join(' ');

        parsed.args = ['/d', '/s', '/c', `"${shellCommand}"`];
        parsed.command = process.env.comspec || 'cmd.exe';
        parsed.options.windowsVerbatimArguments = true; // Tell node's spawn that the arguments are already escaped
    }

    return parsed;
}

function parse(command, args, options) {
    // Normalize arguments, similar to nodejs
    if (args && !Array.isArray(args)) {
        options = args;
        args = null;
    }

    args = args ? args.slice(0) : []; // Clone array to avoid changing the original
    options = Object.assign({}, options); // Clone object to avoid changing the original

    // Build our parsed object
    const parsed = {
        command,
        args,
        options,
        file: undefined,
        original: {
            command,
            args,
        },
    };

    // Delegate further parsing to shell or non-shell
    return options.shell ? parsed : parseNonShell(parsed);
}

module.exports = parse;


---

File name: node_modules\cross-spawn\lib\util\escape.js

Code:
'use strict';

// See http://www.robvanderwoude.com/escapechars.php
const metaCharsRegExp = /([()\][%!^"`<>&|;, *?])/g;

function escapeCommand(arg) {
    // Escape meta chars
    arg = arg.replace(metaCharsRegExp, '^$1');

    return arg;
}

function escapeArgument(arg, doubleEscapeMetaChars) {
    // Convert to string
    arg = `${arg}`;

    // Algorithm below is based on https://qntm.org/cmd
    // It's slightly altered to disable JS backtracking to avoid hanging on specially crafted input
    // Please see https://github.com/moxystudio/node-cross-spawn/pull/160 for more information

    // Sequence of backslashes followed by a double quote:
    // double up all the backslashes and escape the double quote
    arg = arg.replace(/(?=(\\+?)?)\1"/g, '$1$1\\"');

    // Sequence of backslashes followed by the end of the string
    // (which will become a double quote later):
    // double up all the backslashes
    arg = arg.replace(/(?=(\\+?)?)\1$/, '$1$1');

    // All other backslashes occur literally

    // Quote the whole thing:
    arg = `"${arg}"`;

    // Escape meta chars
    arg = arg.replace(metaCharsRegExp, '^$1');

    // Double escape meta chars if necessary
    if (doubleEscapeMetaChars) {
        arg = arg.replace(metaCharsRegExp, '^$1');
    }

    return arg;
}

module.exports.command = escapeCommand;
module.exports.argument = escapeArgument;


---

File name: node_modules\cross-spawn\lib\util\readShebang.js

Code:
'use strict';

const fs = require('fs');
const shebangCommand = require('shebang-command');

function readShebang(command) {
    // Read the first 150 bytes from the file
    const size = 150;
    const buffer = Buffer.alloc(size);

    let fd;

    try {
        fd = fs.openSync(command, 'r');
        fs.readSync(fd, buffer, 0, size, 0);
        fs.closeSync(fd);
    } catch (e) { /* Empty */ }

    // Attempt to extract shebang (null is returned if not a shebang)
    return shebangCommand(buffer.toString());
}

module.exports = readShebang;


---

File name: node_modules\cross-spawn\lib\util\resolveCommand.js

Code:
'use strict';

const path = require('path');
const which = require('which');
const getPathKey = require('path-key');

function resolveCommandAttempt(parsed, withoutPathExt) {
    const env = parsed.options.env || process.env;
    const cwd = process.cwd();
    const hasCustomCwd = parsed.options.cwd != null;
    // Worker threads do not have process.chdir()
    const shouldSwitchCwd = hasCustomCwd && process.chdir !== undefined && !process.chdir.disabled;

    // If a custom `cwd` was specified, we need to change the process cwd
    // because `which` will do stat calls but does not support a custom cwd
    if (shouldSwitchCwd) {
        try {
            process.chdir(parsed.options.cwd);
        } catch (err) {
            /* Empty */
        }
    }

    let resolved;

    try {
        resolved = which.sync(parsed.command, {
            path: env[getPathKey({ env })],
            pathExt: withoutPathExt ? path.delimiter : undefined,
        });
    } catch (e) {
        /* Empty */
    } finally {
        if (shouldSwitchCwd) {
            process.chdir(cwd);
        }
    }

    // If we successfully resolved, ensure that an absolute path is returned
    // Note that when a custom `cwd` was used, we need to resolve to an absolute path based on it
    if (resolved) {
        resolved = path.resolve(hasCustomCwd ? parsed.options.cwd : '', resolved);
    }

    return resolved;
}

function resolveCommand(parsed) {
    return resolveCommandAttempt(parsed) || resolveCommandAttempt(parsed, true);
}

module.exports = resolveCommand;


---

File name: node_modules\cross-spawn\package.json

Code:
{
  "name": "cross-spawn",
  "version": "7.0.6",
  "description": "Cross platform child_process#spawn and child_process#spawnSync",
  "keywords": [
    "spawn",
    "spawnSync",
    "windows",
    "cross-platform",
    "path-ext",
    "shebang",
    "cmd",
    "execute"
  ],
  "author": "André Cruz <andre@moxy.studio>",
  "homepage": "https://github.com/moxystudio/node-cross-spawn",
  "repository": {
    "type": "git",
    "url": "git@github.com:moxystudio/node-cross-spawn.git"
  },
  "license": "MIT",
  "main": "index.js",
  "files": [
    "lib"
  ],
  "scripts": {
    "lint": "eslint .",
    "test": "jest --env node --coverage",
    "prerelease": "npm t && npm run lint",
    "release": "standard-version",
    "postrelease": "git push --follow-tags origin HEAD && npm publish"
  },
  "husky": {
    "hooks": {
      "commit-msg": "commitlint -E HUSKY_GIT_PARAMS",
      "pre-commit": "lint-staged"
    }
  },
  "lint-staged": {
    "*.js": [
      "eslint --fix",
      "git add"
    ]
  },
  "commitlint": {
    "extends": [
      "@commitlint/config-conventional"
    ]
  },
  "dependencies": {
    "path-key": "^3.1.0",
    "shebang-command": "^2.0.0",
    "which": "^2.0.1"
  },
  "devDependencies": {
    "@commitlint/cli": "^8.1.0",
    "@commitlint/config-conventional": "^8.1.0",
    "babel-core": "^6.26.3",
    "babel-jest": "^24.9.0",
    "babel-preset-moxy": "^3.1.0",
    "eslint": "^5.16.0",
    "eslint-config-moxy": "^7.1.0",
    "husky": "^3.0.5",
    "jest": "^24.9.0",
    "lint-staged": "^9.2.5",
    "mkdirp": "^0.5.1",
    "rimraf": "^3.0.0",
    "standard-version": "^9.5.0"
  },
  "engines": {
    "node": ">= 8"
  }
}


---

File name: node_modules\cross-spawn\README.md

Code:
# cross-spawn

[![NPM version][npm-image]][npm-url] [![Downloads][downloads-image]][npm-url] [![Build Status][ci-image]][ci-url] [![Build status][appveyor-image]][appveyor-url]

[npm-url]:https://npmjs.org/package/cross-spawn
[downloads-image]:https://img.shields.io/npm/dm/cross-spawn.svg
[npm-image]:https://img.shields.io/npm/v/cross-spawn.svg
[ci-url]:https://github.com/moxystudio/node-cross-spawn/actions/workflows/ci.yaml
[ci-image]:https://github.com/moxystudio/node-cross-spawn/actions/workflows/ci.yaml/badge.svg
[appveyor-url]:https://ci.appveyor.com/project/satazor/node-cross-spawn
[appveyor-image]:https://img.shields.io/appveyor/ci/satazor/node-cross-spawn/master.svg

A cross platform solution to node's spawn and spawnSync.

## Installation

Node.js version 8 and up:
`$ npm install cross-spawn`

Node.js version 7 and under:
`$ npm install cross-spawn@6`

## Why

Node has issues when using spawn on Windows:

- It ignores [PATHEXT](https://github.com/joyent/node/issues/2318)
- It does not support [shebangs](https://en.wikipedia.org/wiki/Shebang_(Unix))
- Has problems running commands with [spaces](https://github.com/nodejs/node/issues/7367)
- Has problems running commands with posix relative paths (e.g.: `./my-folder/my-executable`)
- Has an [issue](https://github.com/moxystudio/node-cross-spawn/issues/82) with command shims (files in `node_modules/.bin/`), where arguments with quotes and parenthesis would result in [invalid syntax error](https://github.com/moxystudio/node-cross-spawn/blob/e77b8f22a416db46b6196767bcd35601d7e11d54/test/index.test.js#L149)
- No `options.shell` support on node `<v4.8`

All these issues are handled correctly by `cross-spawn`.
There are some known modules, such as [win-spawn](https://github.com/ForbesLindesay/win-spawn), that try to solve this but they are either broken or provide faulty escaping of shell arguments.


## Usage

Exactly the same way as node's [`spawn`](https://nodejs.org/api/child_process.html#child_process_child_process_spawn_command_args_options) or [`spawnSync`](https://nodejs.org/api/child_process.html#child_process_child_process_spawnsync_command_args_options), so it's a drop in replacement.


```js
const spawn = require('cross-spawn');

// Spawn NPM asynchronously
const child = spawn('npm', ['list', '-g', '-depth', '0'], { stdio: 'inherit' });

// Spawn NPM synchronously
const result = spawn.sync('npm', ['list', '-g', '-depth', '0'], { stdio: 'inherit' });
```


## Caveats

### Using `options.shell` as an alternative to `cross-spawn`

Starting from node `v4.8`, `spawn` has a `shell` option that allows you run commands from within a shell. This new option solves
the [PATHEXT](https://github.com/joyent/node/issues/2318) issue but:

- It's not supported in node `<v4.8`
- You must manually escape the command and arguments which is very error prone, specially when passing user input
- There are a lot of other unresolved issues from the [Why](#why) section that you must take into account

If you are using the `shell` option to spawn a command in a cross platform way, consider using `cross-spawn` instead. You have been warned.

### `options.shell` support

While `cross-spawn` adds support for `options.shell` in node `<v4.8`, all of its enhancements are disabled.

This mimics the Node.js behavior. More specifically, the command and its arguments will not be automatically escaped nor shebang support will be offered. This is by design because if you are using `options.shell` you are probably targeting a specific platform anyway and you don't want things to get into your way.

### Shebangs support

While `cross-spawn` handles shebangs on Windows, its support is limited. More specifically, it just supports `#!/usr/bin/env <program>` where `<program>` must not contain any arguments.   
If you would like to have the shebang support improved, feel free to contribute via a pull-request.

Remember to always test your code on Windows!


## Tests

`$ npm test`   
`$ npm test -- --watch` during development


## License

Released under the [MIT License](https://www.opensource.org/licenses/mit-license.php).


---

File name: node_modules\css.escape\css.escape.js

Code:
/*! https://mths.be/cssescape v1.5.1 by @mathias | MIT license */
;(function(root, factory) {
	// https://github.com/umdjs/umd/blob/master/returnExports.js
	if (typeof exports == 'object') {
		// For Node.js.
		module.exports = factory(root);
	} else if (typeof define == 'function' && define.amd) {
		// For AMD. Register as an anonymous module.
		define([], factory.bind(root, root));
	} else {
		// For browser globals (not exposing the function separately).
		factory(root);
	}
}(typeof global != 'undefined' ? global : this, function(root) {

	if (root.CSS && root.CSS.escape) {
		return root.CSS.escape;
	}

	// https://drafts.csswg.org/cssom/#serialize-an-identifier
	var cssEscape = function(value) {
		if (arguments.length == 0) {
			throw new TypeError('`CSS.escape` requires an argument.');
		}
		var string = String(value);
		var length = string.length;
		var index = -1;
		var codeUnit;
		var result = '';
		var firstCodeUnit = string.charCodeAt(0);
		while (++index < length) {
			codeUnit = string.charCodeAt(index);
			// Note: there’s no need to special-case astral symbols, surrogate
			// pairs, or lone surrogates.

			// If the character is NULL (U+0000), then the REPLACEMENT CHARACTER
			// (U+FFFD).
			if (codeUnit == 0x0000) {
				result += '\uFFFD';
				continue;
			}

			if (
				// If the character is in the range [\1-\1F] (U+0001 to U+001F) or is
				// U+007F, […]
				(codeUnit >= 0x0001 && codeUnit <= 0x001F) || codeUnit == 0x007F ||
				// If the character is the first character and is in the range [0-9]
				// (U+0030 to U+0039), […]
				(index == 0 && codeUnit >= 0x0030 && codeUnit <= 0x0039) ||
				// If the character is the second character and is in the range [0-9]
				// (U+0030 to U+0039) and the first character is a `-` (U+002D), […]
				(
					index == 1 &&
					codeUnit >= 0x0030 && codeUnit <= 0x0039 &&
					firstCodeUnit == 0x002D
				)
			) {
				// https://drafts.csswg.org/cssom/#escape-a-character-as-code-point
				result += '\\' + codeUnit.toString(16) + ' ';
				continue;
			}

			if (
				// If the character is the first character and is a `-` (U+002D), and
				// there is no second character, […]
				index == 0 &&
				length == 1 &&
				codeUnit == 0x002D
			) {
				result += '\\' + string.charAt(index);
				continue;
			}

			// If the character is not handled by one of the above rules and is
			// greater than or equal to U+0080, is `-` (U+002D) or `_` (U+005F), or
			// is in one of the ranges [0-9] (U+0030 to U+0039), [A-Z] (U+0041 to
			// U+005A), or [a-z] (U+0061 to U+007A), […]
			if (
				codeUnit >= 0x0080 ||
				codeUnit == 0x002D ||
				codeUnit == 0x005F ||
				codeUnit >= 0x0030 && codeUnit <= 0x0039 ||
				codeUnit >= 0x0041 && codeUnit <= 0x005A ||
				codeUnit >= 0x0061 && codeUnit <= 0x007A
			) {
				// the character itself
				result += string.charAt(index);
				continue;
			}

			// Otherwise, the escaped character.
			// https://drafts.csswg.org/cssom/#escape-a-character
			result += '\\' + string.charAt(index);

		}
		return result;
	};

	if (!root.CSS) {
		root.CSS = {};
	}

	root.CSS.escape = cssEscape;
	return cssEscape;

}));


---

File name: node_modules\css.escape\LICENSE-MIT.txt

Code:
Copyright Mathias Bynens <https://mathiasbynens.be/>

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


---

File name: node_modules\css.escape\package.json

Code:
{
	"name": "css.escape",
	"version": "1.5.1",
	"description": "A robust polyfill for the `CSS.escape` utility method as defined in CSSOM.",
	"homepage": "https://mths.be/cssescape",
	"main": "css.escape.js",
	"keywords": [
		"string",
		"unicode",
		"identifier",
		"css",
		"cssom",
		"polyfill"
	],
	"license": "MIT",
	"author": {
		"name": "Mathias Bynens",
		"url": "https://mathiasbynens.be/"
	},
	"repository": {
		"type": "git",
		"url": "https://github.com/mathiasbynens/CSS.escape.git"
	},
	"bugs": "https://github.com/mathiasbynens/CSS.escape/issues",
	"files": [
		"LICENSE-MIT.txt",
		"css.escape.js"
	],
	"scripts": {
		"test": "node tests/tests.js",
		"cover": "istanbul cover --report html --verbose --dir coverage tests/tests.js",
		"coveralls": "istanbul cover --verbose --dir coverage tests/tests.js && coveralls < coverage/lcov.info; rm -rf coverage/lcov*"
	},
	"devDependencies": {
		"coveralls": "^2.11.4",
		"istanbul": "^0.4.1"
	}
}


---

File name: node_modules\css.escape\README.md

Code:
# `CSS.escape` polyfill [![Build status](https://travis-ci.org/mathiasbynens/CSS.escape.svg?branch=master)](https://travis-ci.org/mathiasbynens/CSS.escape) [![Code coverage status](http://img.shields.io/coveralls/mathiasbynens/CSS.escape/master.svg)](https://coveralls.io/r/mathiasbynens/CSS.escape)

A robust polyfill for [the `CSS.escape` utility method as defined in CSSOM](https://drafts.csswg.org/cssom/#the-css.escape%28%29-method).

For a more powerful alternative, consider using [cssesc](https://mths.be/cssesc), which automatically takes care of excessive whitespace, and has many options to customize the output.

## Installation

In a browser:

```html
<script src="css.escape.js"></script>
```

Via [npm](https://www.npmjs.com/):

```bash
npm install css.escape
```

Then, in [Node.js](https://nodejs.org/):

```js
require('css.escape');

// On Windows and on Mac systems with default settings, case doesn’t matter,
// which allows you to do this instead:
require('CSS.escape');
```

## Author

| [![twitter/mathias](https://gravatar.com/avatar/24e08a9ea84deb17ae121074d0f17125?s=70)](https://twitter.com/mathias "Follow @mathias on Twitter") |
|---|
| [Mathias Bynens](https://mathiasbynens.be/) |

## License

This polyfill is available under the [MIT](https://mths.be/mit) license.


---



---

